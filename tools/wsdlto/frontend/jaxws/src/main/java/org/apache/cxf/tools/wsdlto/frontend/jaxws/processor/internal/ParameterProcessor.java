begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|wsdlto
operator|.
name|frontend
operator|.
name|jaxws
operator|.
name|processor
operator|.
name|internal
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|OperationType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxb
operator|.
name|JAXBUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|MessageInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|MessagePartInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|common
operator|.
name|ToolConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|common
operator|.
name|ToolContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|common
operator|.
name|ToolException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|common
operator|.
name|model
operator|.
name|JavaMethod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|common
operator|.
name|model
operator|.
name|JavaParameter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|common
operator|.
name|model
operator|.
name|JavaReturn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|common
operator|.
name|model
operator|.
name|JavaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|wsdlto
operator|.
name|core
operator|.
name|DataBindingProfile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|wsdlto
operator|.
name|frontend
operator|.
name|jaxws
operator|.
name|processor
operator|.
name|internal
operator|.
name|annotator
operator|.
name|WebParamAnnotator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|wsdlto
operator|.
name|frontend
operator|.
name|jaxws
operator|.
name|processor
operator|.
name|internal
operator|.
name|annotator
operator|.
name|XmlListAnotator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|wsdlto
operator|.
name|frontend
operator|.
name|jaxws
operator|.
name|processor
operator|.
name|internal
operator|.
name|mapper
operator|.
name|ParameterMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaSimpleType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaSimpleTypeList
import|;
end_import

begin_class
specifier|public
class|class
name|ParameterProcessor
extends|extends
name|AbstractProcessor
block|{
specifier|public
specifier|static
specifier|final
name|String
name|HEADER
init|=
literal|"messagepart.isheader"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|OUT_OF_BAND_HEADER
init|=
literal|"messagepart.is_out_of_band_header"
decl_stmt|;
specifier|private
name|DataBindingProfile
name|dataBinding
decl_stmt|;
specifier|public
name|ParameterProcessor
parameter_list|(
name|ToolContext
name|penv
parameter_list|)
block|{
name|super
argument_list|(
name|penv
argument_list|)
expr_stmt|;
name|dataBinding
operator|=
name|context
operator|.
name|get
argument_list|(
name|DataBindingProfile
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
specifier|private
name|boolean
name|isRequestResponse
parameter_list|(
name|JavaMethod
name|method
parameter_list|)
block|{
return|return
name|method
operator|.
name|getStyle
argument_list|()
operator|==
name|OperationType
operator|.
name|REQUEST_RESPONSE
return|;
block|}
specifier|public
name|void
name|process
parameter_list|(
name|JavaMethod
name|method
parameter_list|,
name|MessageInfo
name|inputMessage
parameter_list|,
name|MessageInfo
name|outputMessage
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|parameterOrder
parameter_list|)
throws|throws
name|ToolException
block|{
if|if
condition|(
operator|!
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|parameterOrder
argument_list|)
operator|&&
name|isValidOrdering
argument_list|(
name|parameterOrder
argument_list|,
name|inputMessage
argument_list|,
name|outputMessage
argument_list|)
operator|&&
operator|!
name|method
operator|.
name|isWrapperStyle
argument_list|()
condition|)
block|{
name|buildParamModelsWithOrdering
argument_list|(
name|method
argument_list|,
name|inputMessage
argument_list|,
name|outputMessage
argument_list|,
name|parameterOrder
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|buildParamModelsWithoutOrdering
argument_list|(
name|method
argument_list|,
name|inputMessage
argument_list|,
name|outputMessage
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * This method will be used by binding processor to change existing      * generated java method of porttype      *      * @param method      * @param part      * @param style      * @throws ToolException      */
specifier|public
name|JavaParameter
name|addParameterFromBinding
parameter_list|(
name|JavaMethod
name|method
parameter_list|,
name|MessagePartInfo
name|part
parameter_list|,
name|JavaType
operator|.
name|Style
name|style
parameter_list|)
throws|throws
name|ToolException
block|{
return|return
name|addParameter
argument_list|(
name|method
argument_list|,
name|getParameterFromPart
argument_list|(
name|method
argument_list|,
name|part
argument_list|,
name|style
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|JavaParameter
name|getParameterFromPart
parameter_list|(
name|JavaMethod
name|jm
parameter_list|,
name|MessagePartInfo
name|part
parameter_list|,
name|JavaType
operator|.
name|Style
name|style
parameter_list|)
block|{
return|return
name|ParameterMapper
operator|.
name|map
argument_list|(
name|jm
argument_list|,
name|part
argument_list|,
name|style
argument_list|,
name|context
argument_list|)
return|;
block|}
specifier|protected
name|JavaParameter
name|addParameter
parameter_list|(
name|JavaMethod
name|method
parameter_list|,
name|JavaParameter
name|parameter
parameter_list|)
throws|throws
name|ToolException
block|{
if|if
condition|(
name|parameter
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|parameter
operator|.
name|setMethod
argument_list|(
name|method
argument_list|)
expr_stmt|;
name|parameter
operator|.
name|annotate
argument_list|(
operator|new
name|WebParamAnnotator
argument_list|()
argument_list|)
expr_stmt|;
name|method
operator|.
name|addParameter
argument_list|(
name|parameter
argument_list|)
expr_stmt|;
return|return
name|parameter
return|;
block|}
specifier|private
name|void
name|processReturn
parameter_list|(
name|JavaMethod
name|method
parameter_list|,
name|MessagePartInfo
name|part
parameter_list|)
block|{
name|String
name|name
init|=
name|part
operator|==
literal|null
condition|?
literal|"return"
else|:
name|part
operator|.
name|getName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
decl_stmt|;
name|String
name|type
init|=
name|part
operator|==
literal|null
condition|?
literal|"void"
else|:
name|ProcessorUtil
operator|.
name|resolvePartType
argument_list|(
name|part
argument_list|,
name|context
argument_list|)
decl_stmt|;
name|String
name|namespace
init|=
name|part
operator|==
literal|null
condition|?
literal|null
else|:
name|ProcessorUtil
operator|.
name|resolvePartNamespace
argument_list|(
name|part
argument_list|)
decl_stmt|;
name|JavaReturn
name|returnType
init|=
operator|new
name|JavaReturn
argument_list|(
name|name
argument_list|,
name|type
argument_list|,
name|namespace
argument_list|)
decl_stmt|;
if|if
condition|(
name|part
operator|!=
literal|null
condition|)
block|{
name|returnType
operator|.
name|setDefaultValueWriter
argument_list|(
name|ProcessorUtil
operator|.
name|getDefaultValueWriter
argument_list|(
name|part
argument_list|,
name|context
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|returnType
operator|.
name|setQName
argument_list|(
name|ProcessorUtil
operator|.
name|getElementName
argument_list|(
name|part
argument_list|)
argument_list|)
expr_stmt|;
name|returnType
operator|.
name|setStyle
argument_list|(
name|JavaType
operator|.
name|Style
operator|.
name|OUT
argument_list|)
expr_stmt|;
if|if
condition|(
name|namespace
operator|!=
literal|null
operator|&&
name|type
operator|!=
literal|null
operator|&&
operator|!
literal|"void"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|returnType
operator|.
name|setClassName
argument_list|(
name|ProcessorUtil
operator|.
name|getFullClzName
argument_list|(
name|part
argument_list|,
name|context
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|part
operator|!=
literal|null
operator|&&
name|part
operator|.
name|getXmlSchema
argument_list|()
operator|instanceof
name|XmlSchemaSimpleType
condition|)
block|{
name|XmlSchemaSimpleType
name|simpleType
init|=
operator|(
name|XmlSchemaSimpleType
operator|)
name|part
operator|.
name|getXmlSchema
argument_list|()
decl_stmt|;
if|if
condition|(
name|simpleType
operator|.
name|getContent
argument_list|()
operator|instanceof
name|XmlSchemaSimpleTypeList
operator|&&
operator|!
name|part
operator|.
name|isElement
argument_list|()
condition|)
block|{
name|method
operator|.
name|annotate
argument_list|(
operator|new
name|XmlListAnotator
argument_list|(
name|method
operator|.
name|getInterface
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|method
operator|.
name|setReturn
argument_list|(
name|returnType
argument_list|)
expr_stmt|;
block|}
specifier|private
name|boolean
name|isOutOfBandHeader
parameter_list|(
specifier|final
name|MessagePartInfo
name|part
parameter_list|)
block|{
return|return
name|Boolean
operator|.
name|TRUE
operator|.
name|equals
argument_list|(
name|part
operator|.
name|getProperty
argument_list|(
name|OUT_OF_BAND_HEADER
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|requireOutOfBandHeader
parameter_list|()
block|{
name|String
name|value
init|=
operator|(
name|String
operator|)
name|context
operator|.
name|get
argument_list|(
name|ToolConstants
operator|.
name|CFG_EXTRA_SOAPHEADER
argument_list|)
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|value
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|Boolean
operator|.
name|valueOf
argument_list|(
name|value
argument_list|)
operator|.
name|booleanValue
argument_list|()
return|;
block|}
specifier|private
name|int
name|countOutOfBandHeader
parameter_list|(
name|MessageInfo
name|message
parameter_list|)
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|MessagePartInfo
name|part
range|:
name|message
operator|.
name|getMessageParts
argument_list|()
control|)
block|{
if|if
condition|(
name|isOutOfBandHeader
argument_list|(
name|part
argument_list|)
condition|)
block|{
name|count
operator|++
expr_stmt|;
block|}
block|}
return|return
name|count
return|;
block|}
specifier|private
name|boolean
name|messagePartsNotUnique
parameter_list|(
specifier|final
name|MessageInfo
name|message
parameter_list|)
block|{
name|int
name|count
init|=
name|countOutOfBandHeader
argument_list|(
name|message
argument_list|)
decl_stmt|;
return|return
name|message
operator|.
name|getMessageParts
argument_list|()
operator|.
name|size
argument_list|()
operator|-
name|count
operator|>
literal|1
return|;
block|}
specifier|private
name|void
name|processInput
parameter_list|(
name|JavaMethod
name|method
parameter_list|,
name|MessageInfo
name|inputMessage
parameter_list|)
throws|throws
name|ToolException
block|{
if|if
condition|(
name|requireOutOfBandHeader
argument_list|()
condition|)
block|{
try|try
block|{
name|Class
operator|.
name|forName
argument_list|(
literal|"org.apache.cxf.binding.soap.SoapBindingFactory"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
operator|new
name|Message
argument_list|(
literal|"SOAP_MISSING"
argument_list|,
name|LOG
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|MessagePartInfo
name|part
range|:
name|inputMessage
operator|.
name|getMessageParts
argument_list|()
control|)
block|{
if|if
condition|(
name|isOutOfBandHeader
argument_list|(
name|part
argument_list|)
operator|&&
operator|!
name|requireOutOfBandHeader
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|addParameter
argument_list|(
name|method
argument_list|,
name|getParameterFromPart
argument_list|(
name|method
argument_list|,
name|part
argument_list|,
name|JavaType
operator|.
name|Style
operator|.
name|IN
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|processWrappedInput
parameter_list|(
name|JavaMethod
name|method
parameter_list|,
name|MessageInfo
name|inputMessage
parameter_list|)
throws|throws
name|ToolException
block|{
name|List
argument_list|<
name|MessagePartInfo
argument_list|>
name|inputParts
init|=
name|inputMessage
operator|.
name|getMessageParts
argument_list|()
decl_stmt|;
if|if
condition|(
name|messagePartsNotUnique
argument_list|(
name|inputMessage
argument_list|)
condition|)
block|{
name|processInput
argument_list|(
name|method
argument_list|,
name|inputMessage
argument_list|)
expr_stmt|;
return|return;
block|}
elseif|else
if|if
condition|(
name|inputParts
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|MessagePartInfo
name|part
init|=
name|inputParts
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|QName
argument_list|>
name|wrappedElements
init|=
name|ProcessorUtil
operator|.
name|getWrappedElementQNames
argument_list|(
name|context
argument_list|,
name|part
operator|.
name|getElementQName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|wrappedElements
operator|==
literal|null
operator|||
name|wrappedElements
operator|.
name|size
argument_list|()
operator|==
literal|0
operator|)
operator|&&
name|countOutOfBandHeader
argument_list|(
name|inputMessage
argument_list|)
operator|==
literal|0
condition|)
block|{
return|return;
block|}
name|boolean
name|isSchemaQualified
init|=
name|ProcessorUtil
operator|.
name|isSchemaFormQualified
argument_list|(
name|context
argument_list|,
name|part
operator|.
name|getElementQName
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|QName
name|item
range|:
name|wrappedElements
control|)
block|{
name|JavaParameter
name|jp
init|=
name|getParameterFromQName
argument_list|(
name|part
operator|.
name|getElementQName
argument_list|()
argument_list|,
name|item
argument_list|,
name|JavaType
operator|.
name|Style
operator|.
name|IN
argument_list|,
name|part
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|isSchemaQualified
condition|)
block|{
name|jp
operator|.
name|setTargetNamespace
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
name|addParameter
argument_list|(
name|method
argument_list|,
name|jp
argument_list|)
expr_stmt|;
block|}
comment|// Adding out of band headers
if|if
condition|(
name|requireOutOfBandHeader
argument_list|()
operator|&&
name|countOutOfBandHeader
argument_list|(
name|inputMessage
argument_list|)
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|MessagePartInfo
name|hpart
range|:
name|inputMessage
operator|.
name|getMessageParts
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|isOutOfBandHeader
argument_list|(
name|hpart
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|addParameter
argument_list|(
name|method
argument_list|,
name|getParameterFromPart
argument_list|(
name|method
argument_list|,
name|hpart
argument_list|,
name|JavaType
operator|.
name|Style
operator|.
name|IN
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|processOutput
parameter_list|(
name|JavaMethod
name|method
parameter_list|,
name|MessageInfo
name|inputMessage
parameter_list|,
name|MessageInfo
name|outputMessage
parameter_list|)
throws|throws
name|ToolException
block|{
name|Map
argument_list|<
name|QName
argument_list|,
name|MessagePartInfo
argument_list|>
name|inputPartsMap
init|=
name|inputMessage
operator|.
name|getMessagePartsMap
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|MessagePartInfo
argument_list|>
name|outputParts
init|=
name|outputMessage
operator|==
literal|null
condition|?
operator|new
name|ArrayList
argument_list|<
name|MessagePartInfo
argument_list|>
argument_list|()
else|:
name|outputMessage
operator|.
name|getMessageParts
argument_list|()
decl_stmt|;
comment|// figure out output parts that are not present in input parts
name|List
argument_list|<
name|MessagePartInfo
argument_list|>
name|outParts
init|=
operator|new
name|ArrayList
argument_list|<
name|MessagePartInfo
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|numHeader
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|isRequestResponse
argument_list|(
name|method
argument_list|)
condition|)
block|{
for|for
control|(
name|MessagePartInfo
name|outpart
range|:
name|outputParts
control|)
block|{
name|boolean
name|oob
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|isOutOfBandHeader
argument_list|(
name|outpart
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|requireOutOfBandHeader
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|oob
operator|=
literal|true
expr_stmt|;
block|}
name|MessagePartInfo
name|inpart
init|=
name|inputPartsMap
operator|.
name|get
argument_list|(
name|outpart
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|inpart
operator|==
literal|null
condition|)
block|{
name|outParts
operator|.
name|add
argument_list|(
name|outpart
argument_list|)
expr_stmt|;
if|if
condition|(
name|oob
condition|)
block|{
name|numHeader
operator|++
expr_stmt|;
block|}
continue|continue;
block|}
elseif|else
if|if
condition|(
name|isSamePart
argument_list|(
name|inpart
argument_list|,
name|outpart
argument_list|)
condition|)
block|{
name|addParameter
argument_list|(
name|method
argument_list|,
name|getParameterFromPart
argument_list|(
name|method
argument_list|,
name|outpart
argument_list|,
name|JavaType
operator|.
name|Style
operator|.
name|INOUT
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
elseif|else
if|if
condition|(
operator|!
name|isSamePart
argument_list|(
name|inpart
argument_list|,
name|outpart
argument_list|)
condition|)
block|{
if|if
condition|(
name|oob
condition|)
block|{
name|numHeader
operator|++
expr_stmt|;
block|}
name|outParts
operator|.
name|add
argument_list|(
name|outpart
argument_list|)
expr_stmt|;
continue|continue;
block|}
block|}
block|}
if|if
condition|(
name|isRequestResponse
argument_list|(
name|method
argument_list|)
condition|)
block|{
if|if
condition|(
name|outParts
operator|.
name|size
argument_list|()
operator|-
name|numHeader
operator|==
literal|1
operator|&&
operator|!
name|isHeader
argument_list|(
name|outParts
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
condition|)
block|{
name|processReturn
argument_list|(
name|method
argument_list|,
name|outParts
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|outParts
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|processReturn
argument_list|(
name|method
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|MessagePartInfo
name|part
range|:
name|outParts
control|)
block|{
name|addParameter
argument_list|(
name|method
argument_list|,
name|getParameterFromPart
argument_list|(
name|method
argument_list|,
name|part
argument_list|,
name|JavaType
operator|.
name|Style
operator|.
name|OUT
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|processReturn
argument_list|(
name|method
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|processWrappedOutput
parameter_list|(
name|JavaMethod
name|method
parameter_list|,
name|MessageInfo
name|inputMessage
parameter_list|,
name|MessageInfo
name|outputMessage
parameter_list|)
throws|throws
name|ToolException
block|{
name|processWrappedAbstractOutput
argument_list|(
name|method
argument_list|,
name|inputMessage
argument_list|,
name|outputMessage
argument_list|)
expr_stmt|;
comment|// process out of band headers
if|if
condition|(
name|countOutOfBandHeader
argument_list|(
name|outputMessage
argument_list|)
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|MessagePartInfo
name|hpart
range|:
name|outputMessage
operator|.
name|getMessageParts
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|isOutOfBandHeader
argument_list|(
name|hpart
argument_list|)
operator|||
operator|!
name|requireOutOfBandHeader
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|addParameter
argument_list|(
name|method
argument_list|,
name|getParameterFromPart
argument_list|(
name|method
argument_list|,
name|hpart
argument_list|,
name|JavaType
operator|.
name|Style
operator|.
name|OUT
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|processWrappedAbstractOutput
parameter_list|(
name|JavaMethod
name|method
parameter_list|,
name|MessageInfo
name|inputMessage
parameter_list|,
name|MessageInfo
name|outputMessage
parameter_list|)
throws|throws
name|ToolException
block|{
name|List
argument_list|<
name|MessagePartInfo
argument_list|>
name|outputParts
init|=
name|outputMessage
operator|.
name|getMessageParts
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|MessagePartInfo
argument_list|>
name|inputParts
init|=
name|inputMessage
operator|.
name|getMessageParts
argument_list|()
decl_stmt|;
if|if
condition|(
name|messagePartsNotUnique
argument_list|(
name|inputMessage
argument_list|)
operator|||
name|messagePartsNotUnique
argument_list|(
name|outputMessage
argument_list|)
condition|)
block|{
name|processOutput
argument_list|(
name|method
argument_list|,
name|inputMessage
argument_list|,
name|outputMessage
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|outputParts
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|addVoidReturn
argument_list|(
name|method
argument_list|)
expr_stmt|;
return|return;
block|}
name|MessagePartInfo
name|inputPart
init|=
name|inputParts
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|?
name|inputParts
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
else|:
literal|null
decl_stmt|;
name|MessagePartInfo
name|outputPart
init|=
name|outputParts
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|?
name|outputParts
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
else|:
literal|null
decl_stmt|;
name|List
argument_list|<
name|QName
argument_list|>
name|inputWrapElement
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|QName
argument_list|>
name|outputWrapElement
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|inputPart
operator|!=
literal|null
condition|)
block|{
name|inputWrapElement
operator|=
name|ProcessorUtil
operator|.
name|getWrappedElementQNames
argument_list|(
name|context
argument_list|,
name|inputPart
operator|.
name|getElementQName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|outputPart
operator|!=
literal|null
condition|)
block|{
name|outputWrapElement
operator|=
name|ProcessorUtil
operator|.
name|getWrappedElementQNames
argument_list|(
name|context
argument_list|,
name|outputPart
operator|.
name|getElementQName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|inputWrapElement
operator|==
literal|null
operator|||
name|outputWrapElement
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|addVoidReturn
argument_list|(
name|method
argument_list|)
expr_stmt|;
return|return;
block|}
name|method
operator|.
name|setReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|boolean
name|qualified
init|=
name|ProcessorUtil
operator|.
name|isSchemaFormQualified
argument_list|(
name|context
argument_list|,
name|outputPart
operator|.
name|getElementQName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|outputWrapElement
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|&&
name|inputWrapElement
operator|!=
literal|null
condition|)
block|{
name|QName
name|outElement
init|=
name|outputWrapElement
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|boolean
name|sameWrapperChild
init|=
literal|false
decl_stmt|;
for|for
control|(
name|QName
name|inElement
range|:
name|inputWrapElement
control|)
block|{
if|if
condition|(
name|isSameWrapperChild
argument_list|(
name|inElement
argument_list|,
name|outElement
argument_list|)
condition|)
block|{
name|JavaParameter
name|jp
init|=
name|getParameterFromQName
argument_list|(
name|outputPart
operator|.
name|getElementQName
argument_list|()
argument_list|,
name|outElement
argument_list|,
name|JavaType
operator|.
name|Style
operator|.
name|INOUT
argument_list|,
name|outputPart
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|qualified
condition|)
block|{
name|jp
operator|.
name|setTargetNamespace
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
name|addParameter
argument_list|(
name|method
argument_list|,
name|jp
argument_list|)
expr_stmt|;
name|sameWrapperChild
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|method
operator|.
name|getReturn
argument_list|()
operator|==
literal|null
condition|)
block|{
name|addVoidReturn
argument_list|(
name|method
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|sameWrapperChild
condition|)
block|{
name|JavaReturn
name|jreturn
init|=
name|getReturnFromQName
argument_list|(
name|outElement
argument_list|,
name|outputPart
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|qualified
condition|)
block|{
name|jreturn
operator|.
name|setTargetNamespace
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
name|method
operator|.
name|setReturn
argument_list|(
name|jreturn
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
for|for
control|(
name|QName
name|outElement
range|:
name|outputWrapElement
control|)
block|{
if|if
condition|(
literal|"return"
operator|.
name|equals
argument_list|(
name|outElement
operator|.
name|getLocalPart
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|method
operator|.
name|getReturn
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
name|msg
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
argument_list|(
literal|"WRAPPER_STYLE_TWO_RETURN_TYPES"
argument_list|,
name|LOG
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|ToolException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
name|JavaReturn
name|jreturn
init|=
name|getReturnFromQName
argument_list|(
name|outElement
argument_list|,
name|outputPart
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|qualified
condition|)
block|{
name|jreturn
operator|.
name|setTargetNamespace
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
name|method
operator|.
name|setReturn
argument_list|(
name|jreturn
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|boolean
name|sameWrapperChild
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|inputWrapElement
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|QName
name|inElement
range|:
name|inputWrapElement
control|)
block|{
if|if
condition|(
name|isSameWrapperChild
argument_list|(
name|inElement
argument_list|,
name|outElement
argument_list|)
condition|)
block|{
name|JavaParameter
name|jp
init|=
name|getParameterFromQName
argument_list|(
name|outputPart
operator|.
name|getElementQName
argument_list|()
argument_list|,
name|outElement
argument_list|,
name|JavaType
operator|.
name|Style
operator|.
name|INOUT
argument_list|,
name|outputPart
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|qualified
condition|)
block|{
name|jp
operator|.
name|setTargetNamespace
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
name|addParameter
argument_list|(
name|method
argument_list|,
name|jp
argument_list|)
expr_stmt|;
name|sameWrapperChild
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|sameWrapperChild
condition|)
block|{
name|JavaParameter
name|jp
init|=
name|getParameterFromQName
argument_list|(
name|outputPart
operator|.
name|getElementQName
argument_list|()
argument_list|,
name|outElement
argument_list|,
name|JavaType
operator|.
name|Style
operator|.
name|OUT
argument_list|,
name|outputPart
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|qualified
condition|)
block|{
name|jp
operator|.
name|setTargetNamespace
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
name|addParameter
argument_list|(
name|method
argument_list|,
name|jp
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|method
operator|.
name|getReturn
argument_list|()
operator|==
literal|null
condition|)
block|{
name|addVoidReturn
argument_list|(
name|method
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|addVoidReturn
parameter_list|(
name|JavaMethod
name|method
parameter_list|)
block|{
name|JavaReturn
name|returnType
init|=
operator|new
name|JavaReturn
argument_list|(
literal|"return"
argument_list|,
literal|"void"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|method
operator|.
name|setReturn
argument_list|(
name|returnType
argument_list|)
expr_stmt|;
block|}
specifier|private
name|boolean
name|isSameWrapperChild
parameter_list|(
name|QName
name|in
parameter_list|,
name|QName
name|out
parameter_list|)
block|{
if|if
condition|(
operator|!
name|in
operator|.
name|getLocalPart
argument_list|()
operator|.
name|equals
argument_list|(
name|out
operator|.
name|getLocalPart
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|in
operator|.
name|getNamespaceURI
argument_list|()
operator|.
name|equals
argument_list|(
name|out
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|private
name|JavaParameter
name|getParameterFromQName
parameter_list|(
name|QName
name|wrapperElement
parameter_list|,
name|QName
name|item
parameter_list|,
name|JavaType
operator|.
name|Style
name|style
parameter_list|,
name|MessagePartInfo
name|part
parameter_list|)
block|{
name|String
name|fullJavaName
init|=
literal|""
decl_stmt|;
name|fullJavaName
operator|=
name|this
operator|.
name|dataBinding
operator|.
name|getWrappedElementType
argument_list|(
name|wrapperElement
argument_list|,
name|item
argument_list|)
expr_stmt|;
name|String
name|targetNamespace
init|=
name|item
operator|.
name|getNamespaceURI
argument_list|()
decl_stmt|;
name|String
name|jpname
init|=
name|ProcessorUtil
operator|.
name|mangleNameToVariableName
argument_list|(
name|item
operator|.
name|getLocalPart
argument_list|()
argument_list|)
decl_stmt|;
name|JavaParameter
name|parameter
init|=
operator|new
name|JavaParameter
argument_list|(
name|jpname
argument_list|,
name|fullJavaName
argument_list|,
name|targetNamespace
argument_list|)
decl_stmt|;
name|parameter
operator|.
name|setStyle
argument_list|(
name|style
argument_list|)
expr_stmt|;
name|parameter
operator|.
name|setQName
argument_list|(
name|item
argument_list|)
expr_stmt|;
name|parameter
operator|.
name|setDefaultValueWriter
argument_list|(
name|ProcessorUtil
operator|.
name|getDefaultValueWriterForWrappedElement
argument_list|(
name|part
argument_list|,
name|context
argument_list|,
name|item
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|style
operator|==
name|JavaType
operator|.
name|Style
operator|.
name|OUT
operator|||
name|style
operator|==
name|JavaType
operator|.
name|Style
operator|.
name|INOUT
condition|)
block|{
name|parameter
operator|.
name|setHolder
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|parameter
operator|.
name|setHolderName
argument_list|(
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|Holder
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|holderClass
init|=
name|fullJavaName
decl_stmt|;
if|if
condition|(
name|JAXBUtils
operator|.
name|holderClass
argument_list|(
name|fullJavaName
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|holderClass
operator|=
name|JAXBUtils
operator|.
name|holderClass
argument_list|(
name|fullJavaName
argument_list|)
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
name|parameter
operator|.
name|setClassName
argument_list|(
name|holderClass
argument_list|)
expr_stmt|;
block|}
return|return
name|parameter
return|;
block|}
specifier|private
name|JavaReturn
name|getReturnFromQName
parameter_list|(
name|QName
name|element
parameter_list|,
name|MessagePartInfo
name|part
parameter_list|)
block|{
name|String
name|fullJavaName
init|=
literal|""
decl_stmt|;
name|String
name|simpleJavaName
init|=
literal|""
decl_stmt|;
name|fullJavaName
operator|=
name|this
operator|.
name|dataBinding
operator|.
name|getWrappedElementType
argument_list|(
name|part
operator|.
name|getElementQName
argument_list|()
argument_list|,
name|element
argument_list|)
expr_stmt|;
name|simpleJavaName
operator|=
name|fullJavaName
expr_stmt|;
name|int
name|index
init|=
name|fullJavaName
operator|.
name|lastIndexOf
argument_list|(
literal|"."
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|>
operator|-
literal|1
condition|)
block|{
name|simpleJavaName
operator|=
name|fullJavaName
operator|.
name|substring
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
name|String
name|targetNamespace
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|isHeader
argument_list|(
name|part
argument_list|)
condition|)
block|{
name|targetNamespace
operator|=
name|part
operator|.
name|getMessageInfo
argument_list|()
operator|.
name|getOperation
argument_list|()
operator|.
name|getInterface
argument_list|()
operator|.
name|getService
argument_list|()
operator|.
name|getTargetNamespace
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|targetNamespace
operator|=
name|element
operator|.
name|getNamespaceURI
argument_list|()
expr_stmt|;
block|}
name|String
name|jpname
init|=
name|ProcessorUtil
operator|.
name|mangleNameToVariableName
argument_list|(
name|simpleJavaName
argument_list|)
decl_stmt|;
name|JavaReturn
name|returnType
init|=
operator|new
name|JavaReturn
argument_list|(
name|jpname
argument_list|,
name|fullJavaName
argument_list|,
name|targetNamespace
argument_list|)
decl_stmt|;
name|returnType
operator|.
name|setDefaultValueWriter
argument_list|(
name|ProcessorUtil
operator|.
name|getDefaultValueWriterForWrappedElement
argument_list|(
name|part
argument_list|,
name|context
argument_list|,
name|element
argument_list|)
argument_list|)
expr_stmt|;
name|returnType
operator|.
name|setQName
argument_list|(
name|element
argument_list|)
expr_stmt|;
name|returnType
operator|.
name|setStyle
argument_list|(
name|JavaType
operator|.
name|Style
operator|.
name|OUT
argument_list|)
expr_stmt|;
return|return
name|returnType
return|;
block|}
specifier|private
name|boolean
name|isHeader
parameter_list|(
specifier|final
name|MessagePartInfo
name|part
parameter_list|)
block|{
return|return
name|Boolean
operator|.
name|TRUE
operator|.
name|equals
argument_list|(
name|part
operator|.
name|getProperty
argument_list|(
name|HEADER
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|void
name|buildParamModelsWithoutOrdering
parameter_list|(
name|JavaMethod
name|method
parameter_list|,
name|MessageInfo
name|inputMessage
parameter_list|,
name|MessageInfo
name|outputMessage
parameter_list|)
throws|throws
name|ToolException
block|{
if|if
condition|(
name|inputMessage
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|method
operator|.
name|isWrapperStyle
argument_list|()
condition|)
block|{
name|processWrappedInput
argument_list|(
name|method
argument_list|,
name|inputMessage
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|processInput
argument_list|(
name|method
argument_list|,
name|inputMessage
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|outputMessage
operator|==
literal|null
condition|)
block|{
name|processReturn
argument_list|(
name|method
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|method
operator|.
name|isWrapperStyle
argument_list|()
condition|)
block|{
name|processWrappedOutput
argument_list|(
name|method
argument_list|,
name|inputMessage
argument_list|,
name|outputMessage
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|processOutput
argument_list|(
name|method
argument_list|,
name|inputMessage
argument_list|,
name|outputMessage
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|buildParamModelsWithOrdering
parameter_list|(
name|JavaMethod
name|method
parameter_list|,
name|MessageInfo
name|inputMessage
parameter_list|,
name|MessageInfo
name|outputMessage
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|parameterList
parameter_list|)
throws|throws
name|ToolException
block|{
name|Map
argument_list|<
name|QName
argument_list|,
name|MessagePartInfo
argument_list|>
name|inputPartsMap
init|=
name|inputMessage
operator|.
name|getMessagePartsMap
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|QName
argument_list|,
name|MessagePartInfo
argument_list|>
name|outputPartsMap
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|QName
argument_list|,
name|MessagePartInfo
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|outputMessage
operator|!=
literal|null
condition|)
block|{
name|outputPartsMap
operator|=
name|outputMessage
operator|.
name|getMessagePartsMap
argument_list|()
expr_stmt|;
block|}
name|List
argument_list|<
name|MessagePartInfo
argument_list|>
name|inputParts
init|=
name|inputMessage
operator|.
name|getMessageParts
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|MessagePartInfo
argument_list|>
name|outputParts
init|=
operator|new
name|ArrayList
argument_list|<
name|MessagePartInfo
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|outputMessage
operator|!=
literal|null
condition|)
block|{
name|outputParts
operator|=
name|outputMessage
operator|.
name|getMessageParts
argument_list|()
expr_stmt|;
block|}
name|List
argument_list|<
name|MessagePartInfo
argument_list|>
name|inputUnlistedParts
init|=
operator|new
name|ArrayList
argument_list|<
name|MessagePartInfo
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|MessagePartInfo
argument_list|>
name|outputUnlistedParts
init|=
operator|new
name|ArrayList
argument_list|<
name|MessagePartInfo
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|MessagePartInfo
name|part
range|:
name|inputParts
control|)
block|{
if|if
condition|(
operator|!
name|parameterList
operator|.
name|contains
argument_list|(
name|part
operator|.
name|getName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
condition|)
block|{
name|inputUnlistedParts
operator|.
name|add
argument_list|(
name|part
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|isRequestResponse
argument_list|(
name|method
argument_list|)
condition|)
block|{
for|for
control|(
name|MessagePartInfo
name|part
range|:
name|outputParts
control|)
block|{
if|if
condition|(
operator|!
name|parameterList
operator|.
name|contains
argument_list|(
name|part
operator|.
name|getName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
condition|)
block|{
name|MessagePartInfo
name|inpart
init|=
name|inputMessage
operator|.
name|getMessagePart
argument_list|(
name|part
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|inpart
operator|==
literal|null
operator|||
operator|(
name|inpart
operator|!=
literal|null
operator|&&
operator|!
name|isSamePart
argument_list|(
name|inpart
argument_list|,
name|part
argument_list|)
operator|)
condition|)
block|{
name|outputUnlistedParts
operator|.
name|add
argument_list|(
name|part
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|outputUnlistedParts
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|processReturn
argument_list|(
name|method
argument_list|,
name|outputUnlistedParts
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|outputPartsMap
operator|.
name|remove
argument_list|(
name|outputUnlistedParts
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|outputUnlistedParts
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|processReturn
argument_list|(
name|method
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|processReturn
argument_list|(
name|method
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|// now create list of paramModel with parts
comment|// first for the ordered list
name|int
name|index
init|=
literal|0
decl_stmt|;
name|int
name|size
init|=
name|parameterList
operator|.
name|size
argument_list|()
decl_stmt|;
while|while
condition|(
name|index
operator|<
name|size
condition|)
block|{
name|String
name|partName
init|=
name|parameterList
operator|.
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|MessagePartInfo
name|part
init|=
name|inputPartsMap
operator|.
name|get
argument_list|(
name|inputMessage
operator|.
name|getMessagePartQName
argument_list|(
name|partName
argument_list|)
argument_list|)
decl_stmt|;
name|JavaType
operator|.
name|Style
name|style
init|=
name|JavaType
operator|.
name|Style
operator|.
name|IN
decl_stmt|;
if|if
condition|(
name|part
operator|==
literal|null
condition|)
block|{
name|part
operator|=
name|outputPartsMap
operator|.
name|get
argument_list|(
name|inputMessage
operator|.
name|getMessagePartQName
argument_list|(
name|partName
argument_list|)
argument_list|)
expr_stmt|;
name|style
operator|=
name|JavaType
operator|.
name|Style
operator|.
name|OUT
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|outputPartsMap
operator|.
name|get
argument_list|(
name|inputMessage
operator|.
name|getMessagePartQName
argument_list|(
name|partName
argument_list|)
argument_list|)
operator|!=
literal|null
operator|&&
name|isSamePart
argument_list|(
name|part
argument_list|,
name|outputPartsMap
operator|.
name|get
argument_list|(
name|inputMessage
operator|.
name|getMessagePartQName
argument_list|(
name|partName
argument_list|)
argument_list|)
argument_list|)
condition|)
block|{
name|style
operator|=
name|JavaType
operator|.
name|Style
operator|.
name|INOUT
expr_stmt|;
block|}
if|if
condition|(
name|part
operator|!=
literal|null
condition|)
block|{
name|addParameter
argument_list|(
name|method
argument_list|,
name|getParameterFromPart
argument_list|(
name|method
argument_list|,
name|part
argument_list|,
name|style
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|index
operator|++
expr_stmt|;
block|}
comment|// now from unlisted input parts
for|for
control|(
name|MessagePartInfo
name|part
range|:
name|inputUnlistedParts
control|)
block|{
name|addParameter
argument_list|(
name|method
argument_list|,
name|getParameterFromPart
argument_list|(
name|method
argument_list|,
name|part
argument_list|,
name|JavaType
operator|.
name|Style
operator|.
name|IN
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// now from unlisted output parts
for|for
control|(
name|MessagePartInfo
name|part
range|:
name|outputUnlistedParts
control|)
block|{
name|addParameter
argument_list|(
name|method
argument_list|,
name|getParameterFromPart
argument_list|(
name|method
argument_list|,
name|part
argument_list|,
name|JavaType
operator|.
name|Style
operator|.
name|INOUT
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|boolean
name|isSamePart
parameter_list|(
name|MessagePartInfo
name|part1
parameter_list|,
name|MessagePartInfo
name|part2
parameter_list|)
block|{
name|QName
name|qname1
init|=
name|part1
operator|.
name|getElementQName
argument_list|()
decl_stmt|;
name|QName
name|qname2
init|=
name|part2
operator|.
name|getElementQName
argument_list|()
decl_stmt|;
if|if
condition|(
name|qname1
operator|!=
literal|null
operator|&&
name|qname2
operator|!=
literal|null
condition|)
block|{
return|return
name|qname1
operator|.
name|equals
argument_list|(
name|qname2
argument_list|)
return|;
block|}
name|qname1
operator|=
name|part1
operator|.
name|getTypeQName
argument_list|()
expr_stmt|;
name|qname2
operator|=
name|part2
operator|.
name|getTypeQName
argument_list|()
expr_stmt|;
if|if
condition|(
name|qname1
operator|!=
literal|null
operator|&&
name|qname2
operator|!=
literal|null
condition|)
block|{
return|return
name|qname1
operator|.
name|equals
argument_list|(
name|qname2
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|isValidOrdering
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|parameterOrder
parameter_list|,
name|MessageInfo
name|inputMessage
parameter_list|,
name|MessageInfo
name|outputMessage
parameter_list|)
block|{
name|Iterator
argument_list|<
name|String
argument_list|>
name|params
init|=
name|parameterOrder
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|MessagePartInfo
argument_list|>
name|inputParts
init|=
name|inputMessage
operator|.
name|getMessageParts
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|MessagePartInfo
argument_list|>
name|outputParts
init|=
operator|new
name|ArrayList
argument_list|<
name|MessagePartInfo
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|outputMessage
operator|!=
literal|null
condition|)
block|{
name|outputParts
operator|=
name|outputMessage
operator|.
name|getMessageParts
argument_list|()
expr_stmt|;
block|}
while|while
condition|(
name|params
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|param
init|=
name|params
operator|.
name|next
argument_list|()
decl_stmt|;
name|MessagePartInfo
name|inPart
init|=
literal|null
decl_stmt|;
name|MessagePartInfo
name|outPart
init|=
literal|null
decl_stmt|;
for|for
control|(
name|MessagePartInfo
name|part
range|:
name|inputParts
control|)
block|{
if|if
condition|(
name|param
operator|.
name|equals
argument_list|(
name|part
operator|.
name|getName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
condition|)
block|{
name|inPart
operator|=
name|part
expr_stmt|;
break|break;
block|}
block|}
comment|//check output parts
for|for
control|(
name|MessagePartInfo
name|part
range|:
name|outputParts
control|)
block|{
if|if
condition|(
name|param
operator|.
name|equals
argument_list|(
name|part
operator|.
name|getName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
condition|)
block|{
name|outPart
operator|=
name|part
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|inPart
operator|==
literal|null
operator|&&
name|outPart
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
name|inPart
operator|!=
literal|null
operator|&&
name|outPart
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|inPart
operator|.
name|isElement
argument_list|()
operator|!=
name|outPart
operator|.
name|isElement
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|inPart
operator|.
name|isElement
argument_list|()
operator|&&
operator|!
name|inPart
operator|.
name|getElementQName
argument_list|()
operator|.
name|equals
argument_list|(
name|outPart
operator|.
name|getElementQName
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|inPart
operator|.
name|isElement
argument_list|()
operator|&&
operator|!
name|inPart
operator|.
name|getTypeQName
argument_list|()
operator|.
name|equals
argument_list|(
name|outPart
operator|.
name|getTypeQName
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

