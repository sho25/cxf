begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|wsdlto
operator|.
name|frontend
operator|.
name|jaxws
operator|.
name|customization
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|xpath
operator|.
name|XPathConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NamedNodeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|MapNamespaceContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|XPathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|common
operator|.
name|ToolConstants
import|;
end_import

begin_class
specifier|public
specifier|final
class|class
name|CustomNodeSelector
block|{
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|BINDING_NS_MAP
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|MapNamespaceContext
name|context
init|=
operator|new
name|MapNamespaceContext
argument_list|()
decl_stmt|;
static|static
block|{
name|BINDING_NS_MAP
operator|.
name|put
argument_list|(
literal|"jaxws"
argument_list|,
name|ToolConstants
operator|.
name|NS_JAXWS_BINDINGS
argument_list|)
expr_stmt|;
name|BINDING_NS_MAP
operator|.
name|put
argument_list|(
literal|"jaxb"
argument_list|,
name|ToolConstants
operator|.
name|NS_JAXB_BINDINGS
argument_list|)
expr_stmt|;
name|BINDING_NS_MAP
operator|.
name|put
argument_list|(
literal|"wsdl"
argument_list|,
name|ToolConstants
operator|.
name|WSDL_NAMESPACE_URI
argument_list|)
expr_stmt|;
name|BINDING_NS_MAP
operator|.
name|put
argument_list|(
literal|"xsd"
argument_list|,
name|ToolConstants
operator|.
name|SCHEMA_URI
argument_list|)
expr_stmt|;
block|}
specifier|public
name|CustomNodeSelector
parameter_list|()
block|{
name|context
operator|.
name|addNamespaces
argument_list|(
name|BINDING_NS_MAP
argument_list|)
expr_stmt|;
block|}
specifier|public
name|MapNamespaceContext
name|getNamespaceContext
parameter_list|()
block|{
return|return
name|context
return|;
block|}
specifier|public
name|void
name|addNamespaces
parameter_list|(
specifier|final
name|Node
name|targetNode
parameter_list|)
block|{
name|NamedNodeMap
name|attributes
init|=
name|targetNode
operator|.
name|getAttributes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|attributes
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Node
name|a
init|=
name|attributes
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|prefix
init|=
name|a
operator|.
name|getLocalName
argument_list|()
decl_stmt|;
name|String
name|ns
init|=
name|a
operator|.
name|getNodeValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|prefix
operator|!=
literal|null
operator|&&
operator|!
name|context
operator|.
name|getUsedNamespaces
argument_list|()
operator|.
name|containsKey
argument_list|(
name|prefix
argument_list|)
operator|&&
name|targetNode
operator|.
name|lookupPrefix
argument_list|(
name|ns
argument_list|)
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
literal|"xmlns"
operator|.
name|equals
argument_list|(
name|prefix
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|context
operator|.
name|addNamespace
argument_list|(
name|prefix
argument_list|,
name|ns
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|Node
name|queryNode
parameter_list|(
specifier|final
name|Node
name|target
parameter_list|,
specifier|final
name|String
name|expression
parameter_list|)
block|{
name|XPathUtils
name|xpath
init|=
operator|new
name|XPathUtils
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|Node
name|node
init|=
operator|(
name|Node
operator|)
name|xpath
operator|.
name|getValue
argument_list|(
name|expression
argument_list|,
name|target
argument_list|,
name|XPathConstants
operator|.
name|NODE
argument_list|)
decl_stmt|;
return|return
name|node
return|;
block|}
specifier|public
name|NodeList
name|queryNodes
parameter_list|(
specifier|final
name|Node
name|target
parameter_list|,
specifier|final
name|String
name|expression
parameter_list|)
block|{
name|XPathUtils
name|xpath
init|=
operator|new
name|XPathUtils
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|NodeList
name|nodeList
init|=
operator|(
name|NodeList
operator|)
name|xpath
operator|.
name|getValue
argument_list|(
name|expression
argument_list|,
name|target
argument_list|,
name|XPathConstants
operator|.
name|NODESET
argument_list|)
decl_stmt|;
return|return
name|nodeList
return|;
block|}
block|}
end_class

end_unit

