begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|wsdlto
operator|.
name|frontend
operator|.
name|jaxws
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|resource
operator|.
name|URIResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|common
operator|.
name|ToolConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|common
operator|.
name|ToolContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|common
operator|.
name|ToolException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|common
operator|.
name|toolspec
operator|.
name|ToolSpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|wsdlto
operator|.
name|WSDLToJavaContainer
import|;
end_import

begin_class
specifier|public
class|class
name|JAXWSContainer
extends|extends
name|WSDLToJavaContainer
block|{
specifier|private
specifier|static
specifier|final
name|String
name|TOOL_NAME
init|=
literal|"wsdl2java"
decl_stmt|;
specifier|public
name|JAXWSContainer
parameter_list|(
name|ToolSpec
name|toolspec
parameter_list|)
throws|throws
name|Exception
block|{
name|super
argument_list|(
name|TOOL_NAME
argument_list|,
name|toolspec
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getArrayKeys
parameter_list|()
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|set
init|=
name|super
operator|.
name|getArrayKeys
argument_list|()
decl_stmt|;
name|set
operator|.
name|add
argument_list|(
name|ToolConstants
operator|.
name|CFG_BINDING
argument_list|)
expr_stmt|;
name|set
operator|.
name|add
argument_list|(
name|ToolConstants
operator|.
name|CFG_RESERVE_NAME
argument_list|)
expr_stmt|;
name|set
operator|.
name|add
argument_list|(
name|ToolConstants
operator|.
name|CFG_ASYNCMETHODS
argument_list|)
expr_stmt|;
name|set
operator|.
name|add
argument_list|(
name|ToolConstants
operator|.
name|CFG_BAREMETHODS
argument_list|)
expr_stmt|;
name|set
operator|.
name|add
argument_list|(
name|ToolConstants
operator|.
name|CFG_MIMEMETHODS
argument_list|)
expr_stmt|;
name|set
operator|.
name|add
argument_list|(
name|ToolConstants
operator|.
name|CFG_SEI_SUPER
argument_list|)
expr_stmt|;
return|return
name|set
return|;
block|}
specifier|public
name|String
name|getServiceSuperclass
parameter_list|()
block|{
return|return
name|Service
operator|.
name|class
operator|.
name|getName
argument_list|()
return|;
block|}
specifier|public
name|String
name|getServiceTarget
parameter_list|()
block|{
return|return
name|isJaxws22
argument_list|()
condition|?
literal|"jaxws22"
else|:
literal|"jaxws21"
return|;
block|}
specifier|public
name|boolean
name|isJaxws22
parameter_list|()
block|{
return|return
name|Service
operator|.
name|class
operator|.
name|getDeclaredConstructors
argument_list|()
operator|.
name|length
operator|==
literal|2
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|(
name|ToolContext
name|env
parameter_list|)
throws|throws
name|ToolException
block|{
name|env
operator|.
name|put
argument_list|(
literal|"service.target"
argument_list|,
name|getServiceTarget
argument_list|()
argument_list|)
expr_stmt|;
name|env
operator|.
name|put
argument_list|(
literal|"service.superclass"
argument_list|,
name|getServiceSuperclass
argument_list|()
argument_list|)
expr_stmt|;
name|super
operator|.
name|validate
argument_list|(
name|env
argument_list|)
expr_stmt|;
if|if
condition|(
name|env
operator|.
name|containsKey
argument_list|(
name|ToolConstants
operator|.
name|CFG_BINDING
argument_list|)
condition|)
block|{
name|String
index|[]
name|bindings
init|=
operator|(
name|String
index|[]
operator|)
name|env
operator|.
name|get
argument_list|(
name|ToolConstants
operator|.
name|CFG_BINDING
argument_list|)
decl_stmt|;
name|URIResolver
name|resolver
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|bindings
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
name|resolver
operator|=
operator|new
name|URIResolver
argument_list|(
name|bindings
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|ToolException
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|resolver
operator|.
name|isResolved
argument_list|()
condition|)
block|{
name|Message
name|msg
init|=
operator|new
name|Message
argument_list|(
literal|"FILE_NOT_EXIST"
argument_list|,
name|LOG
argument_list|,
name|bindings
index|[
name|i
index|]
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|ToolException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
block|}
name|env
operator|.
name|put
argument_list|(
name|ToolConstants
operator|.
name|CFG_BINDING
argument_list|,
name|bindings
argument_list|)
expr_stmt|;
block|}
name|cleanArrays
argument_list|(
name|env
argument_list|,
name|ToolConstants
operator|.
name|CFG_ASYNCMETHODS
argument_list|)
expr_stmt|;
name|cleanArrays
argument_list|(
name|env
argument_list|,
name|ToolConstants
operator|.
name|CFG_BAREMETHODS
argument_list|)
expr_stmt|;
name|cleanArrays
argument_list|(
name|env
argument_list|,
name|ToolConstants
operator|.
name|CFG_MIMEMETHODS
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|cleanArrays
parameter_list|(
name|ToolContext
name|env
parameter_list|,
name|String
name|key
parameter_list|)
block|{
name|String
name|s
index|[]
init|=
name|env
operator|.
name|getArray
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|n
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|s2
range|:
name|s
control|)
block|{
name|StringTokenizer
name|tokenizer
init|=
operator|new
name|StringTokenizer
argument_list|(
name|s2
argument_list|,
literal|",="
argument_list|,
literal|false
argument_list|)
decl_stmt|;
while|while
condition|(
name|tokenizer
operator|.
name|hasMoreTokens
argument_list|()
condition|)
block|{
name|String
name|arg
init|=
name|tokenizer
operator|.
name|nextToken
argument_list|()
decl_stmt|;
name|n
operator|.
name|add
argument_list|(
name|arg
argument_list|)
expr_stmt|;
block|}
block|}
name|env
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|n
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|n
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

