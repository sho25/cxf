begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|wsdlto
operator|.
name|frontend
operator|.
name|jaxws
operator|.
name|processor
operator|.
name|internal
operator|.
name|annotator
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|jws
operator|.
name|soap
operator|.
name|SOAPBinding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|common
operator|.
name|model
operator|.
name|Annotator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|common
operator|.
name|model
operator|.
name|JAnnotation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|common
operator|.
name|model
operator|.
name|JAnnotationElement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|common
operator|.
name|model
operator|.
name|JavaAnnotatable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|common
operator|.
name|model
operator|.
name|JavaInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|common
operator|.
name|model
operator|.
name|JavaMethod
import|;
end_import

begin_class
specifier|public
specifier|final
class|class
name|BindingAnnotator
implements|implements
name|Annotator
block|{
specifier|public
name|void
name|annotate
parameter_list|(
name|JavaAnnotatable
name|ja
parameter_list|)
block|{
name|JavaInterface
name|intf
decl_stmt|;
if|if
condition|(
name|ja
operator|instanceof
name|JavaInterface
condition|)
block|{
name|intf
operator|=
operator|(
name|JavaInterface
operator|)
name|ja
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"BindingAnnotator can only annotate JavaInterface"
argument_list|)
throw|;
block|}
if|if
condition|(
name|processBinding
argument_list|(
name|intf
argument_list|)
condition|)
block|{
name|JAnnotation
name|bindingAnnotation
init|=
operator|new
name|JAnnotation
argument_list|(
name|SOAPBinding
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|SOAPBinding
operator|.
name|Style
operator|.
name|DOCUMENT
operator|.
name|equals
argument_list|(
name|intf
operator|.
name|getSOAPStyle
argument_list|()
argument_list|)
condition|)
block|{
name|bindingAnnotation
operator|.
name|addElement
argument_list|(
operator|new
name|JAnnotationElement
argument_list|(
literal|"style"
argument_list|,
name|intf
operator|.
name|getSOAPStyle
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|SOAPBinding
operator|.
name|Use
operator|.
name|LITERAL
operator|.
name|equals
argument_list|(
name|intf
operator|.
name|getSOAPUse
argument_list|()
argument_list|)
condition|)
block|{
name|bindingAnnotation
operator|.
name|addElement
argument_list|(
operator|new
name|JAnnotationElement
argument_list|(
literal|"use"
argument_list|,
name|intf
operator|.
name|getSOAPUse
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|intf
operator|.
name|getSOAPStyle
argument_list|()
operator|==
name|SOAPBinding
operator|.
name|Style
operator|.
name|DOCUMENT
operator|&&
name|intf
operator|.
name|getSOAPParameterStyle
argument_list|()
operator|!=
name|SOAPBinding
operator|.
name|ParameterStyle
operator|.
name|WRAPPED
condition|)
block|{
name|bindingAnnotation
operator|.
name|addElement
argument_list|(
operator|new
name|JAnnotationElement
argument_list|(
literal|"parameterStyle"
argument_list|,
name|intf
operator|.
name|getSOAPParameterStyle
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|intf
operator|.
name|addAnnotation
argument_list|(
name|bindingAnnotation
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|JavaMethod
name|method
range|:
name|intf
operator|.
name|getMethods
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|method
operator|.
name|isAsync
argument_list|()
condition|)
block|{
name|method
operator|.
name|annotate
argument_list|(
operator|new
name|SoapBindingAnnotator
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|boolean
name|processBinding
parameter_list|(
name|JavaInterface
name|intf
parameter_list|)
block|{
name|SOAPBinding
operator|.
name|Style
name|soapStyle
init|=
name|intf
operator|.
name|getSOAPStyle
argument_list|()
decl_stmt|;
name|SOAPBinding
operator|.
name|Use
name|soapUse
init|=
name|intf
operator|.
name|getSOAPUse
argument_list|()
decl_stmt|;
name|boolean
name|allWrapped
init|=
literal|true
decl_stmt|;
name|boolean
name|allBare
init|=
literal|true
decl_stmt|;
name|boolean
name|allRPC
init|=
literal|true
decl_stmt|;
name|boolean
name|allDOC
init|=
literal|true
decl_stmt|;
for|for
control|(
name|JavaMethod
name|method
range|:
name|intf
operator|.
name|getMethods
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|method
operator|.
name|isWrapperStyle
argument_list|()
condition|)
block|{
name|allWrapped
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|allBare
operator|=
literal|false
expr_stmt|;
block|}
name|SOAPBinding
operator|.
name|Style
name|mStyle
init|=
name|method
operator|.
name|getSoapStyle
argument_list|()
decl_stmt|;
if|if
condition|(
name|mStyle
operator|==
literal|null
condition|)
block|{
name|mStyle
operator|=
name|soapStyle
expr_stmt|;
block|}
if|if
condition|(
name|mStyle
operator|==
literal|null
condition|)
block|{
name|mStyle
operator|=
name|SOAPBinding
operator|.
name|Style
operator|.
name|DOCUMENT
expr_stmt|;
block|}
if|if
condition|(
name|soapStyle
operator|==
literal|null
operator|&&
name|method
operator|.
name|getSoapStyle
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|soapStyle
operator|=
name|method
operator|.
name|getSoapStyle
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|SOAPBinding
operator|.
name|Style
operator|.
name|DOCUMENT
operator|.
name|equals
argument_list|(
name|mStyle
argument_list|)
condition|)
block|{
name|allRPC
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|allDOC
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|soapUse
operator|==
literal|null
operator|&&
name|method
operator|.
name|getSoapUse
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|soapUse
operator|=
name|method
operator|.
name|getSoapUse
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|allDOC
condition|)
block|{
name|soapStyle
operator|=
name|SOAPBinding
operator|.
name|Style
operator|.
name|DOCUMENT
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|allRPC
condition|)
block|{
name|soapStyle
operator|=
name|SOAPBinding
operator|.
name|Style
operator|.
name|RPC
expr_stmt|;
block|}
if|if
condition|(
name|soapStyle
operator|==
name|SOAPBinding
operator|.
name|Style
operator|.
name|DOCUMENT
condition|)
block|{
name|intf
operator|.
name|setSOAPStyle
argument_list|(
name|SOAPBinding
operator|.
name|Style
operator|.
name|DOCUMENT
argument_list|)
expr_stmt|;
if|if
condition|(
name|allWrapped
condition|)
block|{
name|intf
operator|.
name|setSOAPParameterStyle
argument_list|(
name|SOAPBinding
operator|.
name|ParameterStyle
operator|.
name|WRAPPED
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|allBare
condition|)
block|{
name|intf
operator|.
name|setSOAPParameterStyle
argument_list|(
name|SOAPBinding
operator|.
name|ParameterStyle
operator|.
name|BARE
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|soapStyle
operator|==
literal|null
condition|)
block|{
name|intf
operator|.
name|setSOAPStyle
argument_list|(
name|SOAPBinding
operator|.
name|Style
operator|.
name|DOCUMENT
argument_list|)
expr_stmt|;
if|if
condition|(
name|allWrapped
condition|)
block|{
name|intf
operator|.
name|setSOAPParameterStyle
argument_list|(
name|SOAPBinding
operator|.
name|ParameterStyle
operator|.
name|WRAPPED
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|allBare
condition|)
block|{
name|intf
operator|.
name|setSOAPParameterStyle
argument_list|(
name|SOAPBinding
operator|.
name|ParameterStyle
operator|.
name|BARE
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|intf
operator|.
name|setSOAPStyle
argument_list|(
name|SOAPBinding
operator|.
name|Style
operator|.
name|RPC
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|intf
operator|.
name|getSOAPParameterStyle
argument_list|()
operator|==
literal|null
condition|)
block|{
name|intf
operator|.
name|setSOAPParameterStyle
argument_list|(
name|SOAPBinding
operator|.
name|ParameterStyle
operator|.
name|WRAPPED
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|soapUse
operator|==
name|SOAPBinding
operator|.
name|Use
operator|.
name|LITERAL
condition|)
block|{
name|intf
operator|.
name|setSOAPUse
argument_list|(
name|SOAPBinding
operator|.
name|Use
operator|.
name|LITERAL
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|soapUse
operator|==
literal|null
condition|)
block|{
name|intf
operator|.
name|setSOAPUse
argument_list|(
name|SOAPBinding
operator|.
name|Use
operator|.
name|LITERAL
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|intf
operator|.
name|setSOAPUse
argument_list|(
name|SOAPBinding
operator|.
name|Use
operator|.
name|ENCODED
argument_list|)
expr_stmt|;
block|}
return|return
operator|!
operator|(
name|intf
operator|.
name|getSOAPStyle
argument_list|()
operator|==
name|SOAPBinding
operator|.
name|Style
operator|.
name|DOCUMENT
operator|&&
name|intf
operator|.
name|getSOAPUse
argument_list|()
operator|==
name|SOAPBinding
operator|.
name|Use
operator|.
name|LITERAL
operator|&&
name|intf
operator|.
name|getSOAPParameterStyle
argument_list|()
operator|==
name|SOAPBinding
operator|.
name|ParameterStyle
operator|.
name|WRAPPED
operator|)
return|;
block|}
block|}
end_class

end_unit

