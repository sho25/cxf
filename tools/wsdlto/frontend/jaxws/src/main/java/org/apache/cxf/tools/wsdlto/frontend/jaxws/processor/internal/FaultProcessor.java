begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|wsdlto
operator|.
name|frontend
operator|.
name|jaxws
operator|.
name|processor
operator|.
name|internal
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|FaultInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|MessagePartInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|common
operator|.
name|ToolConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|common
operator|.
name|ToolContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|common
operator|.
name|ToolException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|common
operator|.
name|model
operator|.
name|JavaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|common
operator|.
name|model
operator|.
name|JavaExceptionClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|common
operator|.
name|model
operator|.
name|JavaField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|common
operator|.
name|model
operator|.
name|JavaMethod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|common
operator|.
name|model
operator|.
name|JavaModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|util
operator|.
name|ClassCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|util
operator|.
name|NameUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|wsdlto
operator|.
name|frontend
operator|.
name|jaxws
operator|.
name|customization
operator|.
name|JAXWSBinding
import|;
end_import

begin_class
specifier|public
class|class
name|FaultProcessor
extends|extends
name|AbstractProcessor
block|{
specifier|private
name|ClassCollector
name|collector
decl_stmt|;
specifier|public
name|FaultProcessor
parameter_list|(
name|ToolContext
name|penv
parameter_list|)
block|{
name|super
argument_list|(
name|penv
argument_list|)
expr_stmt|;
name|collector
operator|=
name|penv
operator|.
name|get
argument_list|(
name|ClassCollector
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|process
parameter_list|(
name|JavaMethod
name|method
parameter_list|,
name|Collection
argument_list|<
name|FaultInfo
argument_list|>
name|faults
parameter_list|)
throws|throws
name|ToolException
block|{
if|if
condition|(
name|faults
operator|==
literal|null
condition|)
block|{
return|return;
block|}
for|for
control|(
name|FaultInfo
name|fault
range|:
name|faults
control|)
block|{
name|processFault
argument_list|(
name|method
argument_list|,
name|fault
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|boolean
name|isNameCollision
parameter_list|(
name|String
name|packageName
parameter_list|,
name|String
name|className
parameter_list|)
block|{
if|if
condition|(
name|context
operator|.
name|optionSet
argument_list|(
name|ToolConstants
operator|.
name|CFG_GEN_OVERWRITE
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|boolean
name|collision
init|=
name|collector
operator|.
name|containTypesClass
argument_list|(
name|packageName
argument_list|,
name|className
argument_list|)
operator|||
name|collector
operator|.
name|containSeiClass
argument_list|(
name|packageName
argument_list|,
name|className
argument_list|)
decl_stmt|;
return|return
name|collision
return|;
block|}
specifier|private
name|void
name|processFault
parameter_list|(
name|JavaMethod
name|method
parameter_list|,
name|FaultInfo
name|faultMessage
parameter_list|)
throws|throws
name|ToolException
block|{
name|JavaModel
name|model
init|=
name|method
operator|.
name|getInterface
argument_list|()
operator|.
name|getJavaModel
argument_list|()
decl_stmt|;
name|String
name|name
init|=
name|NameUtil
operator|.
name|mangleNameToClassName
argument_list|(
name|faultMessage
operator|.
name|getName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|namespace
init|=
name|faultMessage
operator|.
name|getName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
decl_stmt|;
name|String
name|packageName
init|=
name|ProcessorUtil
operator|.
name|parsePackageName
argument_list|(
name|namespace
argument_list|,
name|context
operator|.
name|mapPackageName
argument_list|(
name|namespace
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|namespace
operator|.
name|equals
argument_list|(
name|method
operator|.
name|getInterface
argument_list|()
operator|.
name|getNamespace
argument_list|()
argument_list|)
condition|)
block|{
name|packageName
operator|=
name|method
operator|.
name|getInterface
argument_list|()
operator|.
name|getPackageName
argument_list|()
expr_stmt|;
block|}
name|JAXWSBinding
name|jaxwsBinding
init|=
name|faultMessage
operator|.
name|getExtensor
argument_list|(
name|JAXWSBinding
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|jaxwsBinding
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|jaxwsBinding
operator|.
name|getPackage
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|packageName
operator|=
name|jaxwsBinding
operator|.
name|getPackage
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|jaxwsBinding
operator|.
name|getJaxwsClass
argument_list|()
operator|!=
literal|null
operator|&&
name|jaxwsBinding
operator|.
name|getJaxwsClass
argument_list|()
operator|.
name|getClassName
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|name
operator|=
name|jaxwsBinding
operator|.
name|getJaxwsClass
argument_list|()
operator|.
name|getClassName
argument_list|()
expr_stmt|;
if|if
condition|(
name|name
operator|.
name|contains
argument_list|(
literal|"."
argument_list|)
condition|)
block|{
name|packageName
operator|=
name|name
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|name
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
argument_list|)
expr_stmt|;
name|name
operator|=
name|name
operator|.
name|substring
argument_list|(
name|name
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
while|while
condition|(
name|isNameCollision
argument_list|(
name|packageName
argument_list|,
name|name
argument_list|)
condition|)
block|{
name|name
operator|=
name|name
operator|+
literal|"_Exception"
expr_stmt|;
block|}
name|String
name|fullClassName
init|=
name|packageName
operator|+
literal|"."
operator|+
name|name
decl_stmt|;
name|collector
operator|.
name|addExceptionClassName
argument_list|(
name|packageName
argument_list|,
name|name
argument_list|,
name|fullClassName
argument_list|)
expr_stmt|;
name|boolean
name|samePackage
init|=
name|method
operator|.
name|getInterface
argument_list|()
operator|.
name|getPackageName
argument_list|()
operator|.
name|equals
argument_list|(
name|packageName
argument_list|)
decl_stmt|;
name|method
operator|.
name|addException
argument_list|(
operator|new
name|JavaException
argument_list|(
name|faultMessage
operator|.
name|getName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|,
name|samePackage
condition|?
name|name
else|:
name|fullClassName
argument_list|,
name|namespace
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|MessagePartInfo
argument_list|>
name|faultParts
init|=
name|faultMessage
operator|.
name|getMessageParts
argument_list|()
decl_stmt|;
name|JavaExceptionClass
name|expClass
init|=
operator|new
name|JavaExceptionClass
argument_list|(
name|model
argument_list|)
decl_stmt|;
name|expClass
operator|.
name|setName
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|expClass
operator|.
name|setNamespace
argument_list|(
name|namespace
argument_list|)
expr_stmt|;
name|expClass
operator|.
name|setPackageName
argument_list|(
name|packageName
argument_list|)
expr_stmt|;
for|for
control|(
name|MessagePartInfo
name|part
range|:
name|faultParts
control|)
block|{
name|String
name|fName
init|=
literal|null
decl_stmt|;
name|String
name|fNamespace
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|part
operator|.
name|getElementQName
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|fNamespace
operator|=
name|part
operator|.
name|getElementQName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
expr_stmt|;
comment|//fNamespace = part.getConcreteName().getNamespaceURI();
name|fName
operator|=
name|part
operator|.
name|getConcreteName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|fNamespace
operator|=
name|part
operator|.
name|getTypeQName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
expr_stmt|;
name|fName
operator|=
name|part
operator|.
name|getConcreteName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|fNamespace
argument_list|)
condition|)
block|{
name|fNamespace
operator|=
name|namespace
expr_stmt|;
block|}
name|String
name|fType
init|=
name|ProcessorUtil
operator|.
name|getType
argument_list|(
name|part
argument_list|,
name|context
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|//REVISIT - custom JAXB package names
name|String
name|fPackageName
init|=
name|method
operator|.
name|getInterface
argument_list|()
operator|.
name|getPackageName
argument_list|()
decl_stmt|;
name|JavaField
name|fField
init|=
operator|new
name|JavaField
argument_list|(
name|fName
argument_list|,
name|fType
argument_list|,
name|fNamespace
argument_list|)
decl_stmt|;
name|fField
operator|.
name|setQName
argument_list|(
name|ProcessorUtil
operator|.
name|getElementName
argument_list|(
name|part
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|method
operator|.
name|getInterface
argument_list|()
operator|.
name|getPackageName
argument_list|()
operator|.
name|equals
argument_list|(
name|fPackageName
argument_list|)
condition|)
block|{
name|fField
operator|.
name|setClassName
argument_list|(
name|ProcessorUtil
operator|.
name|getFullClzName
argument_list|(
name|part
argument_list|,
name|context
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|fType
operator|.
name|equals
argument_list|(
name|ProcessorUtil
operator|.
name|resolvePartType
argument_list|(
name|part
argument_list|)
argument_list|)
condition|)
block|{
name|fField
operator|.
name|setClassName
argument_list|(
name|ProcessorUtil
operator|.
name|getType
argument_list|(
name|part
argument_list|,
name|context
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|expClass
operator|.
name|addField
argument_list|(
name|fField
argument_list|)
expr_stmt|;
block|}
name|model
operator|.
name|addExceptionClass
argument_list|(
name|packageName
operator|+
literal|"."
operator|+
name|name
argument_list|,
name|expClass
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

