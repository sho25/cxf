begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|wsdlto
operator|.
name|frontend
operator|.
name|jaxws
operator|.
name|processor
operator|.
name|internal
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|extensions
operator|.
name|ExtensibilityElement
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|extensions
operator|.
name|http
operator|.
name|HTTPBinding
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|extensions
operator|.
name|mime
operator|.
name|MIMEContent
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|extensions
operator|.
name|mime
operator|.
name|MIMEMultipartRelated
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|extensions
operator|.
name|mime
operator|.
name|MIMEPart
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|extensions
operator|.
name|soap
operator|.
name|SOAPHeader
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|BindingInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|BindingMessageInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|BindingOperationInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|EndpointInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|MessageInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|MessagePartInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|OperationInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|ServiceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|common
operator|.
name|ToolConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|common
operator|.
name|ToolContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|common
operator|.
name|ToolException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|common
operator|.
name|extensions
operator|.
name|soap
operator|.
name|SoapBinding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|common
operator|.
name|extensions
operator|.
name|soap
operator|.
name|SoapBody
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|common
operator|.
name|extensions
operator|.
name|soap
operator|.
name|SoapHeader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|common
operator|.
name|extensions
operator|.
name|soap
operator|.
name|SoapOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|common
operator|.
name|model
operator|.
name|JAnnotation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|common
operator|.
name|model
operator|.
name|JAnnotationElement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|common
operator|.
name|model
operator|.
name|JavaInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|common
operator|.
name|model
operator|.
name|JavaMethod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|common
operator|.
name|model
operator|.
name|JavaModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|common
operator|.
name|model
operator|.
name|JavaParameter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|common
operator|.
name|model
operator|.
name|JavaPort
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|common
operator|.
name|model
operator|.
name|JavaServiceClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|common
operator|.
name|model
operator|.
name|JavaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|util
operator|.
name|ClassCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|util
operator|.
name|NameUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|util
operator|.
name|SOAPBindingUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|wsdlto
operator|.
name|frontend
operator|.
name|jaxws
operator|.
name|customization
operator|.
name|JAXWSBinding
import|;
end_import

begin_class
specifier|public
class|class
name|ServiceProcessor
extends|extends
name|AbstractProcessor
block|{
specifier|private
name|String
name|soapOPAction
init|=
literal|"SOAPACTION"
decl_stmt|;
specifier|private
name|String
name|soapOPStyle
init|=
literal|"STYLE"
decl_stmt|;
specifier|private
name|BindingType
name|bindingType
decl_stmt|;
specifier|private
specifier|final
name|int
name|inHEADER
init|=
literal|1
decl_stmt|;
specifier|private
specifier|final
name|int
name|outHEADER
init|=
literal|2
decl_stmt|;
specifier|private
specifier|final
name|int
name|resultHeader
init|=
literal|3
decl_stmt|;
specifier|private
specifier|final
name|int
name|noHEADER
init|=
literal|0
decl_stmt|;
specifier|private
name|Object
name|bindingObj
decl_stmt|;
specifier|private
name|ServiceInfo
name|service
decl_stmt|;
specifier|private
name|JAXWSBinding
name|jaxwsBinding
init|=
operator|new
name|JAXWSBinding
argument_list|()
decl_stmt|;
specifier|public
name|ServiceProcessor
parameter_list|(
name|ToolContext
name|penv
parameter_list|)
block|{
name|super
argument_list|(
name|penv
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|process
parameter_list|(
name|ServiceInfo
name|si
parameter_list|)
throws|throws
name|ToolException
block|{
name|jaxwsBinding
operator|=
operator|new
name|JAXWSBinding
argument_list|()
expr_stmt|;
name|this
operator|.
name|service
operator|=
name|si
expr_stmt|;
if|if
condition|(
name|si
operator|.
name|getName
argument_list|()
operator|==
literal|null
condition|)
block|{
name|processBindings
argument_list|(
name|context
operator|.
name|get
argument_list|(
name|JavaModel
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|processService
argument_list|(
name|context
operator|.
name|get
argument_list|(
name|JavaModel
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|String
name|mapName
parameter_list|(
name|String
name|packageName
parameter_list|,
name|String
name|name
parameter_list|)
block|{
while|while
condition|(
name|isNameCollision
argument_list|(
name|packageName
argument_list|,
name|name
argument_list|)
condition|)
block|{
name|name
operator|=
name|name
operator|+
literal|"_Service"
expr_stmt|;
block|}
name|ClassCollector
name|collector
init|=
name|context
operator|.
name|get
argument_list|(
name|ClassCollector
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|collector
operator|.
name|isReserved
argument_list|(
name|packageName
argument_list|,
name|name
argument_list|)
condition|)
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
name|String
name|checkName
init|=
name|name
decl_stmt|;
while|while
condition|(
name|collector
operator|.
name|isReserved
argument_list|(
name|packageName
argument_list|,
name|checkName
argument_list|)
condition|)
block|{
name|checkName
operator|=
name|name
operator|+
operator|(
operator|++
name|count
operator|)
expr_stmt|;
block|}
name|name
operator|=
name|checkName
expr_stmt|;
block|}
return|return
name|name
return|;
block|}
specifier|private
name|boolean
name|isNameCollision
parameter_list|(
name|String
name|packageName
parameter_list|,
name|String
name|className
parameter_list|)
block|{
if|if
condition|(
name|context
operator|.
name|optionSet
argument_list|(
name|ToolConstants
operator|.
name|CFG_GEN_OVERWRITE
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|ClassCollector
name|collector
init|=
name|context
operator|.
name|get
argument_list|(
name|ClassCollector
operator|.
name|class
argument_list|)
decl_stmt|;
return|return
name|collector
operator|.
name|containTypesClass
argument_list|(
name|packageName
argument_list|,
name|className
argument_list|)
operator|||
name|collector
operator|.
name|containSeiClass
argument_list|(
name|packageName
argument_list|,
name|className
argument_list|)
operator|||
name|collector
operator|.
name|containExceptionClass
argument_list|(
name|packageName
argument_list|,
name|className
argument_list|)
return|;
block|}
specifier|private
name|void
name|processService
parameter_list|(
name|JavaModel
name|model
parameter_list|)
throws|throws
name|ToolException
block|{
name|JavaServiceClass
name|sclz
init|=
operator|(
name|JavaServiceClass
operator|)
name|service
operator|.
name|getProperty
argument_list|(
literal|"JavaServiceClass"
argument_list|)
decl_stmt|;
if|if
condition|(
name|sclz
operator|!=
literal|null
condition|)
block|{
return|return;
block|}
for|for
control|(
name|JavaServiceClass
name|sc
range|:
name|model
operator|.
name|getServiceClasses
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|sc
operator|.
name|getServiceName
argument_list|()
operator|.
name|equals
argument_list|(
name|service
operator|.
name|getName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
condition|)
block|{
name|sclz
operator|=
name|sc
expr_stmt|;
block|}
block|}
if|if
condition|(
name|sclz
operator|==
literal|null
condition|)
block|{
name|sclz
operator|=
operator|new
name|JavaServiceClass
argument_list|(
name|model
argument_list|)
expr_stmt|;
name|service
operator|.
name|setProperty
argument_list|(
literal|"JavaServiceClass"
argument_list|,
name|sclz
argument_list|)
expr_stmt|;
name|String
name|name
init|=
name|NameUtil
operator|.
name|mangleNameToClassName
argument_list|(
name|service
operator|.
name|getName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|namespace
init|=
name|service
operator|.
name|getName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
decl_stmt|;
name|String
name|packageName
init|=
name|ProcessorUtil
operator|.
name|parsePackageName
argument_list|(
name|namespace
argument_list|,
name|context
operator|.
name|mapPackageName
argument_list|(
name|namespace
argument_list|)
argument_list|)
decl_stmt|;
comment|//customizing
name|JAXWSBinding
name|serviceBinding
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|service
operator|.
name|getDescription
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|serviceBinding
operator|=
name|service
operator|.
name|getDescription
argument_list|()
operator|.
name|getExtensor
argument_list|(
name|JAXWSBinding
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
name|JAXWSBinding
name|serviceBinding2
init|=
name|service
operator|.
name|getExtensor
argument_list|(
name|JAXWSBinding
operator|.
name|class
argument_list|)
decl_stmt|;
comment|//TODO : Handle service customized class
if|if
condition|(
name|serviceBinding
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|serviceBinding
operator|.
name|getPackage
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|jaxwsBinding
operator|.
name|setPackage
argument_list|(
name|serviceBinding
operator|.
name|getPackage
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|serviceBinding
operator|.
name|isEnableAsyncMapping
argument_list|()
condition|)
block|{
name|jaxwsBinding
operator|.
name|setEnableAsyncMapping
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|serviceBinding
operator|.
name|isEnableMime
argument_list|()
condition|)
block|{
name|jaxwsBinding
operator|.
name|setEnableMime
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|jaxwsBinding
operator|.
name|setEnableWrapperStyle
argument_list|(
name|serviceBinding
operator|.
name|isEnableWrapperStyle
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|serviceBinding
operator|.
name|getJaxwsClass
argument_list|()
operator|!=
literal|null
operator|&&
name|serviceBinding
operator|.
name|getJaxwsClass
argument_list|()
operator|.
name|getClassName
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|name
operator|=
name|serviceBinding
operator|.
name|getJaxwsClass
argument_list|()
operator|.
name|getClassName
argument_list|()
expr_stmt|;
if|if
condition|(
name|name
operator|.
name|contains
argument_list|(
literal|"."
argument_list|)
condition|)
block|{
name|jaxwsBinding
operator|.
name|setPackage
argument_list|(
name|name
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|name
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|name
operator|=
name|name
operator|.
name|substring
argument_list|(
name|name
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
name|sclz
operator|.
name|setClassJavaDoc
argument_list|(
name|serviceBinding
operator|.
name|getJaxwsClass
argument_list|()
operator|.
name|getComments
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|sclz
operator|.
name|setPackageJavaDoc
argument_list|(
name|serviceBinding
operator|.
name|getPackageJavaDoc
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|serviceBinding2
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|serviceBinding2
operator|.
name|getPackage
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|jaxwsBinding
operator|.
name|setPackage
argument_list|(
name|serviceBinding2
operator|.
name|getPackage
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|serviceBinding2
operator|.
name|isEnableAsyncMapping
argument_list|()
condition|)
block|{
name|jaxwsBinding
operator|.
name|setEnableAsyncMapping
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|serviceBinding2
operator|.
name|isEnableMime
argument_list|()
condition|)
block|{
name|jaxwsBinding
operator|.
name|setEnableMime
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|serviceBinding2
operator|.
name|isEnableWrapperStyle
argument_list|()
condition|)
block|{
name|jaxwsBinding
operator|.
name|setEnableWrapperStyle
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|serviceBinding2
operator|.
name|getJaxwsClass
argument_list|()
operator|!=
literal|null
operator|&&
name|serviceBinding2
operator|.
name|getJaxwsClass
argument_list|()
operator|.
name|getClassName
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|name
operator|=
name|serviceBinding2
operator|.
name|getJaxwsClass
argument_list|()
operator|.
name|getClassName
argument_list|()
expr_stmt|;
if|if
condition|(
name|name
operator|.
name|contains
argument_list|(
literal|"."
argument_list|)
condition|)
block|{
name|jaxwsBinding
operator|.
name|setPackage
argument_list|(
name|name
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|name
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|name
operator|=
name|name
operator|.
name|substring
argument_list|(
name|name
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|serviceBinding2
operator|.
name|getJaxwsClass
argument_list|()
operator|.
name|getComments
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|jaxwsBinding
operator|.
name|setClassJavaDoc
argument_list|(
name|serviceBinding2
operator|.
name|getJaxwsClass
argument_list|()
operator|.
name|getComments
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|serviceBinding2
operator|.
name|getPackageJavaDoc
argument_list|()
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|sclz
operator|.
name|setPackageJavaDoc
argument_list|(
name|serviceBinding2
operator|.
name|getPackageJavaDoc
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|sclz
operator|.
name|setServiceName
argument_list|(
name|service
operator|.
name|getName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
name|sclz
operator|.
name|setNamespace
argument_list|(
name|namespace
argument_list|)
expr_stmt|;
if|if
condition|(
name|jaxwsBinding
operator|.
name|getPackage
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|packageName
operator|=
name|jaxwsBinding
operator|.
name|getPackage
argument_list|()
expr_stmt|;
block|}
name|sclz
operator|.
name|setPackageName
argument_list|(
name|packageName
argument_list|)
expr_stmt|;
name|name
operator|=
name|mapName
argument_list|(
name|packageName
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|sclz
operator|.
name|setName
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|ClassCollector
name|collector
init|=
name|context
operator|.
name|get
argument_list|(
name|ClassCollector
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|checkName
init|=
name|name
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|collector
operator|.
name|containServiceClass
argument_list|(
name|packageName
argument_list|,
name|checkName
argument_list|)
condition|)
block|{
name|checkName
operator|=
name|name
operator|+
operator|(
operator|++
name|count
operator|)
expr_stmt|;
block|}
name|name
operator|=
name|checkName
expr_stmt|;
name|sclz
operator|.
name|setName
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|collector
operator|.
name|addServiceClassName
argument_list|(
name|packageName
argument_list|,
name|name
argument_list|,
name|packageName
operator|+
literal|"."
operator|+
name|name
argument_list|)
expr_stmt|;
name|Element
name|handler
init|=
operator|(
name|Element
operator|)
name|context
operator|.
name|get
argument_list|(
name|ToolConstants
operator|.
name|HANDLER_CHAIN
argument_list|)
decl_stmt|;
name|sclz
operator|.
name|setHandlerChains
argument_list|(
name|handler
argument_list|)
expr_stmt|;
block|}
name|Collection
argument_list|<
name|EndpointInfo
argument_list|>
name|ports
init|=
name|service
operator|.
name|getEndpoints
argument_list|()
decl_stmt|;
for|for
control|(
name|EndpointInfo
name|port
range|:
name|ports
control|)
block|{
name|JavaPort
name|javaport
init|=
name|processPort
argument_list|(
name|model
argument_list|,
name|service
argument_list|,
name|port
argument_list|)
decl_stmt|;
name|sclz
operator|.
name|addPort
argument_list|(
name|javaport
argument_list|)
expr_stmt|;
block|}
name|sclz
operator|.
name|setClassJavaDoc
argument_list|(
name|jaxwsBinding
operator|.
name|getClassJavaDoc
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|sclz
operator|.
name|getClassJavaDoc
argument_list|()
argument_list|)
condition|)
block|{
name|sclz
operator|.
name|setClassJavaDoc
argument_list|(
name|service
operator|.
name|getDocumentation
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|model
operator|.
name|addServiceClass
argument_list|(
name|sclz
operator|.
name|getName
argument_list|()
argument_list|,
name|sclz
argument_list|)
expr_stmt|;
block|}
specifier|private
name|JavaPort
name|processPort
parameter_list|(
name|JavaModel
name|model
parameter_list|,
name|ServiceInfo
name|si
parameter_list|,
name|EndpointInfo
name|port
parameter_list|)
throws|throws
name|ToolException
block|{
name|BindingInfo
name|binding
init|=
name|port
operator|.
name|getBinding
argument_list|()
decl_stmt|;
name|String
name|portType
init|=
name|binding
operator|.
name|getInterface
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
decl_stmt|;
name|JavaInterface
name|intf
init|=
name|PortTypeProcessor
operator|.
name|getInterface
argument_list|(
name|context
argument_list|,
name|si
argument_list|,
name|binding
operator|.
name|getInterface
argument_list|()
argument_list|)
decl_stmt|;
name|JavaPort
name|jport
init|=
operator|new
name|JavaPort
argument_list|(
name|NameUtil
operator|.
name|mangleNameToClassName
argument_list|(
name|port
operator|.
name|getName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|jport
operator|.
name|setPackageName
argument_list|(
name|intf
operator|.
name|getPackageName
argument_list|()
argument_list|)
expr_stmt|;
name|jport
operator|.
name|setPortName
argument_list|(
name|port
operator|.
name|getName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
name|jport
operator|.
name|setBindingAdress
argument_list|(
name|port
operator|.
name|getAddress
argument_list|()
argument_list|)
expr_stmt|;
name|jport
operator|.
name|setBindingName
argument_list|(
name|binding
operator|.
name|getName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
name|jport
operator|.
name|setPortType
argument_list|(
name|portType
argument_list|)
expr_stmt|;
name|jport
operator|.
name|setInterfaceClass
argument_list|(
name|intf
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|bindingType
operator|=
name|getBindingType
argument_list|(
name|binding
argument_list|)
expr_stmt|;
if|if
condition|(
name|bindingType
operator|==
literal|null
condition|)
block|{
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
name|msg
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
argument_list|(
literal|"BINDING_SPECIFY_ONE_PROTOCOL"
argument_list|,
name|LOG
argument_list|,
name|binding
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|ToolException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
if|if
condition|(
name|isSoapBinding
argument_list|()
condition|)
block|{
name|SoapBinding
name|spbd
init|=
name|SOAPBindingUtil
operator|.
name|getProxy
argument_list|(
name|SoapBinding
operator|.
name|class
argument_list|,
name|this
operator|.
name|bindingObj
argument_list|)
decl_stmt|;
name|jport
operator|.
name|setStyle
argument_list|(
name|SOAPBindingUtil
operator|.
name|getSoapStyle
argument_list|(
name|spbd
operator|.
name|getStyle
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|jport
operator|.
name|setTransURI
argument_list|(
name|spbd
operator|.
name|getTransportURI
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Collection
argument_list|<
name|BindingOperationInfo
argument_list|>
name|operations
init|=
name|binding
operator|.
name|getOperations
argument_list|()
decl_stmt|;
for|for
control|(
name|BindingOperationInfo
name|bop
range|:
name|operations
control|)
block|{
name|processOperation
argument_list|(
name|model
argument_list|,
name|bop
argument_list|,
name|binding
argument_list|)
expr_stmt|;
block|}
name|jport
operator|.
name|setJavaDoc
argument_list|(
name|port
operator|.
name|getDocumentation
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|jport
return|;
block|}
specifier|private
name|void
name|processBindings
parameter_list|(
name|JavaModel
name|model
parameter_list|)
block|{
for|for
control|(
name|BindingInfo
name|binding
range|:
name|service
operator|.
name|getBindings
argument_list|()
control|)
block|{
name|bindingType
operator|=
name|getBindingType
argument_list|(
name|binding
argument_list|)
expr_stmt|;
if|if
condition|(
name|bindingType
operator|==
literal|null
condition|)
block|{
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
name|msg
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
argument_list|(
literal|"BINDING_SPECIFY_ONE_PROTOCOL"
argument_list|,
name|LOG
argument_list|,
name|binding
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|ToolException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
name|Collection
argument_list|<
name|BindingOperationInfo
argument_list|>
name|operations
init|=
name|binding
operator|.
name|getOperations
argument_list|()
decl_stmt|;
for|for
control|(
name|BindingOperationInfo
name|bop
range|:
name|operations
control|)
block|{
name|processOperation
argument_list|(
name|model
argument_list|,
name|bop
argument_list|,
name|binding
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|processOperation
parameter_list|(
name|JavaModel
name|model
parameter_list|,
name|BindingOperationInfo
name|bop
parameter_list|,
name|BindingInfo
name|binding
parameter_list|)
throws|throws
name|ToolException
block|{
name|boolean
name|enableOpMime
init|=
literal|false
decl_stmt|;
name|JAXWSBinding
name|bind
init|=
name|binding
operator|.
name|getExtensor
argument_list|(
name|JAXWSBinding
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|bind
operator|!=
literal|null
operator|&&
name|bind
operator|.
name|isEnableMime
argument_list|()
condition|)
block|{
name|enableOpMime
operator|=
literal|true
expr_stmt|;
block|}
name|JAXWSBinding
name|bopBinding
init|=
name|bop
operator|.
name|getExtensor
argument_list|(
name|JAXWSBinding
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|bopBinding
operator|!=
literal|null
operator|&&
name|bopBinding
operator|.
name|isEnableMime
argument_list|()
condition|)
block|{
name|enableOpMime
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|bopBinding
operator|.
name|getJaxwsParas
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|jaxwsBinding
operator|.
name|setJaxwsParas
argument_list|(
name|bopBinding
operator|.
name|getJaxwsParas
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|JavaInterface
name|jf
init|=
literal|null
decl_stmt|;
for|for
control|(
name|JavaInterface
name|jf2
range|:
name|model
operator|.
name|getInterfaces
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|binding
operator|.
name|getInterface
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
operator|.
name|equals
argument_list|(
name|jf2
operator|.
name|getWebServiceName
argument_list|()
argument_list|)
condition|)
block|{
name|jf
operator|=
name|jf2
expr_stmt|;
block|}
block|}
if|if
condition|(
name|isSoapBinding
argument_list|()
condition|)
block|{
name|SoapBinding
name|soapBinding
init|=
operator|(
name|SoapBinding
operator|)
name|bindingObj
decl_stmt|;
if|if
condition|(
name|SOAPBindingUtil
operator|.
name|getSoapStyle
argument_list|(
name|soapBinding
operator|.
name|getStyle
argument_list|()
argument_list|)
operator|==
literal|null
condition|)
block|{
name|jf
operator|.
name|setSOAPStyle
argument_list|(
name|javax
operator|.
name|jws
operator|.
name|soap
operator|.
name|SOAPBinding
operator|.
name|Style
operator|.
name|DOCUMENT
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|jf
operator|.
name|setSOAPStyle
argument_list|(
name|SOAPBindingUtil
operator|.
name|getSoapStyle
argument_list|(
name|soapBinding
operator|.
name|getStyle
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// REVISIT: fix for xml binding
name|jf
operator|.
name|setSOAPStyle
argument_list|(
name|javax
operator|.
name|jws
operator|.
name|soap
operator|.
name|SOAPBinding
operator|.
name|Style
operator|.
name|DOCUMENT
argument_list|)
expr_stmt|;
block|}
name|Object
index|[]
name|methods
init|=
name|jf
operator|.
name|getMethods
argument_list|()
operator|.
name|toArray
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|methods
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|JavaMethod
name|jm
init|=
operator|(
name|JavaMethod
operator|)
name|methods
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|jm
operator|.
name|getOperationName
argument_list|()
operator|!=
literal|null
operator|&&
name|jm
operator|.
name|getOperationName
argument_list|()
operator|.
name|equals
argument_list|(
name|bop
operator|.
name|getName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|isSoapBinding
argument_list|()
condition|)
block|{
comment|// TODO: add customize here
comment|//doCustomizeOperation(jf, jm, bop);
name|Map
name|prop
init|=
name|getSoapOperationProp
argument_list|(
name|bop
argument_list|)
decl_stmt|;
name|String
name|soapAction
init|=
name|prop
operator|.
name|get
argument_list|(
name|soapOPAction
argument_list|)
operator|==
literal|null
condition|?
literal|""
else|:
operator|(
name|String
operator|)
name|prop
operator|.
name|get
argument_list|(
name|soapOPAction
argument_list|)
decl_stmt|;
name|String
name|soapStyle
init|=
name|prop
operator|.
name|get
argument_list|(
name|soapOPStyle
argument_list|)
operator|==
literal|null
condition|?
literal|""
else|:
operator|(
name|String
operator|)
name|prop
operator|.
name|get
argument_list|(
name|soapOPStyle
argument_list|)
decl_stmt|;
name|jm
operator|.
name|setSoapAction
argument_list|(
name|soapAction
argument_list|)
expr_stmt|;
if|if
condition|(
name|SOAPBindingUtil
operator|.
name|getSoapStyle
argument_list|(
name|soapStyle
argument_list|)
operator|==
literal|null
operator|&&
name|this
operator|.
name|bindingObj
operator|==
literal|null
condition|)
block|{
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
name|msg
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
argument_list|(
literal|"BINDING_STYLE_NOT_DEFINED"
argument_list|,
name|LOG
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|ToolException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
if|if
condition|(
name|SOAPBindingUtil
operator|.
name|getSoapStyle
argument_list|(
name|soapStyle
argument_list|)
operator|==
literal|null
condition|)
block|{
name|jm
operator|.
name|setSoapStyle
argument_list|(
name|jf
operator|.
name|getSOAPStyle
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|jm
operator|.
name|setSoapStyle
argument_list|(
name|SOAPBindingUtil
operator|.
name|getSoapStyle
argument_list|(
name|soapStyle
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// REVISIT: fix for xml binding
name|jm
operator|.
name|setSoapStyle
argument_list|(
name|jf
operator|.
name|getSOAPStyle
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|jm
operator|.
name|getSoapStyle
argument_list|()
operator|.
name|equals
argument_list|(
name|javax
operator|.
name|jws
operator|.
name|soap
operator|.
name|SOAPBinding
operator|.
name|Style
operator|.
name|RPC
argument_list|)
condition|)
block|{
name|jm
operator|.
name|getAnnotationMap
argument_list|()
operator|.
name|remove
argument_list|(
literal|"SOAPBinding"
argument_list|)
expr_stmt|;
block|}
name|OperationProcessor
name|processor
init|=
operator|new
name|OperationProcessor
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|int
name|headerType
init|=
name|isNonWrappable
argument_list|(
name|bop
argument_list|)
decl_stmt|;
name|OperationInfo
name|opinfo
init|=
name|bop
operator|.
name|getOperationInfo
argument_list|()
decl_stmt|;
name|JAXWSBinding
name|opBinding
init|=
operator|(
name|JAXWSBinding
operator|)
name|opinfo
operator|.
name|getExtensor
argument_list|(
name|JAXWSBinding
operator|.
name|class
argument_list|)
decl_stmt|;
name|JAXWSBinding
name|infBinding
init|=
operator|(
name|JAXWSBinding
operator|)
name|opinfo
operator|.
name|getInterface
argument_list|()
operator|.
name|getExtensor
argument_list|(
name|JAXWSBinding
operator|.
name|class
argument_list|)
decl_stmt|;
name|boolean
name|enableMime
init|=
name|enableOpMime
decl_stmt|;
name|boolean
name|enableWrapperStyle
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|infBinding
operator|!=
literal|null
operator|&&
name|infBinding
operator|.
name|isSetEnableWrapperStyle
argument_list|()
condition|)
block|{
name|enableWrapperStyle
operator|=
name|infBinding
operator|.
name|isEnableWrapperStyle
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|infBinding
operator|!=
literal|null
operator|&&
name|infBinding
operator|.
name|isSetEnableMime
argument_list|()
condition|)
block|{
name|enableMime
operator|=
name|infBinding
operator|.
name|isEnableMime
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|opBinding
operator|!=
literal|null
operator|&&
name|opBinding
operator|.
name|isSetEnableWrapperStyle
argument_list|()
condition|)
block|{
name|enableWrapperStyle
operator|=
name|opBinding
operator|.
name|isEnableWrapperStyle
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|opBinding
operator|!=
literal|null
operator|&&
name|opBinding
operator|.
name|isSetEnableMime
argument_list|()
condition|)
block|{
name|enableMime
operator|=
name|opBinding
operator|.
name|isEnableMime
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|jaxwsBinding
operator|.
name|isEnableMime
argument_list|()
operator|||
name|enableMime
condition|)
block|{
name|jm
operator|.
name|setMimeEnable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|jm
operator|.
name|isWrapperStyle
argument_list|()
operator|&&
name|headerType
operator|>
name|this
operator|.
name|noHEADER
operator|)
operator|||
operator|!
name|jaxwsBinding
operator|.
name|isEnableWrapperStyle
argument_list|()
operator|||
operator|(
name|jm
operator|.
name|enableMime
argument_list|()
operator|&&
name|jm
operator|.
name|isWrapperStyle
argument_list|()
operator|)
operator|||
operator|!
name|enableWrapperStyle
condition|)
block|{
comment|// changed wrapper style
name|jm
operator|.
name|setWrapperStyle
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|processor
operator|.
name|processMethod
argument_list|(
name|jm
argument_list|,
name|bop
operator|.
name|getOperationInfo
argument_list|()
argument_list|)
expr_stmt|;
name|jm
operator|.
name|getAnnotationMap
argument_list|()
operator|.
name|remove
argument_list|(
literal|"ResponseWrapper"
argument_list|)
expr_stmt|;
name|jm
operator|.
name|getAnnotationMap
argument_list|()
operator|.
name|remove
argument_list|(
literal|"RequestWrapper"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|processor
operator|.
name|processMethod
argument_list|(
name|jm
argument_list|,
name|bop
operator|.
name|getOperationInfo
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|headerType
operator|==
name|this
operator|.
name|resultHeader
condition|)
block|{
name|JAnnotation
name|resultAnno
init|=
name|jm
operator|.
name|getAnnotationMap
argument_list|()
operator|.
name|get
argument_list|(
literal|"WebResult"
argument_list|)
decl_stmt|;
if|if
condition|(
name|resultAnno
operator|!=
literal|null
condition|)
block|{
name|resultAnno
operator|.
name|addElement
argument_list|(
operator|new
name|JAnnotationElement
argument_list|(
literal|"header"
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|processParameter
argument_list|(
name|jm
argument_list|,
name|bop
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|setParameterAsHeader
parameter_list|(
name|JavaParameter
name|parameter
parameter_list|)
block|{
name|parameter
operator|.
name|setHeader
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|JAnnotation
name|parameterAnnotation
init|=
name|parameter
operator|.
name|getAnnotation
argument_list|(
literal|"WebParam"
argument_list|)
decl_stmt|;
name|parameterAnnotation
operator|.
name|addElement
argument_list|(
operator|new
name|JAnnotationElement
argument_list|(
literal|"header"
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|parameterAnnotation
operator|.
name|addElement
argument_list|(
operator|new
name|JAnnotationElement
argument_list|(
literal|"name"
argument_list|,
name|parameter
operator|.
name|getQName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|parameterAnnotation
operator|.
name|addElement
argument_list|(
operator|new
name|JAnnotationElement
argument_list|(
literal|"partName"
argument_list|,
name|parameter
operator|.
name|getPartName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|parameterAnnotation
operator|.
name|addElement
argument_list|(
operator|new
name|JAnnotationElement
argument_list|(
literal|"targetNamespace"
argument_list|,
name|parameter
operator|.
name|getTargetNamespace
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|processParameter
parameter_list|(
name|JavaMethod
name|jm
parameter_list|,
name|BindingOperationInfo
name|operation
parameter_list|)
throws|throws
name|ToolException
block|{
comment|// process input
name|List
argument_list|<
name|ExtensibilityElement
argument_list|>
name|inbindings
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|operation
operator|.
name|getInput
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|inbindings
operator|=
name|operation
operator|.
name|getInput
argument_list|()
operator|.
name|getExtensors
argument_list|(
name|ExtensibilityElement
operator|.
name|class
argument_list|)
expr_stmt|;
if|if
condition|(
name|inbindings
operator|==
literal|null
condition|)
block|{
name|inbindings
operator|=
operator|new
name|ArrayList
argument_list|<
name|ExtensibilityElement
argument_list|>
argument_list|()
expr_stmt|;
block|}
block|}
name|String
name|use
init|=
literal|null
decl_stmt|;
for|for
control|(
name|ExtensibilityElement
name|ext
range|:
name|inbindings
control|)
block|{
if|if
condition|(
name|SOAPBindingUtil
operator|.
name|isSOAPBody
argument_list|(
name|ext
argument_list|)
condition|)
block|{
name|SoapBody
name|soapBody
init|=
name|SOAPBindingUtil
operator|.
name|getSoapBody
argument_list|(
name|ext
argument_list|)
decl_stmt|;
name|use
operator|=
name|soapBody
operator|.
name|getUse
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|SOAPBindingUtil
operator|.
name|isSOAPHeader
argument_list|(
name|ext
argument_list|)
condition|)
block|{
name|processSoapHeader
argument_list|(
name|jm
argument_list|,
name|operation
argument_list|,
name|ext
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ext
operator|instanceof
name|MIMEMultipartRelated
operator|&&
name|jm
operator|.
name|enableMime
argument_list|()
condition|)
block|{
name|processMultipart
argument_list|(
name|jm
argument_list|,
name|operation
argument_list|,
operator|(
name|MIMEMultipartRelated
operator|)
name|ext
argument_list|,
name|JavaType
operator|.
name|Style
operator|.
name|IN
argument_list|)
expr_stmt|;
block|}
block|}
comment|// process output
if|if
condition|(
name|operation
operator|.
name|getOutput
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|ExtensibilityElement
argument_list|>
name|outbindings
init|=
name|operation
operator|.
name|getOutput
argument_list|()
operator|.
name|getExtensors
argument_list|(
name|ExtensibilityElement
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|outbindings
operator|==
literal|null
condition|)
block|{
name|outbindings
operator|=
operator|new
name|ArrayList
argument_list|<
name|ExtensibilityElement
argument_list|>
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|ExtensibilityElement
name|ext
range|:
name|outbindings
control|)
block|{
if|if
condition|(
name|SOAPBindingUtil
operator|.
name|isSOAPHeader
argument_list|(
name|ext
argument_list|)
condition|)
block|{
name|SoapHeader
name|soapHeader
init|=
name|SOAPBindingUtil
operator|.
name|getSoapHeader
argument_list|(
name|ext
argument_list|)
decl_stmt|;
if|if
condition|(
name|isOutOfBandHeader
argument_list|(
name|operation
operator|.
name|getOutput
argument_list|()
argument_list|,
name|ext
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|boolean
name|found
init|=
literal|false
decl_stmt|;
for|for
control|(
name|JavaParameter
name|parameter
range|:
name|jm
operator|.
name|getParameters
argument_list|()
control|)
block|{
if|if
condition|(
name|soapHeader
operator|.
name|getPart
argument_list|()
operator|.
name|equals
argument_list|(
name|parameter
operator|.
name|getPartName
argument_list|()
argument_list|)
condition|)
block|{
name|setParameterAsHeader
argument_list|(
name|parameter
argument_list|)
expr_stmt|;
name|found
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|jm
operator|.
name|getReturn
argument_list|()
operator|.
name|getName
argument_list|()
operator|!=
literal|null
operator|&&
name|jm
operator|.
name|getReturn
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|soapHeader
operator|.
name|getPart
argument_list|()
argument_list|)
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|Boolean
operator|.
name|valueOf
argument_list|(
operator|(
name|String
operator|)
name|context
operator|.
name|get
argument_list|(
name|ToolConstants
operator|.
name|CFG_EXTRA_SOAPHEADER
argument_list|)
argument_list|)
operator|&&
operator|!
name|found
condition|)
block|{
comment|// Header can't be found in java method parameters, in
comment|// different message
comment|// other than messages used in porttype operation
name|ParameterProcessor
name|processor
init|=
operator|new
name|ParameterProcessor
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|MessagePartInfo
name|exPart
init|=
name|service
operator|.
name|getMessage
argument_list|(
name|soapHeader
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|.
name|getMessagePart
argument_list|(
operator|new
name|QName
argument_list|(
name|soapHeader
operator|.
name|getMessage
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
name|soapHeader
operator|.
name|getPart
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|JavaParameter
name|jp
init|=
name|processor
operator|.
name|addParameterFromBinding
argument_list|(
name|jm
argument_list|,
name|exPart
argument_list|,
name|JavaType
operator|.
name|Style
operator|.
name|OUT
argument_list|)
decl_stmt|;
name|setParameterAsHeader
argument_list|(
name|jp
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|ext
operator|instanceof
name|MIMEMultipartRelated
operator|&&
name|jm
operator|.
name|enableMime
argument_list|()
condition|)
block|{
name|processMultipart
argument_list|(
name|jm
argument_list|,
name|operation
argument_list|,
operator|(
name|MIMEMultipartRelated
operator|)
name|ext
argument_list|,
name|JavaType
operator|.
name|Style
operator|.
name|OUT
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|jm
operator|.
name|setSoapUse
argument_list|(
name|SOAPBindingUtil
operator|.
name|getSoapUse
argument_list|(
name|use
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|javax
operator|.
name|jws
operator|.
name|soap
operator|.
name|SOAPBinding
operator|.
name|Style
operator|.
name|RPC
operator|==
name|jm
operator|.
name|getSoapStyle
argument_list|()
operator|&&
name|javax
operator|.
name|jws
operator|.
name|soap
operator|.
name|SOAPBinding
operator|.
name|Use
operator|.
name|ENCODED
operator|==
name|jm
operator|.
name|getSoapUse
argument_list|()
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"** Unsupported RPC-Encoded Style Use **"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|javax
operator|.
name|jws
operator|.
name|soap
operator|.
name|SOAPBinding
operator|.
name|Style
operator|.
name|RPC
operator|==
name|jm
operator|.
name|getSoapStyle
argument_list|()
operator|&&
name|javax
operator|.
name|jws
operator|.
name|soap
operator|.
name|SOAPBinding
operator|.
name|Use
operator|.
name|LITERAL
operator|==
name|jm
operator|.
name|getSoapUse
argument_list|()
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|javax
operator|.
name|jws
operator|.
name|soap
operator|.
name|SOAPBinding
operator|.
name|Style
operator|.
name|DOCUMENT
operator|==
name|jm
operator|.
name|getSoapStyle
argument_list|()
operator|&&
name|javax
operator|.
name|jws
operator|.
name|soap
operator|.
name|SOAPBinding
operator|.
name|Use
operator|.
name|LITERAL
operator|==
name|jm
operator|.
name|getSoapUse
argument_list|()
condition|)
block|{
return|return;
block|}
block|}
specifier|private
name|boolean
name|isOutOfBandHeader
parameter_list|(
name|BindingMessageInfo
name|bmi
parameter_list|,
name|ExtensibilityElement
name|ext
parameter_list|)
block|{
name|SoapHeader
name|soapHeader
init|=
name|SOAPBindingUtil
operator|.
name|getSoapHeader
argument_list|(
name|ext
argument_list|)
decl_stmt|;
if|if
condition|(
name|soapHeader
operator|.
name|getMessage
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|bmi
operator|.
name|getMessageInfo
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|soapHeader
operator|.
name|getMessage
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|void
name|processSoapHeader
parameter_list|(
name|JavaMethod
name|jm
parameter_list|,
name|BindingOperationInfo
name|operation
parameter_list|,
name|ExtensibilityElement
name|ext
parameter_list|)
block|{
if|if
condition|(
name|isOutOfBandHeader
argument_list|(
name|operation
operator|.
name|getInput
argument_list|()
argument_list|,
name|ext
argument_list|)
condition|)
block|{
return|return;
block|}
name|SoapHeader
name|soapHeader
init|=
name|SOAPBindingUtil
operator|.
name|getSoapHeader
argument_list|(
name|ext
argument_list|)
decl_stmt|;
for|for
control|(
name|JavaParameter
name|parameter
range|:
name|jm
operator|.
name|getParameters
argument_list|()
control|)
block|{
if|if
condition|(
name|soapHeader
operator|.
name|getPart
argument_list|()
operator|.
name|equals
argument_list|(
name|parameter
operator|.
name|getPartName
argument_list|()
argument_list|)
condition|)
block|{
name|setParameterAsHeader
argument_list|(
name|parameter
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
specifier|private
specifier|static
name|String
name|getJavaTypeForMimeType
parameter_list|(
name|MIMEPart
name|mPart
parameter_list|)
block|{
if|if
condition|(
name|mPart
operator|.
name|getExtensibilityElements
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
return|return
literal|"javax.activation.DataHandler"
return|;
block|}
else|else
block|{
name|ExtensibilityElement
name|extElement
init|=
operator|(
name|ExtensibilityElement
operator|)
name|mPart
operator|.
name|getExtensibilityElements
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|extElement
operator|instanceof
name|MIMEContent
condition|)
block|{
name|MIMEContent
name|mimeContent
init|=
operator|(
name|MIMEContent
operator|)
name|extElement
decl_stmt|;
if|if
condition|(
literal|"image/jpeg"
operator|.
name|equals
argument_list|(
name|mimeContent
operator|.
name|getType
argument_list|()
argument_list|)
operator|||
literal|"image/gif"
operator|.
name|equals
argument_list|(
name|mimeContent
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|"java.awt.Image"
return|;
block|}
elseif|else
if|if
condition|(
literal|"text/xml"
operator|.
name|equals
argument_list|(
name|mimeContent
operator|.
name|getType
argument_list|()
argument_list|)
operator|||
literal|"application/xml"
operator|.
name|equals
argument_list|(
name|mimeContent
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|"javax.xml.transform.Source"
return|;
block|}
else|else
block|{
return|return
literal|"javax.activation.DataHandler"
return|;
block|}
block|}
block|}
return|return
literal|"javax.activation.DataHandler"
return|;
block|}
specifier|public
name|void
name|processMultipart
parameter_list|(
name|JavaMethod
name|jm
parameter_list|,
name|BindingOperationInfo
name|operation
parameter_list|,
name|MIMEMultipartRelated
name|ext
parameter_list|,
name|JavaType
operator|.
name|Style
name|style
parameter_list|)
throws|throws
name|ToolException
block|{
name|List
name|mimeParts
init|=
name|ext
operator|.
name|getMIMEParts
argument_list|()
decl_stmt|;
name|Iterator
name|itParts
init|=
name|mimeParts
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|itParts
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|MIMEPart
name|mPart
init|=
operator|(
name|MIMEPart
operator|)
name|itParts
operator|.
name|next
argument_list|()
decl_stmt|;
name|Iterator
name|extns
init|=
name|mPart
operator|.
name|getExtensibilityElements
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|extns
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|ExtensibilityElement
name|extElement
init|=
operator|(
name|ExtensibilityElement
operator|)
name|extns
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|extElement
operator|instanceof
name|MIMEContent
condition|)
block|{
name|MIMEContent
name|mimeContent
init|=
operator|(
name|MIMEContent
operator|)
name|extElement
decl_stmt|;
name|String
name|mimeJavaType
init|=
name|getJavaTypeForMimeType
argument_list|(
name|mPart
argument_list|)
decl_stmt|;
if|if
condition|(
name|JavaType
operator|.
name|Style
operator|.
name|IN
operator|.
name|equals
argument_list|(
name|style
argument_list|)
condition|)
block|{
name|String
name|paramName
init|=
name|ProcessorUtil
operator|.
name|mangleNameToVariableName
argument_list|(
name|mimeContent
operator|.
name|getPart
argument_list|()
argument_list|)
decl_stmt|;
name|JavaParameter
name|jp
init|=
name|jm
operator|.
name|getParameter
argument_list|(
name|paramName
argument_list|)
decl_stmt|;
if|if
condition|(
name|jp
operator|==
literal|null
condition|)
block|{
name|Message
name|message
init|=
operator|new
name|Message
argument_list|(
literal|"MIMEPART_CANNOT_MAP"
argument_list|,
name|LOG
argument_list|,
name|mimeContent
operator|.
name|getPart
argument_list|()
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|ToolException
argument_list|(
name|message
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|jp
operator|.
name|getClassName
argument_list|()
operator|.
name|equals
argument_list|(
name|mimeJavaType
argument_list|)
condition|)
block|{
comment|// jp.setType(mimeJavaType);
name|jp
operator|.
name|setClassName
argument_list|(
name|mimeJavaType
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|JavaType
operator|.
name|Style
operator|.
name|OUT
operator|.
name|equals
argument_list|(
name|style
argument_list|)
condition|)
block|{
name|JavaType
name|jp
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
literal|"void"
operator|.
name|equals
argument_list|(
name|jm
operator|.
name|getReturn
argument_list|()
operator|.
name|getType
argument_list|()
argument_list|)
operator|&&
name|mimeContent
operator|.
name|getPart
argument_list|()
operator|.
name|equals
argument_list|(
name|jm
operator|.
name|getReturn
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|jp
operator|=
name|jm
operator|.
name|getReturn
argument_list|()
expr_stmt|;
name|jp
operator|.
name|setClassName
argument_list|(
name|mimeJavaType
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|jp
operator|==
literal|null
condition|)
block|{
for|for
control|(
name|JavaParameter
name|para
range|:
name|jm
operator|.
name|getParameters
argument_list|()
control|)
block|{
if|if
condition|(
name|mimeContent
operator|.
name|getPart
argument_list|()
operator|.
name|equals
argument_list|(
name|para
operator|.
name|getPartName
argument_list|()
argument_list|)
condition|)
block|{
name|jp
operator|=
name|para
expr_stmt|;
block|}
block|}
if|if
condition|(
name|jp
operator|!=
literal|null
condition|)
block|{
operator|(
operator|(
name|JavaParameter
operator|)
name|jp
operator|)
operator|.
name|setClassName
argument_list|(
name|mimeJavaType
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|jp
operator|==
literal|null
condition|)
block|{
name|Message
name|message
init|=
operator|new
name|Message
argument_list|(
literal|"MIMEPART_CANNOT_MAP"
argument_list|,
name|LOG
argument_list|,
name|mimeContent
operator|.
name|getPart
argument_list|()
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|ToolException
argument_list|(
name|message
argument_list|)
throw|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|extElement
operator|instanceof
name|SOAPHeader
condition|)
block|{
name|processSoapHeader
argument_list|(
name|jm
argument_list|,
name|operation
argument_list|,
name|extElement
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|Map
name|getSoapOperationProp
parameter_list|(
name|BindingOperationInfo
name|bop
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|soapOPProp
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|bop
operator|.
name|getExtensor
argument_list|(
name|ExtensibilityElement
operator|.
name|class
argument_list|)
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|ExtensibilityElement
name|ext
range|:
name|bop
operator|.
name|getExtensors
argument_list|(
name|ExtensibilityElement
operator|.
name|class
argument_list|)
control|)
block|{
if|if
condition|(
name|SOAPBindingUtil
operator|.
name|isSOAPOperation
argument_list|(
name|ext
argument_list|)
condition|)
block|{
name|SoapOperation
name|soapOP
init|=
name|SOAPBindingUtil
operator|.
name|getSoapOperation
argument_list|(
name|ext
argument_list|)
decl_stmt|;
name|soapOPProp
operator|.
name|put
argument_list|(
name|this
operator|.
name|soapOPAction
argument_list|,
name|soapOP
operator|.
name|getSoapActionURI
argument_list|()
argument_list|)
expr_stmt|;
name|soapOPProp
operator|.
name|put
argument_list|(
name|this
operator|.
name|soapOPStyle
argument_list|,
name|soapOP
operator|.
name|getStyle
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
for|for
control|(
name|ExtensibilityElement
name|ext
range|:
name|bop
operator|.
name|getBinding
argument_list|()
operator|.
name|getExtensors
argument_list|(
name|ExtensibilityElement
operator|.
name|class
argument_list|)
control|)
block|{
if|if
condition|(
name|SOAPBindingUtil
operator|.
name|isSOAPOperation
argument_list|(
name|ext
argument_list|)
condition|)
block|{
name|SoapOperation
name|soapOP
init|=
name|SOAPBindingUtil
operator|.
name|getSoapOperation
argument_list|(
name|ext
argument_list|)
decl_stmt|;
name|soapOPProp
operator|.
name|put
argument_list|(
name|this
operator|.
name|soapOPAction
argument_list|,
name|soapOP
operator|.
name|getSoapActionURI
argument_list|()
argument_list|)
expr_stmt|;
name|soapOPProp
operator|.
name|put
argument_list|(
name|this
operator|.
name|soapOPStyle
argument_list|,
name|soapOP
operator|.
name|getStyle
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|soapOPProp
return|;
block|}
specifier|private
name|BindingType
name|getBindingType
parameter_list|(
name|BindingInfo
name|binding
parameter_list|)
block|{
if|if
condition|(
name|binding
operator|.
name|getExtensors
argument_list|(
name|ExtensibilityElement
operator|.
name|class
argument_list|)
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
for|for
control|(
name|ExtensibilityElement
name|ext
range|:
name|binding
operator|.
name|getExtensors
argument_list|(
name|ExtensibilityElement
operator|.
name|class
argument_list|)
control|)
block|{
if|if
condition|(
name|SOAPBindingUtil
operator|.
name|isSOAPBinding
argument_list|(
name|ext
argument_list|)
condition|)
block|{
name|bindingObj
operator|=
name|SOAPBindingUtil
operator|.
name|getSoapBinding
argument_list|(
name|ext
argument_list|)
expr_stmt|;
return|return
name|BindingType
operator|.
name|SOAPBinding
return|;
block|}
if|if
condition|(
name|ext
operator|instanceof
name|HTTPBinding
condition|)
block|{
name|bindingObj
operator|=
operator|(
name|HTTPBinding
operator|)
name|ext
expr_stmt|;
return|return
name|BindingType
operator|.
name|HTTPBinding
return|;
block|}
block|}
return|return
name|BindingType
operator|.
name|XMLBinding
return|;
block|}
specifier|private
name|int
name|isNonWrappable
parameter_list|(
name|BindingOperationInfo
name|bop
parameter_list|)
block|{
name|QName
name|operationName
init|=
name|bop
operator|.
name|getName
argument_list|()
decl_stmt|;
name|MessageInfo
name|bodyMessage
init|=
literal|null
decl_stmt|;
name|QName
name|headerMessage
init|=
literal|null
decl_stmt|;
name|SoapHeader
name|header
init|=
literal|null
decl_stmt|;
name|boolean
name|containParts
init|=
literal|false
decl_stmt|;
name|boolean
name|isSameMessage
init|=
literal|false
decl_stmt|;
name|boolean
name|isNonWrappable
init|=
literal|false
decl_stmt|;
name|boolean
name|allPartsHeader
init|=
literal|false
decl_stmt|;
name|int
name|result
init|=
name|this
operator|.
name|noHEADER
decl_stmt|;
comment|// begin process input
if|if
condition|(
name|bop
operator|.
name|getInput
argument_list|()
operator|!=
literal|null
operator|&&
name|bop
operator|.
name|getInput
argument_list|()
operator|.
name|getExtensors
argument_list|(
name|ExtensibilityElement
operator|.
name|class
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|ExtensibilityElement
argument_list|>
name|extensors
init|=
name|bop
operator|.
name|getInput
argument_list|()
operator|.
name|getExtensors
argument_list|(
name|ExtensibilityElement
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|extensors
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|ExtensibilityElement
name|ext
range|:
name|extensors
control|)
block|{
if|if
condition|(
name|SOAPBindingUtil
operator|.
name|isSOAPBody
argument_list|(
name|ext
argument_list|)
condition|)
block|{
name|bodyMessage
operator|=
name|getMessage
argument_list|(
name|operationName
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|SOAPBindingUtil
operator|.
name|isSOAPHeader
argument_list|(
name|ext
argument_list|)
condition|)
block|{
name|header
operator|=
name|SOAPBindingUtil
operator|.
name|getSoapHeader
argument_list|(
name|ext
argument_list|)
expr_stmt|;
name|headerMessage
operator|=
name|header
operator|.
name|getMessage
argument_list|()
expr_stmt|;
if|if
condition|(
name|header
operator|.
name|getPart
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|containParts
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|headerMessage
operator|!=
literal|null
operator|&&
name|bodyMessage
operator|!=
literal|null
operator|&&
name|headerMessage
operator|.
name|getNamespaceURI
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|bodyMessage
operator|.
name|getName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
operator|&&
name|headerMessage
operator|.
name|getLocalPart
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|bodyMessage
operator|.
name|getName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
condition|)
block|{
name|isSameMessage
operator|=
literal|true
expr_stmt|;
block|}
name|isNonWrappable
operator|=
name|isSameMessage
operator|&&
name|containParts
expr_stmt|;
comment|// if is nonwrapple then return
if|if
condition|(
name|isNonWrappable
condition|)
block|{
name|result
operator|=
name|this
operator|.
name|inHEADER
expr_stmt|;
block|}
block|}
name|isSameMessage
operator|=
literal|false
expr_stmt|;
name|containParts
operator|=
literal|false
expr_stmt|;
comment|// process output
if|if
condition|(
name|bop
operator|.
name|getOutput
argument_list|()
operator|!=
literal|null
operator|&&
name|bop
operator|.
name|getOutput
argument_list|()
operator|.
name|getExtensors
argument_list|(
name|ExtensibilityElement
operator|.
name|class
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|ExtensibilityElement
argument_list|>
name|extensors
init|=
name|bop
operator|.
name|getOutput
argument_list|()
operator|.
name|getExtensors
argument_list|(
name|ExtensibilityElement
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|extensors
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|ExtensibilityElement
name|ext
range|:
name|extensors
control|)
block|{
if|if
condition|(
name|SOAPBindingUtil
operator|.
name|isSOAPBody
argument_list|(
name|ext
argument_list|)
condition|)
block|{
name|bodyMessage
operator|=
name|getMessage
argument_list|(
name|operationName
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|SOAPBindingUtil
operator|.
name|isSOAPHeader
argument_list|(
name|ext
argument_list|)
condition|)
block|{
name|header
operator|=
name|SOAPBindingUtil
operator|.
name|getSoapHeader
argument_list|(
name|ext
argument_list|)
expr_stmt|;
name|headerMessage
operator|=
name|header
operator|.
name|getMessage
argument_list|()
expr_stmt|;
if|if
condition|(
name|header
operator|.
name|getPart
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|containParts
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|headerMessage
operator|!=
literal|null
operator|&&
name|bodyMessage
operator|!=
literal|null
operator|&&
name|headerMessage
operator|.
name|getNamespaceURI
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|bodyMessage
operator|.
name|getName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
operator|&&
name|headerMessage
operator|.
name|getLocalPart
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|bodyMessage
operator|.
name|getName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
condition|)
block|{
name|isSameMessage
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|bodyMessage
operator|.
name|getMessageParts
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|allPartsHeader
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|isNonWrappable
operator|=
name|isSameMessage
operator|&&
name|containParts
expr_stmt|;
if|if
condition|(
name|isNonWrappable
operator|&&
name|allPartsHeader
condition|)
block|{
name|result
operator|=
name|this
operator|.
name|resultHeader
expr_stmt|;
block|}
if|if
condition|(
name|isNonWrappable
operator|&&
operator|!
name|allPartsHeader
condition|)
block|{
name|result
operator|=
name|this
operator|.
name|outHEADER
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
specifier|private
name|MessageInfo
name|getMessage
parameter_list|(
name|QName
name|operationName
parameter_list|,
name|boolean
name|isIn
parameter_list|)
block|{
for|for
control|(
name|OperationInfo
name|operation
range|:
name|service
operator|.
name|getInterface
argument_list|()
operator|.
name|getOperations
argument_list|()
control|)
block|{
if|if
condition|(
name|operationName
operator|.
name|equals
argument_list|(
name|operation
operator|.
name|getName
argument_list|()
argument_list|)
operator|&&
name|isIn
condition|)
block|{
return|return
name|operation
operator|.
name|getInput
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|operation
operator|.
name|getOutput
argument_list|()
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|public
enum|enum
name|BindingType
block|{
name|HTTPBinding
block|,
name|SOAPBinding
block|,
name|XMLBinding
block|}
specifier|private
name|boolean
name|isSoapBinding
parameter_list|()
block|{
return|return
name|bindingType
operator|!=
literal|null
operator|&&
literal|"SOAPBinding"
operator|.
name|equals
argument_list|(
name|bindingType
operator|.
name|name
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

