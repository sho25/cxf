begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|wsdlto
operator|.
name|frontend
operator|.
name|jaxws
operator|.
name|processor
operator|.
name|internal
operator|.
name|mapper
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|OperationType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|MessageInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|OperationInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|common
operator|.
name|model
operator|.
name|JavaMethod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
specifier|public
class|class
name|MethodMapperTest
block|{
specifier|private
name|OperationInfo
name|getOperation
parameter_list|()
block|{
name|OperationInfo
name|operation
init|=
operator|new
name|OperationInfo
argument_list|()
decl_stmt|;
name|operation
operator|.
name|setName
argument_list|(
operator|new
name|QName
argument_list|(
literal|"urn:test:ns"
argument_list|,
literal|"OperationTest"
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|operation
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMap
parameter_list|()
throws|throws
name|Exception
block|{
name|JavaMethod
name|method
init|=
operator|new
name|MethodMapper
argument_list|()
operator|.
name|map
argument_list|(
name|getOperation
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|method
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|javax
operator|.
name|jws
operator|.
name|soap
operator|.
name|SOAPBinding
operator|.
name|Style
operator|.
name|DOCUMENT
argument_list|,
name|method
operator|.
name|getSoapStyle
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"operationTest"
argument_list|,
name|method
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"OperationTest"
argument_list|,
name|method
operator|.
name|getOperationName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|OperationType
operator|.
name|REQUEST_RESPONSE
argument_list|,
name|method
operator|.
name|getStyle
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|method
operator|.
name|isWrapperStyle
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|method
operator|.
name|isOneWay
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMapOneWayOperation
parameter_list|()
throws|throws
name|Exception
block|{
name|OperationInfo
name|operation
init|=
name|getOperation
argument_list|()
decl_stmt|;
name|MessageInfo
name|inputMessage
init|=
name|operation
operator|.
name|createMessage
argument_list|(
operator|new
name|QName
argument_list|(
literal|"urn:test:ns"
argument_list|,
literal|"testInputMessage"
argument_list|)
argument_list|,
name|MessageInfo
operator|.
name|Type
operator|.
name|INPUT
argument_list|)
decl_stmt|;
name|operation
operator|.
name|setInput
argument_list|(
literal|"input"
argument_list|,
name|inputMessage
argument_list|)
expr_stmt|;
name|JavaMethod
name|method
init|=
operator|new
name|MethodMapper
argument_list|()
operator|.
name|map
argument_list|(
name|operation
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|method
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|method
operator|.
name|isOneWay
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMapWrappedOperation
parameter_list|()
throws|throws
name|Exception
block|{
name|OperationInfo
name|operation
init|=
name|getOperation
argument_list|()
decl_stmt|;
name|operation
operator|.
name|setUnwrappedOperation
argument_list|(
name|operation
argument_list|)
expr_stmt|;
name|JavaMethod
name|method
init|=
operator|new
name|MethodMapper
argument_list|()
operator|.
name|map
argument_list|(
name|operation
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|method
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|method
operator|.
name|isWrapperStyle
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

