begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|wsdlto
operator|.
name|frontend
operator|.
name|jaxws
operator|.
name|processor
operator|.
name|internal
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|common
operator|.
name|ToolContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|common
operator|.
name|model
operator|.
name|JavaMethod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|common
operator|.
name|model
operator|.
name|JavaParameter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|common
operator|.
name|model
operator|.
name|JavaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|ParameterProcessorTest
extends|extends
name|Assert
block|{
annotation|@
name|Test
specifier|public
name|void
name|testAddParameter
parameter_list|()
throws|throws
name|Exception
block|{
name|ParameterProcessor
name|processor
init|=
operator|new
name|ParameterProcessor
argument_list|(
operator|new
name|ToolContext
argument_list|()
argument_list|)
decl_stmt|;
name|JavaMethod
name|method
init|=
operator|new
name|JavaMethod
argument_list|()
decl_stmt|;
name|JavaParameter
name|p1
init|=
operator|new
name|JavaParameter
argument_list|(
literal|"request"
argument_list|,
name|String
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|p1
operator|.
name|setStyle
argument_list|(
name|JavaType
operator|.
name|Style
operator|.
name|IN
argument_list|)
expr_stmt|;
name|processor
operator|.
name|addParameter
argument_list|(
name|method
argument_list|,
name|p1
argument_list|)
expr_stmt|;
name|JavaParameter
name|p2
init|=
operator|new
name|JavaParameter
argument_list|(
literal|"request"
argument_list|,
name|String
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|p2
operator|.
name|setStyle
argument_list|(
name|JavaType
operator|.
name|Style
operator|.
name|OUT
argument_list|)
expr_stmt|;
name|processor
operator|.
name|addParameter
argument_list|(
name|method
argument_list|,
name|p2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|method
operator|.
name|getParameters
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|JavaType
operator|.
name|Style
operator|.
name|INOUT
argument_list|,
name|method
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getStyle
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

