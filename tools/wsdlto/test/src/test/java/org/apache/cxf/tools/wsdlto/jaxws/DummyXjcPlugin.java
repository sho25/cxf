begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|wsdlto
operator|.
name|jaxws
package|;
end_package

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ErrorHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|codemodel
operator|.
name|JCodeModel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|codemodel
operator|.
name|JDefinedClass
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|codemodel
operator|.
name|JExpr
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|codemodel
operator|.
name|JMethod
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|codemodel
operator|.
name|JMod
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|tools
operator|.
name|xjc
operator|.
name|BadCommandLineException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|tools
operator|.
name|xjc
operator|.
name|Options
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|tools
operator|.
name|xjc
operator|.
name|Plugin
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|tools
operator|.
name|xjc
operator|.
name|outline
operator|.
name|ClassOutline
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|tools
operator|.
name|xjc
operator|.
name|outline
operator|.
name|Outline
import|;
end_import

begin_class
specifier|public
class|class
name|DummyXjcPlugin
extends|extends
name|Plugin
block|{
specifier|static
specifier|final
name|String
name|XDUMMY_XJC_PLUGIN
init|=
literal|"Xdummy-xjc-plugin"
decl_stmt|;
specifier|static
specifier|final
name|String
name|DUMMY_ARG
init|=
literal|"-"
operator|+
name|XDUMMY_XJC_PLUGIN
operator|+
literal|":"
operator|+
literal|"arg"
decl_stmt|;
annotation|@
name|Override
specifier|public
name|String
name|getOptionName
parameter_list|()
block|{
return|return
name|XDUMMY_XJC_PLUGIN
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getUsage
parameter_list|()
block|{
return|return
name|DUMMY_ARG
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|run
parameter_list|(
name|Outline
name|arg0
parameter_list|,
name|Options
name|arg1
parameter_list|,
name|ErrorHandler
name|arg2
parameter_list|)
block|{
for|for
control|(
name|ClassOutline
name|classOutline
range|:
name|arg0
operator|.
name|getClasses
argument_list|()
control|)
block|{
name|JDefinedClass
name|implClass
init|=
name|classOutline
operator|.
name|implClass
decl_stmt|;
name|JCodeModel
name|codeModel
init|=
name|implClass
operator|.
name|owner
argument_list|()
decl_stmt|;
name|JMethod
name|dummyMethod
init|=
name|implClass
operator|.
name|method
argument_list|(
name|JMod
operator|.
name|PUBLIC
argument_list|,
name|codeModel
operator|.
name|ref
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|,
literal|"dummy"
argument_list|)
decl_stmt|;
name|dummyMethod
operator|.
name|body
argument_list|()
operator|.
name|_return
argument_list|(
name|JExpr
operator|.
name|lit
argument_list|(
literal|"dummy"
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|parseArgument
parameter_list|(
name|Options
name|opt
parameter_list|,
name|String
index|[]
name|args
parameter_list|,
name|int
name|i
parameter_list|)
throws|throws
name|BadCommandLineException
block|{
name|int
name|ret
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|args
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
name|DUMMY_ARG
argument_list|)
condition|)
block|{
name|ret
operator|=
literal|1
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
block|}
end_class

end_unit

