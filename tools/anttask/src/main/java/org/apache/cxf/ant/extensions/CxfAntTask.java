begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ant
operator|.
name|extensions
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tools
operator|.
name|ant
operator|.
name|Task
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tools
operator|.
name|ant
operator|.
name|types
operator|.
name|Commandline
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tools
operator|.
name|ant
operator|.
name|types
operator|.
name|CommandlineJava
import|;
end_import

begin_class
specifier|public
class|class
name|CxfAntTask
extends|extends
name|Task
block|{
specifier|protected
name|boolean
name|verbose
decl_stmt|;
specifier|protected
name|CommandlineJava
name|cmd
init|=
operator|new
name|CommandlineJava
argument_list|()
decl_stmt|;
specifier|protected
name|File
name|classesDir
decl_stmt|;
specifier|protected
name|File
name|sourcesDir
decl_stmt|;
specifier|public
name|void
name|setFork
parameter_list|(
name|boolean
name|b
parameter_list|)
block|{
comment|//we always fork, but the silly TCK requires this param for some reason
block|}
specifier|public
name|void
name|setKeep
parameter_list|(
name|boolean
name|b
parameter_list|)
block|{
comment|//we always "keep", but TCK requires this flag
block|}
specifier|public
name|void
name|setDebug
parameter_list|(
name|boolean
name|b
parameter_list|)
block|{
comment|// TCK requires this flag
block|}
specifier|public
name|void
name|setVerbose
parameter_list|(
name|boolean
name|b
parameter_list|)
block|{
name|verbose
operator|=
name|b
expr_stmt|;
block|}
specifier|public
name|Commandline
operator|.
name|Argument
name|createJvmarg
parameter_list|()
block|{
return|return
name|cmd
operator|.
name|createVmArgument
argument_list|()
return|;
block|}
specifier|public
name|void
name|setSourceDestDir
parameter_list|(
name|File
name|f
parameter_list|)
block|{
name|sourcesDir
operator|=
name|f
expr_stmt|;
block|}
specifier|public
name|void
name|setDestdir
parameter_list|(
name|File
name|c
parameter_list|)
block|{
name|classesDir
operator|=
name|c
expr_stmt|;
block|}
block|}
end_class

end_unit

