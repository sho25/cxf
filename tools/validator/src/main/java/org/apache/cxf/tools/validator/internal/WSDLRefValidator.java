begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|validator
operator|.
name|internal
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|Binding
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|BindingOperation
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|Definition
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|Fault
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|Operation
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|Part
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|Port
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|PortType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|WSDLException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|Location
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|xpath
operator|.
name|XPathConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|Bus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|xmlschema
operator|.
name|SchemaCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|XPathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|common
operator|.
name|ToolException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|validator
operator|.
name|internal
operator|.
name|model
operator|.
name|FailureLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|validator
operator|.
name|internal
operator|.
name|model
operator|.
name|XBinding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|validator
operator|.
name|internal
operator|.
name|model
operator|.
name|XDef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|validator
operator|.
name|internal
operator|.
name|model
operator|.
name|XFault
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|validator
operator|.
name|internal
operator|.
name|model
operator|.
name|XInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|validator
operator|.
name|internal
operator|.
name|model
operator|.
name|XMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|validator
operator|.
name|internal
operator|.
name|model
operator|.
name|XNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|validator
operator|.
name|internal
operator|.
name|model
operator|.
name|XOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|validator
operator|.
name|internal
operator|.
name|model
operator|.
name|XOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|validator
operator|.
name|internal
operator|.
name|model
operator|.
name|XPort
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|validator
operator|.
name|internal
operator|.
name|model
operator|.
name|XPortType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|validator
operator|.
name|internal
operator|.
name|model
operator|.
name|XService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|wsdl
operator|.
name|WSDLConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|wsdl11
operator|.
name|WSDLDefinitionBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaElement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaType
import|;
end_import

begin_class
specifier|public
class|class
name|WSDLRefValidator
extends|extends
name|AbstractDefinitionValidator
block|{
specifier|protected
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|WSDLRefValidator
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
name|List
argument_list|<
name|XNode
argument_list|>
name|vNodes
init|=
operator|new
name|ArrayList
argument_list|<
name|XNode
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|QName
argument_list|>
name|portTypeRefNames
init|=
operator|new
name|HashSet
argument_list|<
name|QName
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|QName
argument_list|>
name|messageRefNames
init|=
operator|new
name|HashSet
argument_list|<
name|QName
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|QName
argument_list|,
name|Service
argument_list|>
name|services
init|=
operator|new
name|HashMap
argument_list|<
name|QName
argument_list|,
name|Service
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|ValidationResult
name|vResults
init|=
operator|new
name|ValidationResult
argument_list|()
decl_stmt|;
specifier|private
name|Definition
name|definition
decl_stmt|;
specifier|private
name|List
argument_list|<
name|Definition
argument_list|>
name|importedDefinitions
decl_stmt|;
specifier|private
name|List
argument_list|<
name|SchemaCollection
argument_list|>
name|schemas
init|=
operator|new
name|ArrayList
argument_list|<
name|SchemaCollection
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|SchemaCollection
name|schemaCollection
init|=
operator|new
name|SchemaCollection
argument_list|()
decl_stmt|;
specifier|private
name|boolean
name|suppressWarnings
decl_stmt|;
specifier|public
name|WSDLRefValidator
parameter_list|()
block|{     }
specifier|public
name|WSDLRefValidator
parameter_list|(
specifier|final
name|String
name|wsdl
parameter_list|)
block|{
name|this
argument_list|(
name|wsdl
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|WSDLRefValidator
parameter_list|(
specifier|final
name|String
name|wsdl
parameter_list|,
specifier|final
name|Document
name|doc
parameter_list|)
block|{
name|this
argument_list|(
name|wsdl
argument_list|,
name|doc
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|WSDLRefValidator
parameter_list|(
specifier|final
name|String
name|wsdl
parameter_list|,
specifier|final
name|Document
name|doc
parameter_list|,
specifier|final
name|Bus
name|b
parameter_list|)
block|{
name|WSDLDefinitionBuilder
name|wsdlBuilder
init|=
operator|new
name|WSDLDefinitionBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|b
operator|!=
literal|null
condition|)
block|{
name|wsdlBuilder
operator|.
name|setBus
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|this
operator|.
name|definition
operator|=
name|wsdlBuilder
operator|.
name|build
argument_list|(
name|wsdl
argument_list|)
expr_stmt|;
if|if
condition|(
name|wsdlBuilder
operator|.
name|getImportedDefinitions
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|importedDefinitions
operator|=
operator|new
name|ArrayList
argument_list|<
name|Definition
argument_list|>
argument_list|()
expr_stmt|;
name|importedDefinitions
operator|.
name|addAll
argument_list|(
name|wsdlBuilder
operator|.
name|getImportedDefinitions
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|WSDLException
condition|)
block|{
throw|throw
operator|new
name|ToolException
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
throw|throw
operator|new
name|ToolException
argument_list|(
name|e
argument_list|)
throw|;
block|}
try|try
block|{
name|schemas
operator|.
name|add
argument_list|(
name|ValidatorUtil
operator|.
name|getSchema
argument_list|(
name|this
operator|.
name|definition
argument_list|)
argument_list|)
expr_stmt|;
name|checkTargetNamespace
argument_list|(
name|this
operator|.
name|definition
operator|.
name|getTargetNamespace
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|importedDefinitions
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Definition
name|d
range|:
name|importedDefinitions
control|)
block|{
name|checkTargetNamespace
argument_list|(
name|d
operator|.
name|getTargetNamespace
argument_list|()
argument_list|)
expr_stmt|;
name|schemas
operator|.
name|add
argument_list|(
name|ValidatorUtil
operator|.
name|getSchema
argument_list|(
name|d
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|ToolException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|checkTargetNamespace
parameter_list|(
name|String
name|path
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
operator|new
name|URL
argument_list|(
name|path
argument_list|)
operator|.
name|getPath
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|":"
argument_list|)
operator|!=
operator|-
literal|1
condition|)
block|{
throw|throw
operator|new
name|ToolException
argument_list|(
literal|": is not a valid char in the targetNamespace"
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|e
parameter_list|)
block|{
comment|// do nothing
block|}
block|}
specifier|public
name|void
name|setSuppressWarnings
parameter_list|(
name|boolean
name|s
parameter_list|)
block|{
name|this
operator|.
name|suppressWarnings
operator|=
name|s
expr_stmt|;
block|}
specifier|public
name|ValidationResult
name|getValidationResults
parameter_list|()
block|{
return|return
name|this
operator|.
name|vResults
return|;
block|}
specifier|private
name|Document
name|getWSDLDocument
parameter_list|(
specifier|final
name|String
name|wsdl
parameter_list|)
throws|throws
name|URISyntaxException
block|{
return|return
operator|new
name|Stax2DOM
argument_list|()
operator|.
name|getDocument
argument_list|(
name|wsdl
argument_list|)
return|;
block|}
specifier|private
name|Document
name|getWSDLDocument
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|getWSDLDocument
argument_list|(
name|this
operator|.
name|definition
operator|.
name|getDocumentBaseURI
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|List
argument_list|<
name|Document
argument_list|>
name|getWSDLDocuments
parameter_list|()
block|{
name|List
argument_list|<
name|Document
argument_list|>
name|docs
init|=
operator|new
name|ArrayList
argument_list|<
name|Document
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
name|docs
operator|.
name|add
argument_list|(
name|getWSDLDocument
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
literal|null
operator|!=
name|importedDefinitions
condition|)
block|{
for|for
control|(
name|Definition
name|d
range|:
name|importedDefinitions
control|)
block|{
name|docs
operator|.
name|add
argument_list|(
name|getWSDLDocument
argument_list|(
name|d
operator|.
name|getDocumentBaseURI
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
comment|// ignore
block|}
return|return
name|docs
return|;
block|}
specifier|private
name|boolean
name|isExist
parameter_list|(
name|List
argument_list|<
name|Document
argument_list|>
name|docs
parameter_list|,
name|XNode
name|vNode
parameter_list|)
block|{
name|XPathUtils
name|xpather
init|=
operator|new
name|XPathUtils
argument_list|(
name|vNode
operator|.
name|getNSMap
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|expression
init|=
name|vNode
operator|.
name|toString
argument_list|()
decl_stmt|;
for|for
control|(
name|Document
name|doc
range|:
name|docs
control|)
block|{
if|if
condition|(
name|xpather
operator|.
name|isExist
argument_list|(
name|expression
argument_list|,
name|doc
argument_list|,
name|XPathConstants
operator|.
name|NODE
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|FailureLocation
name|getFailureLocation
parameter_list|(
name|List
argument_list|<
name|Document
argument_list|>
name|docs
parameter_list|,
name|XNode
name|fNode
parameter_list|)
block|{
if|if
condition|(
name|fNode
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|XPathUtils
name|xpather
init|=
operator|new
name|XPathUtils
argument_list|(
name|fNode
operator|.
name|getNSMap
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Document
name|doc
range|:
name|docs
control|)
block|{
name|Node
name|node
init|=
operator|(
name|Node
operator|)
name|xpather
operator|.
name|getValue
argument_list|(
name|fNode
operator|.
name|toString
argument_list|()
argument_list|,
name|doc
argument_list|,
name|XPathConstants
operator|.
name|NODE
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|node
condition|)
block|{
return|return
operator|new
name|FailureLocation
argument_list|(
operator|(
name|Location
operator|)
name|node
operator|.
name|getUserData
argument_list|(
name|WSDLConstants
operator|.
name|NODE_LOCATION
argument_list|)
argument_list|,
name|doc
operator|.
name|getDocumentURI
argument_list|()
argument_list|)
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|boolean
name|isValid
parameter_list|()
block|{
try|try
block|{
name|loadServices
argument_list|()
expr_stmt|;
name|collectValidationPoints
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|Document
argument_list|>
name|wsdlDocs
init|=
name|getWSDLDocuments
argument_list|()
decl_stmt|;
for|for
control|(
name|XNode
name|vNode
range|:
name|vNodes
control|)
block|{
if|if
condition|(
operator|!
name|isExist
argument_list|(
name|wsdlDocs
argument_list|,
name|vNode
argument_list|)
condition|)
block|{
name|FailureLocation
name|loc
init|=
name|getFailureLocation
argument_list|(
name|wsdlDocs
argument_list|,
name|vNode
operator|.
name|getFailurePoint
argument_list|()
argument_list|)
decl_stmt|;
name|vResults
operator|.
name|addError
argument_list|(
operator|new
name|Message
argument_list|(
literal|"FAILED_AT_POINT"
argument_list|,
name|LOG
argument_list|,
name|loc
operator|.
name|getLocation
argument_list|()
operator|.
name|getLineNumber
argument_list|()
argument_list|,
name|loc
operator|.
name|getLocation
argument_list|()
operator|.
name|getColumnNumber
argument_list|()
argument_list|,
name|loc
operator|.
name|getDocumentURI
argument_list|()
argument_list|,
name|vNode
operator|.
name|getPlainText
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|ToolException
name|e
parameter_list|)
block|{
name|this
operator|.
name|vResults
operator|.
name|addError
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
name|vResults
operator|.
name|isSuccessful
argument_list|()
return|;
block|}
specifier|private
name|void
name|addServices
parameter_list|(
specifier|final
name|Definition
name|wsdlDef
parameter_list|)
block|{
name|Iterator
name|sNames
init|=
name|wsdlDef
operator|.
name|getServices
argument_list|()
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|sNames
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|QName
name|sName
init|=
operator|(
name|QName
operator|)
name|sNames
operator|.
name|next
argument_list|()
decl_stmt|;
name|services
operator|.
name|put
argument_list|(
name|sName
argument_list|,
name|definition
operator|.
name|getService
argument_list|(
name|sName
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|loadServices
parameter_list|()
block|{
name|addServices
argument_list|(
name|this
operator|.
name|definition
argument_list|)
expr_stmt|;
if|if
condition|(
name|importedDefinitions
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Definition
name|d
range|:
name|importedDefinitions
control|)
block|{
name|addServices
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|Map
argument_list|<
name|QName
argument_list|,
name|XNode
argument_list|>
name|getBindings
parameter_list|(
name|Service
name|service
parameter_list|)
block|{
name|Map
argument_list|<
name|QName
argument_list|,
name|XNode
argument_list|>
name|bindings
init|=
operator|new
name|HashMap
argument_list|<
name|QName
argument_list|,
name|XNode
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|service
operator|.
name|getPorts
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|ToolException
argument_list|(
literal|"Service "
operator|+
name|service
operator|.
name|getQName
argument_list|()
operator|+
literal|" does not contain any usable ports"
argument_list|)
throw|;
block|}
name|Iterator
name|portIte
init|=
name|service
operator|.
name|getPorts
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|portIte
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Port
name|port
init|=
operator|(
name|Port
operator|)
name|portIte
operator|.
name|next
argument_list|()
decl_stmt|;
name|Binding
name|binding
init|=
name|port
operator|.
name|getBinding
argument_list|()
decl_stmt|;
name|bindings
operator|.
name|put
argument_list|(
name|binding
operator|.
name|getQName
argument_list|()
argument_list|,
name|getXNode
argument_list|(
name|service
argument_list|,
name|port
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|WSDLConstants
operator|.
name|NS_WSDL11
operator|.
name|equals
argument_list|(
name|binding
operator|.
name|getQName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ToolException
argument_list|(
literal|"Binding "
operator|+
name|binding
operator|.
name|getQName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
operator|+
literal|" namespace set improperly."
argument_list|)
throw|;
block|}
block|}
return|return
name|bindings
return|;
block|}
specifier|private
name|Map
argument_list|<
name|QName
argument_list|,
name|Operation
argument_list|>
name|getOperations
parameter_list|(
name|PortType
name|portType
parameter_list|)
block|{
name|Map
argument_list|<
name|QName
argument_list|,
name|Operation
argument_list|>
name|operations
init|=
operator|new
name|HashMap
argument_list|<
name|QName
argument_list|,
name|Operation
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|iter
init|=
name|portType
operator|.
name|getOperations
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Operation
name|op
init|=
operator|(
name|Operation
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|operations
operator|.
name|put
argument_list|(
operator|new
name|QName
argument_list|(
name|portType
operator|.
name|getQName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
name|op
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|op
argument_list|)
expr_stmt|;
block|}
return|return
name|operations
return|;
block|}
specifier|private
name|XNode
name|getXNode
parameter_list|(
name|Service
name|service
parameter_list|,
name|Port
name|port
parameter_list|)
block|{
name|XNode
name|vService
init|=
name|getXNode
argument_list|(
name|service
argument_list|)
decl_stmt|;
name|XPort
name|pNode
init|=
operator|new
name|XPort
argument_list|()
decl_stmt|;
name|pNode
operator|.
name|setName
argument_list|(
name|port
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|pNode
operator|.
name|setParentNode
argument_list|(
name|vService
argument_list|)
expr_stmt|;
return|return
name|pNode
return|;
block|}
specifier|private
name|XNode
name|getXNode
parameter_list|(
name|Service
name|service
parameter_list|)
block|{
name|XDef
name|xdef
init|=
operator|new
name|XDef
argument_list|()
decl_stmt|;
name|xdef
operator|.
name|setTargetNamespace
argument_list|(
name|service
operator|.
name|getQName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
expr_stmt|;
name|XService
name|sNode
init|=
operator|new
name|XService
argument_list|()
decl_stmt|;
name|sNode
operator|.
name|setName
argument_list|(
name|service
operator|.
name|getQName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
name|sNode
operator|.
name|setParentNode
argument_list|(
name|xdef
argument_list|)
expr_stmt|;
return|return
name|sNode
return|;
block|}
specifier|private
name|XNode
name|getXNode
parameter_list|(
name|Binding
name|binding
parameter_list|)
block|{
name|XDef
name|xdef
init|=
operator|new
name|XDef
argument_list|()
decl_stmt|;
name|xdef
operator|.
name|setTargetNamespace
argument_list|(
name|binding
operator|.
name|getQName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
expr_stmt|;
name|XBinding
name|bNode
init|=
operator|new
name|XBinding
argument_list|()
decl_stmt|;
name|bNode
operator|.
name|setName
argument_list|(
name|binding
operator|.
name|getQName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
name|bNode
operator|.
name|setParentNode
argument_list|(
name|xdef
argument_list|)
expr_stmt|;
return|return
name|bNode
return|;
block|}
specifier|private
name|XNode
name|getXNode
parameter_list|(
name|PortType
name|portType
parameter_list|)
block|{
name|XDef
name|xdef
init|=
operator|new
name|XDef
argument_list|()
decl_stmt|;
name|xdef
operator|.
name|setTargetNamespace
argument_list|(
name|portType
operator|.
name|getQName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
expr_stmt|;
name|XPortType
name|pNode
init|=
operator|new
name|XPortType
argument_list|()
decl_stmt|;
name|pNode
operator|.
name|setName
argument_list|(
name|portType
operator|.
name|getQName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
name|pNode
operator|.
name|setParentNode
argument_list|(
name|xdef
argument_list|)
expr_stmt|;
return|return
name|pNode
return|;
block|}
specifier|private
name|XNode
name|getOperationXNode
parameter_list|(
name|XNode
name|pNode
parameter_list|,
name|String
name|opName
parameter_list|)
block|{
name|XOperation
name|node
init|=
operator|new
name|XOperation
argument_list|()
decl_stmt|;
name|node
operator|.
name|setName
argument_list|(
name|opName
argument_list|)
expr_stmt|;
name|node
operator|.
name|setParentNode
argument_list|(
name|pNode
argument_list|)
expr_stmt|;
return|return
name|node
return|;
block|}
specifier|private
name|XNode
name|getInputXNode
parameter_list|(
name|XNode
name|opVNode
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|XInput
name|oNode
init|=
operator|new
name|XInput
argument_list|()
decl_stmt|;
name|oNode
operator|.
name|setName
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|oNode
operator|.
name|setParentNode
argument_list|(
name|opVNode
argument_list|)
expr_stmt|;
if|if
condition|(
name|name
operator|!=
literal|null
operator|&&
name|name
operator|.
name|equals
argument_list|(
name|opVNode
operator|.
name|getAttributeValue
argument_list|()
operator|+
literal|"Request"
argument_list|)
condition|)
block|{
name|oNode
operator|.
name|setDefaultAttributeValue
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
return|return
name|oNode
return|;
block|}
specifier|private
name|XNode
name|getOutputXNode
parameter_list|(
name|XNode
name|opVNode
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|XOutput
name|oNode
init|=
operator|new
name|XOutput
argument_list|()
decl_stmt|;
name|oNode
operator|.
name|setName
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|oNode
operator|.
name|setParentNode
argument_list|(
name|opVNode
argument_list|)
expr_stmt|;
if|if
condition|(
name|name
operator|!=
literal|null
operator|&&
name|name
operator|.
name|equals
argument_list|(
name|opVNode
operator|.
name|getAttributeValue
argument_list|()
operator|+
literal|"Response"
argument_list|)
condition|)
block|{
name|oNode
operator|.
name|setDefaultAttributeValue
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
return|return
name|oNode
return|;
block|}
specifier|private
name|XNode
name|getFaultXNode
parameter_list|(
name|XNode
name|opVNode
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|XFault
name|oNode
init|=
operator|new
name|XFault
argument_list|()
decl_stmt|;
name|oNode
operator|.
name|setName
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|oNode
operator|.
name|setParentNode
argument_list|(
name|opVNode
argument_list|)
expr_stmt|;
return|return
name|oNode
return|;
block|}
specifier|private
name|XNode
name|getXNode
parameter_list|(
name|javax
operator|.
name|wsdl
operator|.
name|Message
name|msg
parameter_list|)
block|{
name|XDef
name|xdef
init|=
operator|new
name|XDef
argument_list|()
decl_stmt|;
name|xdef
operator|.
name|setTargetNamespace
argument_list|(
name|msg
operator|.
name|getQName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
expr_stmt|;
name|XMessage
name|mNode
init|=
operator|new
name|XMessage
argument_list|()
decl_stmt|;
name|mNode
operator|.
name|setName
argument_list|(
name|msg
operator|.
name|getQName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
name|mNode
operator|.
name|setParentNode
argument_list|(
name|xdef
argument_list|)
expr_stmt|;
return|return
name|mNode
return|;
block|}
specifier|private
name|void
name|addWarning
parameter_list|(
name|String
name|warningMsg
parameter_list|)
block|{
if|if
condition|(
name|suppressWarnings
condition|)
block|{
return|return;
block|}
name|vResults
operator|.
name|addWarning
argument_list|(
name|warningMsg
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
name|void
name|collectValidationPoints
parameter_list|()
block|{
if|if
condition|(
name|services
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
literal|"WSDL document "
operator|+
name|this
operator|.
name|definition
operator|.
name|getDocumentBaseURI
argument_list|()
operator|+
literal|" does not define any services"
argument_list|)
expr_stmt|;
comment|//addWarning("WSDL document does not define any services");
name|portTypeRefNames
operator|.
name|addAll
argument_list|(
name|this
operator|.
name|definition
operator|.
name|getAllPortTypes
argument_list|()
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|collectValidationPointsForBindings
argument_list|()
expr_stmt|;
block|}
name|collectValidationPointsForPortTypes
argument_list|()
expr_stmt|;
name|collectValidationPointsForMessages
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|collectValidationPointsForBindings
parameter_list|()
block|{
name|Map
argument_list|<
name|QName
argument_list|,
name|XNode
argument_list|>
name|vBindingNodes
init|=
operator|new
name|HashMap
argument_list|<
name|QName
argument_list|,
name|XNode
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Service
name|service
range|:
name|services
operator|.
name|values
argument_list|()
control|)
block|{
name|vBindingNodes
operator|.
name|putAll
argument_list|(
name|getBindings
argument_list|(
name|service
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|QName
name|bName
range|:
name|vBindingNodes
operator|.
name|keySet
argument_list|()
control|)
block|{
name|Binding
name|binding
init|=
name|this
operator|.
name|definition
operator|.
name|getBinding
argument_list|(
name|bName
argument_list|)
decl_stmt|;
name|XNode
name|vBindingNode
init|=
name|getXNode
argument_list|(
name|binding
argument_list|)
decl_stmt|;
name|vBindingNode
operator|.
name|setFailurePoint
argument_list|(
name|vBindingNodes
operator|.
name|get
argument_list|(
name|bName
argument_list|)
argument_list|)
expr_stmt|;
name|vNodes
operator|.
name|add
argument_list|(
name|vBindingNode
argument_list|)
expr_stmt|;
if|if
condition|(
name|binding
operator|.
name|getPortType
argument_list|()
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|portTypeRefNames
operator|.
name|add
argument_list|(
name|binding
operator|.
name|getPortType
argument_list|()
operator|.
name|getQName
argument_list|()
argument_list|)
expr_stmt|;
name|XNode
name|vPortTypeNode
init|=
name|getXNode
argument_list|(
name|binding
operator|.
name|getPortType
argument_list|()
argument_list|)
decl_stmt|;
name|vPortTypeNode
operator|.
name|setFailurePoint
argument_list|(
name|vBindingNode
argument_list|)
expr_stmt|;
name|vNodes
operator|.
name|add
argument_list|(
name|vPortTypeNode
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|iter
init|=
name|binding
operator|.
name|getBindingOperations
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|BindingOperation
name|bop
init|=
operator|(
name|BindingOperation
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|XNode
name|vOpNode
init|=
name|getOperationXNode
argument_list|(
name|vPortTypeNode
argument_list|,
name|bop
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|XNode
name|vBopNode
init|=
name|getOperationXNode
argument_list|(
name|vBindingNode
argument_list|,
name|bop
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|vOpNode
operator|.
name|setFailurePoint
argument_list|(
name|vBopNode
argument_list|)
expr_stmt|;
name|vNodes
operator|.
name|add
argument_list|(
name|vOpNode
argument_list|)
expr_stmt|;
if|if
condition|(
name|bop
operator|.
name|getBindingInput
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|String
name|inName
init|=
name|bop
operator|.
name|getBindingInput
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|inName
argument_list|)
condition|)
block|{
name|XNode
name|vInputNode
init|=
name|getInputXNode
argument_list|(
name|vOpNode
argument_list|,
name|inName
argument_list|)
decl_stmt|;
name|vInputNode
operator|.
name|setFailurePoint
argument_list|(
name|getInputXNode
argument_list|(
name|vBopNode
argument_list|,
name|inName
argument_list|)
argument_list|)
expr_stmt|;
name|vNodes
operator|.
name|add
argument_list|(
name|vInputNode
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|bop
operator|.
name|getBindingOutput
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|String
name|outName
init|=
name|bop
operator|.
name|getBindingOutput
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|outName
argument_list|)
condition|)
block|{
name|XNode
name|vOutputNode
init|=
name|getOutputXNode
argument_list|(
name|vOpNode
argument_list|,
name|outName
argument_list|)
decl_stmt|;
name|vOutputNode
operator|.
name|setFailurePoint
argument_list|(
name|getOutputXNode
argument_list|(
name|vBopNode
argument_list|,
name|outName
argument_list|)
argument_list|)
expr_stmt|;
name|vNodes
operator|.
name|add
argument_list|(
name|vOutputNode
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Iterator
name|iter1
init|=
name|bop
operator|.
name|getBindingFaults
argument_list|()
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|iter1
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|faultName
init|=
operator|(
name|String
operator|)
name|iter1
operator|.
name|next
argument_list|()
decl_stmt|;
name|XNode
name|vFaultNode
init|=
name|getFaultXNode
argument_list|(
name|vOpNode
argument_list|,
name|faultName
argument_list|)
decl_stmt|;
name|vFaultNode
operator|.
name|setFailurePoint
argument_list|(
name|getFaultXNode
argument_list|(
name|vBopNode
argument_list|,
name|faultName
argument_list|)
argument_list|)
expr_stmt|;
name|vNodes
operator|.
name|add
argument_list|(
name|vFaultNode
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|javax
operator|.
name|wsdl
operator|.
name|Message
name|getMessage
parameter_list|(
name|QName
name|msgName
parameter_list|)
block|{
name|javax
operator|.
name|wsdl
operator|.
name|Message
name|message
init|=
name|this
operator|.
name|definition
operator|.
name|getMessage
argument_list|(
name|msgName
argument_list|)
decl_stmt|;
if|if
condition|(
name|message
operator|==
literal|null
condition|)
block|{
for|for
control|(
name|Definition
name|d
range|:
name|importedDefinitions
control|)
block|{
name|message
operator|=
name|d
operator|.
name|getMessage
argument_list|(
name|msgName
argument_list|)
expr_stmt|;
if|if
condition|(
name|message
operator|!=
literal|null
condition|)
block|{
break|break;
block|}
block|}
block|}
return|return
name|message
return|;
block|}
specifier|private
name|void
name|collectValidationPointsForMessages
parameter_list|()
block|{
for|for
control|(
name|QName
name|msgName
range|:
name|messageRefNames
control|)
block|{
name|javax
operator|.
name|wsdl
operator|.
name|Message
name|message
init|=
name|getMessage
argument_list|(
name|msgName
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|iter
init|=
name|message
operator|.
name|getParts
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Part
name|part
init|=
operator|(
name|Part
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|QName
name|elementName
init|=
name|part
operator|.
name|getElementName
argument_list|()
decl_stmt|;
name|QName
name|typeName
init|=
name|part
operator|.
name|getTypeName
argument_list|()
decl_stmt|;
if|if
condition|(
name|elementName
operator|==
literal|null
operator|&&
name|typeName
operator|==
literal|null
condition|)
block|{
name|vResults
operator|.
name|addError
argument_list|(
operator|new
name|Message
argument_list|(
literal|"PART_NO_TYPES"
argument_list|,
name|LOG
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|elementName
operator|!=
literal|null
operator|&&
name|typeName
operator|!=
literal|null
condition|)
block|{
name|vResults
operator|.
name|addError
argument_list|(
operator|new
name|Message
argument_list|(
literal|"PART_NOT_UNIQUE"
argument_list|,
name|LOG
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|elementName
operator|!=
literal|null
operator|&&
name|typeName
operator|==
literal|null
condition|)
block|{
name|boolean
name|valid
init|=
name|validatePartType
argument_list|(
name|elementName
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
name|elementName
operator|.
name|getLocalPart
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|valid
condition|)
block|{
name|vResults
operator|.
name|addError
argument_list|(
operator|new
name|Message
argument_list|(
literal|"TYPE_REF_NOT_FOUND"
argument_list|,
name|LOG
argument_list|,
name|message
operator|.
name|getQName
argument_list|()
argument_list|,
name|part
operator|.
name|getName
argument_list|()
argument_list|,
name|elementName
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|typeName
operator|!=
literal|null
operator|&&
name|elementName
operator|==
literal|null
condition|)
block|{
name|boolean
name|valid
init|=
name|validatePartType
argument_list|(
name|typeName
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
name|typeName
operator|.
name|getLocalPart
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|valid
condition|)
block|{
name|vResults
operator|.
name|addError
argument_list|(
operator|new
name|Message
argument_list|(
literal|"TYPE_REF_NOT_FOUND"
argument_list|,
name|LOG
argument_list|,
name|message
operator|.
name|getQName
argument_list|()
argument_list|,
name|part
operator|.
name|getName
argument_list|()
argument_list|,
name|typeName
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
specifier|private
name|PortType
name|getPortType
parameter_list|(
name|QName
name|ptName
parameter_list|)
block|{
name|PortType
name|portType
init|=
name|this
operator|.
name|definition
operator|.
name|getPortType
argument_list|(
name|ptName
argument_list|)
decl_stmt|;
if|if
condition|(
name|portType
operator|==
literal|null
condition|)
block|{
for|for
control|(
name|Definition
name|d
range|:
name|importedDefinitions
control|)
block|{
name|portType
operator|=
name|d
operator|.
name|getPortType
argument_list|(
name|ptName
argument_list|)
expr_stmt|;
if|if
condition|(
name|portType
operator|!=
literal|null
condition|)
block|{
break|break;
block|}
block|}
block|}
return|return
name|portType
return|;
block|}
specifier|private
name|void
name|collectValidationPointsForPortTypes
parameter_list|()
block|{
for|for
control|(
name|QName
name|ptName
range|:
name|portTypeRefNames
control|)
block|{
name|PortType
name|portType
init|=
name|getPortType
argument_list|(
name|ptName
argument_list|)
decl_stmt|;
if|if
condition|(
name|portType
operator|==
literal|null
condition|)
block|{
name|vResults
operator|.
name|addError
argument_list|(
operator|new
name|Message
argument_list|(
literal|"NO_PORTTYPE"
argument_list|,
name|LOG
argument_list|,
name|ptName
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|XNode
name|vPortTypeNode
init|=
name|getXNode
argument_list|(
name|portType
argument_list|)
decl_stmt|;
for|for
control|(
name|Operation
name|operation
range|:
name|getOperations
argument_list|(
name|portType
argument_list|)
operator|.
name|values
argument_list|()
control|)
block|{
name|XNode
name|vOperationNode
init|=
name|getOperationXNode
argument_list|(
name|vPortTypeNode
argument_list|,
name|operation
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|operation
operator|.
name|getInput
argument_list|()
operator|==
literal|null
condition|)
block|{
name|vResults
operator|.
name|addError
argument_list|(
operator|new
name|Message
argument_list|(
literal|"WRONG_MEP"
argument_list|,
name|LOG
argument_list|,
name|operation
operator|.
name|getName
argument_list|()
argument_list|,
name|portType
operator|.
name|getQName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|javax
operator|.
name|wsdl
operator|.
name|Message
name|inMsg
init|=
name|operation
operator|.
name|getInput
argument_list|()
operator|.
name|getMessage
argument_list|()
decl_stmt|;
if|if
condition|(
name|inMsg
operator|==
literal|null
condition|)
block|{
name|addWarning
argument_list|(
literal|"Operation "
operator|+
name|operation
operator|.
name|getName
argument_list|()
operator|+
literal|" in PortType: "
operator|+
name|portType
operator|.
name|getQName
argument_list|()
operator|+
literal|" has no input message"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|XNode
name|vInMsgNode
init|=
name|getXNode
argument_list|(
name|inMsg
argument_list|)
decl_stmt|;
name|vInMsgNode
operator|.
name|setFailurePoint
argument_list|(
name|getInputXNode
argument_list|(
name|vOperationNode
argument_list|,
name|operation
operator|.
name|getInput
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|vNodes
operator|.
name|add
argument_list|(
name|vInMsgNode
argument_list|)
expr_stmt|;
name|messageRefNames
operator|.
name|add
argument_list|(
name|inMsg
operator|.
name|getQName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|operation
operator|.
name|getOutput
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|javax
operator|.
name|wsdl
operator|.
name|Message
name|outMsg
init|=
name|operation
operator|.
name|getOutput
argument_list|()
operator|.
name|getMessage
argument_list|()
decl_stmt|;
if|if
condition|(
name|outMsg
operator|==
literal|null
condition|)
block|{
name|addWarning
argument_list|(
literal|"Operation "
operator|+
name|operation
operator|.
name|getName
argument_list|()
operator|+
literal|" in PortType: "
operator|+
name|portType
operator|.
name|getQName
argument_list|()
operator|+
literal|" has no output message"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|XNode
name|vOutMsgNode
init|=
name|getXNode
argument_list|(
name|outMsg
argument_list|)
decl_stmt|;
name|vOutMsgNode
operator|.
name|setFailurePoint
argument_list|(
name|getOutputXNode
argument_list|(
name|vOperationNode
argument_list|,
name|operation
operator|.
name|getOutput
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|vNodes
operator|.
name|add
argument_list|(
name|vOutMsgNode
argument_list|)
expr_stmt|;
name|messageRefNames
operator|.
name|add
argument_list|(
name|outMsg
operator|.
name|getQName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Iterator
name|iter
init|=
name|operation
operator|.
name|getFaults
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Fault
name|fault
init|=
operator|(
name|Fault
operator|)
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|javax
operator|.
name|wsdl
operator|.
name|Message
name|faultMsg
init|=
name|fault
operator|.
name|getMessage
argument_list|()
decl_stmt|;
name|XNode
name|vFaultMsgNode
init|=
name|getXNode
argument_list|(
name|faultMsg
argument_list|)
decl_stmt|;
name|vFaultMsgNode
operator|.
name|setFailurePoint
argument_list|(
name|getFaultXNode
argument_list|(
name|vOperationNode
argument_list|,
name|fault
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|vNodes
operator|.
name|add
argument_list|(
name|vFaultMsgNode
argument_list|)
expr_stmt|;
name|messageRefNames
operator|.
name|add
argument_list|(
name|faultMsg
operator|.
name|getQName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|boolean
name|validatePartType
parameter_list|(
name|String
name|namespace
parameter_list|,
name|String
name|name
parameter_list|,
name|boolean
name|isElement
parameter_list|)
block|{
name|boolean
name|partvalid
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|namespace
operator|.
name|equals
argument_list|(
name|WSDLConstants
operator|.
name|NS_SCHEMA_XSD
argument_list|)
condition|)
block|{
if|if
condition|(
name|isElement
condition|)
block|{
name|XmlSchemaElement
name|schemaEle
init|=
name|schemaCollection
operator|.
name|getElementByQName
argument_list|(
operator|new
name|QName
argument_list|(
name|WSDLConstants
operator|.
name|NS_SCHEMA_XSD
argument_list|,
name|name
argument_list|)
argument_list|)
decl_stmt|;
name|partvalid
operator|=
name|schemaEle
operator|!=
literal|null
condition|?
literal|true
else|:
literal|false
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
literal|"anyType"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
name|XmlSchemaType
name|schemaType
init|=
name|schemaCollection
operator|.
name|getTypeByQName
argument_list|(
operator|new
name|QName
argument_list|(
name|WSDLConstants
operator|.
name|NS_SCHEMA_XSD
argument_list|,
name|name
argument_list|)
argument_list|)
decl_stmt|;
name|partvalid
operator|=
name|schemaType
operator|!=
literal|null
condition|?
literal|true
else|:
literal|false
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|isElement
condition|)
block|{
for|for
control|(
name|SchemaCollection
name|schema
range|:
name|schemas
control|)
block|{
if|if
condition|(
name|schema
operator|!=
literal|null
operator|&&
name|schema
operator|.
name|getElementByQName
argument_list|(
operator|new
name|QName
argument_list|(
name|namespace
argument_list|,
name|name
argument_list|)
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|partvalid
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
block|}
else|else
block|{
for|for
control|(
name|SchemaCollection
name|schema
range|:
name|schemas
control|)
block|{
if|if
condition|(
name|schema
operator|!=
literal|null
operator|&&
name|schema
operator|.
name|getTypeByQName
argument_list|(
operator|new
name|QName
argument_list|(
name|namespace
argument_list|,
name|name
argument_list|)
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|partvalid
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
return|return
name|partvalid
return|;
block|}
specifier|public
name|String
name|getErrorMessage
parameter_list|()
block|{
return|return
name|vResults
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|Definition
name|getDefinition
parameter_list|()
block|{
return|return
name|this
operator|.
name|definition
return|;
block|}
block|}
end_class

end_unit

