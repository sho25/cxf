begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|validator
operator|.
name|internal
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLEncoder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|Definition
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|XMLConstants
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilderFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|ParserConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NamedNodeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|BusFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|xmlschema
operator|.
name|SchemaCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|DOMUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|ServiceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|common
operator|.
name|ToolException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|wsdl
operator|.
name|WSDLConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|wsdl11
operator|.
name|SchemaUtil
import|;
end_import

begin_class
specifier|public
specifier|final
class|class
name|ValidatorUtil
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|ValidatorUtil
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|ValidatorUtil
parameter_list|()
block|{     }
specifier|public
specifier|static
name|SchemaCollection
name|getSchema
parameter_list|(
specifier|final
name|Definition
name|def
parameter_list|)
block|{
name|ServiceInfo
name|serviceInfo
init|=
operator|new
name|ServiceInfo
argument_list|()
decl_stmt|;
operator|new
name|SchemaUtil
argument_list|(
name|BusFactory
operator|.
name|getThreadDefaultBus
argument_list|()
argument_list|,
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Element
argument_list|>
argument_list|()
argument_list|)
operator|.
name|getSchemas
argument_list|(
name|def
argument_list|,
name|serviceInfo
argument_list|)
expr_stmt|;
return|return
name|serviceInfo
operator|.
name|getXmlSchemaCollection
argument_list|()
return|;
block|}
comment|/**      * Get a list of schemas found in a wsdl Document.      * The list will include any schemas from imported wsdls.      *       * @param document The wsdl Document.      * @param baseURI The URI of the wsdl. Allows schemas with relative      *                paths to be resolved.       * @return XmlSchemaCollection list      * @throws IOException      * @throws SAXException      */
specifier|public
specifier|static
name|List
argument_list|<
name|SchemaCollection
argument_list|>
name|getSchemaList
parameter_list|(
name|Document
name|document
parameter_list|,
name|String
name|baseURI
parameter_list|)
throws|throws
name|IOException
throws|,
name|SAXException
block|{
name|List
argument_list|<
name|SchemaCollection
argument_list|>
name|schemaList
init|=
operator|new
name|ArrayList
argument_list|<
name|SchemaCollection
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|document
operator|==
literal|null
condition|)
block|{
return|return
name|schemaList
return|;
block|}
synchronized|synchronized
init|(
name|document
init|)
block|{
comment|// URL might need encoding for special characters.
name|baseURI
operator|=
name|URLEncoder
operator|.
name|encode
argument_list|(
name|baseURI
argument_list|,
literal|"utf-8"
argument_list|)
expr_stmt|;
name|SchemaCollection
name|schemaCol
init|=
operator|new
name|SchemaCollection
argument_list|()
decl_stmt|;
name|schemaCol
operator|.
name|setBaseUri
argument_list|(
name|baseURI
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Element
argument_list|>
name|elemList
init|=
name|DOMUtils
operator|.
name|findAllElementsByTagNameNS
argument_list|(
name|document
operator|.
name|getDocumentElement
argument_list|()
argument_list|,
name|WSDLConstants
operator|.
name|NS_SCHEMA_XSD
argument_list|,
literal|"schema"
argument_list|)
decl_stmt|;
for|for
control|(
name|Element
name|schemaEl
range|:
name|elemList
control|)
block|{
name|String
name|tns
init|=
name|schemaEl
operator|.
name|getAttribute
argument_list|(
literal|"targetNamespace"
argument_list|)
decl_stmt|;
try|try
block|{
name|schemaCol
operator|.
name|read
argument_list|(
name|schemaEl
argument_list|,
name|tns
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
literal|"SCHEMA_READ_FAIL"
argument_list|,
name|tns
argument_list|)
expr_stmt|;
comment|//
comment|// Couldn't find schema... check if it's relative to wsdl.
comment|// XXX - Using setBaseUri() on the XmlSchemaCollection,
comment|// only seems to work for the first imported xsd... so pass
comment|// in the baseURI here.
comment|//
try|try
block|{
name|schemaCol
operator|.
name|read
argument_list|(
name|schemaEl
argument_list|,
name|baseURI
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|ex2
parameter_list|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
literal|"SCHEMA_READ_FAIL"
argument_list|,
name|baseURI
argument_list|)
expr_stmt|;
continue|continue;
block|}
block|}
block|}
name|schemaList
operator|.
name|add
argument_list|(
name|schemaCol
argument_list|)
expr_stmt|;
comment|// Now add schemas from imported wsdl files.
name|Map
argument_list|<
name|String
argument_list|,
name|Document
argument_list|>
name|wsdlImports
init|=
name|getImportedWsdlMap
argument_list|(
name|document
argument_list|,
name|baseURI
argument_list|)
decl_stmt|;
for|for
control|(
name|Document
name|wsdlImport
range|:
name|wsdlImports
operator|.
name|values
argument_list|()
control|)
block|{
name|schemaList
operator|.
name|addAll
argument_list|(
name|getSchemaList
argument_list|(
name|wsdlImport
argument_list|,
name|baseURI
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|schemaList
return|;
block|}
comment|/**      * Get a map of wsdls imported by the given wsdl.  Keys in the      * map are the imported namespaces.  Values are the imported      * wsdl Documents.      *       * @param document The wsdl Document      * @param basePath The path of the wsdl      * @return map of imported wsdls      * @throws IOException      * @throws SAXException      */
specifier|public
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Document
argument_list|>
name|getImportedWsdlMap
parameter_list|(
name|Document
name|document
parameter_list|,
name|String
name|basePath
parameter_list|)
throws|throws
name|IOException
throws|,
name|SAXException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Document
argument_list|>
name|docMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Document
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|document
operator|==
literal|null
condition|)
block|{
return|return
name|docMap
return|;
block|}
name|DocumentBuilder
name|docBuilder
init|=
literal|null
decl_stmt|;
try|try
block|{
name|DocumentBuilderFactory
name|docFactory
init|=
name|DocumentBuilderFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|docFactory
operator|.
name|setNamespaceAware
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|docFactory
operator|.
name|setFeature
argument_list|(
name|XMLConstants
operator|.
name|FEATURE_SECURE_PROCESSING
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
name|docBuilder
operator|=
name|docFactory
operator|.
name|newDocumentBuilder
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParserConfigurationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ToolException
argument_list|(
name|e
argument_list|)
throw|;
block|}
comment|//
comment|// Remove the scheme part of a URI - need to escape spaces in
comment|// case we are on Windows and have spaces in directory names.
comment|//
name|String
name|myBasePath
init|=
name|basePath
decl_stmt|;
try|try
block|{
name|myBasePath
operator|=
operator|new
name|URI
argument_list|(
name|basePath
operator|.
name|replaceAll
argument_list|(
literal|" "
argument_list|,
literal|"%20"
argument_list|)
argument_list|)
operator|.
name|getPath
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e1
parameter_list|)
block|{
comment|// This will be problematic...
block|}
name|List
argument_list|<
name|Element
argument_list|>
name|elemList
init|=
name|DOMUtils
operator|.
name|findAllElementsByTagNameNS
argument_list|(
name|document
operator|.
name|getDocumentElement
argument_list|()
argument_list|,
name|WSDLConstants
operator|.
name|NS_WSDL11
argument_list|,
literal|"import"
argument_list|)
decl_stmt|;
for|for
control|(
name|Element
name|elem
range|:
name|elemList
control|)
block|{
name|NamedNodeMap
name|attributes
init|=
name|elem
operator|.
name|getAttributes
argument_list|()
decl_stmt|;
name|String
name|systemId
decl_stmt|;
name|String
name|namespace
init|=
name|attributes
operator|.
name|getNamedItem
argument_list|(
literal|"namespace"
argument_list|)
operator|.
name|getNodeValue
argument_list|()
decl_stmt|;
comment|// Is this ok?
if|if
condition|(
name|docMap
operator|.
name|containsKey
argument_list|(
name|namespace
argument_list|)
condition|)
block|{
continue|continue;
block|}
try|try
block|{
name|systemId
operator|=
name|getImportedUrl
argument_list|(
name|attributes
operator|.
name|getNamedItem
argument_list|(
literal|"location"
argument_list|)
operator|.
name|getNodeValue
argument_list|()
argument_list|,
name|myBasePath
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|ToolException
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
if|if
condition|(
name|namespace
operator|!=
literal|null
operator|&&
name|systemId
operator|!=
literal|null
condition|)
block|{
name|Document
name|docImport
init|=
name|docBuilder
operator|.
name|parse
argument_list|(
name|systemId
argument_list|)
decl_stmt|;
name|Node
name|node
init|=
name|DOMUtils
operator|.
name|getChild
argument_list|(
name|docImport
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|!=
literal|null
operator|&&
operator|!
literal|"definitions"
operator|.
name|equals
argument_list|(
name|node
operator|.
name|getLocalName
argument_list|()
argument_list|)
condition|)
block|{
name|Message
name|msg
init|=
operator|new
name|Message
argument_list|(
literal|"NOT_A_WSDLFILE"
argument_list|,
name|LOG
argument_list|,
name|systemId
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|ToolException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
name|docMap
operator|.
name|putAll
argument_list|(
name|getImportedWsdlMap
argument_list|(
name|docImport
argument_list|,
name|myBasePath
argument_list|)
argument_list|)
expr_stmt|;
name|docMap
operator|.
name|put
argument_list|(
name|namespace
argument_list|,
name|docImport
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|docMap
return|;
block|}
specifier|private
specifier|static
name|String
name|getImportedUrl
parameter_list|(
name|String
name|theImportPath
parameter_list|,
name|String
name|baseURI
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|theImportPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|file
operator|!=
literal|null
operator|&&
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
return|return
name|file
operator|.
name|toURI
argument_list|()
operator|.
name|toURL
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
comment|// Import may have a relative path
name|File
name|baseFile
init|=
operator|new
name|File
argument_list|(
name|baseURI
argument_list|)
decl_stmt|;
name|file
operator|=
operator|new
name|File
argument_list|(
name|baseFile
operator|.
name|getParent
argument_list|()
argument_list|,
name|theImportPath
argument_list|)
expr_stmt|;
if|if
condition|(
name|file
operator|!=
literal|null
operator|&&
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
return|return
name|file
operator|.
name|toURI
argument_list|()
operator|.
name|toURL
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

