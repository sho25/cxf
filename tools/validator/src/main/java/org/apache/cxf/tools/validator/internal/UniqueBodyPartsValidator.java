begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|validator
operator|.
name|internal
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|Definition
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|Operation
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|Part
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|PortType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_class
specifier|public
class|class
name|UniqueBodyPartsValidator
extends|extends
name|AbstractDefinitionValidator
block|{
specifier|private
name|Map
argument_list|<
name|QName
argument_list|,
name|String
argument_list|>
name|uniqueBodyPartsMap
decl_stmt|;
specifier|public
name|UniqueBodyPartsValidator
parameter_list|(
name|Definition
name|def
parameter_list|)
block|{
name|super
argument_list|(
name|def
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|isValid
parameter_list|()
block|{
name|Iterator
name|ite
init|=
name|def
operator|.
name|getPortTypes
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|ite
operator|.
name|hasNext
argument_list|()
condition|)
block|{
comment|//
comment|// Only check for unique body parts per portType.
comment|// (Create a new Map for each portType.)
comment|//
name|uniqueBodyPartsMap
operator|=
operator|new
name|HashMap
argument_list|<
name|QName
argument_list|,
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|PortType
name|portType
init|=
operator|(
name|PortType
operator|)
name|ite
operator|.
name|next
argument_list|()
decl_stmt|;
name|Iterator
name|ite2
init|=
name|portType
operator|.
name|getOperations
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|ite2
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Operation
name|operation
init|=
operator|(
name|Operation
operator|)
name|ite2
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|operation
operator|.
name|getInput
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Message
name|inMessage
init|=
name|operation
operator|.
name|getInput
argument_list|()
operator|.
name|getMessage
argument_list|()
decl_stmt|;
if|if
condition|(
name|inMessage
operator|!=
literal|null
operator|&&
operator|!
name|isUniqueBodyPart
argument_list|(
name|operation
operator|.
name|getName
argument_list|()
argument_list|,
name|inMessage
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|private
name|boolean
name|isUniqueBodyPart
parameter_list|(
name|String
name|operationName
parameter_list|,
name|Message
name|msg
parameter_list|)
block|{
name|Map
name|partsMap
init|=
name|msg
operator|.
name|getParts
argument_list|()
decl_stmt|;
name|Iterator
name|ite
init|=
name|partsMap
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
if|if
condition|(
name|ite
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Part
name|part
init|=
operator|(
name|Part
operator|)
name|ite
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|part
operator|.
name|getElementName
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
name|String
name|opName
init|=
name|getOperationNameWithSamePart
argument_list|(
name|operationName
argument_list|,
name|part
argument_list|)
decl_stmt|;
if|if
condition|(
name|opName
operator|!=
literal|null
condition|)
block|{
name|addErrorMessage
argument_list|(
literal|"Non unique body parts, operation "
operator|+
literal|"[ "
operator|+
name|opName
operator|+
literal|" ] "
operator|+
literal|"and  operation [ "
operator|+
name|operationName
operator|+
literal|" ] have the same body block "
operator|+
name|part
operator|.
name|getElementName
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|private
name|String
name|getOperationNameWithSamePart
parameter_list|(
name|String
name|operationName
parameter_list|,
name|Part
name|part
parameter_list|)
block|{
name|QName
name|partQN
init|=
name|part
operator|.
name|getElementName
argument_list|()
decl_stmt|;
name|String
name|opName
init|=
name|uniqueBodyPartsMap
operator|.
name|get
argument_list|(
name|partQN
argument_list|)
decl_stmt|;
if|if
condition|(
name|opName
operator|==
literal|null
condition|)
block|{
name|uniqueBodyPartsMap
operator|.
name|put
argument_list|(
name|partQN
argument_list|,
name|operationName
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
else|else
block|{
return|return
name|opName
return|;
block|}
block|}
block|}
end_class

end_unit

