begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|validator
operator|.
name|internal
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Stack
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
import|;
end_import

begin_class
specifier|public
specifier|final
class|class
name|ValidationResult
block|{
specifier|private
name|Stack
argument_list|<
name|String
argument_list|>
name|errors
init|=
operator|new
name|Stack
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Stack
argument_list|<
name|String
argument_list|>
name|warnings
init|=
operator|new
name|Stack
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|Stack
argument_list|<
name|String
argument_list|>
name|getErrors
parameter_list|()
block|{
return|return
name|this
operator|.
name|errors
return|;
block|}
specifier|public
name|Stack
argument_list|<
name|String
argument_list|>
name|getWarnings
parameter_list|()
block|{
return|return
name|this
operator|.
name|warnings
return|;
block|}
specifier|public
name|void
name|addError
parameter_list|(
specifier|final
name|Message
name|msg
parameter_list|)
block|{
name|addError
argument_list|(
name|msg
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addError
parameter_list|(
specifier|final
name|String
name|error
parameter_list|)
block|{
name|this
operator|.
name|errors
operator|.
name|push
argument_list|(
name|error
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addWarning
parameter_list|(
specifier|final
name|Message
name|msg
parameter_list|)
block|{
name|addWarning
argument_list|(
name|msg
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addWarning
parameter_list|(
specifier|final
name|String
name|warning
parameter_list|)
block|{
name|this
operator|.
name|warnings
operator|.
name|push
argument_list|(
name|warning
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|hasWarnings
parameter_list|()
block|{
return|return
operator|!
name|warnings
operator|.
name|isEmpty
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|isSuccessful
parameter_list|()
block|{
return|return
name|errors
operator|.
name|isEmpty
argument_list|()
operator|&&
name|warnings
operator|.
name|size
argument_list|()
operator|==
literal|0
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"\n Summary: "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" Failures: "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|errors
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|", Warnings: "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|warnings
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|errors
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"\n\n<<< ERROR! \n"
argument_list|)
expr_stmt|;
while|while
condition|(
operator|!
name|errors
operator|.
name|empty
argument_list|()
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|errors
operator|.
name|pop
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|warnings
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"\n<<< WARNING! \n"
argument_list|)
expr_stmt|;
while|while
condition|(
operator|!
name|warnings
operator|.
name|empty
argument_list|()
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|warnings
operator|.
name|pop
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

