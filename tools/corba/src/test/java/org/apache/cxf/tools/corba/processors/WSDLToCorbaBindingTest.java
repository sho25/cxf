begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|corba
operator|.
name|processors
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|Binding
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|BindingFault
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|BindingOperation
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|Definition
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|extensions
operator|.
name|ExtensibilityElement
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|xml
operator|.
name|WSDLWriter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|BindingType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|CorbaConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|CorbaTypeImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|Fixed
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|OperationType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|ParamType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|Sequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|TypeMappingType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|corba
operator|.
name|common
operator|.
name|WSDLCorbaFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|corba
operator|.
name|processors
operator|.
name|wsdl
operator|.
name|WSDLToCorbaBinding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|corba
operator|.
name|processors
operator|.
name|wsdl
operator|.
name|WSDLToIDLAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|WSDLToCorbaBindingTest
extends|extends
name|Assert
block|{
name|WSDLToCorbaBinding
name|generator
decl_stmt|;
name|WSDLWriter
name|writer
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|System
operator|.
name|setProperty
argument_list|(
literal|"UseWSDLModelCaching"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|generator
operator|=
operator|new
name|WSDLToCorbaBinding
argument_list|()
expr_stmt|;
try|try
block|{
name|WSDLCorbaFactory
name|wsdlfactory
init|=
name|WSDLCorbaFactory
operator|.
name|newInstance
argument_list|(
literal|"org.apache.cxf.tools.corba.common.WSDLCorbaFactoryImpl"
argument_list|)
decl_stmt|;
name|writer
operator|=
name|wsdlfactory
operator|.
name|newWSDLWriter
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
block|{
name|System
operator|.
name|setProperty
argument_list|(
literal|"UseWSDLModelCaching"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Element
name|getElementNode
parameter_list|(
name|Document
name|document
parameter_list|,
name|String
name|elName
parameter_list|)
block|{
name|Element
name|root
init|=
name|document
operator|.
name|getDocumentElement
argument_list|()
decl_stmt|;
for|for
control|(
name|Node
name|nd
init|=
name|root
operator|.
name|getFirstChild
argument_list|()
init|;
name|nd
operator|!=
literal|null
condition|;
name|nd
operator|=
name|nd
operator|.
name|getNextSibling
argument_list|()
control|)
block|{
if|if
condition|(
name|Node
operator|.
name|ELEMENT_NODE
operator|==
name|nd
operator|.
name|getNodeType
argument_list|()
operator|&&
operator|(
name|elName
operator|.
name|equals
argument_list|(
name|nd
operator|.
name|getNodeName
argument_list|()
argument_list|)
operator|)
condition|)
block|{
return|return
operator|(
name|Element
operator|)
name|nd
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSequenceType
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|String
name|fileName
init|=
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"/wsdl/sequencetype.wsdl"
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|generator
operator|.
name|setWsdlFile
argument_list|(
name|fileName
argument_list|)
expr_stmt|;
name|generator
operator|.
name|addInterfaceName
argument_list|(
literal|"IACC.Server"
argument_list|)
expr_stmt|;
name|Definition
name|model
init|=
name|generator
operator|.
name|generateCORBABinding
argument_list|()
decl_stmt|;
name|Document
name|document
init|=
name|writer
operator|.
name|getDocument
argument_list|(
name|model
argument_list|)
decl_stmt|;
name|Element
name|typemap
init|=
name|getElementNode
argument_list|(
name|document
argument_list|,
literal|"corba:typeMapping"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|typemap
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|typemap
operator|.
name|getElementsByTagName
argument_list|(
literal|"corba:sequence"
argument_list|)
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|typemap
operator|.
name|getElementsByTagName
argument_list|(
literal|"corba:exception"
argument_list|)
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|70
argument_list|,
name|typemap
operator|.
name|getElementsByTagName
argument_list|(
literal|"corba:struct"
argument_list|)
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|WSDLToIDLAction
name|idlgen
init|=
operator|new
name|WSDLToIDLAction
argument_list|()
decl_stmt|;
name|idlgen
operator|.
name|setBindingName
argument_list|(
literal|"IACC.ServerCORBABinding"
argument_list|)
expr_stmt|;
name|idlgen
operator|.
name|setOutputFile
argument_list|(
literal|"sequencetype.idl"
argument_list|)
expr_stmt|;
name|idlgen
operator|.
name|generateIDL
argument_list|(
name|model
argument_list|)
expr_stmt|;
name|File
name|f
init|=
operator|new
name|File
argument_list|(
literal|"sequencetype.idl"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"sequencetype.idl should be generated"
argument_list|,
name|f
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
operator|new
name|File
argument_list|(
literal|"sequencetype.idl"
argument_list|)
operator|.
name|deleteOnExit
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFixedBindingGeneration
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|fileName
init|=
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"/wsdl/fixed.wsdl"
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|generator
operator|.
name|setWsdlFile
argument_list|(
name|fileName
argument_list|)
expr_stmt|;
name|generator
operator|.
name|addInterfaceName
argument_list|(
literal|"Y"
argument_list|)
expr_stmt|;
name|Definition
name|model
init|=
name|generator
operator|.
name|generateCORBABinding
argument_list|()
decl_stmt|;
name|Document
name|document
init|=
name|writer
operator|.
name|getDocument
argument_list|(
name|model
argument_list|)
decl_stmt|;
name|Element
name|typemap
init|=
name|getElementNode
argument_list|(
name|document
argument_list|,
literal|"corba:typeMapping"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|typemap
operator|.
name|getElementsByTagName
argument_list|(
literal|"corba:sequence"
argument_list|)
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|typemap
operator|.
name|getElementsByTagName
argument_list|(
literal|"corba:fixed"
argument_list|)
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|Element
name|bindingElement
init|=
name|getElementNode
argument_list|(
name|document
argument_list|,
literal|"binding"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|bindingElement
operator|.
name|getElementsByTagName
argument_list|(
literal|"corba:operation"
argument_list|)
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|QName
name|bName
init|=
operator|new
name|QName
argument_list|(
literal|"http://schemas.apache.org/idl/fixed.idl"
argument_list|,
literal|"YCORBABinding"
argument_list|,
literal|"tns"
argument_list|)
decl_stmt|;
name|Binding
name|binding
init|=
name|model
operator|.
name|getBinding
argument_list|(
name|bName
argument_list|)
decl_stmt|;
name|TypeMappingType
name|mapType
init|=
operator|(
name|TypeMappingType
operator|)
name|model
operator|.
name|getExtensibilityElements
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|CorbaTypeImpl
argument_list|>
name|tmap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|CorbaTypeImpl
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|CorbaTypeImpl
name|type
range|:
name|mapType
operator|.
name|getStructOrExceptionOrUnion
argument_list|()
control|)
block|{
name|tmap
operator|.
name|put
argument_list|(
name|type
operator|.
name|getName
argument_list|()
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
name|Iterator
name|j
init|=
name|binding
operator|.
name|getBindingOperations
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|j
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|BindingOperation
name|bindingOperation
init|=
operator|(
name|BindingOperation
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"YCORBABinding"
argument_list|,
name|binding
operator|.
name|getQName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|bindingOperation
operator|.
name|getExtensibilityElements
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|checkFixedTypeOne
argument_list|(
name|bindingOperation
argument_list|,
name|tmap
argument_list|)
expr_stmt|;
name|bindingOperation
operator|=
operator|(
name|BindingOperation
operator|)
name|j
operator|.
name|next
argument_list|()
expr_stmt|;
name|checkSequenceType
argument_list|(
name|bindingOperation
argument_list|,
name|tmap
argument_list|)
expr_stmt|;
name|bindingOperation
operator|=
operator|(
name|BindingOperation
operator|)
name|j
operator|.
name|next
argument_list|()
expr_stmt|;
name|checkFixedTypeTwo
argument_list|(
name|bindingOperation
argument_list|,
name|tmap
argument_list|)
expr_stmt|;
name|bindingOperation
operator|=
operator|(
name|BindingOperation
operator|)
name|j
operator|.
name|next
argument_list|()
expr_stmt|;
name|checkFixedTypeThree
argument_list|(
name|bindingOperation
argument_list|,
name|tmap
argument_list|)
expr_stmt|;
name|bindingOperation
operator|=
operator|(
name|BindingOperation
operator|)
name|j
operator|.
name|next
argument_list|()
expr_stmt|;
name|checkFixedTypeFour
argument_list|(
name|bindingOperation
argument_list|,
name|tmap
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|checkSequenceType
parameter_list|(
name|BindingOperation
name|bindingOperation
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|CorbaTypeImpl
argument_list|>
name|mapType
parameter_list|)
block|{
name|Iterator
name|bOp
init|=
name|bindingOperation
operator|.
name|getExtensibilityElements
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|bOp
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|ExtensibilityElement
name|extElement
init|=
operator|(
name|ExtensibilityElement
operator|)
name|bOp
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|extElement
operator|.
name|getElementType
argument_list|()
operator|.
name|getLocalPart
argument_list|()
operator|.
name|equals
argument_list|(
literal|"operation"
argument_list|)
condition|)
block|{
name|OperationType
name|corbaOpType
init|=
operator|(
name|OperationType
operator|)
name|extElement
decl_stmt|;
name|assertEquals
argument_list|(
name|corbaOpType
operator|.
name|getName
argument_list|()
argument_list|,
literal|"op_h"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|corbaOpType
operator|.
name|getParam
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Y.H"
argument_list|,
name|corbaOpType
operator|.
name|getParam
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getIdltype
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Y.H"
argument_list|,
name|corbaOpType
operator|.
name|getReturn
argument_list|()
operator|.
name|getIdltype
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
name|Sequence
name|seq
init|=
operator|(
name|Sequence
operator|)
name|mapType
operator|.
name|get
argument_list|(
name|corbaOpType
operator|.
name|getReturn
argument_list|()
operator|.
name|getIdltype
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"ElementType is incorrect for Sequence Type"
argument_list|,
literal|"fixed_1"
argument_list|,
name|seq
operator|.
name|getElemtype
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|checkFixedTypeOne
parameter_list|(
name|BindingOperation
name|bindingOperation
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|CorbaTypeImpl
argument_list|>
name|mapType
parameter_list|)
block|{
name|Iterator
name|bOp
init|=
name|bindingOperation
operator|.
name|getExtensibilityElements
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|bOp
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|assertEquals
argument_list|(
name|bindingOperation
operator|.
name|getBindingInput
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
literal|"op_k"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|bindingOperation
operator|.
name|getBindingOutput
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
literal|"op_kResponse"
argument_list|)
expr_stmt|;
name|ExtensibilityElement
name|extElement
init|=
operator|(
name|ExtensibilityElement
operator|)
name|bOp
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|extElement
operator|.
name|getElementType
argument_list|()
operator|.
name|getLocalPart
argument_list|()
operator|.
name|equals
argument_list|(
literal|"operation"
argument_list|)
condition|)
block|{
name|OperationType
name|corbaOpType
init|=
operator|(
name|OperationType
operator|)
name|extElement
decl_stmt|;
name|assertEquals
argument_list|(
name|corbaOpType
operator|.
name|getName
argument_list|()
argument_list|,
literal|"op_k"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|corbaOpType
operator|.
name|getParam
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"fixed_1"
argument_list|,
name|corbaOpType
operator|.
name|getParam
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getIdltype
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"fixed_1"
argument_list|,
name|corbaOpType
operator|.
name|getReturn
argument_list|()
operator|.
name|getIdltype
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
name|Fixed
name|fixed
init|=
operator|(
name|Fixed
operator|)
name|mapType
operator|.
name|get
argument_list|(
name|corbaOpType
operator|.
name|getReturn
argument_list|()
operator|.
name|getIdltype
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Could not find the decimal type"
argument_list|,
name|fixed
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Fixed digits is incorrect for the return corba parameter"
argument_list|,
literal|31
argument_list|,
name|fixed
operator|.
name|getDigits
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Fixed scale is incorrect for the return corba parameter"
argument_list|,
literal|6
argument_list|,
name|fixed
operator|.
name|getScale
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|checkFixedTypeTwo
parameter_list|(
name|BindingOperation
name|bindingOperation
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|CorbaTypeImpl
argument_list|>
name|mapType
parameter_list|)
block|{
name|Iterator
name|bOp
init|=
name|bindingOperation
operator|.
name|getExtensibilityElements
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|bOp
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|ExtensibilityElement
name|extElement
init|=
operator|(
name|ExtensibilityElement
operator|)
name|bOp
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|extElement
operator|.
name|getElementType
argument_list|()
operator|.
name|getLocalPart
argument_list|()
operator|.
name|equals
argument_list|(
literal|"operation"
argument_list|)
condition|)
block|{
name|OperationType
name|corbaOpType
init|=
operator|(
name|OperationType
operator|)
name|extElement
decl_stmt|;
name|assertEquals
argument_list|(
name|corbaOpType
operator|.
name|getName
argument_list|()
argument_list|,
literal|"op_m"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|corbaOpType
operator|.
name|getParam
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"X.PARAM.H"
argument_list|,
name|corbaOpType
operator|.
name|getParam
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getIdltype
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"X.H"
argument_list|,
name|corbaOpType
operator|.
name|getReturn
argument_list|()
operator|.
name|getIdltype
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
name|Fixed
name|fixed
init|=
operator|(
name|Fixed
operator|)
name|mapType
operator|.
name|get
argument_list|(
name|corbaOpType
operator|.
name|getReturn
argument_list|()
operator|.
name|getIdltype
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Could not find the decimal type"
argument_list|,
name|fixed
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Fixed digits is incorrect for the return corba parameter"
argument_list|,
literal|10
argument_list|,
name|fixed
operator|.
name|getDigits
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Fixed scale is incorrect for the return corba parameter"
argument_list|,
literal|2
argument_list|,
name|fixed
operator|.
name|getScale
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|checkFixedTypeThree
parameter_list|(
name|BindingOperation
name|bindingOperation
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|CorbaTypeImpl
argument_list|>
name|mapType
parameter_list|)
block|{
name|Iterator
name|bOp
init|=
name|bindingOperation
operator|.
name|getExtensibilityElements
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|bOp
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|ExtensibilityElement
name|extElement
init|=
operator|(
name|ExtensibilityElement
operator|)
name|bOp
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|extElement
operator|.
name|getElementType
argument_list|()
operator|.
name|getLocalPart
argument_list|()
operator|.
name|equals
argument_list|(
literal|"operation"
argument_list|)
condition|)
block|{
name|OperationType
name|corbaOpType
init|=
operator|(
name|OperationType
operator|)
name|extElement
decl_stmt|;
name|assertEquals
argument_list|(
name|corbaOpType
operator|.
name|getName
argument_list|()
argument_list|,
literal|"op_n"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|corbaOpType
operator|.
name|getParam
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"fixed_1"
argument_list|,
name|corbaOpType
operator|.
name|getParam
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getIdltype
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Z.H"
argument_list|,
name|corbaOpType
operator|.
name|getReturn
argument_list|()
operator|.
name|getIdltype
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
name|Fixed
name|fixed
init|=
operator|(
name|Fixed
operator|)
name|mapType
operator|.
name|get
argument_list|(
name|corbaOpType
operator|.
name|getReturn
argument_list|()
operator|.
name|getIdltype
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Could not find the decimal type"
argument_list|,
name|fixed
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Fixed digits is incorrect for the return corba parameter"
argument_list|,
literal|8
argument_list|,
name|fixed
operator|.
name|getDigits
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Fixed scale is incorrect for the return corba parameter"
argument_list|,
literal|6
argument_list|,
name|fixed
operator|.
name|getScale
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|checkFixedTypeFour
parameter_list|(
name|BindingOperation
name|bindingOperation
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|CorbaTypeImpl
argument_list|>
name|mapType
parameter_list|)
block|{
name|Iterator
name|bOp
init|=
name|bindingOperation
operator|.
name|getExtensibilityElements
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|bOp
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|ExtensibilityElement
name|extElement
init|=
operator|(
name|ExtensibilityElement
operator|)
name|bOp
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|extElement
operator|.
name|getElementType
argument_list|()
operator|.
name|getLocalPart
argument_list|()
operator|.
name|equals
argument_list|(
literal|"operation"
argument_list|)
condition|)
block|{
name|OperationType
name|corbaOpType
init|=
operator|(
name|OperationType
operator|)
name|extElement
decl_stmt|;
name|assertEquals
argument_list|(
name|corbaOpType
operator|.
name|getName
argument_list|()
argument_list|,
literal|"extended_op_m"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|corbaOpType
operator|.
name|getParam
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"EXTENDED.X.PARAM.H"
argument_list|,
name|corbaOpType
operator|.
name|getParam
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getIdltype
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"EXTENDED.X.PARAM.H"
argument_list|,
name|corbaOpType
operator|.
name|getReturn
argument_list|()
operator|.
name|getIdltype
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
name|Fixed
name|fixed
init|=
operator|(
name|Fixed
operator|)
name|mapType
operator|.
name|get
argument_list|(
name|corbaOpType
operator|.
name|getReturn
argument_list|()
operator|.
name|getIdltype
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Could not find the decimal type"
argument_list|,
name|fixed
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Fixed digits is incorrect for the return corba parameter"
argument_list|,
literal|8
argument_list|,
name|fixed
operator|.
name|getDigits
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Fixed scale is incorrect for the return corba parameter"
argument_list|,
literal|2
argument_list|,
name|fixed
operator|.
name|getScale
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAllType
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|String
name|fileName
init|=
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"/wsdl/alltype.wsdl"
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|generator
operator|.
name|setWsdlFile
argument_list|(
name|fileName
argument_list|)
expr_stmt|;
name|generator
operator|.
name|addInterfaceName
argument_list|(
literal|"BasePortType"
argument_list|)
expr_stmt|;
name|Definition
name|model
init|=
name|generator
operator|.
name|generateCORBABinding
argument_list|()
decl_stmt|;
name|Document
name|document
init|=
name|writer
operator|.
name|getDocument
argument_list|(
name|model
argument_list|)
decl_stmt|;
name|Element
name|typemap
init|=
name|getElementNode
argument_list|(
name|document
argument_list|,
literal|"corba:typeMapping"
argument_list|)
decl_stmt|;
comment|//assertNotNull(typemap);
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|typemap
operator|.
name|getElementsByTagName
argument_list|(
literal|"corba:struct"
argument_list|)
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|WSDLToIDLAction
name|idlgen
init|=
operator|new
name|WSDLToIDLAction
argument_list|()
decl_stmt|;
name|idlgen
operator|.
name|setBindingName
argument_list|(
literal|"BaseCORBABinding"
argument_list|)
expr_stmt|;
name|idlgen
operator|.
name|setOutputFile
argument_list|(
literal|"alltype.idl"
argument_list|)
expr_stmt|;
name|idlgen
operator|.
name|generateIDL
argument_list|(
name|model
argument_list|)
expr_stmt|;
name|File
name|f
init|=
operator|new
name|File
argument_list|(
literal|"alltype.idl"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"alltype.idl should be generated"
argument_list|,
name|f
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
operator|new
name|File
argument_list|(
literal|"alltype.idl"
argument_list|)
operator|.
name|deleteOnExit
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testComplexContentStructType
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|String
name|fileName
init|=
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"/wsdl/content.wsdl"
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|generator
operator|.
name|setWsdlFile
argument_list|(
name|fileName
argument_list|)
expr_stmt|;
name|generator
operator|.
name|addInterfaceName
argument_list|(
literal|"ContentPortType"
argument_list|)
expr_stmt|;
name|Definition
name|model
init|=
name|generator
operator|.
name|generateCORBABinding
argument_list|()
decl_stmt|;
name|Document
name|document
init|=
name|writer
operator|.
name|getDocument
argument_list|(
name|model
argument_list|)
decl_stmt|;
name|Element
name|typemap
init|=
name|getElementNode
argument_list|(
name|document
argument_list|,
literal|"corba:typeMapping"
argument_list|)
decl_stmt|;
comment|//assertNotNull(typemap);
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|typemap
operator|.
name|getElementsByTagName
argument_list|(
literal|"corba:union"
argument_list|)
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|typemap
operator|.
name|getElementsByTagName
argument_list|(
literal|"corba:struct"
argument_list|)
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|WSDLToIDLAction
name|idlgen
init|=
operator|new
name|WSDLToIDLAction
argument_list|()
decl_stmt|;
name|idlgen
operator|.
name|setBindingName
argument_list|(
literal|"ContentCORBABinding"
argument_list|)
expr_stmt|;
name|idlgen
operator|.
name|setOutputFile
argument_list|(
literal|"content.idl"
argument_list|)
expr_stmt|;
name|idlgen
operator|.
name|generateIDL
argument_list|(
name|model
argument_list|)
expr_stmt|;
name|File
name|f
init|=
operator|new
name|File
argument_list|(
literal|"content.idl"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"content.idl should be generated"
argument_list|,
name|f
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
operator|new
name|File
argument_list|(
literal|"content.idl"
argument_list|)
operator|.
name|deleteOnExit
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUnionType
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|String
name|fileName
init|=
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"/wsdl/uniontype.wsdl"
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|generator
operator|.
name|setWsdlFile
argument_list|(
name|fileName
argument_list|)
expr_stmt|;
name|generator
operator|.
name|addInterfaceName
argument_list|(
literal|"Test.MultiPart"
argument_list|)
expr_stmt|;
name|Definition
name|model
init|=
name|generator
operator|.
name|generateCORBABinding
argument_list|()
decl_stmt|;
name|Document
name|document
init|=
name|writer
operator|.
name|getDocument
argument_list|(
name|model
argument_list|)
decl_stmt|;
name|Element
name|typemap
init|=
name|getElementNode
argument_list|(
name|document
argument_list|,
literal|"corba:typeMapping"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|typemap
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|typemap
operator|.
name|getElementsByTagName
argument_list|(
literal|"corba:union"
argument_list|)
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|typemap
operator|.
name|getElementsByTagName
argument_list|(
literal|"corba:enum"
argument_list|)
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|WSDLToIDLAction
name|idlgen
init|=
operator|new
name|WSDLToIDLAction
argument_list|()
decl_stmt|;
name|idlgen
operator|.
name|setBindingName
argument_list|(
literal|"Test.MultiPartCORBABinding"
argument_list|)
expr_stmt|;
name|idlgen
operator|.
name|setOutputFile
argument_list|(
literal|"uniontype.idl"
argument_list|)
expr_stmt|;
name|idlgen
operator|.
name|generateIDL
argument_list|(
name|model
argument_list|)
expr_stmt|;
name|File
name|f
init|=
operator|new
name|File
argument_list|(
literal|"uniontype.idl"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"uniontype.idl should be generated"
argument_list|,
name|f
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
operator|new
name|File
argument_list|(
literal|"uniontype.idl"
argument_list|)
operator|.
name|deleteOnExit
argument_list|()
expr_stmt|;
block|}
block|}
comment|// next story to add Fault support
annotation|@
name|Test
specifier|public
name|void
name|testExceptionCORBABindingGeneration
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|fileName
init|=
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"/wsdl/exceptions.wsdl"
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|generator
operator|.
name|setWsdlFile
argument_list|(
name|fileName
argument_list|)
expr_stmt|;
name|generator
operator|.
name|addInterfaceName
argument_list|(
literal|"TestException.ExceptionTest"
argument_list|)
expr_stmt|;
name|Definition
name|model
init|=
name|generator
operator|.
name|generateCORBABinding
argument_list|()
decl_stmt|;
name|QName
name|bName
init|=
operator|new
name|QName
argument_list|(
literal|"http://schemas.apache.org/idl/exceptions.idl"
argument_list|,
literal|"TestException.ExceptionTestCORBABinding"
argument_list|,
literal|"tns"
argument_list|)
decl_stmt|;
name|Binding
name|binding
init|=
name|model
operator|.
name|getBinding
argument_list|(
name|bName
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|binding
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"TestException.ExceptionTestCORBABinding"
argument_list|,
name|binding
operator|.
name|getQName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"TestException.ExceptionTest"
argument_list|,
name|binding
operator|.
name|getPortType
argument_list|()
operator|.
name|getQName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|binding
operator|.
name|getExtensibilityElements
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|binding
operator|.
name|getBindingOperations
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Iterator
name|i
init|=
name|binding
operator|.
name|getExtensibilityElements
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|ExtensibilityElement
name|extElement
init|=
operator|(
name|ExtensibilityElement
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|extElement
operator|.
name|getElementType
argument_list|()
operator|.
name|getLocalPart
argument_list|()
operator|.
name|equals
argument_list|(
literal|"binding"
argument_list|)
condition|)
block|{
name|BindingType
name|bindingType
init|=
operator|(
name|BindingType
operator|)
name|extElement
decl_stmt|;
name|assertEquals
argument_list|(
name|bindingType
operator|.
name|getRepositoryID
argument_list|()
argument_list|,
literal|"IDL:TestException/ExceptionTest:1.0"
argument_list|)
expr_stmt|;
block|}
block|}
name|Iterator
name|j
init|=
name|binding
operator|.
name|getBindingOperations
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|j
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|BindingOperation
name|bindingOperation
init|=
operator|(
name|BindingOperation
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|bindingOperation
operator|.
name|getExtensibilityElements
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|bindingOperation
operator|.
name|getBindingInput
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
literal|"review_data"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|bindingOperation
operator|.
name|getBindingOutput
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
literal|"review_dataResponse"
argument_list|)
expr_stmt|;
name|Iterator
name|f
init|=
name|bindingOperation
operator|.
name|getBindingFaults
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|boolean
name|hasBadRecord
init|=
literal|false
decl_stmt|;
name|boolean
name|hasMyException
init|=
literal|false
decl_stmt|;
while|while
condition|(
name|f
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|BindingFault
name|bindingFault
init|=
operator|(
name|BindingFault
operator|)
name|f
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
literal|"TestException.BadRecord"
operator|.
name|equals
argument_list|(
name|bindingFault
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|hasBadRecord
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"MyException"
operator|.
name|equals
argument_list|(
name|bindingFault
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|hasMyException
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|fail
argument_list|(
literal|"Unexpected BindingFault: "
operator|+
name|bindingFault
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|assertTrue
argument_list|(
literal|"Did not get expected TestException.BadRecord"
argument_list|,
name|hasBadRecord
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Did not get expected MyException"
argument_list|,
name|hasMyException
argument_list|)
expr_stmt|;
name|Iterator
name|bOp
init|=
name|bindingOperation
operator|.
name|getExtensibilityElements
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|bOp
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|ExtensibilityElement
name|extElement
init|=
operator|(
name|ExtensibilityElement
operator|)
name|bOp
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|extElement
operator|.
name|getElementType
argument_list|()
operator|.
name|getLocalPart
argument_list|()
operator|.
name|equals
argument_list|(
literal|"operation"
argument_list|)
condition|)
block|{
name|OperationType
name|corbaOpType
init|=
operator|(
name|OperationType
operator|)
name|extElement
decl_stmt|;
name|assertEquals
argument_list|(
name|corbaOpType
operator|.
name|getName
argument_list|()
argument_list|,
literal|"review_data"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|corbaOpType
operator|.
name|getParam
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|corbaOpType
operator|.
name|getRaises
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|hasBadRecord
operator|=
literal|false
expr_stmt|;
name|hasMyException
operator|=
literal|false
expr_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|corbaOpType
operator|.
name|getRaises
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|k
operator|++
control|)
block|{
name|String
name|localPart
init|=
name|corbaOpType
operator|.
name|getRaises
argument_list|()
operator|.
name|get
argument_list|(
name|k
argument_list|)
operator|.
name|getException
argument_list|()
operator|.
name|getLocalPart
argument_list|()
decl_stmt|;
if|if
condition|(
literal|"TestException.BadRecord"
operator|.
name|equals
argument_list|(
name|localPart
argument_list|)
condition|)
block|{
name|hasBadRecord
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"MyExceptionType"
operator|.
name|equals
argument_list|(
name|localPart
argument_list|)
condition|)
block|{
name|hasMyException
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|fail
argument_list|(
literal|"Unexpected Raises: "
operator|+
name|localPart
argument_list|)
expr_stmt|;
block|}
block|}
name|assertTrue
argument_list|(
literal|"Did not find expected TestException.BadRecord"
argument_list|,
name|hasBadRecord
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Did not find expected MyException"
argument_list|,
name|hasMyException
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCORBABindingGeneration
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|fileName
init|=
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"/wsdl/simpleList.wsdl"
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|generator
operator|.
name|setWsdlFile
argument_list|(
name|fileName
argument_list|)
expr_stmt|;
name|generator
operator|.
name|addInterfaceName
argument_list|(
literal|"BasePortType"
argument_list|)
expr_stmt|;
name|Definition
name|model
init|=
name|generator
operator|.
name|generateCORBABinding
argument_list|()
decl_stmt|;
name|QName
name|bName
init|=
operator|new
name|QName
argument_list|(
literal|"http://schemas.apache.org/tests"
argument_list|,
literal|"BaseCORBABinding"
argument_list|,
literal|"tns"
argument_list|)
decl_stmt|;
name|Binding
name|binding
init|=
name|model
operator|.
name|getBinding
argument_list|(
name|bName
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|binding
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"BaseCORBABinding"
argument_list|,
name|binding
operator|.
name|getQName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"BasePortType"
argument_list|,
name|binding
operator|.
name|getPortType
argument_list|()
operator|.
name|getQName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|binding
operator|.
name|getExtensibilityElements
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|binding
operator|.
name|getBindingOperations
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Iterator
name|i
init|=
name|binding
operator|.
name|getExtensibilityElements
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|ExtensibilityElement
name|extElement
init|=
operator|(
name|ExtensibilityElement
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|extElement
operator|.
name|getElementType
argument_list|()
operator|.
name|getLocalPart
argument_list|()
operator|.
name|equals
argument_list|(
literal|"binding"
argument_list|)
condition|)
block|{
name|BindingType
name|bindingType
init|=
operator|(
name|BindingType
operator|)
name|extElement
decl_stmt|;
name|assertEquals
argument_list|(
name|bindingType
operator|.
name|getRepositoryID
argument_list|()
argument_list|,
literal|"IDL:BasePortType:1.0"
argument_list|)
expr_stmt|;
block|}
block|}
name|Iterator
name|j
init|=
name|binding
operator|.
name|getBindingOperations
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|j
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|BindingOperation
name|bindingOperation
init|=
operator|(
name|BindingOperation
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|bindingOperation
operator|.
name|getExtensibilityElements
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|bindingOperation
operator|.
name|getBindingInput
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
literal|"echoString"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|bindingOperation
operator|.
name|getBindingOutput
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
literal|"echoStringResponse"
argument_list|)
expr_stmt|;
name|Iterator
name|bOp
init|=
name|bindingOperation
operator|.
name|getExtensibilityElements
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|bOp
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|ExtensibilityElement
name|extElement
init|=
operator|(
name|ExtensibilityElement
operator|)
name|bOp
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|extElement
operator|.
name|getElementType
argument_list|()
operator|.
name|getLocalPart
argument_list|()
operator|.
name|equals
argument_list|(
literal|"operation"
argument_list|)
condition|)
block|{
name|OperationType
name|corbaOpType
init|=
operator|(
name|OperationType
operator|)
name|extElement
decl_stmt|;
name|assertEquals
argument_list|(
name|corbaOpType
operator|.
name|getName
argument_list|()
argument_list|,
literal|"echoString"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|corbaOpType
operator|.
name|getParam
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|corbaOpType
operator|.
name|getReturn
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
literal|"return"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|corbaOpType
operator|.
name|getReturn
argument_list|()
operator|.
name|getIdltype
argument_list|()
argument_list|,
name|CorbaConstants
operator|.
name|NT_CORBA_STRING
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|corbaOpType
operator|.
name|getParam
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|,
literal|"x"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|corbaOpType
operator|.
name|getParam
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getMode
argument_list|()
operator|.
name|value
argument_list|()
argument_list|,
literal|"in"
argument_list|)
expr_stmt|;
name|QName
name|qname
init|=
operator|new
name|QName
argument_list|(
literal|"http://schemas.apache.org/tests/corba/typemap/"
argument_list|,
literal|"StringEnum1"
argument_list|,
literal|"ns1"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|corbaOpType
operator|.
name|getParam
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getIdltype
argument_list|()
argument_list|,
name|qname
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCORBATypeMapGeneration
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|fileName
init|=
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"/wsdl/simpleList.wsdl"
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|generator
operator|.
name|setWsdlFile
argument_list|(
name|fileName
argument_list|)
expr_stmt|;
name|generator
operator|.
name|addInterfaceName
argument_list|(
literal|"BasePortType"
argument_list|)
expr_stmt|;
name|Definition
name|model
init|=
name|generator
operator|.
name|generateCORBABinding
argument_list|()
decl_stmt|;
name|Document
name|document
init|=
name|writer
operator|.
name|getDocument
argument_list|(
name|model
argument_list|)
decl_stmt|;
name|Element
name|typemap
init|=
name|getElementNode
argument_list|(
name|document
argument_list|,
literal|"corba:typeMapping"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|typemap
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|typemap
operator|.
name|getElementsByTagName
argument_list|(
literal|"corba:sequence"
argument_list|)
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|typemap
operator|.
name|getElementsByTagName
argument_list|(
literal|"corba:enum"
argument_list|)
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSimpleListIdl
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|String
name|fileName
init|=
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"/wsdl/simpleList.wsdl"
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|generator
operator|.
name|setWsdlFile
argument_list|(
name|fileName
argument_list|)
expr_stmt|;
name|generator
operator|.
name|addInterfaceName
argument_list|(
literal|"BasePortType"
argument_list|)
expr_stmt|;
name|generator
operator|.
name|mapBindingToInterface
argument_list|(
literal|"BasePortType"
argument_list|,
literal|"SimpleListCORBABinding"
argument_list|)
expr_stmt|;
name|Definition
name|model
init|=
name|generator
operator|.
name|generateCORBABinding
argument_list|()
decl_stmt|;
name|WSDLToIDLAction
name|idlgen
init|=
operator|new
name|WSDLToIDLAction
argument_list|()
decl_stmt|;
name|idlgen
operator|.
name|setBindingName
argument_list|(
literal|"SimpleListCORBABinding"
argument_list|)
expr_stmt|;
name|idlgen
operator|.
name|setOutputFile
argument_list|(
literal|"simplelist.idl"
argument_list|)
expr_stmt|;
name|idlgen
operator|.
name|generateIDL
argument_list|(
name|model
argument_list|)
expr_stmt|;
name|File
name|f
init|=
operator|new
name|File
argument_list|(
literal|"simplelist.idl"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"simplelist.idl should be generated"
argument_list|,
name|f
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
operator|new
name|File
argument_list|(
literal|"simplelist.idl"
argument_list|)
operator|.
name|deleteOnExit
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMultipartTypeMapGeneration
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|fileName
init|=
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"/wsdl/multipart.wsdl"
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|generator
operator|.
name|setWsdlFile
argument_list|(
name|fileName
argument_list|)
expr_stmt|;
name|generator
operator|.
name|addInterfaceName
argument_list|(
literal|"Test.MultiPart"
argument_list|)
expr_stmt|;
name|Definition
name|model
init|=
name|generator
operator|.
name|generateCORBABinding
argument_list|()
decl_stmt|;
name|Document
name|document
init|=
name|writer
operator|.
name|getDocument
argument_list|(
name|model
argument_list|)
decl_stmt|;
name|Element
name|typemap
init|=
name|getElementNode
argument_list|(
name|document
argument_list|,
literal|"corba:typeMapping"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|typemap
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|typemap
operator|.
name|getElementsByTagName
argument_list|(
literal|"corba:enum"
argument_list|)
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMulitPartIdl
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|String
name|fileName
init|=
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"/wsdl/multipart.wsdl"
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|generator
operator|.
name|setWsdlFile
argument_list|(
name|fileName
argument_list|)
expr_stmt|;
name|generator
operator|.
name|addInterfaceName
argument_list|(
literal|"Test.MultiPart"
argument_list|)
expr_stmt|;
name|generator
operator|.
name|mapBindingToInterface
argument_list|(
literal|"Test.MultiPart"
argument_list|,
literal|"Test.MultiPartCORBABinding"
argument_list|)
expr_stmt|;
name|Definition
name|model
init|=
name|generator
operator|.
name|generateCORBABinding
argument_list|()
decl_stmt|;
name|WSDLToIDLAction
name|idlgen
init|=
operator|new
name|WSDLToIDLAction
argument_list|()
decl_stmt|;
name|idlgen
operator|.
name|setBindingName
argument_list|(
literal|"Test.MultiPartCORBABinding"
argument_list|)
expr_stmt|;
name|idlgen
operator|.
name|setOutputFile
argument_list|(
literal|"multipart.idl"
argument_list|)
expr_stmt|;
name|idlgen
operator|.
name|generateIDL
argument_list|(
name|model
argument_list|)
expr_stmt|;
name|File
name|f
init|=
operator|new
name|File
argument_list|(
literal|"multipart.idl"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"multipart.idl should be generated"
argument_list|,
name|f
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
operator|new
name|File
argument_list|(
literal|"multipart.idl"
argument_list|)
operator|.
name|deleteOnExit
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMultipartCORBABindingGeneration
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|fileName
init|=
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"/wsdl/multipart.wsdl"
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|generator
operator|.
name|setWsdlFile
argument_list|(
name|fileName
argument_list|)
expr_stmt|;
name|generator
operator|.
name|addInterfaceName
argument_list|(
literal|"Test.MultiPart"
argument_list|)
expr_stmt|;
name|Definition
name|model
init|=
name|generator
operator|.
name|generateCORBABinding
argument_list|()
decl_stmt|;
name|QName
name|bName
init|=
operator|new
name|QName
argument_list|(
literal|"http://schemas.apache.org/tests"
argument_list|,
literal|"Test.MultiPartCORBABinding"
argument_list|,
literal|"tns"
argument_list|)
decl_stmt|;
name|Binding
name|binding
init|=
name|model
operator|.
name|getBinding
argument_list|(
name|bName
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|binding
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Test.MultiPartCORBABinding"
argument_list|,
name|binding
operator|.
name|getQName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Test.MultiPart"
argument_list|,
name|binding
operator|.
name|getPortType
argument_list|()
operator|.
name|getQName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|binding
operator|.
name|getExtensibilityElements
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|32
argument_list|,
name|binding
operator|.
name|getBindingOperations
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|List
name|extElements
init|=
name|binding
operator|.
name|getExtensibilityElements
argument_list|()
decl_stmt|;
name|ExtensibilityElement
name|extElement
init|=
operator|(
name|ExtensibilityElement
operator|)
name|extElements
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|extElement
operator|.
name|getElementType
argument_list|()
operator|.
name|getLocalPart
argument_list|()
operator|.
name|equals
argument_list|(
literal|"binding"
argument_list|)
condition|)
block|{
name|BindingType
name|bindingType
init|=
operator|(
name|BindingType
operator|)
name|extElement
decl_stmt|;
name|assertEquals
argument_list|(
name|bindingType
operator|.
name|getRepositoryID
argument_list|()
argument_list|,
literal|"IDL:Test/MultiPart:1.0"
argument_list|)
expr_stmt|;
block|}
name|getStringAttributeTest
argument_list|(
name|binding
argument_list|)
expr_stmt|;
name|getTestIdTest
argument_list|(
name|binding
argument_list|)
expr_stmt|;
name|setTestIdTest
argument_list|(
name|binding
argument_list|)
expr_stmt|;
name|testVoidTest
argument_list|(
name|binding
argument_list|)
expr_stmt|;
name|testPrimitiveTypeTest
argument_list|(
name|binding
argument_list|,
literal|"test_short"
argument_list|,
name|CorbaConstants
operator|.
name|NT_CORBA_SHORT
argument_list|)
expr_stmt|;
name|testPrimitiveTypeTest
argument_list|(
name|binding
argument_list|,
literal|"test_long"
argument_list|,
name|CorbaConstants
operator|.
name|NT_CORBA_LONG
argument_list|)
expr_stmt|;
name|testPrimitiveTypeTest
argument_list|(
name|binding
argument_list|,
literal|"test_longlong"
argument_list|,
name|CorbaConstants
operator|.
name|NT_CORBA_LONGLONG
argument_list|)
expr_stmt|;
name|testPrimitiveTypeTest
argument_list|(
name|binding
argument_list|,
literal|"test_ushort"
argument_list|,
name|CorbaConstants
operator|.
name|NT_CORBA_USHORT
argument_list|)
expr_stmt|;
name|testPrimitiveTypeTest
argument_list|(
name|binding
argument_list|,
literal|"test_ulong"
argument_list|,
name|CorbaConstants
operator|.
name|NT_CORBA_ULONG
argument_list|)
expr_stmt|;
name|testPrimitiveTypeTest
argument_list|(
name|binding
argument_list|,
literal|"test_ulonglong"
argument_list|,
name|CorbaConstants
operator|.
name|NT_CORBA_ULONGLONG
argument_list|)
expr_stmt|;
name|testPrimitiveTypeTest
argument_list|(
name|binding
argument_list|,
literal|"test_float"
argument_list|,
name|CorbaConstants
operator|.
name|NT_CORBA_FLOAT
argument_list|)
expr_stmt|;
name|testPrimitiveTypeTest
argument_list|(
name|binding
argument_list|,
literal|"test_double"
argument_list|,
name|CorbaConstants
operator|.
name|NT_CORBA_DOUBLE
argument_list|)
expr_stmt|;
name|testPrimitiveTypeTest
argument_list|(
name|binding
argument_list|,
literal|"test_octet"
argument_list|,
name|CorbaConstants
operator|.
name|NT_CORBA_OCTET
argument_list|)
expr_stmt|;
name|testPrimitiveTypeTest
argument_list|(
name|binding
argument_list|,
literal|"test_boolean"
argument_list|,
name|CorbaConstants
operator|.
name|NT_CORBA_BOOLEAN
argument_list|)
expr_stmt|;
name|testPrimitiveTypeTest
argument_list|(
name|binding
argument_list|,
literal|"test_char"
argument_list|,
name|CorbaConstants
operator|.
name|NT_CORBA_CHAR
argument_list|)
expr_stmt|;
name|testPrimitiveTypeTest
argument_list|(
name|binding
argument_list|,
literal|"test_integer"
argument_list|,
name|CorbaConstants
operator|.
name|NT_CORBA_LONGLONG
argument_list|)
expr_stmt|;
name|testPrimitiveTypeTest
argument_list|(
name|binding
argument_list|,
literal|"test_nonNegativeInteger"
argument_list|,
name|CorbaConstants
operator|.
name|NT_CORBA_ULONGLONG
argument_list|)
expr_stmt|;
name|testPrimitiveTypeTest
argument_list|(
name|binding
argument_list|,
literal|"test_positiveInteger"
argument_list|,
name|CorbaConstants
operator|.
name|NT_CORBA_ULONGLONG
argument_list|)
expr_stmt|;
name|testPrimitiveTypeTest
argument_list|(
name|binding
argument_list|,
literal|"test_negativeInteger"
argument_list|,
name|CorbaConstants
operator|.
name|NT_CORBA_LONGLONG
argument_list|)
expr_stmt|;
name|testPrimitiveTypeTest
argument_list|(
name|binding
argument_list|,
literal|"test_normalizedString"
argument_list|,
name|CorbaConstants
operator|.
name|NT_CORBA_STRING
argument_list|)
expr_stmt|;
name|testPrimitiveTypeTest
argument_list|(
name|binding
argument_list|,
literal|"test_token"
argument_list|,
name|CorbaConstants
operator|.
name|NT_CORBA_STRING
argument_list|)
expr_stmt|;
name|testPrimitiveTypeTest
argument_list|(
name|binding
argument_list|,
literal|"test_language"
argument_list|,
name|CorbaConstants
operator|.
name|NT_CORBA_STRING
argument_list|)
expr_stmt|;
name|testPrimitiveTypeTest
argument_list|(
name|binding
argument_list|,
literal|"test_Name"
argument_list|,
name|CorbaConstants
operator|.
name|NT_CORBA_STRING
argument_list|)
expr_stmt|;
name|testPrimitiveTypeTest
argument_list|(
name|binding
argument_list|,
literal|"test_NCName"
argument_list|,
name|CorbaConstants
operator|.
name|NT_CORBA_STRING
argument_list|)
expr_stmt|;
name|testPrimitiveTypeTest
argument_list|(
name|binding
argument_list|,
literal|"test_ID"
argument_list|,
name|CorbaConstants
operator|.
name|NT_CORBA_STRING
argument_list|)
expr_stmt|;
name|testPrimitiveTypeTest
argument_list|(
name|binding
argument_list|,
literal|"test_anyURI"
argument_list|,
name|CorbaConstants
operator|.
name|NT_CORBA_STRING
argument_list|)
expr_stmt|;
name|testPrimitiveTypeTest
argument_list|(
name|binding
argument_list|,
literal|"test_nick_name"
argument_list|,
name|CorbaConstants
operator|.
name|NT_CORBA_STRING
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|getStringAttributeTest
parameter_list|(
name|Binding
name|binding
parameter_list|)
block|{
name|BindingOperation
name|bindingOp
init|=
name|binding
operator|.
name|getBindingOperation
argument_list|(
literal|"_get_string_attribute"
argument_list|,
literal|"_get_string_attribute"
argument_list|,
literal|"_get_string_attributeResponse"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"_get_string_attribute"
argument_list|,
name|bindingOp
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|bindingOp
operator|.
name|getExtensibilityElements
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|bindingOp
operator|.
name|getBindingInput
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
literal|"_get_string_attribute"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|bindingOp
operator|.
name|getBindingOutput
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
literal|"_get_string_attributeResponse"
argument_list|)
expr_stmt|;
name|Iterator
name|bOp
init|=
name|bindingOp
operator|.
name|getExtensibilityElements
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|bOp
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|ExtensibilityElement
name|extElement
init|=
operator|(
name|ExtensibilityElement
operator|)
name|bOp
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|extElement
operator|.
name|getElementType
argument_list|()
operator|.
name|getLocalPart
argument_list|()
operator|.
name|equals
argument_list|(
literal|"operation"
argument_list|)
condition|)
block|{
name|OperationType
name|corbaOpType
init|=
operator|(
name|OperationType
operator|)
name|extElement
decl_stmt|;
name|assertEquals
argument_list|(
name|corbaOpType
operator|.
name|getName
argument_list|()
argument_list|,
literal|"_get_string_attribute"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|corbaOpType
operator|.
name|getReturn
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
literal|"return"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|corbaOpType
operator|.
name|getReturn
argument_list|()
operator|.
name|getIdltype
argument_list|()
argument_list|,
name|CorbaConstants
operator|.
name|NT_CORBA_STRING
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|getTestIdTest
parameter_list|(
name|Binding
name|binding
parameter_list|)
block|{
name|BindingOperation
name|bindingOp
init|=
name|binding
operator|.
name|getBindingOperation
argument_list|(
literal|"_get_test_id"
argument_list|,
literal|"_get_test_id"
argument_list|,
literal|"_get_test_idResponse"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"_get_test_id"
argument_list|,
name|bindingOp
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|bindingOp
operator|.
name|getExtensibilityElements
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|bindingOp
operator|.
name|getBindingInput
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
literal|"_get_test_id"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|bindingOp
operator|.
name|getBindingOutput
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
literal|"_get_test_idResponse"
argument_list|)
expr_stmt|;
name|Iterator
name|bOp
init|=
name|bindingOp
operator|.
name|getExtensibilityElements
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|bOp
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|ExtensibilityElement
name|extElement
init|=
operator|(
name|ExtensibilityElement
operator|)
name|bOp
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|extElement
operator|.
name|getElementType
argument_list|()
operator|.
name|getLocalPart
argument_list|()
operator|.
name|equals
argument_list|(
literal|"operation"
argument_list|)
condition|)
block|{
name|OperationType
name|corbaOpType
init|=
operator|(
name|OperationType
operator|)
name|extElement
decl_stmt|;
name|assertEquals
argument_list|(
name|corbaOpType
operator|.
name|getName
argument_list|()
argument_list|,
literal|"_get_test_id"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|corbaOpType
operator|.
name|getReturn
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
literal|"return"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|corbaOpType
operator|.
name|getReturn
argument_list|()
operator|.
name|getIdltype
argument_list|()
argument_list|,
name|CorbaConstants
operator|.
name|NT_CORBA_FLOAT
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|setTestIdTest
parameter_list|(
name|Binding
name|binding
parameter_list|)
block|{
name|BindingOperation
name|bindingOp
init|=
name|binding
operator|.
name|getBindingOperation
argument_list|(
literal|"_set_test_id"
argument_list|,
literal|"_set_test_id"
argument_list|,
literal|"_set_test_idResponse"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"_set_test_id"
argument_list|,
name|bindingOp
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|bindingOp
operator|.
name|getExtensibilityElements
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|bindingOp
operator|.
name|getBindingInput
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
literal|"_set_test_id"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|bindingOp
operator|.
name|getBindingOutput
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
literal|"_set_test_idResponse"
argument_list|)
expr_stmt|;
name|Iterator
name|bOp
init|=
name|bindingOp
operator|.
name|getExtensibilityElements
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|bOp
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|ExtensibilityElement
name|extElement
init|=
operator|(
name|ExtensibilityElement
operator|)
name|bOp
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|extElement
operator|.
name|getElementType
argument_list|()
operator|.
name|getLocalPart
argument_list|()
operator|.
name|equals
argument_list|(
literal|"operation"
argument_list|)
condition|)
block|{
name|OperationType
name|corbaOpType
init|=
operator|(
name|OperationType
operator|)
name|extElement
decl_stmt|;
name|assertEquals
argument_list|(
name|corbaOpType
operator|.
name|getName
argument_list|()
argument_list|,
literal|"_set_test_id"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|corbaOpType
operator|.
name|getParam
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|corbaOpType
operator|.
name|getParam
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|,
literal|"_arg"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|corbaOpType
operator|.
name|getParam
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getMode
argument_list|()
operator|.
name|value
argument_list|()
argument_list|,
literal|"in"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|corbaOpType
operator|.
name|getParam
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getIdltype
argument_list|()
argument_list|,
name|CorbaConstants
operator|.
name|NT_CORBA_FLOAT
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|testVoidTest
parameter_list|(
name|Binding
name|binding
parameter_list|)
block|{
name|BindingOperation
name|bindingOp
init|=
name|binding
operator|.
name|getBindingOperation
argument_list|(
literal|"test_void"
argument_list|,
literal|"test_void"
argument_list|,
literal|"test_voidResponse"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"test_void"
argument_list|,
name|bindingOp
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|bindingOp
operator|.
name|getExtensibilityElements
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|bindingOp
operator|.
name|getBindingInput
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
literal|"test_void"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|bindingOp
operator|.
name|getBindingOutput
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
literal|"test_voidResponse"
argument_list|)
expr_stmt|;
name|Iterator
name|bOp
init|=
name|bindingOp
operator|.
name|getExtensibilityElements
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|bOp
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|ExtensibilityElement
name|extElement
init|=
operator|(
name|ExtensibilityElement
operator|)
name|bOp
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|extElement
operator|.
name|getElementType
argument_list|()
operator|.
name|getLocalPart
argument_list|()
operator|.
name|equals
argument_list|(
literal|"operation"
argument_list|)
condition|)
block|{
name|OperationType
name|corbaOpType
init|=
operator|(
name|OperationType
operator|)
name|extElement
decl_stmt|;
name|assertEquals
argument_list|(
name|corbaOpType
operator|.
name|getName
argument_list|()
argument_list|,
literal|"test_void"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|corbaOpType
operator|.
name|getParam
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|testPrimitiveTypeTest
parameter_list|(
name|Binding
name|binding
parameter_list|,
name|String
name|name
parameter_list|,
name|QName
name|corbaType
parameter_list|)
block|{
name|BindingOperation
name|bindingOp
init|=
name|binding
operator|.
name|getBindingOperation
argument_list|(
name|name
argument_list|,
name|name
argument_list|,
name|name
operator|+
literal|"Response"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|name
argument_list|,
name|bindingOp
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|bindingOp
operator|.
name|getExtensibilityElements
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|bindingOp
operator|.
name|getBindingInput
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|bindingOp
operator|.
name|getBindingOutput
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|name
operator|+
literal|"Response"
argument_list|)
expr_stmt|;
name|Iterator
name|bOp
init|=
name|bindingOp
operator|.
name|getExtensibilityElements
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|bOp
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|ExtensibilityElement
name|extElement
init|=
operator|(
name|ExtensibilityElement
operator|)
name|bOp
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|extElement
operator|.
name|getElementType
argument_list|()
operator|.
name|getLocalPart
argument_list|()
operator|.
name|equals
argument_list|(
literal|"operation"
argument_list|)
condition|)
block|{
name|OperationType
name|corbaOpType
init|=
operator|(
name|OperationType
operator|)
name|extElement
decl_stmt|;
name|assertEquals
argument_list|(
name|corbaOpType
operator|.
name|getName
argument_list|()
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|corbaOpType
operator|.
name|getParam
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|corbaOpType
operator|.
name|getParam
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|,
literal|"x"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|corbaOpType
operator|.
name|getParam
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getMode
argument_list|()
operator|.
name|value
argument_list|()
argument_list|,
literal|"in"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|corbaOpType
operator|.
name|getParam
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getIdltype
argument_list|()
argument_list|,
name|corbaType
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|corbaOpType
operator|.
name|getReturn
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
literal|"return"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|corbaOpType
operator|.
name|getReturn
argument_list|()
operator|.
name|getIdltype
argument_list|()
argument_list|,
name|corbaType
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testArrayMapping
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|String
name|fileName
init|=
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"/wsdl/array.wsdl"
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|generator
operator|.
name|setWsdlFile
argument_list|(
name|fileName
argument_list|)
expr_stmt|;
name|generator
operator|.
name|addInterfaceName
argument_list|(
literal|"X"
argument_list|)
expr_stmt|;
name|Definition
name|model
init|=
name|generator
operator|.
name|generateCORBABinding
argument_list|()
decl_stmt|;
name|QName
name|bName
init|=
operator|new
name|QName
argument_list|(
literal|"http://schemas.apache.org/idl/anon.idl"
argument_list|,
literal|"XCORBABinding"
argument_list|,
literal|"tns"
argument_list|)
decl_stmt|;
name|Binding
name|binding
init|=
name|model
operator|.
name|getBinding
argument_list|(
name|bName
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|binding
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XCORBABinding"
argument_list|,
name|binding
operator|.
name|getQName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"X"
argument_list|,
name|binding
operator|.
name|getPortType
argument_list|()
operator|.
name|getQName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|binding
operator|.
name|getExtensibilityElements
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|binding
operator|.
name|getBindingOperations
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Iterator
name|i
init|=
name|binding
operator|.
name|getExtensibilityElements
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|ExtensibilityElement
name|extElement
init|=
operator|(
name|ExtensibilityElement
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|extElement
operator|.
name|getElementType
argument_list|()
operator|.
name|getLocalPart
argument_list|()
operator|.
name|equals
argument_list|(
literal|"binding"
argument_list|)
condition|)
block|{
name|BindingType
name|bindingType
init|=
operator|(
name|BindingType
operator|)
name|extElement
decl_stmt|;
name|assertEquals
argument_list|(
name|bindingType
operator|.
name|getRepositoryID
argument_list|()
argument_list|,
literal|"IDL:X:1.0"
argument_list|)
expr_stmt|;
block|}
block|}
name|Iterator
name|j
init|=
name|binding
operator|.
name|getBindingOperations
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|j
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|BindingOperation
name|bindingOperation
init|=
operator|(
name|BindingOperation
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|bindingOperation
operator|.
name|getExtensibilityElements
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|bindingOperation
operator|.
name|getBindingInput
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
literal|"op_a"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|bindingOperation
operator|.
name|getBindingOutput
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
literal|"op_aResponse"
argument_list|)
expr_stmt|;
name|Iterator
name|bOp
init|=
name|bindingOperation
operator|.
name|getExtensibilityElements
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|bOp
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|ExtensibilityElement
name|extElement
init|=
operator|(
name|ExtensibilityElement
operator|)
name|bOp
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|extElement
operator|.
name|getElementType
argument_list|()
operator|.
name|getLocalPart
argument_list|()
operator|.
name|equals
argument_list|(
literal|"operation"
argument_list|)
condition|)
block|{
name|OperationType
name|corbaOpType
init|=
operator|(
name|OperationType
operator|)
name|extElement
decl_stmt|;
name|assertEquals
argument_list|(
name|corbaOpType
operator|.
name|getName
argument_list|()
argument_list|,
literal|"op_a"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|corbaOpType
operator|.
name|getParam
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|corbaOpType
operator|.
name|getReturn
argument_list|()
argument_list|)
expr_stmt|;
name|ParamType
name|paramtype
init|=
name|corbaOpType
operator|.
name|getParam
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|paramtype
operator|.
name|getName
argument_list|()
argument_list|,
literal|"part1"
argument_list|)
expr_stmt|;
name|QName
name|idltype
init|=
operator|new
name|QName
argument_list|(
literal|"http://schemas.apache.org/idl/anon.idl/corba/typemap/"
argument_list|,
literal|"ArrayType"
argument_list|,
literal|"ns1"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|paramtype
operator|.
name|getIdltype
argument_list|()
argument_list|,
name|idltype
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|paramtype
operator|.
name|getMode
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
literal|"IN"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// See if an IDL is able to produce from this CORBA Binding.
name|WSDLToIDLAction
name|idlgen
init|=
operator|new
name|WSDLToIDLAction
argument_list|()
decl_stmt|;
name|idlgen
operator|.
name|setBindingName
argument_list|(
literal|"XCORBABinding"
argument_list|)
expr_stmt|;
name|idlgen
operator|.
name|setOutputFile
argument_list|(
literal|"array.idl"
argument_list|)
expr_stmt|;
name|idlgen
operator|.
name|generateIDL
argument_list|(
name|model
argument_list|)
expr_stmt|;
name|File
name|f
init|=
operator|new
name|File
argument_list|(
literal|"array.idl"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"array.idl should be generated"
argument_list|,
name|f
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
operator|new
name|File
argument_list|(
literal|"array.idl"
argument_list|)
operator|.
name|deleteOnExit
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

