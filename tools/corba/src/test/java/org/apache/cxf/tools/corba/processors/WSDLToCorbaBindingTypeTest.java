begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|corba
operator|.
name|processors
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|Definition
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|Port
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|xml
operator|.
name|WSDLWriter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|AddressType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|Anonarray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|Anonfixed
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|Anonsequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|Anonstring
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|Array
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|CorbaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|Struct
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|TypeMappingType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|Union
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|Unionbranch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|DOMUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|corba
operator|.
name|common
operator|.
name|WSDLCorbaFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|corba
operator|.
name|processors
operator|.
name|wsdl
operator|.
name|WSDLToCorbaBinding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|corba
operator|.
name|processors
operator|.
name|wsdl
operator|.
name|WSDLToIDLAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
specifier|public
class|class
name|WSDLToCorbaBindingTypeTest
block|{
name|WSDLToCorbaBinding
name|generator
decl_stmt|;
name|WSDLWriter
name|writer
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|generator
operator|=
operator|new
name|WSDLToCorbaBinding
argument_list|()
expr_stmt|;
try|try
block|{
name|WSDLCorbaFactory
name|wsdlfactory
init|=
name|WSDLCorbaFactory
operator|.
name|newInstance
argument_list|(
literal|"org.apache.cxf.tools.corba.common.WSDLCorbaFactoryImpl"
argument_list|)
decl_stmt|;
name|writer
operator|=
name|wsdlfactory
operator|.
name|newWSDLWriter
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|Element
name|getElementNode
parameter_list|(
name|Document
name|document
parameter_list|,
name|String
name|elName
parameter_list|)
block|{
name|Element
name|root
init|=
name|document
operator|.
name|getDocumentElement
argument_list|()
decl_stmt|;
for|for
control|(
name|Node
name|nd
init|=
name|root
operator|.
name|getFirstChild
argument_list|()
init|;
name|nd
operator|!=
literal|null
condition|;
name|nd
operator|=
name|nd
operator|.
name|getNextSibling
argument_list|()
control|)
block|{
if|if
condition|(
name|Node
operator|.
name|ELEMENT_NODE
operator|==
name|nd
operator|.
name|getNodeType
argument_list|()
operator|&&
operator|(
name|elName
operator|.
name|equals
argument_list|(
name|nd
operator|.
name|getNodeName
argument_list|()
argument_list|)
operator|)
condition|)
block|{
return|return
operator|(
name|Element
operator|)
name|nd
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testWsAddressingAccountType
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|String
name|fileName
init|=
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"/wsdl/wsaddressing_bank.wsdl"
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|generator
operator|.
name|setWsdlFile
argument_list|(
name|fileName
argument_list|)
expr_stmt|;
name|generator
operator|.
name|addInterfaceName
argument_list|(
literal|"Bank"
argument_list|)
expr_stmt|;
name|Definition
name|model
init|=
name|generator
operator|.
name|generateCORBABinding
argument_list|()
decl_stmt|;
name|Document
name|document
init|=
name|writer
operator|.
name|getDocument
argument_list|(
name|model
argument_list|)
decl_stmt|;
name|Element
name|typemap
init|=
name|getElementNode
argument_list|(
name|document
argument_list|,
literal|"corba:typeMapping"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|typemap
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|DOMUtils
operator|.
name|findAllElementsByTagNameNS
argument_list|(
name|typemap
argument_list|,
literal|"http://cxf.apache.org/bindings/corba"
argument_list|,
literal|"sequence"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|DOMUtils
operator|.
name|findAllElementsByTagNameNS
argument_list|(
name|typemap
argument_list|,
literal|"http://cxf.apache.org/bindings/corba"
argument_list|,
literal|"object"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|WSDLToIDLAction
name|idlgen
init|=
operator|new
name|WSDLToIDLAction
argument_list|()
decl_stmt|;
name|idlgen
operator|.
name|setBindingName
argument_list|(
literal|"BankCORBABinding"
argument_list|)
expr_stmt|;
name|idlgen
operator|.
name|setOutputFile
argument_list|(
literal|"wsaddressing_bank.idl"
argument_list|)
expr_stmt|;
name|idlgen
operator|.
name|generateIDL
argument_list|(
name|model
argument_list|)
expr_stmt|;
name|File
name|f
init|=
operator|new
name|File
argument_list|(
literal|"wsaddressing_bank.idl"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"wsaddressing_bank.idl should be generated"
argument_list|,
name|f
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
operator|new
name|File
argument_list|(
literal|"wsaddressing_bank.idl"
argument_list|)
operator|.
name|deleteOnExit
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testWsAddressingBankType
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|String
name|fileName
init|=
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"/wsdl/wsaddressing_account.wsdl"
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|generator
operator|.
name|setWsdlFile
argument_list|(
name|fileName
argument_list|)
expr_stmt|;
name|generator
operator|.
name|addInterfaceName
argument_list|(
literal|"Account"
argument_list|)
expr_stmt|;
name|Definition
name|model
init|=
name|generator
operator|.
name|generateCORBABinding
argument_list|()
decl_stmt|;
name|Document
name|document
init|=
name|writer
operator|.
name|getDocument
argument_list|(
name|model
argument_list|)
decl_stmt|;
name|Element
name|typemap
init|=
name|getElementNode
argument_list|(
name|document
argument_list|,
literal|"corba:typeMapping"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|typemap
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|typemap
operator|.
name|getElementsByTagName
argument_list|(
literal|"corba:object"
argument_list|)
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|WSDLToIDLAction
name|idlgen
init|=
operator|new
name|WSDLToIDLAction
argument_list|()
decl_stmt|;
name|idlgen
operator|.
name|setBindingName
argument_list|(
literal|"AccountCORBABinding"
argument_list|)
expr_stmt|;
name|idlgen
operator|.
name|setOutputFile
argument_list|(
literal|"wsaddressing_account.idl"
argument_list|)
expr_stmt|;
name|idlgen
operator|.
name|generateIDL
argument_list|(
name|model
argument_list|)
expr_stmt|;
name|File
name|f
init|=
operator|new
name|File
argument_list|(
literal|"wsaddressing_account.idl"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"wsaddressing_account.idl should be generated"
argument_list|,
name|f
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
operator|new
name|File
argument_list|(
literal|"wsaddressing_account.idl"
argument_list|)
operator|.
name|deleteOnExit
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testWsAddressingTypes
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|String
name|fileName
init|=
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"/wsdl/wsaddressing_server.wsdl"
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|generator
operator|.
name|setWsdlFile
argument_list|(
name|fileName
argument_list|)
expr_stmt|;
name|generator
operator|.
name|addInterfaceName
argument_list|(
literal|"TestServer"
argument_list|)
expr_stmt|;
name|Definition
name|model
init|=
name|generator
operator|.
name|generateCORBABinding
argument_list|()
decl_stmt|;
name|Document
name|document
init|=
name|writer
operator|.
name|getDocument
argument_list|(
name|model
argument_list|)
decl_stmt|;
name|Element
name|typemap
init|=
name|getElementNode
argument_list|(
name|document
argument_list|,
literal|"corba:typeMapping"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|typemap
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|typemap
operator|.
name|getElementsByTagName
argument_list|(
literal|"corba:object"
argument_list|)
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|WSDLToIDLAction
name|idlgen
init|=
operator|new
name|WSDLToIDLAction
argument_list|()
decl_stmt|;
name|idlgen
operator|.
name|setBindingName
argument_list|(
literal|"TestServerCORBABinding"
argument_list|)
expr_stmt|;
name|idlgen
operator|.
name|setOutputFile
argument_list|(
literal|"wsaddressing_server.idl"
argument_list|)
expr_stmt|;
name|idlgen
operator|.
name|generateIDL
argument_list|(
name|model
argument_list|)
expr_stmt|;
name|File
name|f
init|=
operator|new
name|File
argument_list|(
literal|"wsaddressing_server.idl"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"wsaddressing_server.idl should be generated"
argument_list|,
name|f
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
operator|new
name|File
argument_list|(
literal|"wsaddressing_server.idl"
argument_list|)
operator|.
name|deleteOnExit
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDateTimeTypes
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|String
name|fileName
init|=
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"/wsdl/datetime.wsdl"
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|generator
operator|.
name|setWsdlFile
argument_list|(
name|fileName
argument_list|)
expr_stmt|;
name|generator
operator|.
name|addInterfaceName
argument_list|(
literal|"BasePortType"
argument_list|)
expr_stmt|;
name|Definition
name|model
init|=
name|generator
operator|.
name|generateCORBABinding
argument_list|()
decl_stmt|;
name|Document
name|document
init|=
name|writer
operator|.
name|getDocument
argument_list|(
name|model
argument_list|)
decl_stmt|;
name|Element
name|typemap
init|=
name|getElementNode
argument_list|(
name|document
argument_list|,
literal|"corba:typeMapping"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|typemap
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|typemap
operator|.
name|getElementsByTagName
argument_list|(
literal|"corba:union"
argument_list|)
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|typemap
operator|.
name|getElementsByTagName
argument_list|(
literal|"corba:struct"
argument_list|)
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|WSDLToIDLAction
name|idlgen
init|=
operator|new
name|WSDLToIDLAction
argument_list|()
decl_stmt|;
name|idlgen
operator|.
name|setBindingName
argument_list|(
literal|"BaseCORBABinding"
argument_list|)
expr_stmt|;
name|idlgen
operator|.
name|setOutputFile
argument_list|(
literal|"datetime.idl"
argument_list|)
expr_stmt|;
name|idlgen
operator|.
name|generateIDL
argument_list|(
name|model
argument_list|)
expr_stmt|;
name|File
name|f
init|=
operator|new
name|File
argument_list|(
literal|"datetime.idl"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"datetime.idl should be generated"
argument_list|,
name|f
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
operator|new
name|File
argument_list|(
literal|"datetime.idl"
argument_list|)
operator|.
name|deleteOnExit
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNestedInterfaceTypes
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|String
name|fileName
init|=
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"/wsdl/nested_interfaces.wsdl"
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|generator
operator|.
name|setWsdlFile
argument_list|(
name|fileName
argument_list|)
expr_stmt|;
name|generator
operator|.
name|addInterfaceName
argument_list|(
literal|"C.C1"
argument_list|)
expr_stmt|;
name|Definition
name|model
init|=
name|generator
operator|.
name|generateCORBABinding
argument_list|()
decl_stmt|;
name|Document
name|document
init|=
name|writer
operator|.
name|getDocument
argument_list|(
name|model
argument_list|)
decl_stmt|;
name|Element
name|typemap
init|=
name|getElementNode
argument_list|(
name|document
argument_list|,
literal|"corba:typeMapping"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|typemap
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|typemap
operator|.
name|getElementsByTagName
argument_list|(
literal|"corba:anonstring"
argument_list|)
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|9
argument_list|,
name|typemap
operator|.
name|getElementsByTagName
argument_list|(
literal|"corba:struct"
argument_list|)
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|WSDLToIDLAction
name|idlgen
init|=
operator|new
name|WSDLToIDLAction
argument_list|()
decl_stmt|;
name|idlgen
operator|.
name|setBindingName
argument_list|(
literal|"C.C1CORBABinding"
argument_list|)
expr_stmt|;
name|idlgen
operator|.
name|setOutputFile
argument_list|(
literal|"nested_interfaces.idl"
argument_list|)
expr_stmt|;
name|idlgen
operator|.
name|generateIDL
argument_list|(
name|model
argument_list|)
expr_stmt|;
name|File
name|f
init|=
operator|new
name|File
argument_list|(
literal|"nested_interfaces.idl"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"nested_interfaces.idl should be generated"
argument_list|,
name|f
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
operator|new
name|File
argument_list|(
literal|"nested_interfaces.idl"
argument_list|)
operator|.
name|deleteOnExit
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNestedComplexTypes
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|String
name|fileName
init|=
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"/wsdl/nested_complex.wsdl"
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|generator
operator|.
name|setWsdlFile
argument_list|(
name|fileName
argument_list|)
expr_stmt|;
name|generator
operator|.
name|addInterfaceName
argument_list|(
literal|"X"
argument_list|)
expr_stmt|;
name|Definition
name|model
init|=
name|generator
operator|.
name|generateCORBABinding
argument_list|()
decl_stmt|;
name|Document
name|document
init|=
name|writer
operator|.
name|getDocument
argument_list|(
name|model
argument_list|)
decl_stmt|;
name|Element
name|typemap
init|=
name|getElementNode
argument_list|(
name|document
argument_list|,
literal|"corba:typeMapping"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|typemap
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|typemap
operator|.
name|getElementsByTagName
argument_list|(
literal|"corba:union"
argument_list|)
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|14
argument_list|,
name|typemap
operator|.
name|getElementsByTagName
argument_list|(
literal|"corba:struct"
argument_list|)
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|typemap
operator|.
name|getElementsByTagName
argument_list|(
literal|"corba:enum"
argument_list|)
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|typemap
operator|.
name|getElementsByTagName
argument_list|(
literal|"corba:array"
argument_list|)
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|WSDLToIDLAction
name|idlgen
init|=
operator|new
name|WSDLToIDLAction
argument_list|()
decl_stmt|;
name|idlgen
operator|.
name|setBindingName
argument_list|(
literal|"XCORBABinding"
argument_list|)
expr_stmt|;
name|idlgen
operator|.
name|setOutputFile
argument_list|(
literal|"nested_complex.idl"
argument_list|)
expr_stmt|;
name|idlgen
operator|.
name|generateIDL
argument_list|(
name|model
argument_list|)
expr_stmt|;
name|File
name|f
init|=
operator|new
name|File
argument_list|(
literal|"nested_complex.idl"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"nested_complex.idl should be generated"
argument_list|,
name|f
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
operator|new
name|File
argument_list|(
literal|"nested_complex.idl"
argument_list|)
operator|.
name|deleteOnExit
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNestedDerivedTypes
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|String
name|fileName
init|=
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"/wsdl/nested-derivedtypes.wsdl"
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|generator
operator|.
name|setWsdlFile
argument_list|(
name|fileName
argument_list|)
expr_stmt|;
name|generator
operator|.
name|addInterfaceName
argument_list|(
literal|"DerivedTypesPortType"
argument_list|)
expr_stmt|;
name|Definition
name|model
init|=
name|generator
operator|.
name|generateCORBABinding
argument_list|()
decl_stmt|;
name|Document
name|document
init|=
name|writer
operator|.
name|getDocument
argument_list|(
name|model
argument_list|)
decl_stmt|;
name|Element
name|typemap
init|=
name|getElementNode
argument_list|(
name|document
argument_list|,
literal|"corba:typeMapping"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|typemap
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|typemap
operator|.
name|getElementsByTagName
argument_list|(
literal|"corba:union"
argument_list|)
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|58
argument_list|,
name|typemap
operator|.
name|getElementsByTagName
argument_list|(
literal|"corba:struct"
argument_list|)
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|typemap
operator|.
name|getElementsByTagName
argument_list|(
literal|"corba:sequence"
argument_list|)
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|WSDLToIDLAction
name|idlgen
init|=
operator|new
name|WSDLToIDLAction
argument_list|()
decl_stmt|;
name|idlgen
operator|.
name|setBindingName
argument_list|(
literal|"DerivedTypesCORBABinding"
argument_list|)
expr_stmt|;
name|idlgen
operator|.
name|setOutputFile
argument_list|(
literal|"nested-derivedtypes.idl"
argument_list|)
expr_stmt|;
name|idlgen
operator|.
name|generateIDL
argument_list|(
name|model
argument_list|)
expr_stmt|;
name|File
name|f
init|=
operator|new
name|File
argument_list|(
literal|"nested-derivedtypes.idl"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"nested-derivedtypes.idl should be generated"
argument_list|,
name|f
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
operator|new
name|File
argument_list|(
literal|"nested-derivedtypes.idl"
argument_list|)
operator|.
name|deleteOnExit
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNestedType
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|String
name|fileName
init|=
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"/wsdl/nested.wsdl"
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|generator
operator|.
name|setWsdlFile
argument_list|(
name|fileName
argument_list|)
expr_stmt|;
name|generator
operator|.
name|addInterfaceName
argument_list|(
literal|"TypeInheritancePortType"
argument_list|)
expr_stmt|;
name|Definition
name|model
init|=
name|generator
operator|.
name|generateCORBABinding
argument_list|()
decl_stmt|;
name|Document
name|document
init|=
name|writer
operator|.
name|getDocument
argument_list|(
name|model
argument_list|)
decl_stmt|;
name|Element
name|typemap
init|=
name|getElementNode
argument_list|(
name|document
argument_list|,
literal|"corba:typeMapping"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|typemap
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|typemap
operator|.
name|getElementsByTagName
argument_list|(
literal|"corba:union"
argument_list|)
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|23
argument_list|,
name|typemap
operator|.
name|getElementsByTagName
argument_list|(
literal|"corba:struct"
argument_list|)
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|typemap
operator|.
name|getElementsByTagName
argument_list|(
literal|"corba:anonstring"
argument_list|)
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|WSDLToIDLAction
name|idlgen
init|=
operator|new
name|WSDLToIDLAction
argument_list|()
decl_stmt|;
name|idlgen
operator|.
name|setBindingName
argument_list|(
literal|"TypeInheritanceCORBABinding"
argument_list|)
expr_stmt|;
name|idlgen
operator|.
name|setOutputFile
argument_list|(
literal|"nested.idl"
argument_list|)
expr_stmt|;
name|idlgen
operator|.
name|generateIDL
argument_list|(
name|model
argument_list|)
expr_stmt|;
name|File
name|f
init|=
operator|new
name|File
argument_list|(
literal|"nested.idl"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"nested.idl should be generated"
argument_list|,
name|f
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
operator|new
name|File
argument_list|(
literal|"nested.idl"
argument_list|)
operator|.
name|deleteOnExit
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNillableType
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|String
name|fileName
init|=
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"/wsdl/nillable.wsdl"
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|generator
operator|.
name|setWsdlFile
argument_list|(
name|fileName
argument_list|)
expr_stmt|;
name|generator
operator|.
name|addInterfaceName
argument_list|(
literal|"NillablePortType"
argument_list|)
expr_stmt|;
name|Definition
name|model
init|=
name|generator
operator|.
name|generateCORBABinding
argument_list|()
decl_stmt|;
name|Document
name|document
init|=
name|writer
operator|.
name|getDocument
argument_list|(
name|model
argument_list|)
decl_stmt|;
name|Element
name|typemap
init|=
name|getElementNode
argument_list|(
name|document
argument_list|,
literal|"corba:typeMapping"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|typemap
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|typemap
operator|.
name|getElementsByTagName
argument_list|(
literal|"corba:union"
argument_list|)
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|typemap
operator|.
name|getElementsByTagName
argument_list|(
literal|"corba:struct"
argument_list|)
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|TypeMappingType
name|mapType
init|=
operator|(
name|TypeMappingType
operator|)
name|model
operator|.
name|getExtensibilityElements
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|WSDLToIDLAction
name|idlgen
init|=
operator|new
name|WSDLToIDLAction
argument_list|()
decl_stmt|;
name|idlgen
operator|.
name|setBindingName
argument_list|(
literal|"NillableCORBABinding"
argument_list|)
expr_stmt|;
name|idlgen
operator|.
name|setOutputFile
argument_list|(
literal|"nillable.idl"
argument_list|)
expr_stmt|;
name|idlgen
operator|.
name|generateIDL
argument_list|(
name|model
argument_list|)
expr_stmt|;
name|Union
name|un
init|=
operator|(
name|Union
operator|)
name|mapType
operator|.
name|getStructOrExceptionOrUnion
argument_list|()
operator|.
name|get
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Name is incorrect for Union Type"
argument_list|,
literal|"long_nil"
argument_list|,
name|un
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Type is incorrect for Union Type"
argument_list|,
literal|"PEl"
argument_list|,
name|un
operator|.
name|getType
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
name|Unionbranch
name|unbranch
init|=
name|un
operator|.
name|getUnionbranch
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Name is incorrect for UnionBranch Type"
argument_list|,
literal|"value"
argument_list|,
name|unbranch
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Type is incorrect for UnionBranch Type"
argument_list|,
literal|"long"
argument_list|,
name|unbranch
operator|.
name|getIdltype
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|f
init|=
operator|new
name|File
argument_list|(
literal|"nillable.idl"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"nillable.idl should be generated"
argument_list|,
name|f
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
operator|new
name|File
argument_list|(
literal|"nillable.idl"
argument_list|)
operator|.
name|deleteOnExit
argument_list|()
expr_stmt|;
block|}
block|}
comment|// tests Type Inheritance and attributes.
annotation|@
name|Test
specifier|public
name|void
name|testTypeInheritance
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|String
name|fileName
init|=
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"/wsdl/TypeInheritance.wsdl"
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|generator
operator|.
name|setWsdlFile
argument_list|(
name|fileName
argument_list|)
expr_stmt|;
name|generator
operator|.
name|addInterfaceName
argument_list|(
literal|"TypeInheritancePortType"
argument_list|)
expr_stmt|;
name|Definition
name|model
init|=
name|generator
operator|.
name|generateCORBABinding
argument_list|()
decl_stmt|;
name|Document
name|document
init|=
name|writer
operator|.
name|getDocument
argument_list|(
name|model
argument_list|)
decl_stmt|;
name|Element
name|typemap
init|=
name|getElementNode
argument_list|(
name|document
argument_list|,
literal|"corba:typeMapping"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|typemap
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|typemap
operator|.
name|getElementsByTagName
argument_list|(
literal|"corba:union"
argument_list|)
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|typemap
operator|.
name|getElementsByTagName
argument_list|(
literal|"corba:anonstring"
argument_list|)
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|17
argument_list|,
name|typemap
operator|.
name|getElementsByTagName
argument_list|(
literal|"corba:struct"
argument_list|)
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|TypeMappingType
name|mapType
init|=
operator|(
name|TypeMappingType
operator|)
name|model
operator|.
name|getExtensibilityElements
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|WSDLToIDLAction
name|idlgen
init|=
operator|new
name|WSDLToIDLAction
argument_list|()
decl_stmt|;
name|idlgen
operator|.
name|setBindingName
argument_list|(
literal|"TypeInheritanceCORBABinding"
argument_list|)
expr_stmt|;
name|idlgen
operator|.
name|setOutputFile
argument_list|(
literal|"typeInherit.idl"
argument_list|)
expr_stmt|;
name|idlgen
operator|.
name|generateIDL
argument_list|(
name|model
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|CorbaType
argument_list|>
name|types
init|=
name|mapType
operator|.
name|getStructOrExceptionOrUnion
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|types
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|CorbaType
name|type
init|=
name|types
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"Type5SequenceStruct"
operator|.
name|equals
argument_list|(
name|type
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|assertTrue
argument_list|(
literal|"Name is incorrect for Type5SequenceStruct Type"
argument_list|,
name|type
operator|instanceof
name|Struct
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Type is incorrect for AnonSequence Type"
argument_list|,
literal|"Type5"
argument_list|,
name|type
operator|.
name|getType
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"attrib2Type"
operator|.
name|equals
argument_list|(
name|type
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|assertTrue
argument_list|(
literal|"Name is incorrect for attrib2Type Type"
argument_list|,
name|type
operator|instanceof
name|Anonstring
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Type is incorrect for AnonString Type"
argument_list|,
literal|"string"
argument_list|,
name|type
operator|.
name|getType
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"attrib2Type_nil"
operator|.
name|equals
argument_list|(
name|type
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|assertTrue
argument_list|(
literal|"Name is incorrect for Struct Type"
argument_list|,
name|type
operator|instanceof
name|Union
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Type is incorrect for AnonSequence Type"
argument_list|,
literal|"attrib2"
argument_list|,
name|type
operator|.
name|getType
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|File
name|f
init|=
operator|new
name|File
argument_list|(
literal|"typeInherit.idl"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"typeInherit.idl should be generated"
argument_list|,
name|f
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
operator|new
name|File
argument_list|(
literal|"typeInherit.idl"
argument_list|)
operator|.
name|deleteOnExit
argument_list|()
expr_stmt|;
block|}
block|}
comment|// tests anonymous strings and fixed types.
annotation|@
name|Test
specifier|public
name|void
name|testAnonFixedType
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|String
name|fileName
init|=
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"/wsdl/anonfixed.wsdl"
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|generator
operator|.
name|setWsdlFile
argument_list|(
name|fileName
argument_list|)
expr_stmt|;
name|generator
operator|.
name|addInterfaceName
argument_list|(
literal|"X"
argument_list|)
expr_stmt|;
name|Definition
name|model
init|=
name|generator
operator|.
name|generateCORBABinding
argument_list|()
decl_stmt|;
name|Document
name|document
init|=
name|writer
operator|.
name|getDocument
argument_list|(
name|model
argument_list|)
decl_stmt|;
name|Element
name|typemap
init|=
name|getElementNode
argument_list|(
name|document
argument_list|,
literal|"corba:typeMapping"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|typemap
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|typemap
operator|.
name|getElementsByTagName
argument_list|(
literal|"corba:anonfixed"
argument_list|)
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|typemap
operator|.
name|getElementsByTagName
argument_list|(
literal|"corba:anonstring"
argument_list|)
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|typemap
operator|.
name|getElementsByTagName
argument_list|(
literal|"corba:struct"
argument_list|)
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|TypeMappingType
name|mapType
init|=
operator|(
name|TypeMappingType
operator|)
name|model
operator|.
name|getExtensibilityElements
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|WSDLToIDLAction
name|idlgen
init|=
operator|new
name|WSDLToIDLAction
argument_list|()
decl_stmt|;
name|idlgen
operator|.
name|setBindingName
argument_list|(
literal|"XCORBABinding"
argument_list|)
expr_stmt|;
name|idlgen
operator|.
name|setOutputFile
argument_list|(
literal|"atype.idl"
argument_list|)
expr_stmt|;
name|idlgen
operator|.
name|generateIDL
argument_list|(
name|model
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|CorbaType
argument_list|>
name|types
init|=
name|mapType
operator|.
name|getStructOrExceptionOrUnion
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|types
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|CorbaType
name|type
init|=
name|types
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|instanceof
name|Anonstring
condition|)
block|{
name|Anonstring
name|str
init|=
operator|(
name|Anonstring
operator|)
name|type
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Name is incorrect for Array Type"
argument_list|,
literal|"X._1_S"
argument_list|,
name|str
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Type is incorrect for AnonString Type"
argument_list|,
literal|"string"
argument_list|,
name|str
operator|.
name|getType
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|instanceof
name|Anonfixed
condition|)
block|{
name|Anonfixed
name|fx
init|=
operator|(
name|Anonfixed
operator|)
name|type
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Name is incorrect for Anon Array Type"
argument_list|,
literal|"X._2_S"
argument_list|,
name|fx
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Type is incorrect for AnonFixed Type"
argument_list|,
literal|"decimal"
argument_list|,
name|fx
operator|.
name|getType
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|instanceof
name|Struct
condition|)
block|{
name|Struct
name|struct
init|=
operator|(
name|Struct
operator|)
name|type
decl_stmt|;
name|String
index|[]
name|testResult
decl_stmt|;
if|if
condition|(
literal|"X.op_a"
operator|.
name|equals
argument_list|(
name|struct
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|testResult
operator|=
operator|new
name|String
index|[]
block|{
literal|"X.op_a"
block|,
literal|"X.op_a"
block|,
literal|"p1"
block|,
literal|"X.S"
block|,
literal|"p2"
block|,
literal|"X.S"
block|}
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"X.op_aResult"
operator|.
name|equals
argument_list|(
name|struct
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|testResult
operator|=
operator|new
name|String
index|[]
block|{
literal|"X.op_aResult"
block|,
literal|"X.op_aResult"
block|,
literal|"return"
block|,
literal|"X.S"
block|,
literal|"p2"
block|,
literal|"X.S"
block|}
expr_stmt|;
block|}
else|else
block|{
name|testResult
operator|=
operator|new
name|String
index|[]
block|{
literal|"X.S"
block|,
literal|"X.S"
block|,
literal|"str"
block|,
literal|"X._1_S"
block|,
literal|"fx"
block|,
literal|"X._2_S"
block|}
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"Name is incorrect for Anon Array Type"
argument_list|,
name|testResult
index|[
literal|0
index|]
argument_list|,
name|struct
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Type is incorrect for Struct Type"
argument_list|,
name|testResult
index|[
literal|1
index|]
argument_list|,
name|struct
operator|.
name|getType
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Name for first Struct Member Type is incorrect"
argument_list|,
name|testResult
index|[
literal|2
index|]
argument_list|,
name|struct
operator|.
name|getMember
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Idltype for first Struct Member Type is incorrect"
argument_list|,
name|testResult
index|[
literal|3
index|]
argument_list|,
name|struct
operator|.
name|getMember
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getIdltype
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Name for second Struct Member Type is incorrect"
argument_list|,
name|testResult
index|[
literal|4
index|]
argument_list|,
name|struct
operator|.
name|getMember
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Idltype for second Struct Member Type is incorrect"
argument_list|,
name|testResult
index|[
literal|5
index|]
argument_list|,
name|struct
operator|.
name|getMember
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getIdltype
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//System.err.println("Type: " + i + " " + type.getClass().getName());
block|}
block|}
name|File
name|f
init|=
operator|new
name|File
argument_list|(
literal|"atype.idl"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"atype.idl should be generated"
argument_list|,
name|f
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
operator|new
name|File
argument_list|(
literal|"atype.idl"
argument_list|)
operator|.
name|deleteOnExit
argument_list|()
expr_stmt|;
block|}
block|}
comment|// tests anonymous arrays and sequences
annotation|@
name|Test
specifier|public
name|void
name|testAnonType
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|String
name|fileName
init|=
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"/wsdl/atype.wsdl"
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|generator
operator|.
name|setWsdlFile
argument_list|(
name|fileName
argument_list|)
expr_stmt|;
name|generator
operator|.
name|addInterfaceName
argument_list|(
literal|"X"
argument_list|)
expr_stmt|;
name|Definition
name|model
init|=
name|generator
operator|.
name|generateCORBABinding
argument_list|()
decl_stmt|;
name|Document
name|document
init|=
name|writer
operator|.
name|getDocument
argument_list|(
name|model
argument_list|)
decl_stmt|;
name|Element
name|typemap
init|=
name|getElementNode
argument_list|(
name|document
argument_list|,
literal|"corba:typeMapping"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|typemap
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|typemap
operator|.
name|getElementsByTagName
argument_list|(
literal|"corba:anonsequence"
argument_list|)
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|typemap
operator|.
name|getElementsByTagName
argument_list|(
literal|"corba:anonarray"
argument_list|)
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|typemap
operator|.
name|getElementsByTagName
argument_list|(
literal|"corba:array"
argument_list|)
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|typemap
operator|.
name|getElementsByTagName
argument_list|(
literal|"corba:struct"
argument_list|)
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|TypeMappingType
name|mapType
init|=
operator|(
name|TypeMappingType
operator|)
name|model
operator|.
name|getExtensibilityElements
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|CorbaType
argument_list|>
name|tmap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|CorbaType
name|type
range|:
name|mapType
operator|.
name|getStructOrExceptionOrUnion
argument_list|()
control|)
block|{
name|tmap
operator|.
name|put
argument_list|(
name|type
operator|.
name|getName
argument_list|()
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
name|WSDLToIDLAction
name|idlgen
init|=
operator|new
name|WSDLToIDLAction
argument_list|()
decl_stmt|;
name|idlgen
operator|.
name|setBindingName
argument_list|(
literal|"XCORBABinding"
argument_list|)
expr_stmt|;
name|idlgen
operator|.
name|setOutputFile
argument_list|(
literal|"atype.idl"
argument_list|)
expr_stmt|;
name|idlgen
operator|.
name|generateIDL
argument_list|(
name|model
argument_list|)
expr_stmt|;
name|Array
name|arr
init|=
operator|(
name|Array
operator|)
name|tmap
operator|.
name|get
argument_list|(
literal|"X.A"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|arr
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ElementType is incorrect for Array Type"
argument_list|,
literal|"X._5_A"
argument_list|,
name|arr
operator|.
name|getElemtype
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
name|Anonarray
name|arr2
init|=
operator|(
name|Anonarray
operator|)
name|tmap
operator|.
name|get
argument_list|(
literal|"X._5_A"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|arr2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ElementType is incorrect for Anon Array Type"
argument_list|,
literal|"X._4_A"
argument_list|,
name|arr2
operator|.
name|getElemtype
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
name|Anonarray
name|arr3
init|=
operator|(
name|Anonarray
operator|)
name|tmap
operator|.
name|get
argument_list|(
literal|"X._4_A"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|arr3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ElementType is incorrect for Anon Array Type"
argument_list|,
literal|"X._1_A"
argument_list|,
name|arr3
operator|.
name|getElemtype
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
name|Anonsequence
name|seq
init|=
operator|(
name|Anonsequence
operator|)
name|tmap
operator|.
name|get
argument_list|(
literal|"X._1_A"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|seq
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ElementType is incorrect for Anon Sequence Type"
argument_list|,
literal|"X._2_A"
argument_list|,
name|seq
operator|.
name|getElemtype
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
name|Anonsequence
name|seq2
init|=
operator|(
name|Anonsequence
operator|)
name|tmap
operator|.
name|get
argument_list|(
literal|"X._2_A"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|seq2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ElementType is incorrect for Anon Sequence Type"
argument_list|,
literal|"X._3_A"
argument_list|,
name|seq2
operator|.
name|getElemtype
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
name|Anonsequence
name|seq3
init|=
operator|(
name|Anonsequence
operator|)
name|tmap
operator|.
name|get
argument_list|(
literal|"X._3_A"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|seq3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ElementType is incorrect for Anon Sequence Type"
argument_list|,
literal|"long"
argument_list|,
name|seq3
operator|.
name|getElemtype
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
name|File
name|f
init|=
operator|new
name|File
argument_list|(
literal|"atype.idl"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"atype.idl should be generated"
argument_list|,
name|f
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
operator|new
name|File
argument_list|(
literal|"atype.idl"
argument_list|)
operator|.
name|deleteOnExit
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAnyType
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|String
name|fileName
init|=
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"/wsdl/any.wsdl"
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|generator
operator|.
name|setWsdlFile
argument_list|(
name|fileName
argument_list|)
expr_stmt|;
name|generator
operator|.
name|addInterfaceName
argument_list|(
literal|"anyInterface"
argument_list|)
expr_stmt|;
name|Definition
name|model
init|=
name|generator
operator|.
name|generateCORBABinding
argument_list|()
decl_stmt|;
name|TypeMappingType
name|mapType
init|=
operator|(
name|TypeMappingType
operator|)
name|model
operator|.
name|getExtensibilityElements
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|mapType
operator|.
name|getStructOrExceptionOrUnion
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|strcnt
init|=
literal|0
decl_stmt|;
name|int
name|unioncnt
init|=
literal|0
decl_stmt|;
for|for
control|(
name|CorbaType
name|corbaType
range|:
name|mapType
operator|.
name|getStructOrExceptionOrUnion
argument_list|()
control|)
block|{
if|if
condition|(
name|corbaType
operator|instanceof
name|Struct
condition|)
block|{
name|strcnt
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|corbaType
operator|instanceof
name|Union
condition|)
block|{
name|unioncnt
operator|++
expr_stmt|;
block|}
block|}
name|assertNotNull
argument_list|(
name|mapType
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|strcnt
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|unioncnt
argument_list|)
expr_stmt|;
name|WSDLToIDLAction
name|idlgen
init|=
operator|new
name|WSDLToIDLAction
argument_list|()
decl_stmt|;
name|idlgen
operator|.
name|setBindingName
argument_list|(
literal|"anyInterfaceCORBABinding"
argument_list|)
expr_stmt|;
name|idlgen
operator|.
name|setOutputFile
argument_list|(
literal|"any.idl"
argument_list|)
expr_stmt|;
name|idlgen
operator|.
name|generateIDL
argument_list|(
name|model
argument_list|)
expr_stmt|;
name|File
name|f
init|=
operator|new
name|File
argument_list|(
literal|"any.idl"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"any.idl should be generated"
argument_list|,
name|f
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
operator|new
name|File
argument_list|(
literal|"any.idl"
argument_list|)
operator|.
name|deleteOnExit
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMultipleBindings
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|fileName
init|=
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"/wsdl/multiplePortTypes.wsdl"
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|generator
operator|.
name|setWsdlFile
argument_list|(
name|fileName
argument_list|)
expr_stmt|;
name|generator
operator|.
name|setAllBindings
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Definition
name|model
init|=
name|generator
operator|.
name|generateCORBABinding
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"All bindings should be generated."
argument_list|,
literal|2
argument_list|,
name|model
operator|.
name|getAllBindings
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAnonymousReturnParam
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|String
name|fileName
init|=
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"/wsdl/factory_pattern.wsdl"
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|generator
operator|.
name|setWsdlFile
argument_list|(
name|fileName
argument_list|)
expr_stmt|;
name|generator
operator|.
name|addInterfaceName
argument_list|(
literal|"Number"
argument_list|)
expr_stmt|;
name|Definition
name|model
init|=
name|generator
operator|.
name|generateCORBABinding
argument_list|()
decl_stmt|;
name|Document
name|document
init|=
name|writer
operator|.
name|getDocument
argument_list|(
name|model
argument_list|)
decl_stmt|;
name|Element
name|typemap
init|=
name|getElementNode
argument_list|(
name|document
argument_list|,
literal|"corba:typeMapping"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|typemap
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|typemap
operator|.
name|getElementsByTagName
argument_list|(
literal|"corba:struct"
argument_list|)
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
operator|new
name|File
argument_list|(
literal|"factory_pattern-corba.wsdl"
argument_list|)
operator|.
name|deleteOnExit
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testComplextypeDerivedSimpletype
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|String
name|fileName
init|=
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"/wsdl/complex_types.wsdl"
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|generator
operator|.
name|setWsdlFile
argument_list|(
name|fileName
argument_list|)
expr_stmt|;
name|generator
operator|.
name|addInterfaceName
argument_list|(
literal|"TypeTestPortType"
argument_list|)
expr_stmt|;
name|Definition
name|model
init|=
name|generator
operator|.
name|generateCORBABinding
argument_list|()
decl_stmt|;
name|Document
name|document
init|=
name|writer
operator|.
name|getDocument
argument_list|(
name|model
argument_list|)
decl_stmt|;
name|Element
name|typemap
init|=
name|getElementNode
argument_list|(
name|document
argument_list|,
literal|"corba:typeMapping"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|typemap
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|8
argument_list|,
name|typemap
operator|.
name|getElementsByTagName
argument_list|(
literal|"corba:struct"
argument_list|)
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|typemap
operator|.
name|getElementsByTagName
argument_list|(
literal|"corba:fixed"
argument_list|)
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|typemap
operator|.
name|getElementsByTagName
argument_list|(
literal|"corba:array"
argument_list|)
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|typemap
operator|.
name|getElementsByTagName
argument_list|(
literal|"corba:union"
argument_list|)
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|typemap
operator|.
name|getElementsByTagName
argument_list|(
literal|"corba:sequence"
argument_list|)
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
operator|new
name|File
argument_list|(
literal|"complex_types-corba.wsdl"
argument_list|)
operator|.
name|deleteOnExit
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCorbaExceptionComplextype
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|String
name|fileName
init|=
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"/wsdl/databaseService.wsdl"
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|generator
operator|.
name|setWsdlFile
argument_list|(
name|fileName
argument_list|)
expr_stmt|;
name|generator
operator|.
name|addInterfaceName
argument_list|(
literal|"Database"
argument_list|)
expr_stmt|;
name|Definition
name|model
init|=
name|generator
operator|.
name|generateCORBABinding
argument_list|()
decl_stmt|;
name|Document
name|document
init|=
name|writer
operator|.
name|getDocument
argument_list|(
name|model
argument_list|)
decl_stmt|;
name|Element
name|typemap
init|=
name|getElementNode
argument_list|(
name|document
argument_list|,
literal|"corba:typeMapping"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|typemap
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|typemap
operator|.
name|getElementsByTagName
argument_list|(
literal|"corba:struct"
argument_list|)
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|typemap
operator|.
name|getElementsByTagName
argument_list|(
literal|"corba:exception"
argument_list|)
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|typemap
operator|.
name|getElementsByTagName
argument_list|(
literal|"corba:anonsequence"
argument_list|)
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
operator|new
name|File
argument_list|(
literal|"databaseService-corba.wsdl"
argument_list|)
operator|.
name|deleteOnExit
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSetCorbaAddress
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|String
name|fileName
init|=
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"/wsdl/datetime.wsdl"
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|generator
operator|.
name|setWsdlFile
argument_list|(
name|fileName
argument_list|)
expr_stmt|;
name|generator
operator|.
name|addInterfaceName
argument_list|(
literal|"BasePortType"
argument_list|)
expr_stmt|;
name|Definition
name|model
init|=
name|generator
operator|.
name|generateCORBABinding
argument_list|()
decl_stmt|;
name|QName
name|name
init|=
operator|new
name|QName
argument_list|(
literal|"http://schemas.apache.org/idl/datetime.idl"
argument_list|,
literal|"BaseCORBAService"
argument_list|,
literal|"tns"
argument_list|)
decl_stmt|;
name|Service
name|service
init|=
name|model
operator|.
name|getService
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|Port
name|port
init|=
name|service
operator|.
name|getPort
argument_list|(
literal|"BaseCORBAPort"
argument_list|)
decl_stmt|;
name|AddressType
name|addressType
init|=
operator|(
name|AddressType
operator|)
name|port
operator|.
name|getExtensibilityElements
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|String
name|address
init|=
name|addressType
operator|.
name|getLocation
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"file:./Base.ref"
argument_list|,
name|address
argument_list|)
expr_stmt|;
name|generator
operator|.
name|setAddress
argument_list|(
literal|"corbaloc::localhost:40000/hw"
argument_list|)
expr_stmt|;
name|model
operator|=
name|generator
operator|.
name|generateCORBABinding
argument_list|()
expr_stmt|;
name|service
operator|=
name|model
operator|.
name|getService
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|port
operator|=
name|service
operator|.
name|getPort
argument_list|(
literal|"BaseCORBAPort"
argument_list|)
expr_stmt|;
name|addressType
operator|=
operator|(
name|AddressType
operator|)
name|port
operator|.
name|getExtensibilityElements
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|address
operator|=
name|addressType
operator|.
name|getLocation
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"corbaloc::localhost:40000/hw"
argument_list|,
name|address
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
operator|new
name|File
argument_list|(
literal|"datetime-corba.wsdl"
argument_list|)
operator|.
name|deleteOnExit
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSetCorbaAddressFile
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|URI
name|fileName
init|=
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"/wsdl/datetime.wsdl"
argument_list|)
operator|.
name|toURI
argument_list|()
decl_stmt|;
name|generator
operator|.
name|setWsdlFile
argument_list|(
operator|new
name|File
argument_list|(
name|fileName
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|generator
operator|.
name|addInterfaceName
argument_list|(
literal|"BasePortType"
argument_list|)
expr_stmt|;
name|Definition
name|model
init|=
name|generator
operator|.
name|generateCORBABinding
argument_list|()
decl_stmt|;
name|QName
name|name
init|=
operator|new
name|QName
argument_list|(
literal|"http://schemas.apache.org/idl/datetime.idl"
argument_list|,
literal|"BaseCORBAService"
argument_list|,
literal|"tns"
argument_list|)
decl_stmt|;
name|Service
name|service
init|=
name|model
operator|.
name|getService
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|Port
name|port
init|=
name|service
operator|.
name|getPort
argument_list|(
literal|"BaseCORBAPort"
argument_list|)
decl_stmt|;
name|AddressType
name|addressType
init|=
operator|(
name|AddressType
operator|)
name|port
operator|.
name|getExtensibilityElements
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|String
name|address
init|=
name|addressType
operator|.
name|getLocation
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"file:./Base.ref"
argument_list|,
name|address
argument_list|)
expr_stmt|;
name|URL
name|idl
init|=
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"/wsdl/addressfile.txt"
argument_list|)
decl_stmt|;
name|String
name|filename
init|=
operator|new
name|File
argument_list|(
name|idl
operator|.
name|toURI
argument_list|()
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
name|generator
operator|.
name|setAddressFile
argument_list|(
name|filename
argument_list|)
expr_stmt|;
name|model
operator|=
name|generator
operator|.
name|generateCORBABinding
argument_list|()
expr_stmt|;
name|service
operator|=
name|model
operator|.
name|getService
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|port
operator|=
name|service
operator|.
name|getPort
argument_list|(
literal|"BaseCORBAPort"
argument_list|)
expr_stmt|;
name|addressType
operator|=
operator|(
name|AddressType
operator|)
name|port
operator|.
name|getExtensibilityElements
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|address
operator|=
name|addressType
operator|.
name|getLocation
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"corbaloc::localhost:60000/hw"
argument_list|,
name|address
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
operator|new
name|File
argument_list|(
literal|"datetime-corba.wsdl"
argument_list|)
operator|.
name|deleteOnExit
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRestrictedStruct
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|URI
name|fileName
init|=
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"/wsdl/restrictedStruct.wsdl"
argument_list|)
operator|.
name|toURI
argument_list|()
decl_stmt|;
name|generator
operator|.
name|setWsdlFile
argument_list|(
operator|new
name|File
argument_list|(
name|fileName
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|generator
operator|.
name|addInterfaceName
argument_list|(
literal|"TypeTestPortType"
argument_list|)
expr_stmt|;
name|Definition
name|model
init|=
name|generator
operator|.
name|generateCORBABinding
argument_list|()
decl_stmt|;
name|Document
name|document
init|=
name|writer
operator|.
name|getDocument
argument_list|(
name|model
argument_list|)
decl_stmt|;
name|Element
name|typemap
init|=
name|getElementNode
argument_list|(
name|document
argument_list|,
literal|"corba:typeMapping"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|typemap
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|7
argument_list|,
name|typemap
operator|.
name|getElementsByTagName
argument_list|(
literal|"corba:struct"
argument_list|)
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|typemap
operator|.
name|getElementsByTagName
argument_list|(
literal|"corba:union"
argument_list|)
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
operator|new
name|File
argument_list|(
literal|"restrictedStruct-corba.wsdl"
argument_list|)
operator|.
name|deleteOnExit
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testComplexRestriction
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|URI
name|fileName
init|=
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"/wsdl/complexRestriction.wsdl"
argument_list|)
operator|.
name|toURI
argument_list|()
decl_stmt|;
name|generator
operator|.
name|setWsdlFile
argument_list|(
operator|new
name|File
argument_list|(
name|fileName
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|generator
operator|.
name|addInterfaceName
argument_list|(
literal|"TypeTestPortType"
argument_list|)
expr_stmt|;
name|Definition
name|model
init|=
name|generator
operator|.
name|generateCORBABinding
argument_list|()
decl_stmt|;
name|Document
name|document
init|=
name|writer
operator|.
name|getDocument
argument_list|(
name|model
argument_list|)
decl_stmt|;
name|Element
name|typemap
init|=
name|getElementNode
argument_list|(
name|document
argument_list|,
literal|"corba:typeMapping"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|typemap
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|typemap
operator|.
name|getElementsByTagName
argument_list|(
literal|"corba:struct"
argument_list|)
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
operator|new
name|File
argument_list|(
literal|"complexRestriction-corba.wsdl"
argument_list|)
operator|.
name|deleteOnExit
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testListType
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|URI
name|fileName
init|=
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"/wsdl/listType.wsdl"
argument_list|)
operator|.
name|toURI
argument_list|()
decl_stmt|;
name|generator
operator|.
name|setWsdlFile
argument_list|(
operator|new
name|File
argument_list|(
name|fileName
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|generator
operator|.
name|addInterfaceName
argument_list|(
literal|"TypeTestPortType"
argument_list|)
expr_stmt|;
name|Definition
name|model
init|=
name|generator
operator|.
name|generateCORBABinding
argument_list|()
decl_stmt|;
name|Document
name|document
init|=
name|writer
operator|.
name|getDocument
argument_list|(
name|model
argument_list|)
decl_stmt|;
name|Element
name|typemap
init|=
name|getElementNode
argument_list|(
name|document
argument_list|,
literal|"corba:typeMapping"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|typemap
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|typemap
operator|.
name|getElementsByTagName
argument_list|(
literal|"corba:enum"
argument_list|)
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|typemap
operator|.
name|getElementsByTagName
argument_list|(
literal|"corba:sequence"
argument_list|)
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
operator|new
name|File
argument_list|(
literal|"listType-corba.wsdl"
argument_list|)
operator|.
name|deleteOnExit
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testImportSchemaInTypes
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|URI
name|fileName
init|=
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"/wsdl/importType.wsdl"
argument_list|)
operator|.
name|toURI
argument_list|()
decl_stmt|;
name|generator
operator|.
name|setWsdlFile
argument_list|(
operator|new
name|File
argument_list|(
name|fileName
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|generator
operator|.
name|addInterfaceName
argument_list|(
literal|"TypeTestPortType"
argument_list|)
expr_stmt|;
name|Definition
name|model
init|=
name|generator
operator|.
name|generateCORBABinding
argument_list|()
decl_stmt|;
name|Document
name|document
init|=
name|writer
operator|.
name|getDocument
argument_list|(
name|model
argument_list|)
decl_stmt|;
name|Element
name|typemap
init|=
name|getElementNode
argument_list|(
name|document
argument_list|,
literal|"corba:typeMapping"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|typemap
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|typemap
operator|.
name|getElementsByTagName
argument_list|(
literal|"corba:enum"
argument_list|)
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|typemap
operator|.
name|getElementsByTagName
argument_list|(
literal|"corba:sequence"
argument_list|)
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
operator|new
name|File
argument_list|(
literal|"importType-corba.wsdl"
argument_list|)
operator|.
name|deleteOnExit
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

