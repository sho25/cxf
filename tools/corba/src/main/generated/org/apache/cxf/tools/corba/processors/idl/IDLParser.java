begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// $ANTLR 2.7.4: "idl.g" -> "IDLParser.java"$
end_comment

begin_comment
comment|// Generated
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|corba
operator|.
name|processors
operator|.
name|idl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|TokenBuffer
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|TokenStreamException
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|TokenStreamIOException
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|ANTLRException
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|LLkParser
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|TokenStream
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|RecognitionException
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|NoViableAltException
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|MismatchedTokenException
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|SemanticException
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|ParserSharedInputState
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|collections
operator|.
name|impl
operator|.
name|BitSet
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|collections
operator|.
name|AST
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|ASTFactory
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|ASTPair
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|collections
operator|.
name|impl
operator|.
name|ASTArray
import|;
end_import

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"all"
block|,
literal|"PMD"
block|}
argument_list|)
specifier|public
specifier|final
class|class
name|IDLParser
extends|extends
name|antlr
operator|.
name|LLkParser
implements|implements
name|IDLTokenTypes
block|{
specifier|protected
name|IDLParser
parameter_list|(
name|TokenBuffer
name|tokenBuf
parameter_list|,
name|int
name|k
parameter_list|)
block|{
name|super
argument_list|(
name|tokenBuf
argument_list|,
name|k
argument_list|)
expr_stmt|;
name|tokenNames
operator|=
name|_tokenNames
expr_stmt|;
name|buildTokenTypeASTClassMap
argument_list|()
expr_stmt|;
name|astFactory
operator|=
operator|new
name|ASTFactory
argument_list|(
name|getTokenTypeToASTClassMap
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|IDLParser
parameter_list|(
name|TokenBuffer
name|tokenBuf
parameter_list|)
block|{
name|this
argument_list|(
name|tokenBuf
argument_list|,
literal|4
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|IDLParser
parameter_list|(
name|TokenStream
name|lexer
parameter_list|,
name|int
name|k
parameter_list|)
block|{
name|super
argument_list|(
name|lexer
argument_list|,
name|k
argument_list|)
expr_stmt|;
name|tokenNames
operator|=
name|_tokenNames
expr_stmt|;
name|buildTokenTypeASTClassMap
argument_list|()
expr_stmt|;
name|astFactory
operator|=
operator|new
name|ASTFactory
argument_list|(
name|getTokenTypeToASTClassMap
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|IDLParser
parameter_list|(
name|TokenStream
name|lexer
parameter_list|)
block|{
name|this
argument_list|(
name|lexer
argument_list|,
literal|4
argument_list|)
expr_stmt|;
block|}
specifier|public
name|IDLParser
parameter_list|(
name|ParserSharedInputState
name|state
parameter_list|)
block|{
name|super
argument_list|(
name|state
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|tokenNames
operator|=
name|_tokenNames
expr_stmt|;
name|buildTokenTypeASTClassMap
argument_list|()
expr_stmt|;
name|astFactory
operator|=
operator|new
name|ASTFactory
argument_list|(
name|getTokenTypeToASTClassMap
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|specification
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|specification_AST
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// for error handling
block|{
name|_loop3
label|:
do|do
block|{
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|LITERAL_import
operator|)
condition|)
block|{
name|import_dcl
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|}
else|else
block|{
break|break
name|_loop3
break|;
block|}
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
block|{
name|int
name|_cnt5
init|=
literal|0
decl_stmt|;
name|_loop5
label|:
do|do
block|{
if|if
condition|(
operator|(
name|_tokenSet_0
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|)
condition|)
block|{
name|definition
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|_cnt5
operator|>=
literal|1
condition|)
block|{
break|break
name|_loop5
break|;
block|}
else|else
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|_cnt5
operator|++
expr_stmt|;
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
name|specification_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|reportError
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|consume
argument_list|()
expr_stmt|;
name|consumeUntil
argument_list|(
name|_tokenSet_1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|ex
throw|;
block|}
block|}
name|returnAST
operator|=
name|specification_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|import_dcl
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|import_dcl_AST
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// for error handling
name|AST
name|tmp1_AST
init|=
literal|null
decl_stmt|;
name|tmp1_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp1_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_import
argument_list|)
expr_stmt|;
name|imported_scope
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|SEMI
argument_list|)
expr_stmt|;
name|import_dcl_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|reportError
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|consume
argument_list|()
expr_stmt|;
name|consumeUntil
argument_list|(
name|_tokenSet_2
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|ex
throw|;
block|}
block|}
name|returnAST
operator|=
name|import_dcl_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|definition
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|definition_AST
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// for error handling
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LITERAL_typedef
case|:
case|case
name|LITERAL_native
case|:
case|case
name|LITERAL_struct
case|:
case|case
name|LITERAL_union
case|:
case|case
name|LITERAL_enum
case|:
block|{
name|type_dcl
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|SEMI
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_const
case|:
block|{
name|const_dcl
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|SEMI
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_exception
case|:
block|{
name|except_dcl
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|SEMI
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_module
case|:
block|{
name|module
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|SEMI
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_typeid
case|:
block|{
name|type_id_dcl
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|SEMI
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_typeprefix
case|:
block|{
name|type_prefix_dcl
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|SEMI
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_component
case|:
block|{
name|component
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|SEMI
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_home
case|:
block|{
name|home_dcl
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|SEMI
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
name|boolean
name|synPredMatched10
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|(
operator|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|>=
name|LITERAL_abstract
operator|&&
name|LA
argument_list|(
literal|1
argument_list|)
operator|<=
name|LITERAL_interface
operator|)
operator|)
operator|&&
operator|(
name|LA
argument_list|(
literal|2
argument_list|)
operator|==
name|LITERAL_interface
operator|||
name|LA
argument_list|(
literal|2
argument_list|)
operator|==
name|IDENT
operator|)
operator|&&
operator|(
name|_tokenSet_3
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|3
argument_list|)
argument_list|)
operator|)
operator|&&
operator|(
name|_tokenSet_4
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|4
argument_list|)
argument_list|)
operator|)
operator|)
condition|)
block|{
name|int
name|_m10
init|=
name|mark
argument_list|()
decl_stmt|;
name|synPredMatched10
operator|=
literal|true
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|++
expr_stmt|;
try|try
block|{
block|{
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LITERAL_abstract
case|:
block|{
name|match
argument_list|(
name|LITERAL_abstract
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_local
case|:
block|{
name|match
argument_list|(
name|LITERAL_local
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_interface
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|match
argument_list|(
name|LITERAL_interface
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|pe
parameter_list|)
block|{
name|synPredMatched10
operator|=
literal|false
expr_stmt|;
block|}
name|rewind
argument_list|(
name|_m10
argument_list|)
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|--
expr_stmt|;
block|}
if|if
condition|(
name|synPredMatched10
condition|)
block|{
name|interf
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|SEMI
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|boolean
name|synPredMatched13
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|LITERAL_abstract
operator|||
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|LITERAL_custom
operator|||
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|LITERAL_valuetype
operator|)
operator|&&
operator|(
name|LA
argument_list|(
literal|2
argument_list|)
operator|==
name|LITERAL_valuetype
operator|||
name|LA
argument_list|(
literal|2
argument_list|)
operator|==
name|IDENT
operator|)
operator|&&
operator|(
name|_tokenSet_5
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|3
argument_list|)
argument_list|)
operator|)
operator|&&
operator|(
name|_tokenSet_6
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|4
argument_list|)
argument_list|)
operator|)
operator|)
condition|)
block|{
name|int
name|_m13
init|=
name|mark
argument_list|()
decl_stmt|;
name|synPredMatched13
operator|=
literal|true
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|++
expr_stmt|;
try|try
block|{
block|{
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LITERAL_abstract
case|:
block|{
name|match
argument_list|(
name|LITERAL_abstract
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_custom
case|:
block|{
name|match
argument_list|(
name|LITERAL_custom
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_valuetype
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|match
argument_list|(
name|LITERAL_valuetype
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|pe
parameter_list|)
block|{
name|synPredMatched13
operator|=
literal|false
expr_stmt|;
block|}
name|rewind
argument_list|(
name|_m13
argument_list|)
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|--
expr_stmt|;
block|}
if|if
condition|(
name|synPredMatched13
condition|)
block|{
name|value
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|SEMI
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|boolean
name|synPredMatched16
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|LITERAL_abstract
operator|||
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|LITERAL_custom
operator|||
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|LITERAL_eventtype
operator|)
operator|&&
operator|(
name|LA
argument_list|(
literal|2
argument_list|)
operator|==
name|LITERAL_eventtype
operator|||
name|LA
argument_list|(
literal|2
argument_list|)
operator|==
name|IDENT
operator|)
operator|&&
operator|(
name|_tokenSet_7
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|3
argument_list|)
argument_list|)
operator|)
operator|&&
operator|(
name|_tokenSet_8
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|4
argument_list|)
argument_list|)
operator|)
operator|)
condition|)
block|{
name|int
name|_m16
init|=
name|mark
argument_list|()
decl_stmt|;
name|synPredMatched16
operator|=
literal|true
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|++
expr_stmt|;
try|try
block|{
block|{
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LITERAL_abstract
case|:
block|{
name|match
argument_list|(
name|LITERAL_abstract
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_custom
case|:
block|{
name|match
argument_list|(
name|LITERAL_custom
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_eventtype
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|match
argument_list|(
name|LITERAL_eventtype
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|pe
parameter_list|)
block|{
name|synPredMatched16
operator|=
literal|false
expr_stmt|;
block|}
name|rewind
argument_list|(
name|_m16
argument_list|)
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|--
expr_stmt|;
block|}
if|if
condition|(
name|synPredMatched16
condition|)
block|{
name|event
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|SEMI
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
block|}
block|}
name|definition_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|reportError
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|consume
argument_list|()
expr_stmt|;
name|consumeUntil
argument_list|(
name|_tokenSet_9
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|ex
throw|;
block|}
block|}
name|returnAST
operator|=
name|definition_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|type_dcl
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|type_dcl_AST
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// for error handling
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LITERAL_typedef
case|:
block|{
name|AST
name|tmp14_AST
init|=
literal|null
decl_stmt|;
name|tmp14_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp14_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_typedef
argument_list|)
expr_stmt|;
name|type_declarator
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|type_dcl_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_enum
case|:
block|{
name|enum_type
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|type_dcl_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_native
case|:
block|{
name|AST
name|tmp15_AST
init|=
literal|null
decl_stmt|;
name|tmp15_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp15_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_native
argument_list|)
expr_stmt|;
name|simple_declarator
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|type_dcl_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
default|default:
name|boolean
name|synPredMatched114
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|LITERAL_struct
operator|)
operator|&&
operator|(
name|LA
argument_list|(
literal|2
argument_list|)
operator|==
name|IDENT
operator|)
operator|&&
operator|(
name|LA
argument_list|(
literal|3
argument_list|)
operator|==
name|LCURLY
operator|)
operator|)
condition|)
block|{
name|int
name|_m114
init|=
name|mark
argument_list|()
decl_stmt|;
name|synPredMatched114
operator|=
literal|true
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|++
expr_stmt|;
try|try
block|{
block|{
name|struct_type
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|pe
parameter_list|)
block|{
name|synPredMatched114
operator|=
literal|false
expr_stmt|;
block|}
name|rewind
argument_list|(
name|_m114
argument_list|)
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|--
expr_stmt|;
block|}
if|if
condition|(
name|synPredMatched114
condition|)
block|{
name|struct_type
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|type_dcl_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
else|else
block|{
name|boolean
name|synPredMatched116
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|LITERAL_union
operator|)
operator|&&
operator|(
name|LA
argument_list|(
literal|2
argument_list|)
operator|==
name|IDENT
operator|)
operator|&&
operator|(
name|LA
argument_list|(
literal|3
argument_list|)
operator|==
name|LITERAL_switch
operator|)
operator|)
condition|)
block|{
name|int
name|_m116
init|=
name|mark
argument_list|()
decl_stmt|;
name|synPredMatched116
operator|=
literal|true
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|++
expr_stmt|;
try|try
block|{
block|{
name|union_type
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|pe
parameter_list|)
block|{
name|synPredMatched116
operator|=
literal|false
expr_stmt|;
block|}
name|rewind
argument_list|(
name|_m116
argument_list|)
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|--
expr_stmt|;
block|}
if|if
condition|(
name|synPredMatched116
condition|)
block|{
name|union_type
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|type_dcl_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|LITERAL_struct
operator|||
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|LITERAL_union
operator|)
operator|&&
operator|(
name|LA
argument_list|(
literal|2
argument_list|)
operator|==
name|IDENT
operator|)
operator|&&
operator|(
name|LA
argument_list|(
literal|3
argument_list|)
operator|==
name|SEMI
operator|)
condition|)
block|{
name|constr_forward_decl
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|type_dcl_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|reportError
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|consume
argument_list|()
expr_stmt|;
name|consumeUntil
argument_list|(
name|_tokenSet_10
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|ex
throw|;
block|}
block|}
name|returnAST
operator|=
name|type_dcl_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|const_dcl
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|const_dcl_AST
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// for error handling
name|AST
name|tmp16_AST
init|=
literal|null
decl_stmt|;
name|tmp16_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp16_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_const
argument_list|)
expr_stmt|;
name|const_type
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|identifier
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|ASSIGN
argument_list|)
expr_stmt|;
name|const_exp
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|const_dcl_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|reportError
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|consume
argument_list|()
expr_stmt|;
name|consumeUntil
argument_list|(
name|_tokenSet_10
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|ex
throw|;
block|}
block|}
name|returnAST
operator|=
name|const_dcl_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|except_dcl
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|except_dcl_AST
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// for error handling
name|AST
name|tmp18_AST
init|=
literal|null
decl_stmt|;
name|tmp18_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp18_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_exception
argument_list|)
expr_stmt|;
name|identifier
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LCURLY
argument_list|)
expr_stmt|;
name|opt_member_list
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|RCURLY
argument_list|)
expr_stmt|;
name|except_dcl_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|reportError
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|consume
argument_list|()
expr_stmt|;
name|consumeUntil
argument_list|(
name|_tokenSet_10
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|ex
throw|;
block|}
block|}
name|returnAST
operator|=
name|except_dcl_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|interf
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|interf_AST
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// for error handling
block|{
if|if
condition|(
operator|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|>=
name|LITERAL_abstract
operator|&&
name|LA
argument_list|(
literal|1
argument_list|)
operator|<=
name|LITERAL_interface
operator|)
operator|)
operator|&&
operator|(
name|LA
argument_list|(
literal|2
argument_list|)
operator|==
name|LITERAL_interface
operator|||
name|LA
argument_list|(
literal|2
argument_list|)
operator|==
name|IDENT
operator|)
operator|&&
operator|(
name|LA
argument_list|(
literal|3
argument_list|)
operator|==
name|LCURLY
operator|||
name|LA
argument_list|(
literal|3
argument_list|)
operator|==
name|COLON
operator|||
name|LA
argument_list|(
literal|3
argument_list|)
operator|==
name|IDENT
operator|)
operator|&&
operator|(
name|_tokenSet_11
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|4
argument_list|)
argument_list|)
operator|)
condition|)
block|{
name|interface_dcl
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|>=
name|LITERAL_abstract
operator|&&
name|LA
argument_list|(
literal|1
argument_list|)
operator|<=
name|LITERAL_interface
operator|)
operator|)
operator|&&
operator|(
name|LA
argument_list|(
literal|2
argument_list|)
operator|==
name|LITERAL_interface
operator|||
name|LA
argument_list|(
literal|2
argument_list|)
operator|==
name|IDENT
operator|)
operator|&&
operator|(
name|LA
argument_list|(
literal|3
argument_list|)
operator|==
name|SEMI
operator|||
name|LA
argument_list|(
literal|3
argument_list|)
operator|==
name|IDENT
operator|)
operator|&&
operator|(
name|_tokenSet_12
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|4
argument_list|)
argument_list|)
operator|)
condition|)
block|{
name|forward_dcl
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|interf_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|reportError
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|consume
argument_list|()
expr_stmt|;
name|consumeUntil
argument_list|(
name|_tokenSet_10
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|ex
throw|;
block|}
block|}
name|returnAST
operator|=
name|interf_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|module
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|module_AST
init|=
literal|null
decl_stmt|;
name|AST
name|d_AST
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// for error handling
name|AST
name|tmp21_AST
init|=
literal|null
decl_stmt|;
name|tmp21_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp21_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_module
argument_list|)
expr_stmt|;
name|identifier
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LCURLY
argument_list|)
expr_stmt|;
name|definition_list
argument_list|()
expr_stmt|;
name|d_AST
operator|=
operator|(
name|AST
operator|)
name|returnAST
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|RCURLY
argument_list|)
expr_stmt|;
name|module_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|reportError
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|consume
argument_list|()
expr_stmt|;
name|consumeUntil
argument_list|(
name|_tokenSet_10
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|ex
throw|;
block|}
block|}
name|returnAST
operator|=
name|module_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|value
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|value_AST
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// for error handling
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LITERAL_abstract
case|:
block|{
name|value_abs_dcl
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_custom
case|:
block|{
name|value_custom_dcl
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|LITERAL_valuetype
operator|)
operator|&&
operator|(
name|LA
argument_list|(
literal|2
argument_list|)
operator|==
name|IDENT
operator|)
operator|&&
operator|(
name|LA
argument_list|(
literal|3
argument_list|)
operator|==
name|LCURLY
operator|||
name|LA
argument_list|(
literal|3
argument_list|)
operator|==
name|COLON
operator|||
name|LA
argument_list|(
literal|3
argument_list|)
operator|==
name|LITERAL_supports
operator|)
condition|)
block|{
name|value_dcl
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|LITERAL_valuetype
operator|)
operator|&&
operator|(
name|LA
argument_list|(
literal|2
argument_list|)
operator|==
name|IDENT
operator|)
operator|&&
operator|(
name|_tokenSet_13
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|3
argument_list|)
argument_list|)
operator|)
condition|)
block|{
name|value_box_dcl
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|LITERAL_valuetype
operator|)
operator|&&
operator|(
name|LA
argument_list|(
literal|2
argument_list|)
operator|==
name|IDENT
operator|)
operator|&&
operator|(
name|LA
argument_list|(
literal|3
argument_list|)
operator|==
name|SEMI
operator|)
condition|)
block|{
name|value_forward_dcl
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|value_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|reportError
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|consume
argument_list|()
expr_stmt|;
name|consumeUntil
argument_list|(
name|_tokenSet_10
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|ex
throw|;
block|}
block|}
name|returnAST
operator|=
name|value_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|type_id_dcl
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|type_id_dcl_AST
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// for error handling
name|AST
name|tmp24_AST
init|=
literal|null
decl_stmt|;
name|tmp24_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp24_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_typeid
argument_list|)
expr_stmt|;
name|scoped_name
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|string_literal
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|type_id_dcl_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|reportError
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|consume
argument_list|()
expr_stmt|;
name|consumeUntil
argument_list|(
name|_tokenSet_10
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|ex
throw|;
block|}
block|}
name|returnAST
operator|=
name|type_id_dcl_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|type_prefix_dcl
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|type_prefix_dcl_AST
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// for error handling
name|AST
name|tmp25_AST
init|=
literal|null
decl_stmt|;
name|tmp25_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp25_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_typeprefix
argument_list|)
expr_stmt|;
name|scoped_name
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|string_literal
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|type_prefix_dcl_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|reportError
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|consume
argument_list|()
expr_stmt|;
name|consumeUntil
argument_list|(
name|_tokenSet_10
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|ex
throw|;
block|}
block|}
name|returnAST
operator|=
name|type_prefix_dcl_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|event
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|event_AST
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// for error handling
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LITERAL_abstract
case|:
block|{
name|event_abs
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_custom
case|:
block|{
name|event_custom
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_eventtype
case|:
block|{
name|event_dcl
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|event_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|reportError
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|consume
argument_list|()
expr_stmt|;
name|consumeUntil
argument_list|(
name|_tokenSet_10
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|ex
throw|;
block|}
block|}
name|returnAST
operator|=
name|event_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|component
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|component_AST
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// for error handling
name|AST
name|tmp26_AST
init|=
literal|null
decl_stmt|;
name|tmp26_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp26_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_component
argument_list|)
expr_stmt|;
name|identifier
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LCURLY
case|:
case|case
name|COLON
case|:
case|case
name|LITERAL_supports
case|:
block|{
name|component_dcl
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|SEMI
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|component_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|reportError
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|consume
argument_list|()
expr_stmt|;
name|consumeUntil
argument_list|(
name|_tokenSet_10
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|ex
throw|;
block|}
block|}
name|returnAST
operator|=
name|component_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|home_dcl
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|home_dcl_AST
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// for error handling
name|home_header
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|home_body
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|home_dcl_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|reportError
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|consume
argument_list|()
expr_stmt|;
name|consumeUntil
argument_list|(
name|_tokenSet_10
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|ex
throw|;
block|}
block|}
name|returnAST
operator|=
name|home_dcl_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|identifier
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|identifier_AST
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// for error handling
name|AST
name|tmp27_AST
init|=
literal|null
decl_stmt|;
name|tmp27_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp27_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|IDENT
argument_list|)
expr_stmt|;
name|identifier_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|reportError
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|consume
argument_list|()
expr_stmt|;
name|consumeUntil
argument_list|(
name|_tokenSet_14
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|ex
throw|;
block|}
block|}
name|returnAST
operator|=
name|identifier_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|definition_list
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|definition_list_AST
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// for error handling
block|{
name|int
name|_cnt20
init|=
literal|0
decl_stmt|;
name|_loop20
label|:
do|do
block|{
if|if
condition|(
operator|(
name|_tokenSet_0
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|)
condition|)
block|{
name|definition
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|_cnt20
operator|>=
literal|1
condition|)
block|{
break|break
name|_loop20
break|;
block|}
else|else
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|_cnt20
operator|++
expr_stmt|;
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
name|definition_list_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|reportError
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|consume
argument_list|()
expr_stmt|;
name|consumeUntil
argument_list|(
name|_tokenSet_15
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|ex
throw|;
block|}
block|}
name|returnAST
operator|=
name|definition_list_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|interface_dcl
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|interface_dcl_AST
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// for error handling
block|{
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LITERAL_abstract
case|:
block|{
name|AST
name|tmp28_AST
init|=
literal|null
decl_stmt|;
name|tmp28_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp28_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_abstract
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_local
case|:
block|{
name|AST
name|tmp29_AST
init|=
literal|null
decl_stmt|;
name|tmp29_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp29_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_local
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_interface
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|AST
name|tmp30_AST
init|=
literal|null
decl_stmt|;
name|tmp30_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp30_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_interface
argument_list|)
expr_stmt|;
name|identifier
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|COLON
case|:
block|{
name|interface_inheritance_spec
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|LCURLY
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|AST
name|tmp31_AST
init|=
literal|null
decl_stmt|;
name|tmp31_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp31_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LCURLY
argument_list|)
expr_stmt|;
name|interface_body
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|AST
name|tmp32_AST
init|=
literal|null
decl_stmt|;
name|tmp32_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp32_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|RCURLY
argument_list|)
expr_stmt|;
block|}
name|interface_dcl_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|reportError
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|consume
argument_list|()
expr_stmt|;
name|consumeUntil
argument_list|(
name|_tokenSet_10
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|ex
throw|;
block|}
block|}
name|returnAST
operator|=
name|interface_dcl_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|forward_dcl
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|forward_dcl_AST
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// for error handling
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LITERAL_abstract
case|:
block|{
name|AST
name|tmp33_AST
init|=
literal|null
decl_stmt|;
name|tmp33_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp33_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_abstract
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_local
case|:
block|{
name|AST
name|tmp34_AST
init|=
literal|null
decl_stmt|;
name|tmp34_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp34_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_local
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_interface
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|AST
name|tmp35_AST
init|=
literal|null
decl_stmt|;
name|tmp35_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp35_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_interface
argument_list|)
expr_stmt|;
name|identifier
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|forward_dcl_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|reportError
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|consume
argument_list|()
expr_stmt|;
name|consumeUntil
argument_list|(
name|_tokenSet_10
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|ex
throw|;
block|}
block|}
name|returnAST
operator|=
name|forward_dcl_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|interface_inheritance_spec
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|interface_inheritance_spec_AST
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// for error handling
name|AST
name|tmp36_AST
init|=
literal|null
decl_stmt|;
name|tmp36_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp36_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|COLON
argument_list|)
expr_stmt|;
name|scoped_name_list
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|interface_inheritance_spec_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|reportError
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|consume
argument_list|()
expr_stmt|;
name|consumeUntil
argument_list|(
name|_tokenSet_16
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|ex
throw|;
block|}
block|}
name|returnAST
operator|=
name|interface_inheritance_spec_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|interface_body
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|interface_body_AST
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// for error handling
block|{
name|_loop31
label|:
do|do
block|{
if|if
condition|(
operator|(
name|_tokenSet_17
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|)
condition|)
block|{
name|export
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|}
else|else
block|{
break|break
name|_loop31
break|;
block|}
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
name|interface_body_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|reportError
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|consume
argument_list|()
expr_stmt|;
name|consumeUntil
argument_list|(
name|_tokenSet_15
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|ex
throw|;
block|}
block|}
name|returnAST
operator|=
name|interface_body_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|export
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|export_AST
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// for error handling
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LITERAL_typedef
case|:
case|case
name|LITERAL_native
case|:
case|case
name|LITERAL_struct
case|:
case|case
name|LITERAL_union
case|:
case|case
name|LITERAL_enum
case|:
block|{
name|type_dcl
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|SEMI
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_const
case|:
block|{
name|const_dcl
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|SEMI
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_exception
case|:
block|{
name|except_dcl
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|SEMI
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_readonly
case|:
case|case
name|LITERAL_attribute
case|:
block|{
name|attr_dcl
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|SEMI
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|SCOPEOP
case|:
case|case
name|IDENT
case|:
case|case
name|LITERAL_float
case|:
case|case
name|LITERAL_double
case|:
case|case
name|LITERAL_long
case|:
case|case
name|LITERAL_short
case|:
case|case
name|LITERAL_unsigned
case|:
case|case
name|LITERAL_char
case|:
case|case
name|LITERAL_wchar
case|:
case|case
name|LITERAL_boolean
case|:
case|case
name|LITERAL_octet
case|:
case|case
name|LITERAL_any
case|:
case|case
name|LITERAL_Object
case|:
case|case
name|LITERAL_string
case|:
case|case
name|LITERAL_wstring
case|:
case|case
name|LITERAL_oneway
case|:
case|case
name|LITERAL_void
case|:
case|case
name|LITERAL_ValueBase
case|:
block|{
name|op_dcl
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|SEMI
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_typeid
case|:
block|{
name|type_id_dcl
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|SEMI
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_typeprefix
case|:
block|{
name|type_prefix_dcl
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|SEMI
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|export_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|reportError
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|consume
argument_list|()
expr_stmt|;
name|consumeUntil
argument_list|(
name|_tokenSet_18
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|ex
throw|;
block|}
block|}
name|returnAST
operator|=
name|export_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|attr_dcl
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|attr_dcl_AST
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// for error handling
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LITERAL_readonly
case|:
block|{
name|readonly_attr_spec
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|attr_dcl_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_attribute
case|:
block|{
name|attr_spec
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|attr_dcl_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|reportError
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|consume
argument_list|()
expr_stmt|;
name|consumeUntil
argument_list|(
name|_tokenSet_10
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|ex
throw|;
block|}
block|}
name|returnAST
operator|=
name|attr_dcl_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|op_dcl
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|op_dcl_AST
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// for error handling
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LITERAL_oneway
case|:
block|{
name|op_attribute
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|SCOPEOP
case|:
case|case
name|IDENT
case|:
case|case
name|LITERAL_float
case|:
case|case
name|LITERAL_double
case|:
case|case
name|LITERAL_long
case|:
case|case
name|LITERAL_short
case|:
case|case
name|LITERAL_unsigned
case|:
case|case
name|LITERAL_char
case|:
case|case
name|LITERAL_wchar
case|:
case|case
name|LITERAL_boolean
case|:
case|case
name|LITERAL_octet
case|:
case|case
name|LITERAL_any
case|:
case|case
name|LITERAL_Object
case|:
case|case
name|LITERAL_string
case|:
case|case
name|LITERAL_wstring
case|:
case|case
name|LITERAL_void
case|:
case|case
name|LITERAL_ValueBase
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|op_type_spec
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|AST
name|tmp44_AST
init|=
literal|null
decl_stmt|;
name|tmp44_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp44_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|IDENT
argument_list|)
expr_stmt|;
name|parameter_dcls
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LITERAL_raises
case|:
block|{
name|raises_expr
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|SEMI
case|:
case|case
name|LITERAL_context
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LITERAL_context
case|:
block|{
name|context_expr
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|SEMI
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|op_dcl_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|reportError
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|consume
argument_list|()
expr_stmt|;
name|consumeUntil
argument_list|(
name|_tokenSet_10
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|ex
throw|;
block|}
block|}
name|returnAST
operator|=
name|op_dcl_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|scoped_name_list
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|scoped_name_list_AST
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// for error handling
name|scoped_name
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|{
name|_loop38
label|:
do|do
block|{
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|COMMA
operator|)
condition|)
block|{
name|match
argument_list|(
name|COMMA
argument_list|)
expr_stmt|;
name|scoped_name
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|}
else|else
block|{
break|break
name|_loop38
break|;
block|}
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
name|scoped_name_list_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|reportError
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|consume
argument_list|()
expr_stmt|;
name|consumeUntil
argument_list|(
name|_tokenSet_19
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|ex
throw|;
block|}
block|}
name|returnAST
operator|=
name|scoped_name_list_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|interface_name
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|interface_name_AST
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// for error handling
name|scoped_name
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|interface_name_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|reportError
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|consume
argument_list|()
expr_stmt|;
name|consumeUntil
argument_list|(
name|_tokenSet_20
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|ex
throw|;
block|}
block|}
name|returnAST
operator|=
name|interface_name_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|scoped_name
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|scoped_name_AST
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// for error handling
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|SCOPEOP
case|:
block|{
name|AST
name|tmp46_AST
init|=
literal|null
decl_stmt|;
name|tmp46_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp46_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|SCOPEOP
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|IDENT
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|AST
name|tmp47_AST
init|=
literal|null
decl_stmt|;
name|tmp47_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp47_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|IDENT
argument_list|)
expr_stmt|;
block|{
name|_loop42
label|:
do|do
block|{
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|SCOPEOP
operator|)
condition|)
block|{
name|match
argument_list|(
name|SCOPEOP
argument_list|)
expr_stmt|;
name|identifier
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|}
else|else
block|{
break|break
name|_loop42
break|;
block|}
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
name|scoped_name_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|reportError
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|consume
argument_list|()
expr_stmt|;
name|consumeUntil
argument_list|(
name|_tokenSet_21
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|ex
throw|;
block|}
block|}
name|returnAST
operator|=
name|scoped_name_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|value_dcl
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|value_dcl_AST
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// for error handling
name|value_header
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LCURLY
argument_list|)
expr_stmt|;
block|{
name|_loop54
label|:
do|do
block|{
if|if
condition|(
operator|(
name|_tokenSet_22
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|)
condition|)
block|{
name|value_element
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|}
else|else
block|{
break|break
name|_loop54
break|;
block|}
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
name|match
argument_list|(
name|RCURLY
argument_list|)
expr_stmt|;
name|value_dcl_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|reportError
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|consume
argument_list|()
expr_stmt|;
name|consumeUntil
argument_list|(
name|_tokenSet_10
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|ex
throw|;
block|}
block|}
name|returnAST
operator|=
name|value_dcl_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|value_abs_dcl
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|value_abs_dcl_AST
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// for error handling
name|AST
name|tmp51_AST
init|=
literal|null
decl_stmt|;
name|tmp51_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp51_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_abstract
argument_list|)
expr_stmt|;
name|AST
name|tmp52_AST
init|=
literal|null
decl_stmt|;
name|tmp52_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp52_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_valuetype
argument_list|)
expr_stmt|;
name|identifier
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LCURLY
case|:
case|case
name|COLON
case|:
case|case
name|LITERAL_supports
case|:
block|{
name|value_abs_full_dcl
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|SEMI
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|value_abs_dcl_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|reportError
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|consume
argument_list|()
expr_stmt|;
name|consumeUntil
argument_list|(
name|_tokenSet_10
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|ex
throw|;
block|}
block|}
name|returnAST
operator|=
name|value_abs_dcl_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|value_box_dcl
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|value_box_dcl_AST
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// for error handling
name|AST
name|tmp53_AST
init|=
literal|null
decl_stmt|;
name|tmp53_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp53_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_valuetype
argument_list|)
expr_stmt|;
name|identifier
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|type_spec
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|value_box_dcl_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|reportError
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|consume
argument_list|()
expr_stmt|;
name|consumeUntil
argument_list|(
name|_tokenSet_10
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|ex
throw|;
block|}
block|}
name|returnAST
operator|=
name|value_box_dcl_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|value_custom_dcl
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|value_custom_dcl_AST
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// for error handling
name|AST
name|tmp54_AST
init|=
literal|null
decl_stmt|;
name|tmp54_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp54_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_custom
argument_list|)
expr_stmt|;
name|value_dcl
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|value_custom_dcl_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|reportError
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|consume
argument_list|()
expr_stmt|;
name|consumeUntil
argument_list|(
name|_tokenSet_10
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|ex
throw|;
block|}
block|}
name|returnAST
operator|=
name|value_custom_dcl_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|value_forward_dcl
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|value_forward_dcl_AST
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// for error handling
name|AST
name|tmp55_AST
init|=
literal|null
decl_stmt|;
name|tmp55_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp55_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_valuetype
argument_list|)
expr_stmt|;
name|identifier
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|value_forward_dcl_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|reportError
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|consume
argument_list|()
expr_stmt|;
name|consumeUntil
argument_list|(
name|_tokenSet_10
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|ex
throw|;
block|}
block|}
name|returnAST
operator|=
name|value_forward_dcl_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|type_spec
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|type_spec_AST
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// for error handling
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|SCOPEOP
case|:
case|case
name|IDENT
case|:
case|case
name|LITERAL_float
case|:
case|case
name|LITERAL_double
case|:
case|case
name|LITERAL_long
case|:
case|case
name|LITERAL_short
case|:
case|case
name|LITERAL_unsigned
case|:
case|case
name|LITERAL_char
case|:
case|case
name|LITERAL_wchar
case|:
case|case
name|LITERAL_boolean
case|:
case|case
name|LITERAL_octet
case|:
case|case
name|LITERAL_any
case|:
case|case
name|LITERAL_Object
case|:
case|case
name|LITERAL_sequence
case|:
case|case
name|LITERAL_string
case|:
case|case
name|LITERAL_wstring
case|:
case|case
name|LITERAL_fixed
case|:
case|case
name|LITERAL_ValueBase
case|:
block|{
name|simple_type_spec
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|type_spec_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_struct
case|:
case|case
name|LITERAL_union
case|:
case|case
name|LITERAL_enum
case|:
block|{
name|constr_type_spec
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|type_spec_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|reportError
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|consume
argument_list|()
expr_stmt|;
name|consumeUntil
argument_list|(
name|_tokenSet_23
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|ex
throw|;
block|}
block|}
name|returnAST
operator|=
name|type_spec_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|value_abs_full_dcl
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|value_abs_full_dcl_AST
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// for error handling
name|value_inheritance_spec
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LCURLY
argument_list|)
expr_stmt|;
block|{
name|_loop51
label|:
do|do
block|{
if|if
condition|(
operator|(
name|_tokenSet_17
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|)
condition|)
block|{
name|export
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|}
else|else
block|{
break|break
name|_loop51
break|;
block|}
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
name|match
argument_list|(
name|RCURLY
argument_list|)
expr_stmt|;
name|value_abs_full_dcl_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|reportError
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|consume
argument_list|()
expr_stmt|;
name|consumeUntil
argument_list|(
name|_tokenSet_10
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|ex
throw|;
block|}
block|}
name|returnAST
operator|=
name|value_abs_full_dcl_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|value_inheritance_spec
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|value_inheritance_spec_AST
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// for error handling
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|COLON
case|:
block|{
name|value_value_inheritance_spec
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|LCURLY
case|:
case|case
name|LITERAL_supports
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LITERAL_supports
case|:
block|{
name|value_interface_inheritance_spec
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|LCURLY
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|value_inheritance_spec_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|reportError
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|consume
argument_list|()
expr_stmt|;
name|consumeUntil
argument_list|(
name|_tokenSet_16
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|ex
throw|;
block|}
block|}
name|returnAST
operator|=
name|value_inheritance_spec_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|value_header
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|value_header_AST
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// for error handling
name|AST
name|tmp58_AST
init|=
literal|null
decl_stmt|;
name|tmp58_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp58_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_valuetype
argument_list|)
expr_stmt|;
name|identifier
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|value_inheritance_spec
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|value_header_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|reportError
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|consume
argument_list|()
expr_stmt|;
name|consumeUntil
argument_list|(
name|_tokenSet_16
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|ex
throw|;
block|}
block|}
name|returnAST
operator|=
name|value_header_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|value_element
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|value_element_AST
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// for error handling
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|SCOPEOP
case|:
case|case
name|IDENT
case|:
case|case
name|LITERAL_const
case|:
case|case
name|LITERAL_typedef
case|:
case|case
name|LITERAL_native
case|:
case|case
name|LITERAL_float
case|:
case|case
name|LITERAL_double
case|:
case|case
name|LITERAL_long
case|:
case|case
name|LITERAL_short
case|:
case|case
name|LITERAL_unsigned
case|:
case|case
name|LITERAL_char
case|:
case|case
name|LITERAL_wchar
case|:
case|case
name|LITERAL_boolean
case|:
case|case
name|LITERAL_octet
case|:
case|case
name|LITERAL_any
case|:
case|case
name|LITERAL_Object
case|:
case|case
name|LITERAL_struct
case|:
case|case
name|LITERAL_union
case|:
case|case
name|LITERAL_enum
case|:
case|case
name|LITERAL_string
case|:
case|case
name|LITERAL_wstring
case|:
case|case
name|LITERAL_exception
case|:
case|case
name|LITERAL_oneway
case|:
case|case
name|LITERAL_void
case|:
case|case
name|LITERAL_ValueBase
case|:
case|case
name|LITERAL_typeid
case|:
case|case
name|LITERAL_typeprefix
case|:
case|case
name|LITERAL_readonly
case|:
case|case
name|LITERAL_attribute
case|:
block|{
name|export
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_public
case|:
case|case
name|LITERAL_private
case|:
block|{
name|state_member
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_factory
case|:
block|{
name|init_dcl
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|value_element_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|reportError
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|consume
argument_list|()
expr_stmt|;
name|consumeUntil
argument_list|(
name|_tokenSet_24
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|ex
throw|;
block|}
block|}
name|returnAST
operator|=
name|value_element_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|value_value_inheritance_spec
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|value_value_inheritance_spec_AST
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// for error handling
name|AST
name|tmp59_AST
init|=
literal|null
decl_stmt|;
name|tmp59_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp59_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|COLON
argument_list|)
expr_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LITERAL_truncatable
case|:
block|{
name|AST
name|tmp60_AST
init|=
literal|null
decl_stmt|;
name|tmp60_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp60_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_truncatable
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|SCOPEOP
case|:
case|case
name|IDENT
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|value_name
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|{
name|_loop63
label|:
do|do
block|{
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|COMMA
operator|)
condition|)
block|{
name|match
argument_list|(
name|COMMA
argument_list|)
expr_stmt|;
name|value_name
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|}
else|else
block|{
break|break
name|_loop63
break|;
block|}
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
name|value_value_inheritance_spec_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|reportError
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|consume
argument_list|()
expr_stmt|;
name|consumeUntil
argument_list|(
name|_tokenSet_25
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|ex
throw|;
block|}
block|}
name|returnAST
operator|=
name|value_value_inheritance_spec_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|value_interface_inheritance_spec
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|value_interface_inheritance_spec_AST
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// for error handling
name|AST
name|tmp62_AST
init|=
literal|null
decl_stmt|;
name|tmp62_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp62_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_supports
argument_list|)
expr_stmt|;
name|interface_name
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|{
name|_loop66
label|:
do|do
block|{
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|COMMA
operator|)
condition|)
block|{
name|match
argument_list|(
name|COMMA
argument_list|)
expr_stmt|;
name|interface_name
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|}
else|else
block|{
break|break
name|_loop66
break|;
block|}
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
name|value_interface_inheritance_spec_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|reportError
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|consume
argument_list|()
expr_stmt|;
name|consumeUntil
argument_list|(
name|_tokenSet_16
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|ex
throw|;
block|}
block|}
name|returnAST
operator|=
name|value_interface_inheritance_spec_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|value_name
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|value_name_AST
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// for error handling
name|scoped_name
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|value_name_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|reportError
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|consume
argument_list|()
expr_stmt|;
name|consumeUntil
argument_list|(
name|_tokenSet_26
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|ex
throw|;
block|}
block|}
name|returnAST
operator|=
name|value_name_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|state_member
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|state_member_AST
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// for error handling
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LITERAL_public
case|:
block|{
name|AST
name|tmp64_AST
init|=
literal|null
decl_stmt|;
name|tmp64_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp64_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_public
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_private
case|:
block|{
name|AST
name|tmp65_AST
init|=
literal|null
decl_stmt|;
name|tmp65_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp65_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_private
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|type_spec
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|declarators
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|SEMI
argument_list|)
expr_stmt|;
name|state_member_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|reportError
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|consume
argument_list|()
expr_stmt|;
name|consumeUntil
argument_list|(
name|_tokenSet_24
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|ex
throw|;
block|}
block|}
name|returnAST
operator|=
name|state_member_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|init_dcl
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|init_dcl_AST
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// for error handling
name|AST
name|tmp67_AST
init|=
literal|null
decl_stmt|;
name|tmp67_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp67_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_factory
argument_list|)
expr_stmt|;
name|identifier
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LPAREN
argument_list|)
expr_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LITERAL_in
case|:
block|{
name|init_param_decls
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|RPAREN
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|match
argument_list|(
name|RPAREN
argument_list|)
expr_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LITERAL_raises
case|:
block|{
name|raises_expr
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|SEMI
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|match
argument_list|(
name|SEMI
argument_list|)
expr_stmt|;
name|init_dcl_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|reportError
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|consume
argument_list|()
expr_stmt|;
name|consumeUntil
argument_list|(
name|_tokenSet_24
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|ex
throw|;
block|}
block|}
name|returnAST
operator|=
name|init_dcl_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|declarators
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|declarators_AST
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// for error handling
name|declarator
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|{
name|_loop127
label|:
do|do
block|{
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|COMMA
operator|)
condition|)
block|{
name|match
argument_list|(
name|COMMA
argument_list|)
expr_stmt|;
name|declarator
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|}
else|else
block|{
break|break
name|_loop127
break|;
block|}
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
name|declarators_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|reportError
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|consume
argument_list|()
expr_stmt|;
name|consumeUntil
argument_list|(
name|_tokenSet_10
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|ex
throw|;
block|}
block|}
name|returnAST
operator|=
name|declarators_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|init_param_decls
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|init_param_decls_AST
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// for error handling
name|init_param_decl
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|{
name|_loop77
label|:
do|do
block|{
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|COMMA
operator|)
condition|)
block|{
name|match
argument_list|(
name|COMMA
argument_list|)
expr_stmt|;
name|init_param_decl
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|}
else|else
block|{
break|break
name|_loop77
break|;
block|}
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
name|init_param_decls_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|reportError
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|consume
argument_list|()
expr_stmt|;
name|consumeUntil
argument_list|(
name|_tokenSet_27
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|ex
throw|;
block|}
block|}
name|returnAST
operator|=
name|init_param_decls_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|raises_expr
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|raises_expr_AST
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// for error handling
name|AST
name|tmp73_AST
init|=
literal|null
decl_stmt|;
name|tmp73_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp73_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_raises
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LPAREN
argument_list|)
expr_stmt|;
name|scoped_name_list
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|RPAREN
argument_list|)
expr_stmt|;
name|raises_expr_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|reportError
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|consume
argument_list|()
expr_stmt|;
name|consumeUntil
argument_list|(
name|_tokenSet_28
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|ex
throw|;
block|}
block|}
name|returnAST
operator|=
name|raises_expr_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|init_param_decl
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|init_param_decl_AST
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// for error handling
name|init_param_attribute
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|param_type_spec
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|simple_declarator
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|init_param_decl_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|reportError
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|consume
argument_list|()
expr_stmt|;
name|consumeUntil
argument_list|(
name|_tokenSet_29
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|ex
throw|;
block|}
block|}
name|returnAST
operator|=
name|init_param_decl_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|init_param_attribute
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|init_param_attribute_AST
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// for error handling
name|AST
name|tmp76_AST
init|=
literal|null
decl_stmt|;
name|tmp76_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp76_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_in
argument_list|)
expr_stmt|;
name|init_param_attribute_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|reportError
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|consume
argument_list|()
expr_stmt|;
name|consumeUntil
argument_list|(
name|_tokenSet_30
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|ex
throw|;
block|}
block|}
name|returnAST
operator|=
name|init_param_attribute_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|param_type_spec
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|param_type_spec_AST
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// for error handling
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LITERAL_float
case|:
case|case
name|LITERAL_double
case|:
case|case
name|LITERAL_long
case|:
case|case
name|LITERAL_short
case|:
case|case
name|LITERAL_unsigned
case|:
case|case
name|LITERAL_char
case|:
case|case
name|LITERAL_wchar
case|:
case|case
name|LITERAL_boolean
case|:
case|case
name|LITERAL_octet
case|:
case|case
name|LITERAL_any
case|:
case|case
name|LITERAL_Object
case|:
case|case
name|LITERAL_ValueBase
case|:
block|{
name|base_type_spec
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|param_type_spec_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_string
case|:
block|{
name|string_type
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|param_type_spec_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_wstring
case|:
block|{
name|wide_string_type
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|param_type_spec_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|SCOPEOP
case|:
case|case
name|IDENT
case|:
block|{
name|scoped_name
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|param_type_spec_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|reportError
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|consume
argument_list|()
expr_stmt|;
name|consumeUntil
argument_list|(
name|_tokenSet_31
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|ex
throw|;
block|}
block|}
name|returnAST
operator|=
name|param_type_spec_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|simple_declarator
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|simple_declarator_AST
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// for error handling
name|identifier
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|simple_declarator_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|reportError
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|consume
argument_list|()
expr_stmt|;
name|consumeUntil
argument_list|(
name|_tokenSet_32
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|ex
throw|;
block|}
block|}
name|returnAST
operator|=
name|simple_declarator_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|const_type
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|const_type_AST
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// for error handling
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LITERAL_char
case|:
block|{
name|char_type
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|const_type_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_wchar
case|:
block|{
name|wide_char_type
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|const_type_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_boolean
case|:
block|{
name|boolean_type
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|const_type_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_string
case|:
block|{
name|string_type
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|const_type_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_wstring
case|:
block|{
name|wide_string_type
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|const_type_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_fixed
case|:
block|{
name|fixed_pt_const_type
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|const_type_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|SCOPEOP
case|:
case|case
name|IDENT
case|:
block|{
name|scoped_name
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|const_type_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_octet
case|:
block|{
name|octet_type
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|const_type_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
default|default:
name|boolean
name|synPredMatched83
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|(
operator|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|>=
name|LITERAL_long
operator|&&
name|LA
argument_list|(
literal|1
argument_list|)
operator|<=
name|LITERAL_unsigned
operator|)
operator|)
operator|&&
operator|(
name|LA
argument_list|(
literal|2
argument_list|)
operator|==
name|IDENT
operator|||
name|LA
argument_list|(
literal|2
argument_list|)
operator|==
name|LITERAL_long
operator|||
name|LA
argument_list|(
literal|2
argument_list|)
operator|==
name|LITERAL_short
operator|)
operator|&&
operator|(
name|LA
argument_list|(
literal|3
argument_list|)
operator|==
name|IDENT
operator|||
name|LA
argument_list|(
literal|3
argument_list|)
operator|==
name|ASSIGN
operator|||
name|LA
argument_list|(
literal|3
argument_list|)
operator|==
name|LITERAL_long
operator|)
operator|&&
operator|(
name|_tokenSet_33
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|4
argument_list|)
argument_list|)
operator|)
operator|)
condition|)
block|{
name|int
name|_m83
init|=
name|mark
argument_list|()
decl_stmt|;
name|synPredMatched83
operator|=
literal|true
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|++
expr_stmt|;
try|try
block|{
block|{
name|integer_type
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|pe
parameter_list|)
block|{
name|synPredMatched83
operator|=
literal|false
expr_stmt|;
block|}
name|rewind
argument_list|(
name|_m83
argument_list|)
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|--
expr_stmt|;
block|}
if|if
condition|(
name|synPredMatched83
condition|)
block|{
name|integer_type
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|const_type_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|>=
name|LITERAL_float
operator|&&
name|LA
argument_list|(
literal|1
argument_list|)
operator|<=
name|LITERAL_long
operator|)
operator|)
operator|&&
operator|(
name|LA
argument_list|(
literal|2
argument_list|)
operator|==
name|IDENT
operator|||
name|LA
argument_list|(
literal|2
argument_list|)
operator|==
name|LITERAL_double
operator|)
operator|&&
operator|(
name|LA
argument_list|(
literal|3
argument_list|)
operator|==
name|IDENT
operator|||
name|LA
argument_list|(
literal|3
argument_list|)
operator|==
name|ASSIGN
operator|)
operator|&&
operator|(
name|_tokenSet_33
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|4
argument_list|)
argument_list|)
operator|)
condition|)
block|{
name|floating_pt_type
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|const_type_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|reportError
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|consume
argument_list|()
expr_stmt|;
name|consumeUntil
argument_list|(
name|_tokenSet_31
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|ex
throw|;
block|}
block|}
name|returnAST
operator|=
name|const_type_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|const_exp
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|const_exp_AST
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// for error handling
name|or_expr
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|const_exp_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|reportError
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|consume
argument_list|()
expr_stmt|;
name|consumeUntil
argument_list|(
name|_tokenSet_34
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|ex
throw|;
block|}
block|}
name|returnAST
operator|=
name|const_exp_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|integer_type
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|integer_type_AST
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// for error handling
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LITERAL_long
case|:
case|case
name|LITERAL_short
case|:
block|{
name|signed_int
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|integer_type_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_unsigned
case|:
block|{
name|unsigned_int
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|integer_type_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|reportError
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|consume
argument_list|()
expr_stmt|;
name|consumeUntil
argument_list|(
name|_tokenSet_35
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|ex
throw|;
block|}
block|}
name|returnAST
operator|=
name|integer_type_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|char_type
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|char_type_AST
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// for error handling
name|AST
name|tmp77_AST
init|=
literal|null
decl_stmt|;
name|tmp77_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp77_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_char
argument_list|)
expr_stmt|;
name|char_type_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|reportError
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|consume
argument_list|()
expr_stmt|;
name|consumeUntil
argument_list|(
name|_tokenSet_35
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|ex
throw|;
block|}
block|}
name|returnAST
operator|=
name|char_type_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|wide_char_type
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|wide_char_type_AST
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// for error handling
name|AST
name|tmp78_AST
init|=
literal|null
decl_stmt|;
name|tmp78_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp78_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_wchar
argument_list|)
expr_stmt|;
name|wide_char_type_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|reportError
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|consume
argument_list|()
expr_stmt|;
name|consumeUntil
argument_list|(
name|_tokenSet_36
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|ex
throw|;
block|}
block|}
name|returnAST
operator|=
name|wide_char_type_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|boolean_type
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|boolean_type_AST
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// for error handling
name|AST
name|tmp79_AST
init|=
literal|null
decl_stmt|;
name|tmp79_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp79_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_boolean
argument_list|)
expr_stmt|;
name|boolean_type_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|reportError
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|consume
argument_list|()
expr_stmt|;
name|consumeUntil
argument_list|(
name|_tokenSet_35
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|ex
throw|;
block|}
block|}
name|returnAST
operator|=
name|boolean_type_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|floating_pt_type
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|floating_pt_type_AST
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// for error handling
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LITERAL_float
case|:
block|{
name|AST
name|tmp80_AST
init|=
literal|null
decl_stmt|;
name|tmp80_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp80_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_float
argument_list|)
expr_stmt|;
name|floating_pt_type_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_double
case|:
block|{
name|AST
name|tmp81_AST
init|=
literal|null
decl_stmt|;
name|tmp81_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp81_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_double
argument_list|)
expr_stmt|;
name|floating_pt_type_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_long
case|:
block|{
name|AST
name|tmp82_AST
init|=
literal|null
decl_stmt|;
name|tmp82_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp82_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_long
argument_list|)
expr_stmt|;
name|AST
name|tmp83_AST
init|=
literal|null
decl_stmt|;
name|tmp83_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp83_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_double
argument_list|)
expr_stmt|;
name|floating_pt_type_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|reportError
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|consume
argument_list|()
expr_stmt|;
name|consumeUntil
argument_list|(
name|_tokenSet_36
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|ex
throw|;
block|}
block|}
name|returnAST
operator|=
name|floating_pt_type_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|string_type
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|string_type_AST
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// for error handling
name|AST
name|tmp84_AST
init|=
literal|null
decl_stmt|;
name|tmp84_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp84_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_string
argument_list|)
expr_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LT
case|:
block|{
name|match
argument_list|(
name|LT
argument_list|)
expr_stmt|;
name|positive_int_const
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|GT
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|SEMI
case|:
case|case
name|COMMA
case|:
case|case
name|IDENT
case|:
case|case
name|GT
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|string_type_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|reportError
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|consume
argument_list|()
expr_stmt|;
name|consumeUntil
argument_list|(
name|_tokenSet_36
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|ex
throw|;
block|}
block|}
name|returnAST
operator|=
name|string_type_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|wide_string_type
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|wide_string_type_AST
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// for error handling
name|AST
name|tmp87_AST
init|=
literal|null
decl_stmt|;
name|tmp87_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp87_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_wstring
argument_list|)
expr_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LT
case|:
block|{
name|match
argument_list|(
name|LT
argument_list|)
expr_stmt|;
name|positive_int_const
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|GT
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|SEMI
case|:
case|case
name|COMMA
case|:
case|case
name|IDENT
case|:
case|case
name|GT
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|wide_string_type_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|reportError
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|consume
argument_list|()
expr_stmt|;
name|consumeUntil
argument_list|(
name|_tokenSet_36
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|ex
throw|;
block|}
block|}
name|returnAST
operator|=
name|wide_string_type_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|fixed_pt_const_type
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|fixed_pt_const_type_AST
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// for error handling
name|AST
name|tmp90_AST
init|=
literal|null
decl_stmt|;
name|tmp90_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp90_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_fixed
argument_list|)
expr_stmt|;
name|fixed_pt_const_type_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|reportError
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|consume
argument_list|()
expr_stmt|;
name|consumeUntil
argument_list|(
name|_tokenSet_31
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|ex
throw|;
block|}
block|}
name|returnAST
operator|=
name|fixed_pt_const_type_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|octet_type
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|octet_type_AST
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// for error handling
name|AST
name|tmp91_AST
init|=
literal|null
decl_stmt|;
name|tmp91_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp91_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_octet
argument_list|)
expr_stmt|;
name|octet_type_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|reportError
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|consume
argument_list|()
expr_stmt|;
name|consumeUntil
argument_list|(
name|_tokenSet_36
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|ex
throw|;
block|}
block|}
name|returnAST
operator|=
name|octet_type_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|or_expr
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|or_expr_AST
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// for error handling
name|xor_expr
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|{
name|_loop87
label|:
do|do
block|{
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|OR
operator|)
condition|)
block|{
name|AST
name|tmp92_AST
init|=
literal|null
decl_stmt|;
name|tmp92_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp92_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|OR
argument_list|)
expr_stmt|;
name|xor_expr
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|}
else|else
block|{
break|break
name|_loop87
break|;
block|}
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
name|or_expr_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|reportError
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|consume
argument_list|()
expr_stmt|;
name|consumeUntil
argument_list|(
name|_tokenSet_34
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|ex
throw|;
block|}
block|}
name|returnAST
operator|=
name|or_expr_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|xor_expr
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|xor_expr_AST
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// for error handling
name|and_expr
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|{
name|_loop90
label|:
do|do
block|{
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|XOR
operator|)
condition|)
block|{
name|AST
name|tmp93_AST
init|=
literal|null
decl_stmt|;
name|tmp93_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp93_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|XOR
argument_list|)
expr_stmt|;
name|and_expr
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|}
else|else
block|{
break|break
name|_loop90
break|;
block|}
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
name|xor_expr_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|reportError
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|consume
argument_list|()
expr_stmt|;
name|consumeUntil
argument_list|(
name|_tokenSet_37
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|ex
throw|;
block|}
block|}
name|returnAST
operator|=
name|xor_expr_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|and_expr
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|and_expr_AST
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// for error handling
name|shift_expr
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|{
name|_loop93
label|:
do|do
block|{
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|AND
operator|)
condition|)
block|{
name|AST
name|tmp94_AST
init|=
literal|null
decl_stmt|;
name|tmp94_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp94_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|AND
argument_list|)
expr_stmt|;
name|shift_expr
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|}
else|else
block|{
break|break
name|_loop93
break|;
block|}
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
name|and_expr_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|reportError
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|consume
argument_list|()
expr_stmt|;
name|consumeUntil
argument_list|(
name|_tokenSet_38
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|ex
throw|;
block|}
block|}
name|returnAST
operator|=
name|and_expr_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|shift_expr
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|shift_expr_AST
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// for error handling
name|add_expr
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|{
name|_loop97
label|:
do|do
block|{
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|LSHIFT
operator|||
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|RSHIFT
operator|)
condition|)
block|{
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LSHIFT
case|:
block|{
name|AST
name|tmp95_AST
init|=
literal|null
decl_stmt|;
name|tmp95_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp95_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LSHIFT
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|RSHIFT
case|:
block|{
name|AST
name|tmp96_AST
init|=
literal|null
decl_stmt|;
name|tmp96_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp96_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|RSHIFT
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|add_expr
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|}
else|else
block|{
break|break
name|_loop97
break|;
block|}
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
name|shift_expr_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|reportError
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|consume
argument_list|()
expr_stmt|;
name|consumeUntil
argument_list|(
name|_tokenSet_39
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|ex
throw|;
block|}
block|}
name|returnAST
operator|=
name|shift_expr_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|add_expr
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|add_expr_AST
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// for error handling
name|mult_expr
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|{
name|_loop101
label|:
do|do
block|{
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|PLUS
operator|||
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|MINUS
operator|)
condition|)
block|{
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|PLUS
case|:
block|{
name|AST
name|tmp97_AST
init|=
literal|null
decl_stmt|;
name|tmp97_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp97_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|PLUS
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|MINUS
case|:
block|{
name|AST
name|tmp98_AST
init|=
literal|null
decl_stmt|;
name|tmp98_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp98_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|MINUS
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|mult_expr
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|}
else|else
block|{
break|break
name|_loop101
break|;
block|}
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
name|add_expr_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|reportError
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|consume
argument_list|()
expr_stmt|;
name|consumeUntil
argument_list|(
name|_tokenSet_40
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|ex
throw|;
block|}
block|}
name|returnAST
operator|=
name|add_expr_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|mult_expr
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|mult_expr_AST
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// for error handling
name|unary_expr
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|{
name|_loop105
label|:
do|do
block|{
if|if
condition|(
operator|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|>=
name|STAR
operator|&&
name|LA
argument_list|(
literal|1
argument_list|)
operator|<=
name|MOD
operator|)
operator|)
condition|)
block|{
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|STAR
case|:
block|{
name|AST
name|tmp99_AST
init|=
literal|null
decl_stmt|;
name|tmp99_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp99_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|STAR
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|DIV
case|:
block|{
name|AST
name|tmp100_AST
init|=
literal|null
decl_stmt|;
name|tmp100_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp100_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|DIV
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|MOD
case|:
block|{
name|AST
name|tmp101_AST
init|=
literal|null
decl_stmt|;
name|tmp101_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp101_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|MOD
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|unary_expr
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|}
else|else
block|{
break|break
name|_loop105
break|;
block|}
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
name|mult_expr_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|reportError
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|consume
argument_list|()
expr_stmt|;
name|consumeUntil
argument_list|(
name|_tokenSet_41
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|ex
throw|;
block|}
block|}
name|returnAST
operator|=
name|mult_expr_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|unary_expr
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|unary_expr_AST
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// for error handling
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|PLUS
case|:
case|case
name|MINUS
case|:
case|case
name|TILDE
case|:
block|{
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|MINUS
case|:
block|{
name|AST
name|tmp102_AST
init|=
literal|null
decl_stmt|;
name|tmp102_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp102_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|MINUS
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|PLUS
case|:
block|{
name|AST
name|tmp103_AST
init|=
literal|null
decl_stmt|;
name|tmp103_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp103_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|PLUS
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|TILDE
case|:
block|{
name|AST
name|tmp104_AST
init|=
literal|null
decl_stmt|;
name|tmp104_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp104_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|TILDE
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|primary_expr
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|unary_expr_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|SCOPEOP
case|:
case|case
name|IDENT
case|:
case|case
name|LPAREN
case|:
case|case
name|LITERAL_TRUE
case|:
case|case
name|LITERAL_FALSE
case|:
case|case
name|INT
case|:
case|case
name|OCTAL
case|:
case|case
name|HEX
case|:
case|case
name|STRING_LITERAL
case|:
case|case
name|WIDE_STRING_LITERAL
case|:
case|case
name|CHAR_LITERAL
case|:
case|case
name|WIDE_CHAR_LITERAL
case|:
case|case
name|FIXED
case|:
case|case
name|FLOAT
case|:
block|{
name|primary_expr
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|unary_expr_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|reportError
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|consume
argument_list|()
expr_stmt|;
name|consumeUntil
argument_list|(
name|_tokenSet_42
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|ex
throw|;
block|}
block|}
name|returnAST
operator|=
name|unary_expr_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|primary_expr
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|primary_expr_AST
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// for error handling
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|SCOPEOP
case|:
case|case
name|IDENT
case|:
block|{
name|scoped_name
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|primary_expr_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_TRUE
case|:
case|case
name|LITERAL_FALSE
case|:
case|case
name|INT
case|:
case|case
name|OCTAL
case|:
case|case
name|HEX
case|:
case|case
name|STRING_LITERAL
case|:
case|case
name|WIDE_STRING_LITERAL
case|:
case|case
name|CHAR_LITERAL
case|:
case|case
name|WIDE_CHAR_LITERAL
case|:
case|case
name|FIXED
case|:
case|case
name|FLOAT
case|:
block|{
name|literal
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|primary_expr_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LPAREN
case|:
block|{
name|AST
name|tmp105_AST
init|=
literal|null
decl_stmt|;
name|tmp105_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp105_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LPAREN
argument_list|)
expr_stmt|;
name|const_exp
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|AST
name|tmp106_AST
init|=
literal|null
decl_stmt|;
name|tmp106_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp106_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|RPAREN
argument_list|)
expr_stmt|;
name|primary_expr_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|reportError
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|consume
argument_list|()
expr_stmt|;
name|consumeUntil
argument_list|(
name|_tokenSet_42
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|ex
throw|;
block|}
block|}
name|returnAST
operator|=
name|primary_expr_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|literal
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|literal_AST
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// for error handling
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|INT
case|:
case|case
name|OCTAL
case|:
case|case
name|HEX
case|:
block|{
name|integer_literal
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|literal_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|STRING_LITERAL
case|:
block|{
name|string_literal
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|literal_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|WIDE_STRING_LITERAL
case|:
block|{
name|wide_string_literal
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|literal_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|CHAR_LITERAL
case|:
block|{
name|character_literal
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|literal_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|WIDE_CHAR_LITERAL
case|:
block|{
name|wide_character_literal
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|literal_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|FIXED
case|:
block|{
name|fixed_pt_literal
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|literal_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|FLOAT
case|:
block|{
name|floating_pt_literal
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|literal_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_TRUE
case|:
case|case
name|LITERAL_FALSE
case|:
block|{
name|boolean_literal
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|literal_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|reportError
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|consume
argument_list|()
expr_stmt|;
name|consumeUntil
argument_list|(
name|_tokenSet_42
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|ex
throw|;
block|}
block|}
name|returnAST
operator|=
name|literal_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|integer_literal
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|integer_literal_AST
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// for error handling
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|INT
case|:
block|{
name|AST
name|tmp107_AST
init|=
literal|null
decl_stmt|;
name|tmp107_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp107_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|INT
argument_list|)
expr_stmt|;
name|integer_literal_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|OCTAL
case|:
block|{
name|AST
name|tmp108_AST
init|=
literal|null
decl_stmt|;
name|tmp108_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp108_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|OCTAL
argument_list|)
expr_stmt|;
name|integer_literal_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|HEX
case|:
block|{
name|AST
name|tmp109_AST
init|=
literal|null
decl_stmt|;
name|tmp109_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp109_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|HEX
argument_list|)
expr_stmt|;
name|integer_literal_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|reportError
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|consume
argument_list|()
expr_stmt|;
name|consumeUntil
argument_list|(
name|_tokenSet_42
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|ex
throw|;
block|}
block|}
name|returnAST
operator|=
name|integer_literal_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|string_literal
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|string_literal_AST
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// for error handling
block|{
name|int
name|_cnt285
init|=
literal|0
decl_stmt|;
name|_loop285
label|:
do|do
block|{
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|STRING_LITERAL
operator|)
condition|)
block|{
name|AST
name|tmp110_AST
init|=
literal|null
decl_stmt|;
name|tmp110_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp110_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|STRING_LITERAL
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|_cnt285
operator|>=
literal|1
condition|)
block|{
break|break
name|_loop285
break|;
block|}
else|else
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|_cnt285
operator|++
expr_stmt|;
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
name|string_literal_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|reportError
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|consume
argument_list|()
expr_stmt|;
name|consumeUntil
argument_list|(
name|_tokenSet_42
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|ex
throw|;
block|}
block|}
name|returnAST
operator|=
name|string_literal_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|wide_string_literal
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|wide_string_literal_AST
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// for error handling
block|{
name|int
name|_cnt288
init|=
literal|0
decl_stmt|;
name|_loop288
label|:
do|do
block|{
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|WIDE_STRING_LITERAL
operator|)
condition|)
block|{
name|AST
name|tmp111_AST
init|=
literal|null
decl_stmt|;
name|tmp111_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp111_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|WIDE_STRING_LITERAL
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|_cnt288
operator|>=
literal|1
condition|)
block|{
break|break
name|_loop288
break|;
block|}
else|else
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|_cnt288
operator|++
expr_stmt|;
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
name|wide_string_literal_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|reportError
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|consume
argument_list|()
expr_stmt|;
name|consumeUntil
argument_list|(
name|_tokenSet_42
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|ex
throw|;
block|}
block|}
name|returnAST
operator|=
name|wide_string_literal_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|character_literal
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|character_literal_AST
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// for error handling
name|AST
name|tmp112_AST
init|=
literal|null
decl_stmt|;
name|tmp112_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp112_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|CHAR_LITERAL
argument_list|)
expr_stmt|;
name|character_literal_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|reportError
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|consume
argument_list|()
expr_stmt|;
name|consumeUntil
argument_list|(
name|_tokenSet_42
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|ex
throw|;
block|}
block|}
name|returnAST
operator|=
name|character_literal_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|wide_character_literal
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|wide_character_literal_AST
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// for error handling
name|AST
name|tmp113_AST
init|=
literal|null
decl_stmt|;
name|tmp113_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp113_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|WIDE_CHAR_LITERAL
argument_list|)
expr_stmt|;
name|wide_character_literal_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|reportError
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|consume
argument_list|()
expr_stmt|;
name|consumeUntil
argument_list|(
name|_tokenSet_42
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|ex
throw|;
block|}
block|}
name|returnAST
operator|=
name|wide_character_literal_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|fixed_pt_literal
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|fixed_pt_literal_AST
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// for error handling
name|AST
name|tmp114_AST
init|=
literal|null
decl_stmt|;
name|tmp114_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp114_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|FIXED
argument_list|)
expr_stmt|;
name|fixed_pt_literal_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|reportError
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|consume
argument_list|()
expr_stmt|;
name|consumeUntil
argument_list|(
name|_tokenSet_42
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|ex
throw|;
block|}
block|}
name|returnAST
operator|=
name|fixed_pt_literal_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|floating_pt_literal
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|floating_pt_literal_AST
init|=
literal|null
decl_stmt|;
name|Token
name|f
init|=
literal|null
decl_stmt|;
name|AST
name|f_AST
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// for error handling
name|f
operator|=
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|f_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|f_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|FLOAT
argument_list|)
expr_stmt|;
name|floating_pt_literal_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|reportError
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|consume
argument_list|()
expr_stmt|;
name|consumeUntil
argument_list|(
name|_tokenSet_42
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|ex
throw|;
block|}
block|}
name|returnAST
operator|=
name|floating_pt_literal_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|boolean_literal
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|boolean_literal_AST
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// for error handling
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LITERAL_TRUE
case|:
block|{
name|AST
name|tmp115_AST
init|=
literal|null
decl_stmt|;
name|tmp115_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp115_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_TRUE
argument_list|)
expr_stmt|;
name|boolean_literal_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_FALSE
case|:
block|{
name|AST
name|tmp116_AST
init|=
literal|null
decl_stmt|;
name|tmp116_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp116_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_FALSE
argument_list|)
expr_stmt|;
name|boolean_literal_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|reportError
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|consume
argument_list|()
expr_stmt|;
name|consumeUntil
argument_list|(
name|_tokenSet_42
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|ex
throw|;
block|}
block|}
name|returnAST
operator|=
name|boolean_literal_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|positive_int_const
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|positive_int_const_AST
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// for error handling
name|const_exp
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|positive_int_const_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|reportError
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|consume
argument_list|()
expr_stmt|;
name|consumeUntil
argument_list|(
name|_tokenSet_43
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|ex
throw|;
block|}
block|}
name|returnAST
operator|=
name|positive_int_const_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|type_declarator
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|type_declarator_AST
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// for error handling
name|type_spec
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|declarators
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|type_declarator_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|reportError
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|consume
argument_list|()
expr_stmt|;
name|consumeUntil
argument_list|(
name|_tokenSet_10
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|ex
throw|;
block|}
block|}
name|returnAST
operator|=
name|type_declarator_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|struct_type
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|struct_type_AST
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// for error handling
name|AST
name|tmp117_AST
init|=
literal|null
decl_stmt|;
name|tmp117_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp117_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_struct
argument_list|)
expr_stmt|;
name|identifier
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LCURLY
argument_list|)
expr_stmt|;
name|member_list
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|RCURLY
argument_list|)
expr_stmt|;
name|struct_type_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|reportError
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|consume
argument_list|()
expr_stmt|;
name|consumeUntil
argument_list|(
name|_tokenSet_23
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|ex
throw|;
block|}
block|}
name|returnAST
operator|=
name|struct_type_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|union_type
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|union_type_AST
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// for error handling
name|AST
name|tmp120_AST
init|=
literal|null
decl_stmt|;
name|tmp120_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp120_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_union
argument_list|)
expr_stmt|;
name|identifier
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_switch
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LPAREN
argument_list|)
expr_stmt|;
name|switch_type_spec
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|RPAREN
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LCURLY
argument_list|)
expr_stmt|;
name|switch_body
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|RCURLY
argument_list|)
expr_stmt|;
name|union_type_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|reportError
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|consume
argument_list|()
expr_stmt|;
name|consumeUntil
argument_list|(
name|_tokenSet_23
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|ex
throw|;
block|}
block|}
name|returnAST
operator|=
name|union_type_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|enum_type
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|enum_type_AST
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// for error handling
name|AST
name|tmp126_AST
init|=
literal|null
decl_stmt|;
name|tmp126_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp126_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_enum
argument_list|)
expr_stmt|;
name|identifier
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LCURLY
argument_list|)
expr_stmt|;
name|enumerator_list
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|RCURLY
argument_list|)
expr_stmt|;
name|enum_type_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|reportError
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|consume
argument_list|()
expr_stmt|;
name|consumeUntil
argument_list|(
name|_tokenSet_44
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|ex
throw|;
block|}
block|}
name|returnAST
operator|=
name|enum_type_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|constr_forward_decl
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|constr_forward_decl_AST
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// for error handling
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LITERAL_struct
case|:
block|{
name|AST
name|tmp129_AST
init|=
literal|null
decl_stmt|;
name|tmp129_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp129_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_struct
argument_list|)
expr_stmt|;
name|identifier
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|constr_forward_decl_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_union
case|:
block|{
name|AST
name|tmp130_AST
init|=
literal|null
decl_stmt|;
name|tmp130_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp130_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_union
argument_list|)
expr_stmt|;
name|identifier
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|constr_forward_decl_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|reportError
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|consume
argument_list|()
expr_stmt|;
name|consumeUntil
argument_list|(
name|_tokenSet_10
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|ex
throw|;
block|}
block|}
name|returnAST
operator|=
name|constr_forward_decl_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|simple_type_spec
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|simple_type_spec_AST
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// for error handling
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LITERAL_float
case|:
case|case
name|LITERAL_double
case|:
case|case
name|LITERAL_long
case|:
case|case
name|LITERAL_short
case|:
case|case
name|LITERAL_unsigned
case|:
case|case
name|LITERAL_char
case|:
case|case
name|LITERAL_wchar
case|:
case|case
name|LITERAL_boolean
case|:
case|case
name|LITERAL_octet
case|:
case|case
name|LITERAL_any
case|:
case|case
name|LITERAL_Object
case|:
case|case
name|LITERAL_ValueBase
case|:
block|{
name|base_type_spec
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|simple_type_spec_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_sequence
case|:
case|case
name|LITERAL_string
case|:
case|case
name|LITERAL_wstring
case|:
case|case
name|LITERAL_fixed
case|:
block|{
name|template_type_spec
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|simple_type_spec_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|SCOPEOP
case|:
case|case
name|IDENT
case|:
block|{
name|scoped_name
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|simple_type_spec_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|reportError
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|consume
argument_list|()
expr_stmt|;
name|consumeUntil
argument_list|(
name|_tokenSet_36
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|ex
throw|;
block|}
block|}
name|returnAST
operator|=
name|simple_type_spec_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|constr_type_spec
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|constr_type_spec_AST
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// for error handling
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LITERAL_struct
case|:
block|{
name|struct_type
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|constr_type_spec_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_union
case|:
block|{
name|union_type
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|constr_type_spec_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_enum
case|:
block|{
name|enum_type
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|constr_type_spec_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|reportError
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|consume
argument_list|()
expr_stmt|;
name|consumeUntil
argument_list|(
name|_tokenSet_23
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|ex
throw|;
block|}
block|}
name|returnAST
operator|=
name|constr_type_spec_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|base_type_spec
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|base_type_spec_AST
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// for error handling
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LITERAL_char
case|:
block|{
name|char_type
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|base_type_spec_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_wchar
case|:
block|{
name|wide_char_type
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|base_type_spec_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_boolean
case|:
block|{
name|boolean_type
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|base_type_spec_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_octet
case|:
block|{
name|octet_type
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|base_type_spec_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_any
case|:
block|{
name|any_type
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|base_type_spec_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_Object
case|:
block|{
name|object_type
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|base_type_spec_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_ValueBase
case|:
block|{
name|value_base_type
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|base_type_spec_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
default|default:
name|boolean
name|synPredMatched122
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|(
operator|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|>=
name|LITERAL_float
operator|&&
name|LA
argument_list|(
literal|1
argument_list|)
operator|<=
name|LITERAL_long
operator|)
operator|)
operator|&&
operator|(
name|_tokenSet_45
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|)
operator|&&
operator|(
name|_tokenSet_46
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|3
argument_list|)
argument_list|)
operator|)
operator|&&
operator|(
name|_tokenSet_47
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|4
argument_list|)
argument_list|)
operator|)
operator|)
condition|)
block|{
name|int
name|_m122
init|=
name|mark
argument_list|()
decl_stmt|;
name|synPredMatched122
operator|=
literal|true
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|++
expr_stmt|;
try|try
block|{
block|{
name|floating_pt_type
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|pe
parameter_list|)
block|{
name|synPredMatched122
operator|=
literal|false
expr_stmt|;
block|}
name|rewind
argument_list|(
name|_m122
argument_list|)
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|--
expr_stmt|;
block|}
if|if
condition|(
name|synPredMatched122
condition|)
block|{
name|floating_pt_type
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|base_type_spec_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|>=
name|LITERAL_long
operator|&&
name|LA
argument_list|(
literal|1
argument_list|)
operator|<=
name|LITERAL_unsigned
operator|)
operator|)
operator|&&
operator|(
name|_tokenSet_48
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|)
operator|&&
operator|(
name|_tokenSet_49
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|3
argument_list|)
argument_list|)
operator|)
operator|&&
operator|(
name|_tokenSet_47
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|4
argument_list|)
argument_list|)
operator|)
condition|)
block|{
name|integer_type
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|base_type_spec_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|reportError
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|consume
argument_list|()
expr_stmt|;
name|consumeUntil
argument_list|(
name|_tokenSet_36
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|ex
throw|;
block|}
block|}
name|returnAST
operator|=
name|base_type_spec_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|template_type_spec
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|template_type_spec_AST
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// for error handling
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LITERAL_sequence
case|:
block|{
name|sequence_type
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|template_type_spec_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_string
case|:
block|{
name|string_type
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|template_type_spec_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_wstring
case|:
block|{
name|wide_string_type
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|template_type_spec_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_fixed
case|:
block|{
name|fixed_pt_type
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|template_type_spec_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|reportError
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|consume
argument_list|()
expr_stmt|;
name|consumeUntil
argument_list|(
name|_tokenSet_36
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|ex
throw|;
block|}
block|}
name|returnAST
operator|=
name|template_type_spec_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|any_type
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|any_type_AST
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// for error handling
name|AST
name|tmp131_AST
init|=
literal|null
decl_stmt|;
name|tmp131_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp131_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_any
argument_list|)
expr_stmt|;
name|any_type_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|reportError
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|consume
argument_list|()
expr_stmt|;
name|consumeUntil
argument_list|(
name|_tokenSet_36
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|ex
throw|;
block|}
block|}
name|returnAST
operator|=
name|any_type_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|object_type
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|object_type_AST
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// for error handling
name|AST
name|tmp132_AST
init|=
literal|null
decl_stmt|;
name|tmp132_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp132_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_Object
argument_list|)
expr_stmt|;
name|object_type_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|reportError
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|consume
argument_list|()
expr_stmt|;
name|consumeUntil
argument_list|(
name|_tokenSet_36
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|ex
throw|;
block|}
block|}
name|returnAST
operator|=
name|object_type_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|value_base_type
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|value_base_type_AST
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// for error handling
name|AST
name|tmp133_AST
init|=
literal|null
decl_stmt|;
name|tmp133_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp133_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_ValueBase
argument_list|)
expr_stmt|;
name|value_base_type_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|reportError
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|consume
argument_list|()
expr_stmt|;
name|consumeUntil
argument_list|(
name|_tokenSet_36
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|ex
throw|;
block|}
block|}
name|returnAST
operator|=
name|value_base_type_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|sequence_type
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|sequence_type_AST
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// for error handling
name|AST
name|tmp134_AST
init|=
literal|null
decl_stmt|;
name|tmp134_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp134_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_sequence
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LT
argument_list|)
expr_stmt|;
name|simple_type_spec
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|opt_pos_int
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|GT
argument_list|)
expr_stmt|;
name|sequence_type_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|reportError
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|consume
argument_list|()
expr_stmt|;
name|consumeUntil
argument_list|(
name|_tokenSet_36
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|ex
throw|;
block|}
block|}
name|returnAST
operator|=
name|sequence_type_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|fixed_pt_type
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|fixed_pt_type_AST
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// for error handling
name|AST
name|tmp137_AST
init|=
literal|null
decl_stmt|;
name|tmp137_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp137_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_fixed
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LT
argument_list|)
expr_stmt|;
name|positive_int_const
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|COMMA
argument_list|)
expr_stmt|;
name|positive_int_const
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|GT
argument_list|)
expr_stmt|;
name|fixed_pt_type_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|reportError
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|consume
argument_list|()
expr_stmt|;
name|consumeUntil
argument_list|(
name|_tokenSet_36
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|ex
throw|;
block|}
block|}
name|returnAST
operator|=
name|fixed_pt_type_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|declarator
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|declarator_AST
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// for error handling
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|IDENT
operator|)
operator|&&
operator|(
name|LA
argument_list|(
literal|2
argument_list|)
operator|==
name|SEMI
operator|||
name|LA
argument_list|(
literal|2
argument_list|)
operator|==
name|COMMA
operator|)
condition|)
block|{
name|simple_declarator
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|declarator_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|IDENT
operator|)
operator|&&
operator|(
name|LA
argument_list|(
literal|2
argument_list|)
operator|==
name|LBRACK
operator|)
condition|)
block|{
name|complex_declarator
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|declarator_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|reportError
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|consume
argument_list|()
expr_stmt|;
name|consumeUntil
argument_list|(
name|_tokenSet_50
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|ex
throw|;
block|}
block|}
name|returnAST
operator|=
name|declarator_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|complex_declarator
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|complex_declarator_AST
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// for error handling
name|array_declarator
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|complex_declarator_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|reportError
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|consume
argument_list|()
expr_stmt|;
name|consumeUntil
argument_list|(
name|_tokenSet_50
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|ex
throw|;
block|}
block|}
name|returnAST
operator|=
name|complex_declarator_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|array_declarator
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|array_declarator_AST
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// for error handling
name|AST
name|tmp141_AST
init|=
literal|null
decl_stmt|;
name|tmp141_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp141_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|IDENT
argument_list|)
expr_stmt|;
block|{
name|int
name|_cnt176
init|=
literal|0
decl_stmt|;
name|_loop176
label|:
do|do
block|{
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|LBRACK
operator|)
condition|)
block|{
name|fixed_array_size
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|_cnt176
operator|>=
literal|1
condition|)
block|{
break|break
name|_loop176
break|;
block|}
else|else
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|_cnt176
operator|++
expr_stmt|;
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
name|array_declarator_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|reportError
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|consume
argument_list|()
expr_stmt|;
name|consumeUntil
argument_list|(
name|_tokenSet_50
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|ex
throw|;
block|}
block|}
name|returnAST
operator|=
name|array_declarator_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|signed_int
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|signed_int_AST
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// for error handling
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|LITERAL_short
operator|)
condition|)
block|{
name|signed_short_int
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|signed_int_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|LITERAL_long
operator|)
operator|&&
operator|(
name|_tokenSet_35
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|)
condition|)
block|{
name|signed_long_int
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|signed_int_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|LITERAL_long
operator|)
operator|&&
operator|(
name|LA
argument_list|(
literal|2
argument_list|)
operator|==
name|LITERAL_long
operator|)
condition|)
block|{
name|signed_longlong_int
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|signed_int_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|reportError
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|consume
argument_list|()
expr_stmt|;
name|consumeUntil
argument_list|(
name|_tokenSet_35
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|ex
throw|;
block|}
block|}
name|returnAST
operator|=
name|signed_int_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|unsigned_int
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|unsigned_int_AST
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// for error handling
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|LITERAL_unsigned
operator|)
operator|&&
operator|(
name|LA
argument_list|(
literal|2
argument_list|)
operator|==
name|LITERAL_short
operator|)
condition|)
block|{
name|unsigned_short_int
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|unsigned_int_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|LITERAL_unsigned
operator|)
operator|&&
operator|(
name|LA
argument_list|(
literal|2
argument_list|)
operator|==
name|LITERAL_long
operator|)
operator|&&
operator|(
name|_tokenSet_35
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|3
argument_list|)
argument_list|)
operator|)
condition|)
block|{
name|unsigned_long_int
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|unsigned_int_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|LITERAL_unsigned
operator|)
operator|&&
operator|(
name|LA
argument_list|(
literal|2
argument_list|)
operator|==
name|LITERAL_long
operator|)
operator|&&
operator|(
name|LA
argument_list|(
literal|3
argument_list|)
operator|==
name|LITERAL_long
operator|)
condition|)
block|{
name|unsigned_longlong_int
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|unsigned_int_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|reportError
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|consume
argument_list|()
expr_stmt|;
name|consumeUntil
argument_list|(
name|_tokenSet_35
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|ex
throw|;
block|}
block|}
name|returnAST
operator|=
name|unsigned_int_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|signed_short_int
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|signed_short_int_AST
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// for error handling
name|AST
name|tmp142_AST
init|=
literal|null
decl_stmt|;
name|tmp142_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp142_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_short
argument_list|)
expr_stmt|;
name|signed_short_int_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|reportError
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|consume
argument_list|()
expr_stmt|;
name|consumeUntil
argument_list|(
name|_tokenSet_35
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|ex
throw|;
block|}
block|}
name|returnAST
operator|=
name|signed_short_int_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|signed_long_int
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|signed_long_int_AST
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// for error handling
name|AST
name|tmp143_AST
init|=
literal|null
decl_stmt|;
name|tmp143_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp143_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_long
argument_list|)
expr_stmt|;
name|signed_long_int_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|reportError
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|consume
argument_list|()
expr_stmt|;
name|consumeUntil
argument_list|(
name|_tokenSet_35
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|ex
throw|;
block|}
block|}
name|returnAST
operator|=
name|signed_long_int_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|signed_longlong_int
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|signed_longlong_int_AST
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// for error handling
name|AST
name|tmp144_AST
init|=
literal|null
decl_stmt|;
name|tmp144_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp144_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_long
argument_list|)
expr_stmt|;
name|AST
name|tmp145_AST
init|=
literal|null
decl_stmt|;
name|tmp145_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp145_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_long
argument_list|)
expr_stmt|;
name|signed_longlong_int_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|reportError
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|consume
argument_list|()
expr_stmt|;
name|consumeUntil
argument_list|(
name|_tokenSet_35
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|ex
throw|;
block|}
block|}
name|returnAST
operator|=
name|signed_longlong_int_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|unsigned_short_int
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|unsigned_short_int_AST
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// for error handling
name|AST
name|tmp146_AST
init|=
literal|null
decl_stmt|;
name|tmp146_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp146_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_unsigned
argument_list|)
expr_stmt|;
name|AST
name|tmp147_AST
init|=
literal|null
decl_stmt|;
name|tmp147_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp147_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_short
argument_list|)
expr_stmt|;
name|unsigned_short_int_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|reportError
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|consume
argument_list|()
expr_stmt|;
name|consumeUntil
argument_list|(
name|_tokenSet_35
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|ex
throw|;
block|}
block|}
name|returnAST
operator|=
name|unsigned_short_int_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|unsigned_long_int
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|unsigned_long_int_AST
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// for error handling
name|AST
name|tmp148_AST
init|=
literal|null
decl_stmt|;
name|tmp148_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp148_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_unsigned
argument_list|)
expr_stmt|;
name|AST
name|tmp149_AST
init|=
literal|null
decl_stmt|;
name|tmp149_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp149_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_long
argument_list|)
expr_stmt|;
name|unsigned_long_int_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|reportError
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|consume
argument_list|()
expr_stmt|;
name|consumeUntil
argument_list|(
name|_tokenSet_35
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|ex
throw|;
block|}
block|}
name|returnAST
operator|=
name|unsigned_long_int_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|unsigned_longlong_int
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|unsigned_longlong_int_AST
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// for error handling
name|AST
name|tmp150_AST
init|=
literal|null
decl_stmt|;
name|tmp150_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp150_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_unsigned
argument_list|)
expr_stmt|;
name|AST
name|tmp151_AST
init|=
literal|null
decl_stmt|;
name|tmp151_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp151_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_long
argument_list|)
expr_stmt|;
name|AST
name|tmp152_AST
init|=
literal|null
decl_stmt|;
name|tmp152_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp152_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_long
argument_list|)
expr_stmt|;
name|unsigned_longlong_int_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|reportError
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|consume
argument_list|()
expr_stmt|;
name|consumeUntil
argument_list|(
name|_tokenSet_35
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|ex
throw|;
block|}
block|}
name|returnAST
operator|=
name|unsigned_longlong_int_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|member_list
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|member_list_AST
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// for error handling
block|{
name|int
name|_cnt150
init|=
literal|0
decl_stmt|;
name|_loop150
label|:
do|do
block|{
if|if
condition|(
operator|(
name|_tokenSet_13
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|)
condition|)
block|{
name|member
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|_cnt150
operator|>=
literal|1
condition|)
block|{
break|break
name|_loop150
break|;
block|}
else|else
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|_cnt150
operator|++
expr_stmt|;
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
name|member_list_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|reportError
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|consume
argument_list|()
expr_stmt|;
name|consumeUntil
argument_list|(
name|_tokenSet_15
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|ex
throw|;
block|}
block|}
name|returnAST
operator|=
name|member_list_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|member
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|member_AST
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// for error handling
name|type_spec
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|declarators
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|SEMI
argument_list|)
expr_stmt|;
name|member_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|reportError
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|consume
argument_list|()
expr_stmt|;
name|consumeUntil
argument_list|(
name|_tokenSet_51
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|ex
throw|;
block|}
block|}
name|returnAST
operator|=
name|member_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|switch_type_spec
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|switch_type_spec_AST
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// for error handling
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LITERAL_long
case|:
case|case
name|LITERAL_short
case|:
case|case
name|LITERAL_unsigned
case|:
block|{
name|integer_type
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|switch_type_spec_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_char
case|:
block|{
name|char_type
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|switch_type_spec_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_boolean
case|:
block|{
name|boolean_type
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|switch_type_spec_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_enum
case|:
block|{
name|enum_type
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|switch_type_spec_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|SCOPEOP
case|:
case|case
name|IDENT
case|:
block|{
name|scoped_name
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|switch_type_spec_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|reportError
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|consume
argument_list|()
expr_stmt|;
name|consumeUntil
argument_list|(
name|_tokenSet_27
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|ex
throw|;
block|}
block|}
name|returnAST
operator|=
name|switch_type_spec_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|switch_body
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|switch_body_AST
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// for error handling
name|case_stmt_list
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|switch_body_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|reportError
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|consume
argument_list|()
expr_stmt|;
name|consumeUntil
argument_list|(
name|_tokenSet_15
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|ex
throw|;
block|}
block|}
name|returnAST
operator|=
name|switch_body_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|case_stmt_list
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|case_stmt_list_AST
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// for error handling
block|{
name|int
name|_cnt157
init|=
literal|0
decl_stmt|;
name|_loop157
label|:
do|do
block|{
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|LITERAL_case
operator|||
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|LITERAL_default
operator|)
condition|)
block|{
name|case_stmt
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|_cnt157
operator|>=
literal|1
condition|)
block|{
break|break
name|_loop157
break|;
block|}
else|else
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|_cnt157
operator|++
expr_stmt|;
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
name|case_stmt_list_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|reportError
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|consume
argument_list|()
expr_stmt|;
name|consumeUntil
argument_list|(
name|_tokenSet_15
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|ex
throw|;
block|}
block|}
name|returnAST
operator|=
name|case_stmt_list_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|case_stmt
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|case_stmt_AST
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// for error handling
block|{
name|int
name|_cnt160
init|=
literal|0
decl_stmt|;
name|_loop160
label|:
do|do
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LITERAL_case
case|:
block|{
name|AST
name|tmp154_AST
init|=
literal|null
decl_stmt|;
name|tmp154_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp154_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_case
argument_list|)
expr_stmt|;
name|const_exp
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|COLON
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_default
case|:
block|{
name|AST
name|tmp156_AST
init|=
literal|null
decl_stmt|;
name|tmp156_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp156_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_default
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|COLON
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
block|{
if|if
condition|(
name|_cnt160
operator|>=
literal|1
condition|)
block|{
break|break
name|_loop160
break|;
block|}
else|else
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|_cnt160
operator|++
expr_stmt|;
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
name|element_spec
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|SEMI
argument_list|)
expr_stmt|;
name|case_stmt_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|reportError
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|consume
argument_list|()
expr_stmt|;
name|consumeUntil
argument_list|(
name|_tokenSet_52
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|ex
throw|;
block|}
block|}
name|returnAST
operator|=
name|case_stmt_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|element_spec
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|element_spec_AST
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// for error handling
name|type_spec
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|declarator
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|element_spec_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|reportError
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|consume
argument_list|()
expr_stmt|;
name|consumeUntil
argument_list|(
name|_tokenSet_10
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|ex
throw|;
block|}
block|}
name|returnAST
operator|=
name|element_spec_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|enumerator_list
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|enumerator_list_AST
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// for error handling
name|enumerator
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|{
name|_loop165
label|:
do|do
block|{
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|COMMA
operator|)
condition|)
block|{
name|match
argument_list|(
name|COMMA
argument_list|)
expr_stmt|;
name|enumerator
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|}
else|else
block|{
break|break
name|_loop165
break|;
block|}
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
name|enumerator_list_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|reportError
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|consume
argument_list|()
expr_stmt|;
name|consumeUntil
argument_list|(
name|_tokenSet_15
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|ex
throw|;
block|}
block|}
name|returnAST
operator|=
name|enumerator_list_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|enumerator
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|enumerator_AST
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// for error handling
name|identifier
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|enumerator_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|reportError
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|consume
argument_list|()
expr_stmt|;
name|consumeUntil
argument_list|(
name|_tokenSet_53
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|ex
throw|;
block|}
block|}
name|returnAST
operator|=
name|enumerator_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|opt_pos_int
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|opt_pos_int_AST
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// for error handling
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|COMMA
case|:
block|{
name|match
argument_list|(
name|COMMA
argument_list|)
expr_stmt|;
name|positive_int_const
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|GT
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|opt_pos_int_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|reportError
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|consume
argument_list|()
expr_stmt|;
name|consumeUntil
argument_list|(
name|_tokenSet_54
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|ex
throw|;
block|}
block|}
name|returnAST
operator|=
name|opt_pos_int_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|fixed_array_size
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|fixed_array_size_AST
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// for error handling
name|match
argument_list|(
name|LBRACK
argument_list|)
expr_stmt|;
name|positive_int_const
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|RBRACK
argument_list|)
expr_stmt|;
name|fixed_array_size_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|reportError
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|consume
argument_list|()
expr_stmt|;
name|consumeUntil
argument_list|(
name|_tokenSet_55
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|ex
throw|;
block|}
block|}
name|returnAST
operator|=
name|fixed_array_size_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|readonly_attr_spec
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|readonly_attr_spec_AST
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// for error handling
name|AST
name|tmp163_AST
init|=
literal|null
decl_stmt|;
name|tmp163_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp163_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_readonly
argument_list|)
expr_stmt|;
name|AST
name|tmp164_AST
init|=
literal|null
decl_stmt|;
name|tmp164_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp164_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_attribute
argument_list|)
expr_stmt|;
name|param_type_spec
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|readonly_attr_declarator
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|readonly_attr_spec_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|reportError
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|consume
argument_list|()
expr_stmt|;
name|consumeUntil
argument_list|(
name|_tokenSet_10
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|ex
throw|;
block|}
block|}
name|returnAST
operator|=
name|readonly_attr_spec_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|attr_spec
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|attr_spec_AST
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// for error handling
name|AST
name|tmp165_AST
init|=
literal|null
decl_stmt|;
name|tmp165_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp165_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_attribute
argument_list|)
expr_stmt|;
name|param_type_spec
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|attr_declarator
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|attr_spec_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|reportError
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|consume
argument_list|()
expr_stmt|;
name|consumeUntil
argument_list|(
name|_tokenSet_10
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|ex
throw|;
block|}
block|}
name|returnAST
operator|=
name|attr_spec_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|opt_member_list
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|opt_member_list_AST
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// for error handling
block|{
name|_loop182
label|:
do|do
block|{
if|if
condition|(
operator|(
name|_tokenSet_13
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|)
condition|)
block|{
name|member
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|}
else|else
block|{
break|break
name|_loop182
break|;
block|}
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
name|opt_member_list_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|reportError
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|consume
argument_list|()
expr_stmt|;
name|consumeUntil
argument_list|(
name|_tokenSet_15
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|ex
throw|;
block|}
block|}
name|returnAST
operator|=
name|opt_member_list_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|op_attribute
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|op_attribute_AST
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// for error handling
name|AST
name|tmp166_AST
init|=
literal|null
decl_stmt|;
name|tmp166_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp166_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_oneway
argument_list|)
expr_stmt|;
name|op_attribute_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|reportError
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|consume
argument_list|()
expr_stmt|;
name|consumeUntil
argument_list|(
name|_tokenSet_56
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|ex
throw|;
block|}
block|}
name|returnAST
operator|=
name|op_attribute_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|op_type_spec
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|op_type_spec_AST
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// for error handling
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|SCOPEOP
case|:
case|case
name|IDENT
case|:
case|case
name|LITERAL_float
case|:
case|case
name|LITERAL_double
case|:
case|case
name|LITERAL_long
case|:
case|case
name|LITERAL_short
case|:
case|case
name|LITERAL_unsigned
case|:
case|case
name|LITERAL_char
case|:
case|case
name|LITERAL_wchar
case|:
case|case
name|LITERAL_boolean
case|:
case|case
name|LITERAL_octet
case|:
case|case
name|LITERAL_any
case|:
case|case
name|LITERAL_Object
case|:
case|case
name|LITERAL_string
case|:
case|case
name|LITERAL_wstring
case|:
case|case
name|LITERAL_ValueBase
case|:
block|{
name|param_type_spec
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|op_type_spec_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_void
case|:
block|{
name|AST
name|tmp167_AST
init|=
literal|null
decl_stmt|;
name|tmp167_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp167_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_void
argument_list|)
expr_stmt|;
name|op_type_spec_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|reportError
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|consume
argument_list|()
expr_stmt|;
name|consumeUntil
argument_list|(
name|_tokenSet_31
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|ex
throw|;
block|}
block|}
name|returnAST
operator|=
name|op_type_spec_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|parameter_dcls
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|parameter_dcls_AST
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// for error handling
name|match
argument_list|(
name|LPAREN
argument_list|)
expr_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LITERAL_in
case|:
case|case
name|LITERAL_out
case|:
case|case
name|LITERAL_inout
case|:
block|{
name|param_dcl_list
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|RPAREN
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|match
argument_list|(
name|RPAREN
argument_list|)
expr_stmt|;
name|parameter_dcls_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|reportError
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|consume
argument_list|()
expr_stmt|;
name|consumeUntil
argument_list|(
name|_tokenSet_57
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|ex
throw|;
block|}
block|}
name|returnAST
operator|=
name|parameter_dcls_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|context_expr
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|context_expr_AST
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// for error handling
name|AST
name|tmp170_AST
init|=
literal|null
decl_stmt|;
name|tmp170_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp170_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_context
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LPAREN
argument_list|)
expr_stmt|;
name|string_literal_list
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|RPAREN
argument_list|)
expr_stmt|;
name|context_expr_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|reportError
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|consume
argument_list|()
expr_stmt|;
name|consumeUntil
argument_list|(
name|_tokenSet_10
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|ex
throw|;
block|}
block|}
name|returnAST
operator|=
name|context_expr_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|param_dcl_list
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|param_dcl_list_AST
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// for error handling
name|param_dcl
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|{
name|_loop193
label|:
do|do
block|{
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|COMMA
operator|)
condition|)
block|{
name|match
argument_list|(
name|COMMA
argument_list|)
expr_stmt|;
name|param_dcl
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|}
else|else
block|{
break|break
name|_loop193
break|;
block|}
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
name|param_dcl_list_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|reportError
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|consume
argument_list|()
expr_stmt|;
name|consumeUntil
argument_list|(
name|_tokenSet_27
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|ex
throw|;
block|}
block|}
name|returnAST
operator|=
name|param_dcl_list_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|param_dcl
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|param_dcl_AST
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// for error handling
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LITERAL_in
case|:
block|{
name|AST
name|tmp174_AST
init|=
literal|null
decl_stmt|;
name|tmp174_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp174_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_in
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_out
case|:
block|{
name|AST
name|tmp175_AST
init|=
literal|null
decl_stmt|;
name|tmp175_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp175_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_out
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_inout
case|:
block|{
name|AST
name|tmp176_AST
init|=
literal|null
decl_stmt|;
name|tmp176_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp176_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_inout
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|param_type_spec
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|simple_declarator
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|param_dcl_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|reportError
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|consume
argument_list|()
expr_stmt|;
name|consumeUntil
argument_list|(
name|_tokenSet_29
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|ex
throw|;
block|}
block|}
name|returnAST
operator|=
name|param_dcl_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|string_literal_list
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|string_literal_list_AST
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// for error handling
name|string_literal
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|{
name|_loop200
label|:
do|do
block|{
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|COMMA
operator|)
condition|)
block|{
name|match
argument_list|(
name|COMMA
argument_list|)
expr_stmt|;
name|string_literal
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|}
else|else
block|{
break|break
name|_loop200
break|;
block|}
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
name|string_literal_list_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|reportError
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|consume
argument_list|()
expr_stmt|;
name|consumeUntil
argument_list|(
name|_tokenSet_27
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|ex
throw|;
block|}
block|}
name|returnAST
operator|=
name|string_literal_list_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|imported_scope
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|imported_scope_AST
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// for error handling
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|SCOPEOP
case|:
case|case
name|IDENT
case|:
block|{
name|scoped_name
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|imported_scope_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|STRING_LITERAL
case|:
block|{
name|string_literal
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|imported_scope_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|reportError
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|consume
argument_list|()
expr_stmt|;
name|consumeUntil
argument_list|(
name|_tokenSet_10
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|ex
throw|;
block|}
block|}
name|returnAST
operator|=
name|imported_scope_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|readonly_attr_declarator
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|readonly_attr_declarator_AST
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// for error handling
name|simple_declarator
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LITERAL_raises
case|:
block|{
name|raises_expr
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|SEMI
case|:
case|case
name|COMMA
case|:
block|{
block|{
name|_loop214
label|:
do|do
block|{
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|COMMA
operator|)
condition|)
block|{
name|match
argument_list|(
name|COMMA
argument_list|)
expr_stmt|;
name|simple_declarator
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|}
else|else
block|{
break|break
name|_loop214
break|;
block|}
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|readonly_attr_declarator_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|reportError
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|consume
argument_list|()
expr_stmt|;
name|consumeUntil
argument_list|(
name|_tokenSet_10
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|ex
throw|;
block|}
block|}
name|returnAST
operator|=
name|readonly_attr_declarator_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|attr_declarator
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|attr_declarator_AST
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// for error handling
name|simple_declarator
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|{
name|boolean
name|synPredMatched219
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|SEMI
operator|||
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|LITERAL_getraises
operator|||
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|LITERAL_setraises
operator|)
operator|&&
operator|(
name|_tokenSet_58
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|)
operator|&&
operator|(
name|_tokenSet_59
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|3
argument_list|)
argument_list|)
operator|)
operator|&&
operator|(
name|_tokenSet_60
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|4
argument_list|)
argument_list|)
operator|)
operator|)
condition|)
block|{
name|int
name|_m219
init|=
name|mark
argument_list|()
decl_stmt|;
name|synPredMatched219
operator|=
literal|true
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|++
expr_stmt|;
try|try
block|{
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LITERAL_getraises
case|:
block|{
name|match
argument_list|(
name|LITERAL_getraises
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_setraises
case|:
block|{
name|match
argument_list|(
name|LITERAL_setraises
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|pe
parameter_list|)
block|{
name|synPredMatched219
operator|=
literal|false
expr_stmt|;
block|}
name|rewind
argument_list|(
name|_m219
argument_list|)
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|--
expr_stmt|;
block|}
if|if
condition|(
name|synPredMatched219
condition|)
block|{
name|attr_raises_expr
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|SEMI
operator|||
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|COMMA
operator|)
operator|&&
operator|(
name|_tokenSet_61
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|)
operator|&&
operator|(
name|_tokenSet_62
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|3
argument_list|)
argument_list|)
operator|)
operator|&&
operator|(
name|_tokenSet_63
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|4
argument_list|)
argument_list|)
operator|)
condition|)
block|{
block|{
name|_loop221
label|:
do|do
block|{
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|COMMA
operator|)
condition|)
block|{
name|match
argument_list|(
name|COMMA
argument_list|)
expr_stmt|;
name|simple_declarator
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|}
else|else
block|{
break|break
name|_loop221
break|;
block|}
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|attr_declarator_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|reportError
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|consume
argument_list|()
expr_stmt|;
name|consumeUntil
argument_list|(
name|_tokenSet_10
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|ex
throw|;
block|}
block|}
name|returnAST
operator|=
name|attr_declarator_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|attr_raises_expr
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|attr_raises_expr_AST
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// for error handling
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LITERAL_getraises
case|:
block|{
name|get_excep_expr
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|SEMI
case|:
case|case
name|LITERAL_setraises
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LITERAL_setraises
case|:
block|{
name|set_excep_expr
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|SEMI
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|attr_raises_expr_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|reportError
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|consume
argument_list|()
expr_stmt|;
name|consumeUntil
argument_list|(
name|_tokenSet_10
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|ex
throw|;
block|}
block|}
name|returnAST
operator|=
name|attr_raises_expr_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|get_excep_expr
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|get_excep_expr_AST
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// for error handling
name|AST
name|tmp180_AST
init|=
literal|null
decl_stmt|;
name|tmp180_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp180_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_getraises
argument_list|)
expr_stmt|;
name|exception_list
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|get_excep_expr_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|reportError
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|consume
argument_list|()
expr_stmt|;
name|consumeUntil
argument_list|(
name|_tokenSet_64
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|ex
throw|;
block|}
block|}
name|returnAST
operator|=
name|get_excep_expr_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|set_excep_expr
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|set_excep_expr_AST
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// for error handling
name|AST
name|tmp181_AST
init|=
literal|null
decl_stmt|;
name|tmp181_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp181_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_setraises
argument_list|)
expr_stmt|;
name|exception_list
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|set_excep_expr_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|reportError
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|consume
argument_list|()
expr_stmt|;
name|consumeUntil
argument_list|(
name|_tokenSet_10
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|ex
throw|;
block|}
block|}
name|returnAST
operator|=
name|set_excep_expr_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|exception_list
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|exception_list_AST
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// for error handling
name|match
argument_list|(
name|LPAREN
argument_list|)
expr_stmt|;
name|scoped_name
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|{
name|_loop229
label|:
do|do
block|{
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|COMMA
operator|)
condition|)
block|{
name|match
argument_list|(
name|COMMA
argument_list|)
expr_stmt|;
name|scoped_name
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|}
else|else
block|{
break|break
name|_loop229
break|;
block|}
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
name|match
argument_list|(
name|RPAREN
argument_list|)
expr_stmt|;
name|exception_list_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|reportError
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|consume
argument_list|()
expr_stmt|;
name|consumeUntil
argument_list|(
name|_tokenSet_64
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|ex
throw|;
block|}
block|}
name|returnAST
operator|=
name|exception_list_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|component_dcl
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|component_dcl_AST
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// for error handling
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|COLON
case|:
block|{
name|component_inheritance_spec
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|LCURLY
case|:
case|case
name|LITERAL_supports
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LITERAL_supports
case|:
block|{
name|supported_interface_spec
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|LCURLY
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|match
argument_list|(
name|LCURLY
argument_list|)
expr_stmt|;
name|component_body
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|RCURLY
argument_list|)
expr_stmt|;
name|component_dcl_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|reportError
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|consume
argument_list|()
expr_stmt|;
name|consumeUntil
argument_list|(
name|_tokenSet_10
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|ex
throw|;
block|}
block|}
name|returnAST
operator|=
name|component_dcl_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|component_inheritance_spec
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|component_inheritance_spec_AST
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// for error handling
name|AST
name|tmp187_AST
init|=
literal|null
decl_stmt|;
name|tmp187_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp187_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|COLON
argument_list|)
expr_stmt|;
name|scoped_name
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|component_inheritance_spec_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|reportError
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|consume
argument_list|()
expr_stmt|;
name|consumeUntil
argument_list|(
name|_tokenSet_25
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|ex
throw|;
block|}
block|}
name|returnAST
operator|=
name|component_inheritance_spec_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|supported_interface_spec
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|supported_interface_spec_AST
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// for error handling
name|AST
name|tmp188_AST
init|=
literal|null
decl_stmt|;
name|tmp188_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp188_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_supports
argument_list|)
expr_stmt|;
name|scoped_name
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|{
name|_loop237
label|:
do|do
block|{
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|COMMA
operator|)
condition|)
block|{
name|match
argument_list|(
name|COMMA
argument_list|)
expr_stmt|;
name|scoped_name
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|}
else|else
block|{
break|break
name|_loop237
break|;
block|}
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
name|supported_interface_spec_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|reportError
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|consume
argument_list|()
expr_stmt|;
name|consumeUntil
argument_list|(
name|_tokenSet_65
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|ex
throw|;
block|}
block|}
name|returnAST
operator|=
name|supported_interface_spec_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|component_body
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|component_body_AST
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// for error handling
block|{
name|_loop241
label|:
do|do
block|{
if|if
condition|(
operator|(
name|_tokenSet_66
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|)
condition|)
block|{
name|component_export
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|}
else|else
block|{
break|break
name|_loop241
break|;
block|}
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
name|component_body_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|reportError
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|consume
argument_list|()
expr_stmt|;
name|consumeUntil
argument_list|(
name|_tokenSet_15
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|ex
throw|;
block|}
block|}
name|returnAST
operator|=
name|component_body_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|component_export
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|component_export_AST
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// for error handling
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LITERAL_provides
case|:
block|{
name|provides_dcl
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|SEMI
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_uses
case|:
block|{
name|uses_dcl
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|SEMI
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_emits
case|:
block|{
name|emits_dcl
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|SEMI
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_publishes
case|:
block|{
name|publishes_dcl
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|SEMI
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_consumes
case|:
block|{
name|consumes_dcl
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|SEMI
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_readonly
case|:
case|case
name|LITERAL_attribute
case|:
block|{
name|attr_dcl
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|SEMI
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|component_export_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|reportError
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|consume
argument_list|()
expr_stmt|;
name|consumeUntil
argument_list|(
name|_tokenSet_67
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|ex
throw|;
block|}
block|}
name|returnAST
operator|=
name|component_export_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|provides_dcl
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|provides_dcl_AST
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// for error handling
name|AST
name|tmp196_AST
init|=
literal|null
decl_stmt|;
name|tmp196_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp196_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_provides
argument_list|)
expr_stmt|;
name|interface_type
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|identifier
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|provides_dcl_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|reportError
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|consume
argument_list|()
expr_stmt|;
name|consumeUntil
argument_list|(
name|_tokenSet_10
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|ex
throw|;
block|}
block|}
name|returnAST
operator|=
name|provides_dcl_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|uses_dcl
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|uses_dcl_AST
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// for error handling
name|AST
name|tmp197_AST
init|=
literal|null
decl_stmt|;
name|tmp197_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp197_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_uses
argument_list|)
expr_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LITERAL_multiple
case|:
block|{
name|AST
name|tmp198_AST
init|=
literal|null
decl_stmt|;
name|tmp198_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp198_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_multiple
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|SCOPEOP
case|:
case|case
name|IDENT
case|:
case|case
name|LITERAL_Object
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|interface_type
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|identifier
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|uses_dcl_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|reportError
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|consume
argument_list|()
expr_stmt|;
name|consumeUntil
argument_list|(
name|_tokenSet_10
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|ex
throw|;
block|}
block|}
name|returnAST
operator|=
name|uses_dcl_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|emits_dcl
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|emits_dcl_AST
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// for error handling
name|AST
name|tmp199_AST
init|=
literal|null
decl_stmt|;
name|tmp199_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp199_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_emits
argument_list|)
expr_stmt|;
name|scoped_name
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|identifier
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|emits_dcl_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|reportError
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|consume
argument_list|()
expr_stmt|;
name|consumeUntil
argument_list|(
name|_tokenSet_10
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|ex
throw|;
block|}
block|}
name|returnAST
operator|=
name|emits_dcl_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|publishes_dcl
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|publishes_dcl_AST
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// for error handling
name|AST
name|tmp200_AST
init|=
literal|null
decl_stmt|;
name|tmp200_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp200_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_publishes
argument_list|)
expr_stmt|;
name|scoped_name
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|identifier
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|publishes_dcl_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|reportError
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|consume
argument_list|()
expr_stmt|;
name|consumeUntil
argument_list|(
name|_tokenSet_10
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|ex
throw|;
block|}
block|}
name|returnAST
operator|=
name|publishes_dcl_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|consumes_dcl
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|consumes_dcl_AST
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// for error handling
name|AST
name|tmp201_AST
init|=
literal|null
decl_stmt|;
name|tmp201_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp201_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_consumes
argument_list|)
expr_stmt|;
name|scoped_name
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|identifier
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|consumes_dcl_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|reportError
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|consume
argument_list|()
expr_stmt|;
name|consumeUntil
argument_list|(
name|_tokenSet_10
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|ex
throw|;
block|}
block|}
name|returnAST
operator|=
name|consumes_dcl_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|interface_type
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|interface_type_AST
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// for error handling
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|SCOPEOP
case|:
case|case
name|IDENT
case|:
block|{
name|scoped_name
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_Object
case|:
block|{
name|AST
name|tmp202_AST
init|=
literal|null
decl_stmt|;
name|tmp202_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp202_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_Object
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|interface_type_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|reportError
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|consume
argument_list|()
expr_stmt|;
name|consumeUntil
argument_list|(
name|_tokenSet_31
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|ex
throw|;
block|}
block|}
name|returnAST
operator|=
name|interface_type_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|home_header
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|home_header_AST
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// for error handling
name|AST
name|tmp203_AST
init|=
literal|null
decl_stmt|;
name|tmp203_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp203_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_home
argument_list|)
expr_stmt|;
name|identifier
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|COLON
case|:
block|{
name|home_inheritance_spec
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_supports
case|:
case|case
name|LITERAL_manages
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LITERAL_supports
case|:
block|{
name|supported_interface_spec
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_manages
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|match
argument_list|(
name|LITERAL_manages
argument_list|)
expr_stmt|;
name|scoped_name
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LITERAL_primarykey
case|:
block|{
name|primary_key_spec
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|LCURLY
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|home_header_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|reportError
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|consume
argument_list|()
expr_stmt|;
name|consumeUntil
argument_list|(
name|_tokenSet_16
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|ex
throw|;
block|}
block|}
name|returnAST
operator|=
name|home_header_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|home_body
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|home_body_AST
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// for error handling
name|match
argument_list|(
name|LCURLY
argument_list|)
expr_stmt|;
block|{
name|_loop261
label|:
do|do
block|{
if|if
condition|(
operator|(
name|_tokenSet_68
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|)
condition|)
block|{
name|home_export
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|}
else|else
block|{
break|break
name|_loop261
break|;
block|}
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
name|match
argument_list|(
name|RCURLY
argument_list|)
expr_stmt|;
name|home_body_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|reportError
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|consume
argument_list|()
expr_stmt|;
name|consumeUntil
argument_list|(
name|_tokenSet_10
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|ex
throw|;
block|}
block|}
name|returnAST
operator|=
name|home_body_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|home_inheritance_spec
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|home_inheritance_spec_AST
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// for error handling
name|AST
name|tmp207_AST
init|=
literal|null
decl_stmt|;
name|tmp207_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp207_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|COLON
argument_list|)
expr_stmt|;
name|scoped_name
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|home_inheritance_spec_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|reportError
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|consume
argument_list|()
expr_stmt|;
name|consumeUntil
argument_list|(
name|_tokenSet_69
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|ex
throw|;
block|}
block|}
name|returnAST
operator|=
name|home_inheritance_spec_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|primary_key_spec
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|primary_key_spec_AST
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// for error handling
name|AST
name|tmp208_AST
init|=
literal|null
decl_stmt|;
name|tmp208_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp208_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_primarykey
argument_list|)
expr_stmt|;
name|scoped_name
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|primary_key_spec_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|reportError
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|consume
argument_list|()
expr_stmt|;
name|consumeUntil
argument_list|(
name|_tokenSet_16
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|ex
throw|;
block|}
block|}
name|returnAST
operator|=
name|primary_key_spec_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|home_export
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|home_export_AST
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// for error handling
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|SCOPEOP
case|:
case|case
name|IDENT
case|:
case|case
name|LITERAL_const
case|:
case|case
name|LITERAL_typedef
case|:
case|case
name|LITERAL_native
case|:
case|case
name|LITERAL_float
case|:
case|case
name|LITERAL_double
case|:
case|case
name|LITERAL_long
case|:
case|case
name|LITERAL_short
case|:
case|case
name|LITERAL_unsigned
case|:
case|case
name|LITERAL_char
case|:
case|case
name|LITERAL_wchar
case|:
case|case
name|LITERAL_boolean
case|:
case|case
name|LITERAL_octet
case|:
case|case
name|LITERAL_any
case|:
case|case
name|LITERAL_Object
case|:
case|case
name|LITERAL_struct
case|:
case|case
name|LITERAL_union
case|:
case|case
name|LITERAL_enum
case|:
case|case
name|LITERAL_string
case|:
case|case
name|LITERAL_wstring
case|:
case|case
name|LITERAL_exception
case|:
case|case
name|LITERAL_oneway
case|:
case|case
name|LITERAL_void
case|:
case|case
name|LITERAL_ValueBase
case|:
case|case
name|LITERAL_typeid
case|:
case|case
name|LITERAL_typeprefix
case|:
case|case
name|LITERAL_readonly
case|:
case|case
name|LITERAL_attribute
case|:
block|{
name|export
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_factory
case|:
block|{
name|factory_dcl
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|SEMI
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_finder
case|:
block|{
name|finder_dcl
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|SEMI
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|home_export_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|reportError
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|consume
argument_list|()
expr_stmt|;
name|consumeUntil
argument_list|(
name|_tokenSet_70
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|ex
throw|;
block|}
block|}
name|returnAST
operator|=
name|home_export_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|factory_dcl
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|factory_dcl_AST
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// for error handling
name|AST
name|tmp211_AST
init|=
literal|null
decl_stmt|;
name|tmp211_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp211_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_factory
argument_list|)
expr_stmt|;
name|identifier
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LPAREN
argument_list|)
expr_stmt|;
name|init_param_decls
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|RPAREN
argument_list|)
expr_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LITERAL_raises
case|:
block|{
name|raises_expr
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|SEMI
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|factory_dcl_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|reportError
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|consume
argument_list|()
expr_stmt|;
name|consumeUntil
argument_list|(
name|_tokenSet_10
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|ex
throw|;
block|}
block|}
name|returnAST
operator|=
name|factory_dcl_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|finder_dcl
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|finder_dcl_AST
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// for error handling
name|AST
name|tmp214_AST
init|=
literal|null
decl_stmt|;
name|tmp214_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp214_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_finder
argument_list|)
expr_stmt|;
name|identifier
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LPAREN
argument_list|)
expr_stmt|;
name|init_param_decls
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|RPAREN
argument_list|)
expr_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LITERAL_raises
case|:
block|{
name|raises_expr
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|SEMI
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|finder_dcl_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|reportError
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|consume
argument_list|()
expr_stmt|;
name|consumeUntil
argument_list|(
name|_tokenSet_10
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|ex
throw|;
block|}
block|}
name|returnAST
operator|=
name|finder_dcl_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|event_abs
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|event_abs_AST
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// for error handling
name|AST
name|tmp217_AST
init|=
literal|null
decl_stmt|;
name|tmp217_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp217_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_abstract
argument_list|)
expr_stmt|;
name|event_header
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LCURLY
case|:
case|case
name|COLON
case|:
case|case
name|LITERAL_supports
case|:
block|{
name|event_abs_dcl
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|SEMI
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|event_abs_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|reportError
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|consume
argument_list|()
expr_stmt|;
name|consumeUntil
argument_list|(
name|_tokenSet_10
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|ex
throw|;
block|}
block|}
name|returnAST
operator|=
name|event_abs_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|event_custom
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|event_custom_AST
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// for error handling
name|AST
name|tmp218_AST
init|=
literal|null
decl_stmt|;
name|tmp218_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp218_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_custom
argument_list|)
expr_stmt|;
name|event_header
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|event_elem_dcl
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|event_custom_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|reportError
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|consume
argument_list|()
expr_stmt|;
name|consumeUntil
argument_list|(
name|_tokenSet_10
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|ex
throw|;
block|}
block|}
name|returnAST
operator|=
name|event_custom_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|event_dcl
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|event_dcl_AST
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// for error handling
name|event_header
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LCURLY
case|:
case|case
name|COLON
case|:
case|case
name|LITERAL_supports
case|:
block|{
name|event_elem_dcl
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|SEMI
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|event_dcl_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|reportError
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|consume
argument_list|()
expr_stmt|;
name|consumeUntil
argument_list|(
name|_tokenSet_10
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|ex
throw|;
block|}
block|}
name|returnAST
operator|=
name|event_dcl_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|event_header
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|event_header_AST
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// for error handling
name|AST
name|tmp219_AST
init|=
literal|null
decl_stmt|;
name|tmp219_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp219_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_eventtype
argument_list|)
expr_stmt|;
name|identifier
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|event_header_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|reportError
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|consume
argument_list|()
expr_stmt|;
name|consumeUntil
argument_list|(
name|_tokenSet_71
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|ex
throw|;
block|}
block|}
name|returnAST
operator|=
name|event_header_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|event_abs_dcl
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|event_abs_dcl_AST
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// for error handling
name|value_inheritance_spec
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LCURLY
argument_list|)
expr_stmt|;
block|{
name|_loop275
label|:
do|do
block|{
if|if
condition|(
operator|(
name|_tokenSet_17
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|)
condition|)
block|{
name|export
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|}
else|else
block|{
break|break
name|_loop275
break|;
block|}
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
name|match
argument_list|(
name|RCURLY
argument_list|)
expr_stmt|;
name|event_abs_dcl_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|reportError
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|consume
argument_list|()
expr_stmt|;
name|consumeUntil
argument_list|(
name|_tokenSet_10
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|ex
throw|;
block|}
block|}
name|returnAST
operator|=
name|event_abs_dcl_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|event_elem_dcl
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|event_elem_dcl_AST
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// for error handling
name|value_inheritance_spec
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LCURLY
argument_list|)
expr_stmt|;
block|{
name|_loop281
label|:
do|do
block|{
if|if
condition|(
operator|(
name|_tokenSet_17
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|)
condition|)
block|{
name|export
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|}
else|else
block|{
break|break
name|_loop281
break|;
block|}
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
name|match
argument_list|(
name|RCURLY
argument_list|)
expr_stmt|;
name|event_elem_dcl_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|reportError
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|consume
argument_list|()
expr_stmt|;
name|consumeUntil
argument_list|(
name|_tokenSet_10
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|ex
throw|;
block|}
block|}
name|returnAST
operator|=
name|event_elem_dcl_AST
expr_stmt|;
block|}
specifier|public
specifier|static
specifier|final
name|String
index|[]
name|_tokenNames
init|=
block|{
literal|"<0>"
block|,
literal|"EOF"
block|,
literal|"<2>"
block|,
literal|"NULL_TREE_LOOKAHEAD"
block|,
literal|";"
block|,
literal|"\"abstract\""
block|,
literal|"\"local\""
block|,
literal|"\"interface\""
block|,
literal|"\"custom\""
block|,
literal|"\"valuetype\""
block|,
literal|"\"eventtype\""
block|,
literal|"\"module\""
block|,
literal|"{"
block|,
literal|"}"
block|,
literal|":"
block|,
literal|","
block|,
literal|"::"
block|,
literal|"an identifer"
block|,
literal|"\"truncatable\""
block|,
literal|"\"supports\""
block|,
literal|"\"public\""
block|,
literal|"\"private\""
block|,
literal|"\"factory\""
block|,
literal|"("
block|,
literal|")"
block|,
literal|"\"in\""
block|,
literal|"\"const\""
block|,
literal|"="
block|,
literal|"|"
block|,
literal|"^"
block|,
literal|"&"
block|,
literal|"<<"
block|,
literal|">>"
block|,
literal|"+"
block|,
literal|"-"
block|,
literal|"*"
block|,
literal|"/"
block|,
literal|"%"
block|,
literal|"~"
block|,
literal|"\"TRUE\""
block|,
literal|"\"FALSE\""
block|,
literal|"\"typedef\""
block|,
literal|"\"native\""
block|,
literal|"\"float\""
block|,
literal|"\"double\""
block|,
literal|"\"long\""
block|,
literal|"\"short\""
block|,
literal|"\"unsigned\""
block|,
literal|"\"char\""
block|,
literal|"\"wchar\""
block|,
literal|"\"boolean\""
block|,
literal|"\"octet\""
block|,
literal|"\"any\""
block|,
literal|"\"Object\""
block|,
literal|"\"struct\""
block|,
literal|"\"union\""
block|,
literal|"\"switch\""
block|,
literal|"\"case\""
block|,
literal|"\"default\""
block|,
literal|"\"enum\""
block|,
literal|"\"sequence\""
block|,
literal|"<"
block|,
literal|">"
block|,
literal|"\"string\""
block|,
literal|"\"wstring\""
block|,
literal|"["
block|,
literal|"]"
block|,
literal|"\"exception\""
block|,
literal|"\"oneway\""
block|,
literal|"\"void\""
block|,
literal|"\"out\""
block|,
literal|"\"inout\""
block|,
literal|"\"raises\""
block|,
literal|"\"context\""
block|,
literal|"\"fixed\""
block|,
literal|"\"ValueBase\""
block|,
literal|"\"import\""
block|,
literal|"\"typeid\""
block|,
literal|"\"typeprefix\""
block|,
literal|"\"readonly\""
block|,
literal|"\"attribute\""
block|,
literal|"\"getraises\""
block|,
literal|"\"setraises\""
block|,
literal|"\"component\""
block|,
literal|"\"provides\""
block|,
literal|"\"uses\""
block|,
literal|"\"multiple\""
block|,
literal|"\"emits\""
block|,
literal|"\"publishes\""
block|,
literal|"\"consumes\""
block|,
literal|"\"home\""
block|,
literal|"\"manages\""
block|,
literal|"\"primarykey\""
block|,
literal|"\"finder\""
block|,
literal|"an integer value"
block|,
literal|"an octal value"
block|,
literal|"a hexadecimal value value"
block|,
literal|"a string literal"
block|,
literal|"a wide string literal"
block|,
literal|"a character literal"
block|,
literal|"a wide character literal"
block|,
literal|"FIXED"
block|,
literal|"a floating point value"
block|,
literal|"?"
block|,
literal|"."
block|,
literal|"!"
block|,
literal|"white space"
block|,
literal|"a preprocessor directive"
block|,
literal|"a comment"
block|,
literal|"a comment"
block|,
literal|"an escape sequence"
block|,
literal|"an escaped character value"
block|,
literal|"a digit"
block|,
literal|"a non-zero digit"
block|,
literal|"an octal digit"
block|,
literal|"a hexadecimal digit"
block|,
literal|"an escaped identifer"
block|}
decl_stmt|;
specifier|protected
name|void
name|buildTokenTypeASTClassMap
parameter_list|()
block|{
name|tokenTypeToASTClassMap
operator|=
literal|null
expr_stmt|;
block|}
empty_stmt|;
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|mk_tokenSet_0
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
block|{
literal|630510544968749024L
block|,
literal|67657736L
block|,
literal|0L
block|,
literal|0L
block|}
decl_stmt|;
return|return
name|data
return|;
block|}
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_0
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_0
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|mk_tokenSet_1
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
block|{
literal|2L
block|,
literal|0L
block|}
decl_stmt|;
return|return
name|data
return|;
block|}
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_1
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_1
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|mk_tokenSet_2
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
block|{
literal|630510544968749024L
block|,
literal|67661832L
block|,
literal|0L
block|,
literal|0L
block|}
decl_stmt|;
return|return
name|data
return|;
block|}
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_2
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_2
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|mk_tokenSet_3
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
block|{
literal|151568L
block|,
literal|0L
block|}
decl_stmt|;
return|return
name|data
return|;
block|}
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_3
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_3
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|mk_tokenSet_4
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
block|{
operator|-
literal|8574855889469341710L
block|,
literal|67758137L
block|,
literal|0L
block|,
literal|0L
block|}
decl_stmt|;
return|return
name|data
return|;
block|}
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_4
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_4
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|mk_tokenSet_5
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
block|{
operator|-
literal|7421940981998858224L
block|,
literal|3073L
block|,
literal|0L
block|,
literal|0L
block|}
decl_stmt|;
return|return
name|data
return|;
block|}
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_5
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_5
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|mk_tokenSet_6
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
block|{
operator|-
literal|6269012880247521294L
block|,
literal|67758137L
block|,
literal|0L
block|,
literal|0L
block|}
decl_stmt|;
return|return
name|data
return|;
block|}
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_6
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_6
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|mk_tokenSet_7
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
block|{
literal|675856L
block|,
literal|0L
block|}
decl_stmt|;
return|return
name|data
return|;
block|}
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_7
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_7
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|mk_tokenSet_8
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
block|{
operator|-
literal|8574855889468555278L
block|,
literal|67758137L
block|,
literal|0L
block|,
literal|0L
block|}
decl_stmt|;
return|return
name|data
return|;
block|}
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_8
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_8
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|mk_tokenSet_9
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
block|{
literal|630510544968757218L
block|,
literal|67657736L
block|,
literal|0L
block|,
literal|0L
block|}
decl_stmt|;
return|return
name|data
return|;
block|}
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_9
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_9
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|mk_tokenSet_10
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
block|{
literal|16L
block|,
literal|0L
block|}
decl_stmt|;
return|return
name|data
return|;
block|}
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_10
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_10
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|mk_tokenSet_11
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
block|{
operator|-
literal|8574855889469345792L
block|,
literal|124985L
block|,
literal|0L
block|,
literal|0L
block|}
decl_stmt|;
return|return
name|data
return|;
block|}
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_11
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_11
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|mk_tokenSet_12
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
block|{
literal|630510544968757234L
block|,
literal|67657736L
block|,
literal|0L
block|,
literal|0L
block|}
decl_stmt|;
return|return
name|data
return|;
block|}
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_12
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_12
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|mk_tokenSet_13
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
block|{
operator|-
literal|7421940981999403008L
block|,
literal|3073L
block|,
literal|0L
block|,
literal|0L
block|}
decl_stmt|;
return|return
name|data
return|;
block|}
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_13
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_13
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|mk_tokenSet_14
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
block|{
operator|-
literal|2738197094764646384L
block|,
literal|8992984325L
block|,
literal|0L
block|,
literal|0L
block|}
decl_stmt|;
return|return
name|data
return|;
block|}
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_14
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_14
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|mk_tokenSet_15
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
block|{
literal|8192L
block|,
literal|0L
block|}
decl_stmt|;
return|return
name|data
return|;
block|}
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_15
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_15
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|mk_tokenSet_16
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
block|{
literal|4096L
block|,
literal|0L
block|}
decl_stmt|;
return|return
name|data
return|;
block|}
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_16
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_16
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|mk_tokenSet_17
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
block|{
operator|-
literal|8574855889469374464L
block|,
literal|124985L
block|,
literal|0L
block|,
literal|0L
block|}
decl_stmt|;
return|return
name|data
return|;
block|}
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_17
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_17
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|mk_tokenSet_18
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
block|{
operator|-
literal|8574855889462026240L
block|,
literal|536995897L
block|,
literal|0L
block|,
literal|0L
block|}
decl_stmt|;
return|return
name|data
return|;
block|}
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_18
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_18
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|mk_tokenSet_19
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
block|{
literal|16781312L
block|,
literal|0L
block|}
decl_stmt|;
return|return
name|data
return|;
block|}
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_19
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_19
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|mk_tokenSet_20
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
block|{
literal|36864L
block|,
literal|0L
block|}
decl_stmt|;
return|return
name|data
return|;
block|}
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_20
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_20
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|mk_tokenSet_21
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
block|{
literal|4611686293054345232L
block|,
literal|8992587780L
block|,
literal|0L
block|,
literal|0L
block|}
decl_stmt|;
return|return
name|data
return|;
block|}
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_21
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_21
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|mk_tokenSet_22
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
block|{
operator|-
literal|8574855889462034432L
block|,
literal|124985L
block|,
literal|0L
block|,
literal|0L
block|}
decl_stmt|;
return|return
name|data
return|;
block|}
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_22
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_22
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|mk_tokenSet_23
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
block|{
literal|131088L
block|,
literal|0L
block|}
decl_stmt|;
return|return
name|data
return|;
block|}
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_23
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_23
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|mk_tokenSet_24
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
block|{
operator|-
literal|8574855889462026240L
block|,
literal|124985L
block|,
literal|0L
block|,
literal|0L
block|}
decl_stmt|;
return|return
name|data
return|;
block|}
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_24
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_24
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|mk_tokenSet_25
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
block|{
literal|528384L
block|,
literal|0L
block|}
decl_stmt|;
return|return
name|data
return|;
block|}
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_25
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_25
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|mk_tokenSet_26
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
block|{
literal|561152L
block|,
literal|0L
block|}
decl_stmt|;
return|return
name|data
return|;
block|}
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_26
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_26
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|mk_tokenSet_27
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
block|{
literal|16777216L
block|,
literal|0L
block|}
decl_stmt|;
return|return
name|data
return|;
block|}
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_27
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_27
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|mk_tokenSet_28
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
block|{
literal|16L
block|,
literal|512L
block|,
literal|0L
block|,
literal|0L
block|}
decl_stmt|;
return|return
name|data
return|;
block|}
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_28
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_28
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|mk_tokenSet_29
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
block|{
literal|16809984L
block|,
literal|0L
block|}
decl_stmt|;
return|return
name|data
return|;
block|}
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_29
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_29
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|mk_tokenSet_30
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
block|{
operator|-
literal|9205366434438119424L
block|,
literal|2049L
block|,
literal|0L
block|,
literal|0L
block|}
decl_stmt|;
return|return
name|data
return|;
block|}
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_30
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_30
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|mk_tokenSet_31
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
block|{
literal|131072L
block|,
literal|0L
block|}
decl_stmt|;
return|return
name|data
return|;
block|}
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_31
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_31
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|mk_tokenSet_32
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
block|{
literal|16810000L
block|,
literal|393472L
block|,
literal|0L
block|,
literal|0L
block|}
decl_stmt|;
return|return
name|data
return|;
block|}
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_32
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_32
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|mk_tokenSet_33
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
block|{
literal|1950057955328L
block|,
literal|548682072064L
block|,
literal|0L
block|,
literal|0L
block|}
decl_stmt|;
return|return
name|data
return|;
block|}
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_33
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_33
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|mk_tokenSet_34
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
block|{
literal|4611686018444214288L
block|,
literal|4L
block|,
literal|0L
block|,
literal|0L
block|}
decl_stmt|;
return|return
name|data
return|;
block|}
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_34
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_34
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|mk_tokenSet_35
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
block|{
literal|4611686018444328976L
block|,
literal|0L
block|}
decl_stmt|;
return|return
name|data
return|;
block|}
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_35
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_35
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|mk_tokenSet_36
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
block|{
literal|4611686018427551760L
block|,
literal|0L
block|}
decl_stmt|;
return|return
name|data
return|;
block|}
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_36
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_36
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|mk_tokenSet_37
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
block|{
literal|4611686018712649744L
block|,
literal|4L
block|,
literal|0L
block|,
literal|0L
block|}
decl_stmt|;
return|return
name|data
return|;
block|}
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_37
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_37
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|mk_tokenSet_38
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
block|{
literal|4611686019249520656L
block|,
literal|4L
block|,
literal|0L
block|,
literal|0L
block|}
decl_stmt|;
return|return
name|data
return|;
block|}
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_38
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_38
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|mk_tokenSet_39
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
block|{
literal|4611686020323262480L
block|,
literal|4L
block|,
literal|0L
block|,
literal|0L
block|}
decl_stmt|;
return|return
name|data
return|;
block|}
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_39
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_39
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|mk_tokenSet_40
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
block|{
literal|4611686026765713424L
block|,
literal|4L
block|,
literal|0L
block|,
literal|0L
block|}
decl_stmt|;
return|return
name|data
return|;
block|}
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_40
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_40
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|mk_tokenSet_41
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
block|{
literal|4611686052535517200L
block|,
literal|4L
block|,
literal|0L
block|,
literal|0L
block|}
decl_stmt|;
return|return
name|data
return|;
block|}
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_41
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_41
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|mk_tokenSet_42
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
block|{
literal|4611686293053685776L
block|,
literal|4L
block|,
literal|0L
block|,
literal|0L
block|}
decl_stmt|;
return|return
name|data
return|;
block|}
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_42
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_42
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|mk_tokenSet_43
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
block|{
literal|4611686018427420672L
block|,
literal|4L
block|,
literal|0L
block|,
literal|0L
block|}
decl_stmt|;
return|return
name|data
return|;
block|}
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_43
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_43
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|mk_tokenSet_44
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
block|{
literal|16908304L
block|,
literal|0L
block|}
decl_stmt|;
return|return
name|data
return|;
block|}
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_44
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_44
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|mk_tokenSet_45
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
block|{
literal|4611703610613596176L
block|,
literal|0L
block|}
decl_stmt|;
return|return
name|data
return|;
block|}
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_45
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_45
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|mk_tokenSet_46
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
block|{
literal|5242198513336692722L
block|,
literal|548750123274L
block|,
literal|0L
block|,
literal|0L
block|}
decl_stmt|;
return|return
name|data
return|;
block|}
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_46
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_46
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|mk_tokenSet_47
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
block|{
operator|-
literal|2377900603386646542L
block|,
literal|549348962299L
block|,
literal|0L
block|,
literal|0L
block|}
decl_stmt|;
return|return
name|data
return|;
block|}
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_47
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_47
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|mk_tokenSet_48
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
block|{
literal|4611791571543818256L
block|,
literal|0L
block|}
decl_stmt|;
return|return
name|data
return|;
block|}
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_48
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_48
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|mk_tokenSet_49
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
block|{
literal|5242233697708781554L
block|,
literal|548750123274L
block|,
literal|0L
block|,
literal|0L
block|}
decl_stmt|;
return|return
name|data
return|;
block|}
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_49
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_49
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|mk_tokenSet_50
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
block|{
literal|32784L
block|,
literal|0L
block|}
decl_stmt|;
return|return
name|data
return|;
block|}
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_50
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_50
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|mk_tokenSet_51
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
block|{
operator|-
literal|7421940981999394816L
block|,
literal|3073L
block|,
literal|0L
block|,
literal|0L
block|}
decl_stmt|;
return|return
name|data
return|;
block|}
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_51
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_51
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|mk_tokenSet_52
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
block|{
literal|432345564227575808L
block|,
literal|0L
block|}
decl_stmt|;
return|return
name|data
return|;
block|}
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_52
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_52
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|mk_tokenSet_53
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
block|{
literal|40960L
block|,
literal|0L
block|}
decl_stmt|;
return|return
name|data
return|;
block|}
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_53
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_53
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|mk_tokenSet_54
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
block|{
literal|4611686018427387904L
block|,
literal|0L
block|}
decl_stmt|;
return|return
name|data
return|;
block|}
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_54
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_54
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|mk_tokenSet_55
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
block|{
literal|32784L
block|,
literal|2L
block|,
literal|0L
block|,
literal|0L
block|}
decl_stmt|;
return|return
name|data
return|;
block|}
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_55
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_55
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|mk_tokenSet_56
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
block|{
operator|-
literal|9205366434438119424L
block|,
literal|2081L
block|,
literal|0L
block|,
literal|0L
block|}
decl_stmt|;
return|return
name|data
return|;
block|}
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_56
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_56
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|mk_tokenSet_57
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
block|{
literal|16L
block|,
literal|768L
block|,
literal|0L
block|,
literal|0L
block|}
decl_stmt|;
return|return
name|data
return|;
block|}
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_57
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_57
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|mk_tokenSet_58
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
block|{
operator|-
literal|8574855889453637632L
block|,
literal|598861881L
block|,
literal|0L
block|,
literal|0L
block|}
decl_stmt|;
return|return
name|data
return|;
block|}
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_58
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_58
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|mk_tokenSet_59
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
block|{
operator|-
literal|5116097972785709040L
block|,
literal|4262945L
block|,
literal|0L
block|,
literal|0L
block|}
decl_stmt|;
return|return
name|data
return|;
block|}
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_59
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_59
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|mk_tokenSet_60
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
block|{
operator|-
literal|6196953336277385230L
block|,
literal|548749731849L
block|,
literal|0L
block|,
literal|0L
block|}
decl_stmt|;
return|return
name|data
return|;
block|}
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_60
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_60
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|mk_tokenSet_61
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
block|{
operator|-
literal|8574855889462026240L
block|,
literal|598861881L
block|,
literal|0L
block|,
literal|0L
block|}
decl_stmt|;
return|return
name|data
return|;
block|}
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_61
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_61
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|mk_tokenSet_62
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
block|{
operator|-
literal|5116097972785676272L
block|,
literal|4262945L
block|,
literal|0L
block|,
literal|0L
block|}
decl_stmt|;
return|return
name|data
return|;
block|}
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_62
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_62
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|mk_tokenSet_63
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
block|{
operator|-
literal|6196953336286855182L
block|,
literal|549348567097L
block|,
literal|0L
block|,
literal|0L
block|}
decl_stmt|;
return|return
name|data
return|;
block|}
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_63
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_63
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|mk_tokenSet_64
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
block|{
literal|16L
block|,
literal|262144L
block|,
literal|0L
block|,
literal|0L
block|}
decl_stmt|;
return|return
name|data
return|;
block|}
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_64
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_64
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|mk_tokenSet_65
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
block|{
literal|4096L
block|,
literal|134217728L
block|,
literal|0L
block|,
literal|0L
block|}
decl_stmt|;
return|return
name|data
return|;
block|}
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_65
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_65
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|mk_tokenSet_66
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
block|{
literal|0L
block|,
literal|61964288L
block|,
literal|0L
block|,
literal|0L
block|}
decl_stmt|;
return|return
name|data
return|;
block|}
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_66
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_66
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|mk_tokenSet_67
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
block|{
literal|8192L
block|,
literal|61964288L
block|,
literal|0L
block|,
literal|0L
block|}
decl_stmt|;
return|return
name|data
return|;
block|}
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_67
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_67
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|mk_tokenSet_68
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
block|{
operator|-
literal|8574855889465180160L
block|,
literal|536995897L
block|,
literal|0L
block|,
literal|0L
block|}
decl_stmt|;
return|return
name|data
return|;
block|}
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_68
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_68
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|mk_tokenSet_69
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
block|{
literal|524288L
block|,
literal|134217728L
block|,
literal|0L
block|,
literal|0L
block|}
decl_stmt|;
return|return
name|data
return|;
block|}
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_69
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_69
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|mk_tokenSet_70
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
block|{
operator|-
literal|8574855889465171968L
block|,
literal|536995897L
block|,
literal|0L
block|,
literal|0L
block|}
decl_stmt|;
return|return
name|data
return|;
block|}
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_70
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_70
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|mk_tokenSet_71
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
block|{
literal|544784L
block|,
literal|0L
block|}
decl_stmt|;
return|return
name|data
return|;
block|}
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_71
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_71
argument_list|()
argument_list|)
decl_stmt|;
block|}
end_class

end_unit

