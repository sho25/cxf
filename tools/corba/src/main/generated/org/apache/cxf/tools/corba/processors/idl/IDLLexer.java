begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// $ANTLR 2.7.4: "idl.g" -> "IDLLexer.java"$
end_comment

begin_comment
comment|// Generated
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|corba
operator|.
name|processors
operator|.
name|idl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|TokenStreamException
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|TokenStreamIOException
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|TokenStreamRecognitionException
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|CharStreamException
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|CharStreamIOException
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|ANTLRException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|CharScanner
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|InputBuffer
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|CharBuffer
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|CommonToken
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|RecognitionException
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|NoViableAltForCharException
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|MismatchedCharException
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|TokenStream
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|ANTLRHashString
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|LexerSharedInputState
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|collections
operator|.
name|impl
operator|.
name|BitSet
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|SemanticException
import|;
end_import

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"unchecked"
block|,
literal|"unused"
block|}
argument_list|)
specifier|public
class|class
name|IDLLexer
extends|extends
name|antlr
operator|.
name|CharScanner
implements|implements
name|IDLTokenTypes
implements|,
name|TokenStream
block|{
specifier|public
name|IDLLexer
parameter_list|(
name|InputStream
name|in
parameter_list|)
block|{
name|this
argument_list|(
operator|new
name|ByteBuffer
argument_list|(
name|in
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|IDLLexer
parameter_list|(
name|Reader
name|in
parameter_list|)
block|{
name|this
argument_list|(
operator|new
name|CharBuffer
argument_list|(
name|in
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|IDLLexer
parameter_list|(
name|InputBuffer
name|ib
parameter_list|)
block|{
name|this
argument_list|(
operator|new
name|LexerSharedInputState
argument_list|(
name|ib
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|IDLLexer
parameter_list|(
name|LexerSharedInputState
name|state
parameter_list|)
block|{
name|super
argument_list|(
name|state
argument_list|)
expr_stmt|;
name|caseSensitiveLiterals
operator|=
literal|true
expr_stmt|;
name|setCaseSensitive
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|literals
operator|=
operator|new
name|Hashtable
argument_list|<
name|ANTLRHashString
argument_list|,
name|Integer
argument_list|>
argument_list|()
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"switch"
argument_list|,
name|this
argument_list|)
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
literal|56
argument_list|)
argument_list|)
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"typeprefix"
argument_list|,
name|this
argument_list|)
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
literal|78
argument_list|)
argument_list|)
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"case"
argument_list|,
name|this
argument_list|)
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
literal|57
argument_list|)
argument_list|)
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"finder"
argument_list|,
name|this
argument_list|)
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
literal|93
argument_list|)
argument_list|)
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"manages"
argument_list|,
name|this
argument_list|)
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
literal|91
argument_list|)
argument_list|)
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"interface"
argument_list|,
name|this
argument_list|)
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
literal|7
argument_list|)
argument_list|)
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"provides"
argument_list|,
name|this
argument_list|)
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
literal|84
argument_list|)
argument_list|)
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"exception"
argument_list|,
name|this
argument_list|)
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
literal|67
argument_list|)
argument_list|)
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"primarykey"
argument_list|,
name|this
argument_list|)
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
literal|92
argument_list|)
argument_list|)
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"sequence"
argument_list|,
name|this
argument_list|)
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
literal|60
argument_list|)
argument_list|)
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"uses"
argument_list|,
name|this
argument_list|)
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
literal|85
argument_list|)
argument_list|)
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"consumes"
argument_list|,
name|this
argument_list|)
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
literal|89
argument_list|)
argument_list|)
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"void"
argument_list|,
name|this
argument_list|)
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
literal|69
argument_list|)
argument_list|)
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"factory"
argument_list|,
name|this
argument_list|)
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
literal|22
argument_list|)
argument_list|)
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"import"
argument_list|,
name|this
argument_list|)
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
literal|76
argument_list|)
argument_list|)
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"float"
argument_list|,
name|this
argument_list|)
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
literal|43
argument_list|)
argument_list|)
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"publishes"
argument_list|,
name|this
argument_list|)
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
literal|88
argument_list|)
argument_list|)
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"private"
argument_list|,
name|this
argument_list|)
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
literal|21
argument_list|)
argument_list|)
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"boolean"
argument_list|,
name|this
argument_list|)
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
literal|50
argument_list|)
argument_list|)
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"string"
argument_list|,
name|this
argument_list|)
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
literal|63
argument_list|)
argument_list|)
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"getraises"
argument_list|,
name|this
argument_list|)
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
literal|81
argument_list|)
argument_list|)
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"emits"
argument_list|,
name|this
argument_list|)
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
literal|87
argument_list|)
argument_list|)
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"custom"
argument_list|,
name|this
argument_list|)
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
literal|8
argument_list|)
argument_list|)
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"component"
argument_list|,
name|this
argument_list|)
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
literal|83
argument_list|)
argument_list|)
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"context"
argument_list|,
name|this
argument_list|)
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
literal|73
argument_list|)
argument_list|)
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"octet"
argument_list|,
name|this
argument_list|)
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
literal|51
argument_list|)
argument_list|)
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"oneway"
argument_list|,
name|this
argument_list|)
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
literal|68
argument_list|)
argument_list|)
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"long"
argument_list|,
name|this
argument_list|)
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
literal|45
argument_list|)
argument_list|)
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"ValueBase"
argument_list|,
name|this
argument_list|)
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
literal|75
argument_list|)
argument_list|)
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"in"
argument_list|,
name|this
argument_list|)
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
literal|25
argument_list|)
argument_list|)
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"truncatable"
argument_list|,
name|this
argument_list|)
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
literal|18
argument_list|)
argument_list|)
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"FALSE"
argument_list|,
name|this
argument_list|)
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
literal|40
argument_list|)
argument_list|)
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"readonly"
argument_list|,
name|this
argument_list|)
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
literal|79
argument_list|)
argument_list|)
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"typedef"
argument_list|,
name|this
argument_list|)
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
literal|41
argument_list|)
argument_list|)
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"supports"
argument_list|,
name|this
argument_list|)
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
literal|19
argument_list|)
argument_list|)
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"short"
argument_list|,
name|this
argument_list|)
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
literal|46
argument_list|)
argument_list|)
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"TRUE"
argument_list|,
name|this
argument_list|)
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
literal|39
argument_list|)
argument_list|)
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"fixed"
argument_list|,
name|this
argument_list|)
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
literal|74
argument_list|)
argument_list|)
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"Object"
argument_list|,
name|this
argument_list|)
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
literal|53
argument_list|)
argument_list|)
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"enum"
argument_list|,
name|this
argument_list|)
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
literal|59
argument_list|)
argument_list|)
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"home"
argument_list|,
name|this
argument_list|)
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
literal|90
argument_list|)
argument_list|)
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"multiple"
argument_list|,
name|this
argument_list|)
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
literal|86
argument_list|)
argument_list|)
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"attribute"
argument_list|,
name|this
argument_list|)
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
literal|80
argument_list|)
argument_list|)
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"char"
argument_list|,
name|this
argument_list|)
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
literal|48
argument_list|)
argument_list|)
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"union"
argument_list|,
name|this
argument_list|)
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
literal|55
argument_list|)
argument_list|)
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"local"
argument_list|,
name|this
argument_list|)
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
literal|6
argument_list|)
argument_list|)
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"const"
argument_list|,
name|this
argument_list|)
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
literal|26
argument_list|)
argument_list|)
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"setraises"
argument_list|,
name|this
argument_list|)
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
literal|82
argument_list|)
argument_list|)
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"abstract"
argument_list|,
name|this
argument_list|)
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"valuetype"
argument_list|,
name|this
argument_list|)
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
literal|9
argument_list|)
argument_list|)
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"inout"
argument_list|,
name|this
argument_list|)
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
literal|71
argument_list|)
argument_list|)
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"raises"
argument_list|,
name|this
argument_list|)
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
literal|72
argument_list|)
argument_list|)
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"out"
argument_list|,
name|this
argument_list|)
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
literal|70
argument_list|)
argument_list|)
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"typeid"
argument_list|,
name|this
argument_list|)
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
literal|77
argument_list|)
argument_list|)
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"wchar"
argument_list|,
name|this
argument_list|)
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
literal|49
argument_list|)
argument_list|)
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"any"
argument_list|,
name|this
argument_list|)
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
literal|52
argument_list|)
argument_list|)
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"double"
argument_list|,
name|this
argument_list|)
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
literal|44
argument_list|)
argument_list|)
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"default"
argument_list|,
name|this
argument_list|)
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
literal|58
argument_list|)
argument_list|)
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"eventtype"
argument_list|,
name|this
argument_list|)
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"wstring"
argument_list|,
name|this
argument_list|)
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
literal|64
argument_list|)
argument_list|)
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"unsigned"
argument_list|,
name|this
argument_list|)
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
literal|47
argument_list|)
argument_list|)
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"struct"
argument_list|,
name|this
argument_list|)
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
literal|54
argument_list|)
argument_list|)
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"public"
argument_list|,
name|this
argument_list|)
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
literal|20
argument_list|)
argument_list|)
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"module"
argument_list|,
name|this
argument_list|)
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
literal|11
argument_list|)
argument_list|)
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"native"
argument_list|,
name|this
argument_list|)
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
literal|42
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Token
name|nextToken
parameter_list|()
throws|throws
name|TokenStreamException
block|{
name|Token
name|theRetToken
init|=
literal|null
decl_stmt|;
name|tryAgain
label|:
for|for
control|(
init|;
condition|;
control|)
block|{
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_ttype
init|=
name|Token
operator|.
name|INVALID_TYPE
decl_stmt|;
name|resetText
argument_list|()
expr_stmt|;
try|try
block|{
comment|// for char stream error handling
try|try
block|{
comment|// for lexical error handling
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
literal|';'
case|:
block|{
name|mSEMI
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|theRetToken
operator|=
name|_returnToken
expr_stmt|;
break|break;
block|}
case|case
literal|'?'
case|:
block|{
name|mQUESTION
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|theRetToken
operator|=
name|_returnToken
expr_stmt|;
break|break;
block|}
case|case
literal|'('
case|:
block|{
name|mLPAREN
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|theRetToken
operator|=
name|_returnToken
expr_stmt|;
break|break;
block|}
case|case
literal|')'
case|:
block|{
name|mRPAREN
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|theRetToken
operator|=
name|_returnToken
expr_stmt|;
break|break;
block|}
case|case
literal|'['
case|:
block|{
name|mLBRACK
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|theRetToken
operator|=
name|_returnToken
expr_stmt|;
break|break;
block|}
case|case
literal|']'
case|:
block|{
name|mRBRACK
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|theRetToken
operator|=
name|_returnToken
expr_stmt|;
break|break;
block|}
case|case
literal|'{'
case|:
block|{
name|mLCURLY
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|theRetToken
operator|=
name|_returnToken
expr_stmt|;
break|break;
block|}
case|case
literal|'}'
case|:
block|{
name|mRCURLY
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|theRetToken
operator|=
name|_returnToken
expr_stmt|;
break|break;
block|}
case|case
literal|'|'
case|:
block|{
name|mOR
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|theRetToken
operator|=
name|_returnToken
expr_stmt|;
break|break;
block|}
case|case
literal|'^'
case|:
block|{
name|mXOR
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|theRetToken
operator|=
name|_returnToken
expr_stmt|;
break|break;
block|}
case|case
literal|'&'
case|:
block|{
name|mAND
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|theRetToken
operator|=
name|_returnToken
expr_stmt|;
break|break;
block|}
case|case
literal|','
case|:
block|{
name|mCOMMA
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|theRetToken
operator|=
name|_returnToken
expr_stmt|;
break|break;
block|}
case|case
literal|'='
case|:
block|{
name|mASSIGN
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|theRetToken
operator|=
name|_returnToken
expr_stmt|;
break|break;
block|}
case|case
literal|'!'
case|:
block|{
name|mNOT
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|theRetToken
operator|=
name|_returnToken
expr_stmt|;
break|break;
block|}
case|case
literal|'+'
case|:
block|{
name|mPLUS
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|theRetToken
operator|=
name|_returnToken
expr_stmt|;
break|break;
block|}
case|case
literal|'-'
case|:
block|{
name|mMINUS
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|theRetToken
operator|=
name|_returnToken
expr_stmt|;
break|break;
block|}
case|case
literal|'~'
case|:
block|{
name|mTILDE
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|theRetToken
operator|=
name|_returnToken
expr_stmt|;
break|break;
block|}
case|case
literal|'*'
case|:
block|{
name|mSTAR
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|theRetToken
operator|=
name|_returnToken
expr_stmt|;
break|break;
block|}
case|case
literal|'%'
case|:
block|{
name|mMOD
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|theRetToken
operator|=
name|_returnToken
expr_stmt|;
break|break;
block|}
case|case
literal|'\t'
case|:
case|case
literal|'\n'
case|:
case|case
literal|'\r'
case|:
case|case
literal|' '
case|:
block|{
name|mWS
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|theRetToken
operator|=
name|_returnToken
expr_stmt|;
break|break;
block|}
case|case
literal|'#'
case|:
block|{
name|mPREPROC_DIRECTIVE
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|theRetToken
operator|=
name|_returnToken
expr_stmt|;
break|break;
block|}
case|case
literal|'\''
case|:
block|{
name|mCHAR_LITERAL
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|theRetToken
operator|=
name|_returnToken
expr_stmt|;
break|break;
block|}
case|case
literal|'"'
case|:
block|{
name|mSTRING_LITERAL
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|theRetToken
operator|=
name|_returnToken
expr_stmt|;
break|break;
block|}
case|case
literal|'1'
case|:
case|case
literal|'2'
case|:
case|case
literal|'3'
case|:
case|case
literal|'4'
case|:
case|case
literal|'5'
case|:
case|case
literal|'6'
case|:
case|case
literal|'7'
case|:
case|case
literal|'8'
case|:
case|case
literal|'9'
case|:
block|{
name|mINT
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|theRetToken
operator|=
name|_returnToken
expr_stmt|;
break|break;
block|}
case|case
literal|'_'
case|:
block|{
name|mESCAPED_IDENT
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|theRetToken
operator|=
name|_returnToken
expr_stmt|;
break|break;
block|}
default|default:
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|'<'
operator|)
operator|&&
operator|(
name|LA
argument_list|(
literal|2
argument_list|)
operator|==
literal|'<'
operator|)
condition|)
block|{
name|mLSHIFT
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|theRetToken
operator|=
name|_returnToken
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|'>'
operator|)
operator|&&
operator|(
name|LA
argument_list|(
literal|2
argument_list|)
operator|==
literal|'>'
operator|)
condition|)
block|{
name|mRSHIFT
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|theRetToken
operator|=
name|_returnToken
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|':'
operator|)
operator|&&
operator|(
name|LA
argument_list|(
literal|2
argument_list|)
operator|==
literal|':'
operator|)
condition|)
block|{
name|mSCOPEOP
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|theRetToken
operator|=
name|_returnToken
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|'/'
operator|)
operator|&&
operator|(
name|LA
argument_list|(
literal|2
argument_list|)
operator|==
literal|'/'
operator|)
condition|)
block|{
name|mSL_COMMENT
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|theRetToken
operator|=
name|_returnToken
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|'/'
operator|)
operator|&&
operator|(
name|LA
argument_list|(
literal|2
argument_list|)
operator|==
literal|'*'
operator|)
condition|)
block|{
name|mML_COMMENT
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|theRetToken
operator|=
name|_returnToken
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|'L'
operator|)
operator|&&
operator|(
name|LA
argument_list|(
literal|2
argument_list|)
operator|==
literal|'\''
operator|)
condition|)
block|{
name|mWIDE_CHAR_LITERAL
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|theRetToken
operator|=
name|_returnToken
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|'L'
operator|)
operator|&&
operator|(
name|LA
argument_list|(
literal|2
argument_list|)
operator|==
literal|'"'
operator|)
condition|)
block|{
name|mWIDE_STRING_LITERAL
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|theRetToken
operator|=
name|_returnToken
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|'0'
operator|)
operator|&&
operator|(
name|LA
argument_list|(
literal|2
argument_list|)
operator|==
literal|'X'
operator|||
name|LA
argument_list|(
literal|2
argument_list|)
operator|==
literal|'x'
operator|)
condition|)
block|{
name|mHEX
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|theRetToken
operator|=
name|_returnToken
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|'.'
operator|)
operator|&&
operator|(
operator|(
name|LA
argument_list|(
literal|2
argument_list|)
operator|>=
literal|'0'
operator|&&
name|LA
argument_list|(
literal|2
argument_list|)
operator|<=
literal|'9'
operator|)
operator|)
condition|)
block|{
name|mFLOAT
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|theRetToken
operator|=
name|_returnToken
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|':'
operator|)
operator|&&
operator|(
literal|true
operator|)
condition|)
block|{
name|mCOLON
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|theRetToken
operator|=
name|_returnToken
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|'.'
operator|)
operator|&&
operator|(
literal|true
operator|)
condition|)
block|{
name|mDOT
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|theRetToken
operator|=
name|_returnToken
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|'<'
operator|)
operator|&&
operator|(
literal|true
operator|)
condition|)
block|{
name|mLT
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|theRetToken
operator|=
name|_returnToken
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|'>'
operator|)
operator|&&
operator|(
literal|true
operator|)
condition|)
block|{
name|mGT
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|theRetToken
operator|=
name|_returnToken
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|'/'
operator|)
operator|&&
operator|(
literal|true
operator|)
condition|)
block|{
name|mDIV
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|theRetToken
operator|=
name|_returnToken
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|'0'
operator|)
operator|&&
operator|(
literal|true
operator|)
condition|)
block|{
name|mOCTAL
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|theRetToken
operator|=
name|_returnToken
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|_tokenSet_0
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|)
operator|&&
operator|(
literal|true
operator|)
condition|)
block|{
name|mIDENT
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|theRetToken
operator|=
name|_returnToken
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|EOF_CHAR
condition|)
block|{
name|uponEOF
argument_list|()
expr_stmt|;
name|_returnToken
operator|=
name|makeToken
argument_list|(
name|Token
operator|.
name|EOF_TYPE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|NoViableAltForCharException
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|,
name|getLine
argument_list|()
argument_list|,
name|getColumn
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
if|if
condition|(
name|_returnToken
operator|==
literal|null
condition|)
continue|continue
name|tryAgain
continue|;
comment|// found SKIP token
name|_ttype
operator|=
name|_returnToken
operator|.
name|getType
argument_list|()
expr_stmt|;
name|_returnToken
operator|.
name|setType
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
return|return
name|_returnToken
return|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|TokenStreamRecognitionException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|CharStreamException
name|cse
parameter_list|)
block|{
if|if
condition|(
name|cse
operator|instanceof
name|CharStreamIOException
condition|)
block|{
throw|throw
operator|new
name|TokenStreamIOException
argument_list|(
operator|(
operator|(
name|CharStreamIOException
operator|)
name|cse
operator|)
operator|.
name|io
argument_list|)
throw|;
block|}
throw|throw
operator|new
name|TokenStreamException
argument_list|(
name|cse
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
specifier|public
specifier|final
name|void
name|mSEMI
parameter_list|(
name|boolean
name|_createToken
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|CharStreamException
throws|,
name|TokenStreamException
block|{
name|int
name|_ttype
decl_stmt|;
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_begin
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|_ttype
operator|=
name|SEMI
expr_stmt|;
name|int
name|_saveIndex
decl_stmt|;
name|match
argument_list|(
literal|';'
argument_list|)
expr_stmt|;
if|if
condition|(
name|_createToken
operator|&&
name|_token
operator|==
literal|null
operator|&&
name|_ttype
operator|!=
name|Token
operator|.
name|SKIP
condition|)
block|{
name|_token
operator|=
name|makeToken
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
name|_token
operator|.
name|setText
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|_returnToken
operator|=
name|_token
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|mQUESTION
parameter_list|(
name|boolean
name|_createToken
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|CharStreamException
throws|,
name|TokenStreamException
block|{
name|int
name|_ttype
decl_stmt|;
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_begin
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|_ttype
operator|=
name|QUESTION
expr_stmt|;
name|int
name|_saveIndex
decl_stmt|;
name|match
argument_list|(
literal|'?'
argument_list|)
expr_stmt|;
if|if
condition|(
name|_createToken
operator|&&
name|_token
operator|==
literal|null
operator|&&
name|_ttype
operator|!=
name|Token
operator|.
name|SKIP
condition|)
block|{
name|_token
operator|=
name|makeToken
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
name|_token
operator|.
name|setText
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|_returnToken
operator|=
name|_token
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|mLPAREN
parameter_list|(
name|boolean
name|_createToken
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|CharStreamException
throws|,
name|TokenStreamException
block|{
name|int
name|_ttype
decl_stmt|;
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_begin
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|_ttype
operator|=
name|LPAREN
expr_stmt|;
name|int
name|_saveIndex
decl_stmt|;
name|match
argument_list|(
literal|'('
argument_list|)
expr_stmt|;
if|if
condition|(
name|_createToken
operator|&&
name|_token
operator|==
literal|null
operator|&&
name|_ttype
operator|!=
name|Token
operator|.
name|SKIP
condition|)
block|{
name|_token
operator|=
name|makeToken
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
name|_token
operator|.
name|setText
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|_returnToken
operator|=
name|_token
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|mRPAREN
parameter_list|(
name|boolean
name|_createToken
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|CharStreamException
throws|,
name|TokenStreamException
block|{
name|int
name|_ttype
decl_stmt|;
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_begin
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|_ttype
operator|=
name|RPAREN
expr_stmt|;
name|int
name|_saveIndex
decl_stmt|;
name|match
argument_list|(
literal|')'
argument_list|)
expr_stmt|;
if|if
condition|(
name|_createToken
operator|&&
name|_token
operator|==
literal|null
operator|&&
name|_ttype
operator|!=
name|Token
operator|.
name|SKIP
condition|)
block|{
name|_token
operator|=
name|makeToken
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
name|_token
operator|.
name|setText
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|_returnToken
operator|=
name|_token
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|mLBRACK
parameter_list|(
name|boolean
name|_createToken
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|CharStreamException
throws|,
name|TokenStreamException
block|{
name|int
name|_ttype
decl_stmt|;
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_begin
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|_ttype
operator|=
name|LBRACK
expr_stmt|;
name|int
name|_saveIndex
decl_stmt|;
name|match
argument_list|(
literal|'['
argument_list|)
expr_stmt|;
if|if
condition|(
name|_createToken
operator|&&
name|_token
operator|==
literal|null
operator|&&
name|_ttype
operator|!=
name|Token
operator|.
name|SKIP
condition|)
block|{
name|_token
operator|=
name|makeToken
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
name|_token
operator|.
name|setText
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|_returnToken
operator|=
name|_token
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|mRBRACK
parameter_list|(
name|boolean
name|_createToken
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|CharStreamException
throws|,
name|TokenStreamException
block|{
name|int
name|_ttype
decl_stmt|;
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_begin
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|_ttype
operator|=
name|RBRACK
expr_stmt|;
name|int
name|_saveIndex
decl_stmt|;
name|match
argument_list|(
literal|']'
argument_list|)
expr_stmt|;
if|if
condition|(
name|_createToken
operator|&&
name|_token
operator|==
literal|null
operator|&&
name|_ttype
operator|!=
name|Token
operator|.
name|SKIP
condition|)
block|{
name|_token
operator|=
name|makeToken
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
name|_token
operator|.
name|setText
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|_returnToken
operator|=
name|_token
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|mLCURLY
parameter_list|(
name|boolean
name|_createToken
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|CharStreamException
throws|,
name|TokenStreamException
block|{
name|int
name|_ttype
decl_stmt|;
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_begin
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|_ttype
operator|=
name|LCURLY
expr_stmt|;
name|int
name|_saveIndex
decl_stmt|;
name|match
argument_list|(
literal|'{'
argument_list|)
expr_stmt|;
if|if
condition|(
name|_createToken
operator|&&
name|_token
operator|==
literal|null
operator|&&
name|_ttype
operator|!=
name|Token
operator|.
name|SKIP
condition|)
block|{
name|_token
operator|=
name|makeToken
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
name|_token
operator|.
name|setText
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|_returnToken
operator|=
name|_token
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|mRCURLY
parameter_list|(
name|boolean
name|_createToken
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|CharStreamException
throws|,
name|TokenStreamException
block|{
name|int
name|_ttype
decl_stmt|;
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_begin
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|_ttype
operator|=
name|RCURLY
expr_stmt|;
name|int
name|_saveIndex
decl_stmt|;
name|match
argument_list|(
literal|'}'
argument_list|)
expr_stmt|;
if|if
condition|(
name|_createToken
operator|&&
name|_token
operator|==
literal|null
operator|&&
name|_ttype
operator|!=
name|Token
operator|.
name|SKIP
condition|)
block|{
name|_token
operator|=
name|makeToken
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
name|_token
operator|.
name|setText
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|_returnToken
operator|=
name|_token
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|mOR
parameter_list|(
name|boolean
name|_createToken
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|CharStreamException
throws|,
name|TokenStreamException
block|{
name|int
name|_ttype
decl_stmt|;
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_begin
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|_ttype
operator|=
name|OR
expr_stmt|;
name|int
name|_saveIndex
decl_stmt|;
name|match
argument_list|(
literal|'|'
argument_list|)
expr_stmt|;
if|if
condition|(
name|_createToken
operator|&&
name|_token
operator|==
literal|null
operator|&&
name|_ttype
operator|!=
name|Token
operator|.
name|SKIP
condition|)
block|{
name|_token
operator|=
name|makeToken
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
name|_token
operator|.
name|setText
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|_returnToken
operator|=
name|_token
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|mXOR
parameter_list|(
name|boolean
name|_createToken
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|CharStreamException
throws|,
name|TokenStreamException
block|{
name|int
name|_ttype
decl_stmt|;
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_begin
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|_ttype
operator|=
name|XOR
expr_stmt|;
name|int
name|_saveIndex
decl_stmt|;
name|match
argument_list|(
literal|'^'
argument_list|)
expr_stmt|;
if|if
condition|(
name|_createToken
operator|&&
name|_token
operator|==
literal|null
operator|&&
name|_ttype
operator|!=
name|Token
operator|.
name|SKIP
condition|)
block|{
name|_token
operator|=
name|makeToken
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
name|_token
operator|.
name|setText
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|_returnToken
operator|=
name|_token
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|mAND
parameter_list|(
name|boolean
name|_createToken
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|CharStreamException
throws|,
name|TokenStreamException
block|{
name|int
name|_ttype
decl_stmt|;
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_begin
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|_ttype
operator|=
name|AND
expr_stmt|;
name|int
name|_saveIndex
decl_stmt|;
name|match
argument_list|(
literal|'&'
argument_list|)
expr_stmt|;
if|if
condition|(
name|_createToken
operator|&&
name|_token
operator|==
literal|null
operator|&&
name|_ttype
operator|!=
name|Token
operator|.
name|SKIP
condition|)
block|{
name|_token
operator|=
name|makeToken
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
name|_token
operator|.
name|setText
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|_returnToken
operator|=
name|_token
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|mCOLON
parameter_list|(
name|boolean
name|_createToken
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|CharStreamException
throws|,
name|TokenStreamException
block|{
name|int
name|_ttype
decl_stmt|;
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_begin
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|_ttype
operator|=
name|COLON
expr_stmt|;
name|int
name|_saveIndex
decl_stmt|;
name|match
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
if|if
condition|(
name|_createToken
operator|&&
name|_token
operator|==
literal|null
operator|&&
name|_ttype
operator|!=
name|Token
operator|.
name|SKIP
condition|)
block|{
name|_token
operator|=
name|makeToken
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
name|_token
operator|.
name|setText
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|_returnToken
operator|=
name|_token
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|mCOMMA
parameter_list|(
name|boolean
name|_createToken
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|CharStreamException
throws|,
name|TokenStreamException
block|{
name|int
name|_ttype
decl_stmt|;
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_begin
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|_ttype
operator|=
name|COMMA
expr_stmt|;
name|int
name|_saveIndex
decl_stmt|;
name|match
argument_list|(
literal|','
argument_list|)
expr_stmt|;
if|if
condition|(
name|_createToken
operator|&&
name|_token
operator|==
literal|null
operator|&&
name|_ttype
operator|!=
name|Token
operator|.
name|SKIP
condition|)
block|{
name|_token
operator|=
name|makeToken
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
name|_token
operator|.
name|setText
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|_returnToken
operator|=
name|_token
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|mDOT
parameter_list|(
name|boolean
name|_createToken
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|CharStreamException
throws|,
name|TokenStreamException
block|{
name|int
name|_ttype
decl_stmt|;
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_begin
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|_ttype
operator|=
name|DOT
expr_stmt|;
name|int
name|_saveIndex
decl_stmt|;
name|match
argument_list|(
literal|'.'
argument_list|)
expr_stmt|;
if|if
condition|(
name|_createToken
operator|&&
name|_token
operator|==
literal|null
operator|&&
name|_ttype
operator|!=
name|Token
operator|.
name|SKIP
condition|)
block|{
name|_token
operator|=
name|makeToken
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
name|_token
operator|.
name|setText
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|_returnToken
operator|=
name|_token
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|mASSIGN
parameter_list|(
name|boolean
name|_createToken
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|CharStreamException
throws|,
name|TokenStreamException
block|{
name|int
name|_ttype
decl_stmt|;
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_begin
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|_ttype
operator|=
name|ASSIGN
expr_stmt|;
name|int
name|_saveIndex
decl_stmt|;
name|match
argument_list|(
literal|'='
argument_list|)
expr_stmt|;
if|if
condition|(
name|_createToken
operator|&&
name|_token
operator|==
literal|null
operator|&&
name|_ttype
operator|!=
name|Token
operator|.
name|SKIP
condition|)
block|{
name|_token
operator|=
name|makeToken
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
name|_token
operator|.
name|setText
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|_returnToken
operator|=
name|_token
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|mNOT
parameter_list|(
name|boolean
name|_createToken
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|CharStreamException
throws|,
name|TokenStreamException
block|{
name|int
name|_ttype
decl_stmt|;
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_begin
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|_ttype
operator|=
name|NOT
expr_stmt|;
name|int
name|_saveIndex
decl_stmt|;
name|match
argument_list|(
literal|'!'
argument_list|)
expr_stmt|;
if|if
condition|(
name|_createToken
operator|&&
name|_token
operator|==
literal|null
operator|&&
name|_ttype
operator|!=
name|Token
operator|.
name|SKIP
condition|)
block|{
name|_token
operator|=
name|makeToken
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
name|_token
operator|.
name|setText
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|_returnToken
operator|=
name|_token
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|mLT
parameter_list|(
name|boolean
name|_createToken
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|CharStreamException
throws|,
name|TokenStreamException
block|{
name|int
name|_ttype
decl_stmt|;
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_begin
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|_ttype
operator|=
name|LT
expr_stmt|;
name|int
name|_saveIndex
decl_stmt|;
name|match
argument_list|(
literal|'<'
argument_list|)
expr_stmt|;
if|if
condition|(
name|_createToken
operator|&&
name|_token
operator|==
literal|null
operator|&&
name|_ttype
operator|!=
name|Token
operator|.
name|SKIP
condition|)
block|{
name|_token
operator|=
name|makeToken
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
name|_token
operator|.
name|setText
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|_returnToken
operator|=
name|_token
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|mLSHIFT
parameter_list|(
name|boolean
name|_createToken
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|CharStreamException
throws|,
name|TokenStreamException
block|{
name|int
name|_ttype
decl_stmt|;
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_begin
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|_ttype
operator|=
name|LSHIFT
expr_stmt|;
name|int
name|_saveIndex
decl_stmt|;
name|match
argument_list|(
literal|"<<"
argument_list|)
expr_stmt|;
if|if
condition|(
name|_createToken
operator|&&
name|_token
operator|==
literal|null
operator|&&
name|_ttype
operator|!=
name|Token
operator|.
name|SKIP
condition|)
block|{
name|_token
operator|=
name|makeToken
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
name|_token
operator|.
name|setText
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|_returnToken
operator|=
name|_token
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|mGT
parameter_list|(
name|boolean
name|_createToken
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|CharStreamException
throws|,
name|TokenStreamException
block|{
name|int
name|_ttype
decl_stmt|;
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_begin
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|_ttype
operator|=
name|GT
expr_stmt|;
name|int
name|_saveIndex
decl_stmt|;
name|match
argument_list|(
literal|'>'
argument_list|)
expr_stmt|;
if|if
condition|(
name|_createToken
operator|&&
name|_token
operator|==
literal|null
operator|&&
name|_ttype
operator|!=
name|Token
operator|.
name|SKIP
condition|)
block|{
name|_token
operator|=
name|makeToken
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
name|_token
operator|.
name|setText
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|_returnToken
operator|=
name|_token
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|mRSHIFT
parameter_list|(
name|boolean
name|_createToken
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|CharStreamException
throws|,
name|TokenStreamException
block|{
name|int
name|_ttype
decl_stmt|;
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_begin
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|_ttype
operator|=
name|RSHIFT
expr_stmt|;
name|int
name|_saveIndex
decl_stmt|;
name|match
argument_list|(
literal|">>"
argument_list|)
expr_stmt|;
if|if
condition|(
name|_createToken
operator|&&
name|_token
operator|==
literal|null
operator|&&
name|_ttype
operator|!=
name|Token
operator|.
name|SKIP
condition|)
block|{
name|_token
operator|=
name|makeToken
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
name|_token
operator|.
name|setText
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|_returnToken
operator|=
name|_token
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|mDIV
parameter_list|(
name|boolean
name|_createToken
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|CharStreamException
throws|,
name|TokenStreamException
block|{
name|int
name|_ttype
decl_stmt|;
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_begin
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|_ttype
operator|=
name|DIV
expr_stmt|;
name|int
name|_saveIndex
decl_stmt|;
name|match
argument_list|(
literal|'/'
argument_list|)
expr_stmt|;
if|if
condition|(
name|_createToken
operator|&&
name|_token
operator|==
literal|null
operator|&&
name|_ttype
operator|!=
name|Token
operator|.
name|SKIP
condition|)
block|{
name|_token
operator|=
name|makeToken
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
name|_token
operator|.
name|setText
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|_returnToken
operator|=
name|_token
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|mPLUS
parameter_list|(
name|boolean
name|_createToken
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|CharStreamException
throws|,
name|TokenStreamException
block|{
name|int
name|_ttype
decl_stmt|;
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_begin
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|_ttype
operator|=
name|PLUS
expr_stmt|;
name|int
name|_saveIndex
decl_stmt|;
name|match
argument_list|(
literal|'+'
argument_list|)
expr_stmt|;
if|if
condition|(
name|_createToken
operator|&&
name|_token
operator|==
literal|null
operator|&&
name|_ttype
operator|!=
name|Token
operator|.
name|SKIP
condition|)
block|{
name|_token
operator|=
name|makeToken
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
name|_token
operator|.
name|setText
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|_returnToken
operator|=
name|_token
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|mMINUS
parameter_list|(
name|boolean
name|_createToken
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|CharStreamException
throws|,
name|TokenStreamException
block|{
name|int
name|_ttype
decl_stmt|;
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_begin
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|_ttype
operator|=
name|MINUS
expr_stmt|;
name|int
name|_saveIndex
decl_stmt|;
name|match
argument_list|(
literal|'-'
argument_list|)
expr_stmt|;
if|if
condition|(
name|_createToken
operator|&&
name|_token
operator|==
literal|null
operator|&&
name|_ttype
operator|!=
name|Token
operator|.
name|SKIP
condition|)
block|{
name|_token
operator|=
name|makeToken
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
name|_token
operator|.
name|setText
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|_returnToken
operator|=
name|_token
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|mTILDE
parameter_list|(
name|boolean
name|_createToken
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|CharStreamException
throws|,
name|TokenStreamException
block|{
name|int
name|_ttype
decl_stmt|;
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_begin
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|_ttype
operator|=
name|TILDE
expr_stmt|;
name|int
name|_saveIndex
decl_stmt|;
name|match
argument_list|(
literal|'~'
argument_list|)
expr_stmt|;
if|if
condition|(
name|_createToken
operator|&&
name|_token
operator|==
literal|null
operator|&&
name|_ttype
operator|!=
name|Token
operator|.
name|SKIP
condition|)
block|{
name|_token
operator|=
name|makeToken
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
name|_token
operator|.
name|setText
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|_returnToken
operator|=
name|_token
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|mSTAR
parameter_list|(
name|boolean
name|_createToken
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|CharStreamException
throws|,
name|TokenStreamException
block|{
name|int
name|_ttype
decl_stmt|;
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_begin
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|_ttype
operator|=
name|STAR
expr_stmt|;
name|int
name|_saveIndex
decl_stmt|;
name|match
argument_list|(
literal|'*'
argument_list|)
expr_stmt|;
if|if
condition|(
name|_createToken
operator|&&
name|_token
operator|==
literal|null
operator|&&
name|_ttype
operator|!=
name|Token
operator|.
name|SKIP
condition|)
block|{
name|_token
operator|=
name|makeToken
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
name|_token
operator|.
name|setText
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|_returnToken
operator|=
name|_token
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|mMOD
parameter_list|(
name|boolean
name|_createToken
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|CharStreamException
throws|,
name|TokenStreamException
block|{
name|int
name|_ttype
decl_stmt|;
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_begin
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|_ttype
operator|=
name|MOD
expr_stmt|;
name|int
name|_saveIndex
decl_stmt|;
name|match
argument_list|(
literal|'%'
argument_list|)
expr_stmt|;
if|if
condition|(
name|_createToken
operator|&&
name|_token
operator|==
literal|null
operator|&&
name|_ttype
operator|!=
name|Token
operator|.
name|SKIP
condition|)
block|{
name|_token
operator|=
name|makeToken
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
name|_token
operator|.
name|setText
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|_returnToken
operator|=
name|_token
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|mSCOPEOP
parameter_list|(
name|boolean
name|_createToken
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|CharStreamException
throws|,
name|TokenStreamException
block|{
name|int
name|_ttype
decl_stmt|;
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_begin
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|_ttype
operator|=
name|SCOPEOP
expr_stmt|;
name|int
name|_saveIndex
decl_stmt|;
name|match
argument_list|(
literal|"::"
argument_list|)
expr_stmt|;
if|if
condition|(
name|_createToken
operator|&&
name|_token
operator|==
literal|null
operator|&&
name|_ttype
operator|!=
name|Token
operator|.
name|SKIP
condition|)
block|{
name|_token
operator|=
name|makeToken
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
name|_token
operator|.
name|setText
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|_returnToken
operator|=
name|_token
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|mWS
parameter_list|(
name|boolean
name|_createToken
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|CharStreamException
throws|,
name|TokenStreamException
block|{
name|int
name|_ttype
decl_stmt|;
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_begin
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|_ttype
operator|=
name|WS
expr_stmt|;
name|int
name|_saveIndex
decl_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
literal|' '
case|:
block|{
name|match
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\t'
case|:
block|{
name|match
argument_list|(
literal|'\t'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\n'
case|:
block|{
name|match
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
name|newline
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
literal|'\r'
case|:
block|{
name|match
argument_list|(
literal|'\r'
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltForCharException
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|,
name|getLine
argument_list|()
argument_list|,
name|getColumn
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|_ttype
operator|=
name|Token
operator|.
name|SKIP
expr_stmt|;
if|if
condition|(
name|_createToken
operator|&&
name|_token
operator|==
literal|null
operator|&&
name|_ttype
operator|!=
name|Token
operator|.
name|SKIP
condition|)
block|{
name|_token
operator|=
name|makeToken
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
name|_token
operator|.
name|setText
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|_returnToken
operator|=
name|_token
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|mPREPROC_DIRECTIVE
parameter_list|(
name|boolean
name|_createToken
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|CharStreamException
throws|,
name|TokenStreamException
block|{
name|int
name|_ttype
decl_stmt|;
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_begin
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|_ttype
operator|=
name|PREPROC_DIRECTIVE
expr_stmt|;
name|int
name|_saveIndex
decl_stmt|;
name|_saveIndex
operator|=
name|text
operator|.
name|length
argument_list|()
expr_stmt|;
name|match
argument_list|(
literal|'#'
argument_list|)
expr_stmt|;
name|text
operator|.
name|setLength
argument_list|(
name|_saveIndex
argument_list|)
expr_stmt|;
block|{
name|_loop325
label|:
do|do
block|{
if|if
condition|(
operator|(
name|_tokenSet_1
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|)
condition|)
block|{
name|matchNot
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
block|}
else|else
block|{
break|break
name|_loop325
break|;
block|}
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
name|_saveIndex
operator|=
name|text
operator|.
name|length
argument_list|()
expr_stmt|;
name|match
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
name|text
operator|.
name|setLength
argument_list|(
name|_saveIndex
argument_list|)
expr_stmt|;
name|_ttype
operator|=
name|Token
operator|.
name|SKIP
expr_stmt|;
name|newline
argument_list|()
expr_stmt|;
if|if
condition|(
name|_createToken
operator|&&
name|_token
operator|==
literal|null
operator|&&
name|_ttype
operator|!=
name|Token
operator|.
name|SKIP
condition|)
block|{
name|_token
operator|=
name|makeToken
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
name|_token
operator|.
name|setText
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|_returnToken
operator|=
name|_token
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|mSL_COMMENT
parameter_list|(
name|boolean
name|_createToken
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|CharStreamException
throws|,
name|TokenStreamException
block|{
name|int
name|_ttype
decl_stmt|;
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_begin
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|_ttype
operator|=
name|SL_COMMENT
expr_stmt|;
name|int
name|_saveIndex
decl_stmt|;
name|_saveIndex
operator|=
name|text
operator|.
name|length
argument_list|()
expr_stmt|;
name|match
argument_list|(
literal|"//"
argument_list|)
expr_stmt|;
name|text
operator|.
name|setLength
argument_list|(
name|_saveIndex
argument_list|)
expr_stmt|;
block|{
name|_loop328
label|:
do|do
block|{
if|if
condition|(
operator|(
name|_tokenSet_1
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|)
condition|)
block|{
name|matchNot
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
block|}
else|else
block|{
break|break
name|_loop328
break|;
block|}
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
name|match
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
name|_ttype
operator|=
name|Token
operator|.
name|SKIP
expr_stmt|;
name|newline
argument_list|()
expr_stmt|;
if|if
condition|(
name|_createToken
operator|&&
name|_token
operator|==
literal|null
operator|&&
name|_ttype
operator|!=
name|Token
operator|.
name|SKIP
condition|)
block|{
name|_token
operator|=
name|makeToken
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
name|_token
operator|.
name|setText
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|_returnToken
operator|=
name|_token
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|mML_COMMENT
parameter_list|(
name|boolean
name|_createToken
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|CharStreamException
throws|,
name|TokenStreamException
block|{
name|int
name|_ttype
decl_stmt|;
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_begin
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|_ttype
operator|=
name|ML_COMMENT
expr_stmt|;
name|int
name|_saveIndex
decl_stmt|;
name|_saveIndex
operator|=
name|text
operator|.
name|length
argument_list|()
expr_stmt|;
name|match
argument_list|(
literal|"/*"
argument_list|)
expr_stmt|;
name|text
operator|.
name|setLength
argument_list|(
name|_saveIndex
argument_list|)
expr_stmt|;
block|{
name|_loop336
label|:
do|do
block|{
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|'*'
operator|)
operator|&&
operator|(
name|_tokenSet_2
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|)
condition|)
block|{
block|{
name|int
name|_cnt332
init|=
literal|0
decl_stmt|;
name|_loop332
label|:
do|do
block|{
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|'*'
operator|)
condition|)
block|{
name|match
argument_list|(
literal|'*'
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|_cnt332
operator|>=
literal|1
condition|)
block|{
break|break
name|_loop332
break|;
block|}
throw|throw
operator|new
name|NoViableAltForCharException
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|,
name|getLine
argument_list|()
argument_list|,
name|getColumn
argument_list|()
argument_list|)
throw|;
block|}
name|_cnt332
operator|++
expr_stmt|;
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
block|{
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|'\n'
operator|)
condition|)
block|{
name|match
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
name|newline
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|_tokenSet_3
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|)
condition|)
block|{
block|{
name|match
argument_list|(
name|_tokenSet_3
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|NoViableAltForCharException
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|,
name|getLine
argument_list|()
argument_list|,
name|getColumn
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|'\n'
operator|)
condition|)
block|{
name|match
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
name|newline
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|_tokenSet_4
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|)
condition|)
block|{
block|{
name|match
argument_list|(
name|_tokenSet_4
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
break|break
name|_loop336
break|;
block|}
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
name|_saveIndex
operator|=
name|text
operator|.
name|length
argument_list|()
expr_stmt|;
name|match
argument_list|(
literal|"*/"
argument_list|)
expr_stmt|;
name|text
operator|.
name|setLength
argument_list|(
name|_saveIndex
argument_list|)
expr_stmt|;
name|_ttype
operator|=
name|Token
operator|.
name|SKIP
expr_stmt|;
if|if
condition|(
name|_createToken
operator|&&
name|_token
operator|==
literal|null
operator|&&
name|_ttype
operator|!=
name|Token
operator|.
name|SKIP
condition|)
block|{
name|_token
operator|=
name|makeToken
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
name|_token
operator|.
name|setText
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|_returnToken
operator|=
name|_token
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|mCHAR_LITERAL
parameter_list|(
name|boolean
name|_createToken
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|CharStreamException
throws|,
name|TokenStreamException
block|{
name|int
name|_ttype
decl_stmt|;
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_begin
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|_ttype
operator|=
name|CHAR_LITERAL
expr_stmt|;
name|int
name|_saveIndex
decl_stmt|;
name|_saveIndex
operator|=
name|text
operator|.
name|length
argument_list|()
expr_stmt|;
name|match
argument_list|(
literal|'\''
argument_list|)
expr_stmt|;
name|text
operator|.
name|setLength
argument_list|(
name|_saveIndex
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|'\\'
operator|)
condition|)
block|{
name|mESC
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|_tokenSet_5
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|)
condition|)
block|{
name|matchNot
argument_list|(
literal|'\''
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|NoViableAltForCharException
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|,
name|getLine
argument_list|()
argument_list|,
name|getColumn
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|_saveIndex
operator|=
name|text
operator|.
name|length
argument_list|()
expr_stmt|;
name|match
argument_list|(
literal|'\''
argument_list|)
expr_stmt|;
name|text
operator|.
name|setLength
argument_list|(
name|_saveIndex
argument_list|)
expr_stmt|;
if|if
condition|(
name|_createToken
operator|&&
name|_token
operator|==
literal|null
operator|&&
name|_ttype
operator|!=
name|Token
operator|.
name|SKIP
condition|)
block|{
name|_token
operator|=
name|makeToken
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
name|_token
operator|.
name|setText
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|_returnToken
operator|=
name|_token
expr_stmt|;
block|}
specifier|protected
specifier|final
name|void
name|mESC
parameter_list|(
name|boolean
name|_createToken
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|CharStreamException
throws|,
name|TokenStreamException
block|{
name|int
name|_ttype
decl_stmt|;
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_begin
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|_ttype
operator|=
name|ESC
expr_stmt|;
name|int
name|_saveIndex
decl_stmt|;
name|_saveIndex
operator|=
name|text
operator|.
name|length
argument_list|()
expr_stmt|;
name|match
argument_list|(
literal|'\\'
argument_list|)
expr_stmt|;
name|text
operator|.
name|setLength
argument_list|(
name|_saveIndex
argument_list|)
expr_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
literal|'n'
case|:
block|{
name|match
argument_list|(
literal|'n'
argument_list|)
expr_stmt|;
name|text
operator|.
name|setLength
argument_list|(
name|_begin
argument_list|)
expr_stmt|;
name|text
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'t'
case|:
block|{
name|match
argument_list|(
literal|'t'
argument_list|)
expr_stmt|;
name|text
operator|.
name|setLength
argument_list|(
name|_begin
argument_list|)
expr_stmt|;
name|text
operator|.
name|append
argument_list|(
literal|"\t"
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'v'
case|:
block|{
name|match
argument_list|(
literal|'v'
argument_list|)
expr_stmt|;
name|text
operator|.
name|setLength
argument_list|(
name|_begin
argument_list|)
expr_stmt|;
name|text
operator|.
name|append
argument_list|(
literal|"\013"
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'b'
case|:
block|{
name|match
argument_list|(
literal|'b'
argument_list|)
expr_stmt|;
name|text
operator|.
name|setLength
argument_list|(
name|_begin
argument_list|)
expr_stmt|;
name|text
operator|.
name|append
argument_list|(
literal|"\b"
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'r'
case|:
block|{
name|match
argument_list|(
literal|'r'
argument_list|)
expr_stmt|;
name|text
operator|.
name|setLength
argument_list|(
name|_begin
argument_list|)
expr_stmt|;
name|text
operator|.
name|append
argument_list|(
literal|"\r"
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'f'
case|:
block|{
name|match
argument_list|(
literal|'f'
argument_list|)
expr_stmt|;
name|text
operator|.
name|setLength
argument_list|(
name|_begin
argument_list|)
expr_stmt|;
name|text
operator|.
name|append
argument_list|(
literal|"\r"
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'a'
case|:
block|{
name|match
argument_list|(
literal|'a'
argument_list|)
expr_stmt|;
name|text
operator|.
name|setLength
argument_list|(
name|_begin
argument_list|)
expr_stmt|;
name|text
operator|.
name|append
argument_list|(
literal|"\007"
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\\'
case|:
block|{
name|match
argument_list|(
literal|'\\'
argument_list|)
expr_stmt|;
name|text
operator|.
name|setLength
argument_list|(
name|_begin
argument_list|)
expr_stmt|;
name|text
operator|.
name|append
argument_list|(
literal|"\\"
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'?'
case|:
block|{
name|match
argument_list|(
literal|'?'
argument_list|)
expr_stmt|;
name|text
operator|.
name|setLength
argument_list|(
name|_begin
argument_list|)
expr_stmt|;
name|text
operator|.
name|append
argument_list|(
literal|"?"
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\''
case|:
block|{
name|match
argument_list|(
literal|'\''
argument_list|)
expr_stmt|;
name|text
operator|.
name|setLength
argument_list|(
name|_begin
argument_list|)
expr_stmt|;
name|text
operator|.
name|append
argument_list|(
literal|"'"
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'"'
case|:
block|{
name|match
argument_list|(
literal|'"'
argument_list|)
expr_stmt|;
name|text
operator|.
name|setLength
argument_list|(
name|_begin
argument_list|)
expr_stmt|;
name|text
operator|.
name|append
argument_list|(
literal|"\""
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'0'
case|:
case|case
literal|'1'
case|:
case|case
literal|'2'
case|:
case|case
literal|'3'
case|:
case|case
literal|'4'
case|:
case|case
literal|'5'
case|:
case|case
literal|'6'
case|:
case|case
literal|'7'
case|:
block|{
name|mOCTDIGIT
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
operator|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|>=
literal|'0'
operator|&&
name|LA
argument_list|(
literal|1
argument_list|)
operator|<=
literal|'7'
operator|)
operator|)
operator|&&
operator|(
operator|(
name|LA
argument_list|(
literal|2
argument_list|)
operator|>=
literal|'\u0000'
operator|&&
name|LA
argument_list|(
literal|2
argument_list|)
operator|<=
literal|'\ufffe'
operator|)
operator|)
operator|&&
operator|(
literal|true
operator|)
operator|&&
operator|(
literal|true
operator|)
condition|)
block|{
name|mOCTDIGIT
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
operator|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|>=
literal|'0'
operator|&&
name|LA
argument_list|(
literal|1
argument_list|)
operator|<=
literal|'7'
operator|)
operator|)
operator|&&
operator|(
operator|(
name|LA
argument_list|(
literal|2
argument_list|)
operator|>=
literal|'\u0000'
operator|&&
name|LA
argument_list|(
literal|2
argument_list|)
operator|<=
literal|'\ufffe'
operator|)
operator|)
operator|&&
operator|(
literal|true
operator|)
operator|&&
operator|(
literal|true
operator|)
condition|)
block|{
name|mOCTDIGIT
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|>=
literal|'\u0000'
operator|&&
name|LA
argument_list|(
literal|1
argument_list|)
operator|<=
literal|'\ufffe'
operator|)
operator|)
operator|&&
operator|(
literal|true
operator|)
operator|&&
operator|(
literal|true
operator|)
operator|&&
operator|(
literal|true
operator|)
condition|)
block|{ 				}
else|else
block|{
throw|throw
operator|new
name|NoViableAltForCharException
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|,
name|getLine
argument_list|()
argument_list|,
name|getColumn
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
operator|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|>=
literal|'\u0000'
operator|&&
name|LA
argument_list|(
literal|1
argument_list|)
operator|<=
literal|'\ufffe'
operator|)
operator|)
operator|&&
operator|(
literal|true
operator|)
operator|&&
operator|(
literal|true
operator|)
operator|&&
operator|(
literal|true
operator|)
condition|)
block|{ 			}
else|else
block|{
throw|throw
operator|new
name|NoViableAltForCharException
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|,
name|getLine
argument_list|()
argument_list|,
name|getColumn
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|char
name|realc
init|=
operator|(
name|char
operator|)
name|Integer
operator|.
name|valueOf
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|,
literal|8
argument_list|)
operator|.
name|intValue
argument_list|()
decl_stmt|;
name|text
operator|.
name|setLength
argument_list|(
name|_begin
argument_list|)
expr_stmt|;
name|text
operator|.
name|append
argument_list|(
name|realc
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'x'
case|:
block|{
name|_saveIndex
operator|=
name|text
operator|.
name|length
argument_list|()
expr_stmt|;
name|match
argument_list|(
literal|'x'
argument_list|)
expr_stmt|;
name|text
operator|.
name|setLength
argument_list|(
name|_saveIndex
argument_list|)
expr_stmt|;
name|mHEXDIGIT
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
operator|(
name|_tokenSet_6
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|)
operator|&&
operator|(
operator|(
name|LA
argument_list|(
literal|2
argument_list|)
operator|>=
literal|'\u0000'
operator|&&
name|LA
argument_list|(
literal|2
argument_list|)
operator|<=
literal|'\ufffe'
operator|)
operator|)
operator|&&
operator|(
literal|true
operator|)
operator|&&
operator|(
literal|true
operator|)
condition|)
block|{
name|mHEXDIGIT
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|>=
literal|'\u0000'
operator|&&
name|LA
argument_list|(
literal|1
argument_list|)
operator|<=
literal|'\ufffe'
operator|)
operator|)
operator|&&
operator|(
literal|true
operator|)
operator|&&
operator|(
literal|true
operator|)
operator|&&
operator|(
literal|true
operator|)
condition|)
block|{ 			}
else|else
block|{
throw|throw
operator|new
name|NoViableAltForCharException
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|,
name|getLine
argument_list|()
argument_list|,
name|getColumn
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|char
name|realc
init|=
operator|(
name|char
operator|)
name|Integer
operator|.
name|valueOf
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|,
literal|16
argument_list|)
operator|.
name|intValue
argument_list|()
decl_stmt|;
name|text
operator|.
name|setLength
argument_list|(
name|_begin
argument_list|)
expr_stmt|;
name|text
operator|.
name|append
argument_list|(
name|realc
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'u'
case|:
block|{
name|_saveIndex
operator|=
name|text
operator|.
name|length
argument_list|()
expr_stmt|;
name|match
argument_list|(
literal|'u'
argument_list|)
expr_stmt|;
name|text
operator|.
name|setLength
argument_list|(
name|_saveIndex
argument_list|)
expr_stmt|;
name|mHEXDIGIT
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
operator|(
name|_tokenSet_6
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|)
operator|&&
operator|(
operator|(
name|LA
argument_list|(
literal|2
argument_list|)
operator|>=
literal|'\u0000'
operator|&&
name|LA
argument_list|(
literal|2
argument_list|)
operator|<=
literal|'\ufffe'
operator|)
operator|)
operator|&&
operator|(
literal|true
operator|)
operator|&&
operator|(
literal|true
operator|)
condition|)
block|{
name|mHEXDIGIT
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
operator|(
name|_tokenSet_6
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|)
operator|&&
operator|(
operator|(
name|LA
argument_list|(
literal|2
argument_list|)
operator|>=
literal|'\u0000'
operator|&&
name|LA
argument_list|(
literal|2
argument_list|)
operator|<=
literal|'\ufffe'
operator|)
operator|)
operator|&&
operator|(
literal|true
operator|)
operator|&&
operator|(
literal|true
operator|)
condition|)
block|{
name|mHEXDIGIT
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
operator|(
name|_tokenSet_6
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|)
operator|&&
operator|(
operator|(
name|LA
argument_list|(
literal|2
argument_list|)
operator|>=
literal|'\u0000'
operator|&&
name|LA
argument_list|(
literal|2
argument_list|)
operator|<=
literal|'\ufffe'
operator|)
operator|)
operator|&&
operator|(
literal|true
operator|)
operator|&&
operator|(
literal|true
operator|)
condition|)
block|{
name|mHEXDIGIT
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|>=
literal|'\u0000'
operator|&&
name|LA
argument_list|(
literal|1
argument_list|)
operator|<=
literal|'\ufffe'
operator|)
operator|)
operator|&&
operator|(
literal|true
operator|)
operator|&&
operator|(
literal|true
operator|)
operator|&&
operator|(
literal|true
operator|)
condition|)
block|{ 					}
else|else
block|{
throw|throw
operator|new
name|NoViableAltForCharException
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|,
name|getLine
argument_list|()
argument_list|,
name|getColumn
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
operator|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|>=
literal|'\u0000'
operator|&&
name|LA
argument_list|(
literal|1
argument_list|)
operator|<=
literal|'\ufffe'
operator|)
operator|)
operator|&&
operator|(
literal|true
operator|)
operator|&&
operator|(
literal|true
operator|)
operator|&&
operator|(
literal|true
operator|)
condition|)
block|{ 				}
else|else
block|{
throw|throw
operator|new
name|NoViableAltForCharException
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|,
name|getLine
argument_list|()
argument_list|,
name|getColumn
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
operator|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|>=
literal|'\u0000'
operator|&&
name|LA
argument_list|(
literal|1
argument_list|)
operator|<=
literal|'\ufffe'
operator|)
operator|)
operator|&&
operator|(
literal|true
operator|)
operator|&&
operator|(
literal|true
operator|)
operator|&&
operator|(
literal|true
operator|)
condition|)
block|{ 			}
else|else
block|{
throw|throw
operator|new
name|NoViableAltForCharException
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|,
name|getLine
argument_list|()
argument_list|,
name|getColumn
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|char
name|realc
init|=
operator|(
name|char
operator|)
name|Integer
operator|.
name|valueOf
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|,
literal|16
argument_list|)
operator|.
name|intValue
argument_list|()
decl_stmt|;
name|text
operator|.
name|setLength
argument_list|(
name|_begin
argument_list|)
expr_stmt|;
name|text
operator|.
name|append
argument_list|(
name|realc
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltForCharException
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|,
name|getLine
argument_list|()
argument_list|,
name|getColumn
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
if|if
condition|(
name|_createToken
operator|&&
name|_token
operator|==
literal|null
operator|&&
name|_ttype
operator|!=
name|Token
operator|.
name|SKIP
condition|)
block|{
name|_token
operator|=
name|makeToken
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
name|_token
operator|.
name|setText
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|_returnToken
operator|=
name|_token
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|mWIDE_CHAR_LITERAL
parameter_list|(
name|boolean
name|_createToken
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|CharStreamException
throws|,
name|TokenStreamException
block|{
name|int
name|_ttype
decl_stmt|;
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_begin
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|_ttype
operator|=
name|WIDE_CHAR_LITERAL
expr_stmt|;
name|int
name|_saveIndex
decl_stmt|;
name|_saveIndex
operator|=
name|text
operator|.
name|length
argument_list|()
expr_stmt|;
name|match
argument_list|(
literal|'L'
argument_list|)
expr_stmt|;
name|text
operator|.
name|setLength
argument_list|(
name|_saveIndex
argument_list|)
expr_stmt|;
name|mCHAR_LITERAL
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|_createToken
operator|&&
name|_token
operator|==
literal|null
operator|&&
name|_ttype
operator|!=
name|Token
operator|.
name|SKIP
condition|)
block|{
name|_token
operator|=
name|makeToken
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
name|_token
operator|.
name|setText
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|_returnToken
operator|=
name|_token
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|mSTRING_LITERAL
parameter_list|(
name|boolean
name|_createToken
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|CharStreamException
throws|,
name|TokenStreamException
block|{
name|int
name|_ttype
decl_stmt|;
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_begin
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|_ttype
operator|=
name|STRING_LITERAL
expr_stmt|;
name|int
name|_saveIndex
decl_stmt|;
name|_saveIndex
operator|=
name|text
operator|.
name|length
argument_list|()
expr_stmt|;
name|match
argument_list|(
literal|'"'
argument_list|)
expr_stmt|;
name|text
operator|.
name|setLength
argument_list|(
name|_saveIndex
argument_list|)
expr_stmt|;
block|{
name|_loop342
label|:
do|do
block|{
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|'\\'
operator|)
condition|)
block|{
name|mESC
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|_tokenSet_7
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|)
condition|)
block|{
name|matchNot
argument_list|(
literal|'"'
argument_list|)
expr_stmt|;
block|}
else|else
block|{
break|break
name|_loop342
break|;
block|}
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
name|_saveIndex
operator|=
name|text
operator|.
name|length
argument_list|()
expr_stmt|;
name|match
argument_list|(
literal|'"'
argument_list|)
expr_stmt|;
name|text
operator|.
name|setLength
argument_list|(
name|_saveIndex
argument_list|)
expr_stmt|;
if|if
condition|(
name|_createToken
operator|&&
name|_token
operator|==
literal|null
operator|&&
name|_ttype
operator|!=
name|Token
operator|.
name|SKIP
condition|)
block|{
name|_token
operator|=
name|makeToken
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
name|_token
operator|.
name|setText
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|_returnToken
operator|=
name|_token
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|mWIDE_STRING_LITERAL
parameter_list|(
name|boolean
name|_createToken
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|CharStreamException
throws|,
name|TokenStreamException
block|{
name|int
name|_ttype
decl_stmt|;
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_begin
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|_ttype
operator|=
name|WIDE_STRING_LITERAL
expr_stmt|;
name|int
name|_saveIndex
decl_stmt|;
name|_saveIndex
operator|=
name|text
operator|.
name|length
argument_list|()
expr_stmt|;
name|match
argument_list|(
literal|'L'
argument_list|)
expr_stmt|;
name|text
operator|.
name|setLength
argument_list|(
name|_saveIndex
argument_list|)
expr_stmt|;
name|mSTRING_LITERAL
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|_createToken
operator|&&
name|_token
operator|==
literal|null
operator|&&
name|_ttype
operator|!=
name|Token
operator|.
name|SKIP
condition|)
block|{
name|_token
operator|=
name|makeToken
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
name|_token
operator|.
name|setText
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|_returnToken
operator|=
name|_token
expr_stmt|;
block|}
specifier|protected
specifier|final
name|void
name|mOCTDIGIT
parameter_list|(
name|boolean
name|_createToken
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|CharStreamException
throws|,
name|TokenStreamException
block|{
name|int
name|_ttype
decl_stmt|;
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_begin
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|_ttype
operator|=
name|OCTDIGIT
expr_stmt|;
name|int
name|_saveIndex
decl_stmt|;
name|matchRange
argument_list|(
literal|'0'
argument_list|,
literal|'7'
argument_list|)
expr_stmt|;
if|if
condition|(
name|_createToken
operator|&&
name|_token
operator|==
literal|null
operator|&&
name|_ttype
operator|!=
name|Token
operator|.
name|SKIP
condition|)
block|{
name|_token
operator|=
name|makeToken
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
name|_token
operator|.
name|setText
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|_returnToken
operator|=
name|_token
expr_stmt|;
block|}
specifier|protected
specifier|final
name|void
name|mHEXDIGIT
parameter_list|(
name|boolean
name|_createToken
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|CharStreamException
throws|,
name|TokenStreamException
block|{
name|int
name|_ttype
decl_stmt|;
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_begin
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|_ttype
operator|=
name|HEXDIGIT
expr_stmt|;
name|int
name|_saveIndex
decl_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
literal|'0'
case|:
case|case
literal|'1'
case|:
case|case
literal|'2'
case|:
case|case
literal|'3'
case|:
case|case
literal|'4'
case|:
case|case
literal|'5'
case|:
case|case
literal|'6'
case|:
case|case
literal|'7'
case|:
case|case
literal|'8'
case|:
case|case
literal|'9'
case|:
block|{
name|matchRange
argument_list|(
literal|'0'
argument_list|,
literal|'9'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'a'
case|:
case|case
literal|'b'
case|:
case|case
literal|'c'
case|:
case|case
literal|'d'
case|:
case|case
literal|'e'
case|:
case|case
literal|'f'
case|:
block|{
name|matchRange
argument_list|(
literal|'a'
argument_list|,
literal|'f'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'A'
case|:
case|case
literal|'B'
case|:
case|case
literal|'C'
case|:
case|case
literal|'D'
case|:
case|case
literal|'E'
case|:
case|case
literal|'F'
case|:
block|{
name|matchRange
argument_list|(
literal|'A'
argument_list|,
literal|'F'
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltForCharException
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|,
name|getLine
argument_list|()
argument_list|,
name|getColumn
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
if|if
condition|(
name|_createToken
operator|&&
name|_token
operator|==
literal|null
operator|&&
name|_ttype
operator|!=
name|Token
operator|.
name|SKIP
condition|)
block|{
name|_token
operator|=
name|makeToken
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
name|_token
operator|.
name|setText
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|_returnToken
operator|=
name|_token
expr_stmt|;
block|}
specifier|protected
specifier|final
name|void
name|mVOCAB
parameter_list|(
name|boolean
name|_createToken
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|CharStreamException
throws|,
name|TokenStreamException
block|{
name|int
name|_ttype
decl_stmt|;
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_begin
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|_ttype
operator|=
name|VOCAB
expr_stmt|;
name|int
name|_saveIndex
decl_stmt|;
name|matchRange
argument_list|(
literal|'\3'
argument_list|,
literal|'\377'
argument_list|)
expr_stmt|;
if|if
condition|(
name|_createToken
operator|&&
name|_token
operator|==
literal|null
operator|&&
name|_ttype
operator|!=
name|Token
operator|.
name|SKIP
condition|)
block|{
name|_token
operator|=
name|makeToken
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
name|_token
operator|.
name|setText
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|_returnToken
operator|=
name|_token
expr_stmt|;
block|}
specifier|protected
specifier|final
name|void
name|mDIGIT
parameter_list|(
name|boolean
name|_createToken
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|CharStreamException
throws|,
name|TokenStreamException
block|{
name|int
name|_ttype
decl_stmt|;
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_begin
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|_ttype
operator|=
name|DIGIT
expr_stmt|;
name|int
name|_saveIndex
decl_stmt|;
name|matchRange
argument_list|(
literal|'0'
argument_list|,
literal|'9'
argument_list|)
expr_stmt|;
if|if
condition|(
name|_createToken
operator|&&
name|_token
operator|==
literal|null
operator|&&
name|_ttype
operator|!=
name|Token
operator|.
name|SKIP
condition|)
block|{
name|_token
operator|=
name|makeToken
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
name|_token
operator|.
name|setText
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|_returnToken
operator|=
name|_token
expr_stmt|;
block|}
specifier|protected
specifier|final
name|void
name|mNONZERODIGIT
parameter_list|(
name|boolean
name|_createToken
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|CharStreamException
throws|,
name|TokenStreamException
block|{
name|int
name|_ttype
decl_stmt|;
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_begin
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|_ttype
operator|=
name|NONZERODIGIT
expr_stmt|;
name|int
name|_saveIndex
decl_stmt|;
name|matchRange
argument_list|(
literal|'1'
argument_list|,
literal|'9'
argument_list|)
expr_stmt|;
if|if
condition|(
name|_createToken
operator|&&
name|_token
operator|==
literal|null
operator|&&
name|_ttype
operator|!=
name|Token
operator|.
name|SKIP
condition|)
block|{
name|_token
operator|=
name|makeToken
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
name|_token
operator|.
name|setText
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|_returnToken
operator|=
name|_token
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|mHEX
parameter_list|(
name|boolean
name|_createToken
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|CharStreamException
throws|,
name|TokenStreamException
block|{
name|int
name|_ttype
decl_stmt|;
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_begin
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|_ttype
operator|=
name|HEX
expr_stmt|;
name|int
name|_saveIndex
decl_stmt|;
block|{
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|'0'
operator|)
operator|&&
operator|(
name|LA
argument_list|(
literal|2
argument_list|)
operator|==
literal|'x'
operator|)
condition|)
block|{
name|match
argument_list|(
literal|"0x"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|'0'
operator|)
operator|&&
operator|(
name|LA
argument_list|(
literal|2
argument_list|)
operator|==
literal|'X'
operator|)
condition|)
block|{
name|match
argument_list|(
literal|"0X"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|NoViableAltForCharException
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|,
name|getLine
argument_list|()
argument_list|,
name|getColumn
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|{
name|int
name|_cnt361
init|=
literal|0
decl_stmt|;
name|_loop361
label|:
do|do
block|{
if|if
condition|(
operator|(
name|_tokenSet_6
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|)
condition|)
block|{
name|mHEXDIGIT
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|_cnt361
operator|>=
literal|1
condition|)
block|{
break|break
name|_loop361
break|;
block|}
throw|throw
operator|new
name|NoViableAltForCharException
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|,
name|getLine
argument_list|()
argument_list|,
name|getColumn
argument_list|()
argument_list|)
throw|;
block|}
name|_cnt361
operator|++
expr_stmt|;
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
if|if
condition|(
name|_createToken
operator|&&
name|_token
operator|==
literal|null
operator|&&
name|_ttype
operator|!=
name|Token
operator|.
name|SKIP
condition|)
block|{
name|_token
operator|=
name|makeToken
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
name|_token
operator|.
name|setText
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|_returnToken
operator|=
name|_token
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|mINT
parameter_list|(
name|boolean
name|_createToken
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|CharStreamException
throws|,
name|TokenStreamException
block|{
name|int
name|_ttype
decl_stmt|;
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_begin
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|_ttype
operator|=
name|INT
expr_stmt|;
name|int
name|_saveIndex
decl_stmt|;
name|mNONZERODIGIT
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|{
name|_loop364
label|:
do|do
block|{
if|if
condition|(
operator|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|>=
literal|'0'
operator|&&
name|LA
argument_list|(
literal|1
argument_list|)
operator|<=
literal|'9'
operator|)
operator|)
condition|)
block|{
name|mDIGIT
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
break|break
name|_loop364
break|;
block|}
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
literal|'.'
case|:
block|{
name|match
argument_list|(
literal|'.'
argument_list|)
expr_stmt|;
block|{
name|_loop367
label|:
do|do
block|{
if|if
condition|(
operator|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|>=
literal|'0'
operator|&&
name|LA
argument_list|(
literal|1
argument_list|)
operator|<=
literal|'9'
operator|)
operator|)
condition|)
block|{
name|mDIGIT
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
break|break
name|_loop367
break|;
block|}
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
literal|'E'
case|:
case|case
literal|'e'
case|:
block|{
block|{
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
literal|'e'
case|:
block|{
name|match
argument_list|(
literal|'e'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'E'
case|:
block|{
name|match
argument_list|(
literal|'E'
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltForCharException
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|,
name|getLine
argument_list|()
argument_list|,
name|getColumn
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
literal|'+'
case|:
block|{
name|match
argument_list|(
literal|'+'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'-'
case|:
block|{
name|match
argument_list|(
literal|'-'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'0'
case|:
case|case
literal|'1'
case|:
case|case
literal|'2'
case|:
case|case
literal|'3'
case|:
case|case
literal|'4'
case|:
case|case
literal|'5'
case|:
case|case
literal|'6'
case|:
case|case
literal|'7'
case|:
case|case
literal|'8'
case|:
case|case
literal|'9'
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltForCharException
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|,
name|getLine
argument_list|()
argument_list|,
name|getColumn
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
block|{
name|int
name|_cnt373
init|=
literal|0
decl_stmt|;
name|_loop373
label|:
do|do
block|{
if|if
condition|(
operator|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|>=
literal|'0'
operator|&&
name|LA
argument_list|(
literal|1
argument_list|)
operator|<=
literal|'9'
operator|)
operator|)
condition|)
block|{
name|mDIGIT
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|_cnt373
operator|>=
literal|1
condition|)
block|{
break|break
name|_loop373
break|;
block|}
throw|throw
operator|new
name|NoViableAltForCharException
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|,
name|getLine
argument_list|()
argument_list|,
name|getColumn
argument_list|()
argument_list|)
throw|;
block|}
name|_cnt373
operator|++
expr_stmt|;
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
block|}
name|_ttype
operator|=
name|FLOAT
expr_stmt|;
break|break;
block|}
case|case
literal|'D'
case|:
case|case
literal|'d'
case|:
block|{
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
literal|'d'
case|:
block|{
name|match
argument_list|(
literal|'d'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'D'
case|:
block|{
name|match
argument_list|(
literal|'D'
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltForCharException
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|,
name|getLine
argument_list|()
argument_list|,
name|getColumn
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|_ttype
operator|=
name|FIXED
expr_stmt|;
break|break;
block|}
default|default:
block|{
name|_ttype
operator|=
name|FLOAT
expr_stmt|;
block|}
block|}
block|}
break|break;
block|}
case|case
literal|'E'
case|:
case|case
literal|'e'
case|:
block|{
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
literal|'e'
case|:
block|{
name|match
argument_list|(
literal|'e'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'E'
case|:
block|{
name|match
argument_list|(
literal|'E'
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltForCharException
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|,
name|getLine
argument_list|()
argument_list|,
name|getColumn
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
literal|'+'
case|:
block|{
name|match
argument_list|(
literal|'+'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'-'
case|:
block|{
name|match
argument_list|(
literal|'-'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'0'
case|:
case|case
literal|'1'
case|:
case|case
literal|'2'
case|:
case|case
literal|'3'
case|:
case|case
literal|'4'
case|:
case|case
literal|'5'
case|:
case|case
literal|'6'
case|:
case|case
literal|'7'
case|:
case|case
literal|'8'
case|:
case|case
literal|'9'
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltForCharException
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|,
name|getLine
argument_list|()
argument_list|,
name|getColumn
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
block|{
name|int
name|_cnt378
init|=
literal|0
decl_stmt|;
name|_loop378
label|:
do|do
block|{
if|if
condition|(
operator|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|>=
literal|'0'
operator|&&
name|LA
argument_list|(
literal|1
argument_list|)
operator|<=
literal|'9'
operator|)
operator|)
condition|)
block|{
name|mDIGIT
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|_cnt378
operator|>=
literal|1
condition|)
block|{
break|break
name|_loop378
break|;
block|}
throw|throw
operator|new
name|NoViableAltForCharException
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|,
name|getLine
argument_list|()
argument_list|,
name|getColumn
argument_list|()
argument_list|)
throw|;
block|}
name|_cnt378
operator|++
expr_stmt|;
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
name|_ttype
operator|=
name|FLOAT
expr_stmt|;
break|break;
block|}
case|case
literal|'D'
case|:
case|case
literal|'d'
case|:
block|{
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
literal|'d'
case|:
block|{
name|match
argument_list|(
literal|'d'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'D'
case|:
block|{
name|match
argument_list|(
literal|'D'
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltForCharException
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|,
name|getLine
argument_list|()
argument_list|,
name|getColumn
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|_ttype
operator|=
name|FIXED
expr_stmt|;
break|break;
block|}
default|default:
block|{ 			}
block|}
block|}
if|if
condition|(
name|_createToken
operator|&&
name|_token
operator|==
literal|null
operator|&&
name|_ttype
operator|!=
name|Token
operator|.
name|SKIP
condition|)
block|{
name|_token
operator|=
name|makeToken
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
name|_token
operator|.
name|setText
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|_returnToken
operator|=
name|_token
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|mOCTAL
parameter_list|(
name|boolean
name|_createToken
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|CharStreamException
throws|,
name|TokenStreamException
block|{
name|int
name|_ttype
decl_stmt|;
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_begin
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|_ttype
operator|=
name|OCTAL
expr_stmt|;
name|int
name|_saveIndex
decl_stmt|;
name|match
argument_list|(
literal|'0'
argument_list|)
expr_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
literal|'0'
case|:
case|case
literal|'1'
case|:
case|case
literal|'2'
case|:
case|case
literal|'3'
case|:
case|case
literal|'4'
case|:
case|case
literal|'5'
case|:
case|case
literal|'6'
case|:
case|case
literal|'7'
case|:
case|case
literal|'8'
case|:
case|case
literal|'9'
case|:
block|{
block|{
name|int
name|_cnt383
init|=
literal|0
decl_stmt|;
name|_loop383
label|:
do|do
block|{
if|if
condition|(
operator|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|>=
literal|'0'
operator|&&
name|LA
argument_list|(
literal|1
argument_list|)
operator|<=
literal|'9'
operator|)
operator|)
condition|)
block|{
name|mDIGIT
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|_cnt383
operator|>=
literal|1
condition|)
block|{
break|break
name|_loop383
break|;
block|}
throw|throw
operator|new
name|NoViableAltForCharException
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|,
name|getLine
argument_list|()
argument_list|,
name|getColumn
argument_list|()
argument_list|)
throw|;
block|}
name|_cnt383
operator|++
expr_stmt|;
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
break|break;
block|}
case|case
literal|'.'
case|:
block|{
name|mFLOAT
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|_ttype
operator|=
name|FLOAT
expr_stmt|;
break|break;
block|}
case|case
literal|'D'
case|:
case|case
literal|'d'
case|:
block|{
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
literal|'d'
case|:
block|{
name|match
argument_list|(
literal|'d'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'D'
case|:
block|{
name|match
argument_list|(
literal|'D'
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltForCharException
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|,
name|getLine
argument_list|()
argument_list|,
name|getColumn
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|_ttype
operator|=
name|FIXED
expr_stmt|;
break|break;
block|}
default|default:
block|{
name|_ttype
operator|=
name|INT
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|_createToken
operator|&&
name|_token
operator|==
literal|null
operator|&&
name|_ttype
operator|!=
name|Token
operator|.
name|SKIP
condition|)
block|{
name|_token
operator|=
name|makeToken
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
name|_token
operator|.
name|setText
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|_returnToken
operator|=
name|_token
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|mFLOAT
parameter_list|(
name|boolean
name|_createToken
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|CharStreamException
throws|,
name|TokenStreamException
block|{
name|int
name|_ttype
decl_stmt|;
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_begin
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|_ttype
operator|=
name|FLOAT
expr_stmt|;
name|int
name|_saveIndex
decl_stmt|;
name|match
argument_list|(
literal|'.'
argument_list|)
expr_stmt|;
block|{
name|int
name|_cnt387
init|=
literal|0
decl_stmt|;
name|_loop387
label|:
do|do
block|{
if|if
condition|(
operator|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|>=
literal|'0'
operator|&&
name|LA
argument_list|(
literal|1
argument_list|)
operator|<=
literal|'9'
operator|)
operator|)
condition|)
block|{
name|mDIGIT
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|_cnt387
operator|>=
literal|1
condition|)
block|{
break|break
name|_loop387
break|;
block|}
throw|throw
operator|new
name|NoViableAltForCharException
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|,
name|getLine
argument_list|()
argument_list|,
name|getColumn
argument_list|()
argument_list|)
throw|;
block|}
name|_cnt387
operator|++
expr_stmt|;
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
literal|'E'
case|:
case|case
literal|'e'
case|:
block|{
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
literal|'e'
case|:
block|{
name|match
argument_list|(
literal|'e'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'E'
case|:
block|{
name|match
argument_list|(
literal|'E'
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltForCharException
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|,
name|getLine
argument_list|()
argument_list|,
name|getColumn
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
literal|'+'
case|:
block|{
name|match
argument_list|(
literal|'+'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'-'
case|:
block|{
name|match
argument_list|(
literal|'-'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'0'
case|:
case|case
literal|'1'
case|:
case|case
literal|'2'
case|:
case|case
literal|'3'
case|:
case|case
literal|'4'
case|:
case|case
literal|'5'
case|:
case|case
literal|'6'
case|:
case|case
literal|'7'
case|:
case|case
literal|'8'
case|:
case|case
literal|'9'
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltForCharException
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|,
name|getLine
argument_list|()
argument_list|,
name|getColumn
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
block|{
name|int
name|_cnt392
init|=
literal|0
decl_stmt|;
name|_loop392
label|:
do|do
block|{
if|if
condition|(
operator|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|>=
literal|'0'
operator|&&
name|LA
argument_list|(
literal|1
argument_list|)
operator|<=
literal|'9'
operator|)
operator|)
condition|)
block|{
name|mDIGIT
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|_cnt392
operator|>=
literal|1
condition|)
block|{
break|break
name|_loop392
break|;
block|}
throw|throw
operator|new
name|NoViableAltForCharException
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|,
name|getLine
argument_list|()
argument_list|,
name|getColumn
argument_list|()
argument_list|)
throw|;
block|}
name|_cnt392
operator|++
expr_stmt|;
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
break|break;
block|}
case|case
literal|'D'
case|:
case|case
literal|'d'
case|:
block|{
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
literal|'d'
case|:
block|{
name|match
argument_list|(
literal|'d'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'D'
case|:
block|{
name|match
argument_list|(
literal|'D'
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltForCharException
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|,
name|getLine
argument_list|()
argument_list|,
name|getColumn
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|_ttype
operator|=
name|FIXED
expr_stmt|;
break|break;
block|}
default|default:
block|{ 			}
block|}
block|}
if|if
condition|(
name|_createToken
operator|&&
name|_token
operator|==
literal|null
operator|&&
name|_ttype
operator|!=
name|Token
operator|.
name|SKIP
condition|)
block|{
name|_token
operator|=
name|makeToken
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
name|_token
operator|.
name|setText
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|_returnToken
operator|=
name|_token
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|mIDENT
parameter_list|(
name|boolean
name|_createToken
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|CharStreamException
throws|,
name|TokenStreamException
block|{
name|int
name|_ttype
decl_stmt|;
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_begin
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|_ttype
operator|=
name|IDENT
expr_stmt|;
name|int
name|_saveIndex
decl_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
literal|'a'
case|:
case|case
literal|'b'
case|:
case|case
literal|'c'
case|:
case|case
literal|'d'
case|:
case|case
literal|'e'
case|:
case|case
literal|'f'
case|:
case|case
literal|'g'
case|:
case|case
literal|'h'
case|:
case|case
literal|'i'
case|:
case|case
literal|'j'
case|:
case|case
literal|'k'
case|:
case|case
literal|'l'
case|:
case|case
literal|'m'
case|:
case|case
literal|'n'
case|:
case|case
literal|'o'
case|:
case|case
literal|'p'
case|:
case|case
literal|'q'
case|:
case|case
literal|'r'
case|:
case|case
literal|'s'
case|:
case|case
literal|'t'
case|:
case|case
literal|'u'
case|:
case|case
literal|'v'
case|:
case|case
literal|'w'
case|:
case|case
literal|'x'
case|:
case|case
literal|'y'
case|:
case|case
literal|'z'
case|:
block|{
name|matchRange
argument_list|(
literal|'a'
argument_list|,
literal|'z'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'A'
case|:
case|case
literal|'B'
case|:
case|case
literal|'C'
case|:
case|case
literal|'D'
case|:
case|case
literal|'E'
case|:
case|case
literal|'F'
case|:
case|case
literal|'G'
case|:
case|case
literal|'H'
case|:
case|case
literal|'I'
case|:
case|case
literal|'J'
case|:
case|case
literal|'K'
case|:
case|case
literal|'L'
case|:
case|case
literal|'M'
case|:
case|case
literal|'N'
case|:
case|case
literal|'O'
case|:
case|case
literal|'P'
case|:
case|case
literal|'Q'
case|:
case|case
literal|'R'
case|:
case|case
literal|'S'
case|:
case|case
literal|'T'
case|:
case|case
literal|'U'
case|:
case|case
literal|'V'
case|:
case|case
literal|'W'
case|:
case|case
literal|'X'
case|:
case|case
literal|'Y'
case|:
case|case
literal|'Z'
case|:
block|{
name|matchRange
argument_list|(
literal|'A'
argument_list|,
literal|'Z'
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltForCharException
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|,
name|getLine
argument_list|()
argument_list|,
name|getColumn
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
block|{
name|_loop397
label|:
do|do
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
literal|'a'
case|:
case|case
literal|'b'
case|:
case|case
literal|'c'
case|:
case|case
literal|'d'
case|:
case|case
literal|'e'
case|:
case|case
literal|'f'
case|:
case|case
literal|'g'
case|:
case|case
literal|'h'
case|:
case|case
literal|'i'
case|:
case|case
literal|'j'
case|:
case|case
literal|'k'
case|:
case|case
literal|'l'
case|:
case|case
literal|'m'
case|:
case|case
literal|'n'
case|:
case|case
literal|'o'
case|:
case|case
literal|'p'
case|:
case|case
literal|'q'
case|:
case|case
literal|'r'
case|:
case|case
literal|'s'
case|:
case|case
literal|'t'
case|:
case|case
literal|'u'
case|:
case|case
literal|'v'
case|:
case|case
literal|'w'
case|:
case|case
literal|'x'
case|:
case|case
literal|'y'
case|:
case|case
literal|'z'
case|:
block|{
name|matchRange
argument_list|(
literal|'a'
argument_list|,
literal|'z'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'A'
case|:
case|case
literal|'B'
case|:
case|case
literal|'C'
case|:
case|case
literal|'D'
case|:
case|case
literal|'E'
case|:
case|case
literal|'F'
case|:
case|case
literal|'G'
case|:
case|case
literal|'H'
case|:
case|case
literal|'I'
case|:
case|case
literal|'J'
case|:
case|case
literal|'K'
case|:
case|case
literal|'L'
case|:
case|case
literal|'M'
case|:
case|case
literal|'N'
case|:
case|case
literal|'O'
case|:
case|case
literal|'P'
case|:
case|case
literal|'Q'
case|:
case|case
literal|'R'
case|:
case|case
literal|'S'
case|:
case|case
literal|'T'
case|:
case|case
literal|'U'
case|:
case|case
literal|'V'
case|:
case|case
literal|'W'
case|:
case|case
literal|'X'
case|:
case|case
literal|'Y'
case|:
case|case
literal|'Z'
case|:
block|{
name|matchRange
argument_list|(
literal|'A'
argument_list|,
literal|'Z'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'_'
case|:
block|{
name|match
argument_list|(
literal|'_'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'0'
case|:
case|case
literal|'1'
case|:
case|case
literal|'2'
case|:
case|case
literal|'3'
case|:
case|case
literal|'4'
case|:
case|case
literal|'5'
case|:
case|case
literal|'6'
case|:
case|case
literal|'7'
case|:
case|case
literal|'8'
case|:
case|case
literal|'9'
case|:
block|{
name|matchRange
argument_list|(
literal|'0'
argument_list|,
literal|'9'
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
block|{
break|break
name|_loop397
break|;
block|}
block|}
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
name|_ttype
operator|=
name|testLiteralsTable
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
if|if
condition|(
name|_createToken
operator|&&
name|_token
operator|==
literal|null
operator|&&
name|_ttype
operator|!=
name|Token
operator|.
name|SKIP
condition|)
block|{
name|_token
operator|=
name|makeToken
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
name|_token
operator|.
name|setText
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|_returnToken
operator|=
name|_token
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|mESCAPED_IDENT
parameter_list|(
name|boolean
name|_createToken
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|CharStreamException
throws|,
name|TokenStreamException
block|{
name|int
name|_ttype
decl_stmt|;
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_begin
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|_ttype
operator|=
name|ESCAPED_IDENT
expr_stmt|;
name|int
name|_saveIndex
decl_stmt|;
name|match
argument_list|(
literal|'_'
argument_list|)
expr_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
literal|'a'
case|:
case|case
literal|'b'
case|:
case|case
literal|'c'
case|:
case|case
literal|'d'
case|:
case|case
literal|'e'
case|:
case|case
literal|'f'
case|:
case|case
literal|'g'
case|:
case|case
literal|'h'
case|:
case|case
literal|'i'
case|:
case|case
literal|'j'
case|:
case|case
literal|'k'
case|:
case|case
literal|'l'
case|:
case|case
literal|'m'
case|:
case|case
literal|'n'
case|:
case|case
literal|'o'
case|:
case|case
literal|'p'
case|:
case|case
literal|'q'
case|:
case|case
literal|'r'
case|:
case|case
literal|'s'
case|:
case|case
literal|'t'
case|:
case|case
literal|'u'
case|:
case|case
literal|'v'
case|:
case|case
literal|'w'
case|:
case|case
literal|'x'
case|:
case|case
literal|'y'
case|:
case|case
literal|'z'
case|:
block|{
name|matchRange
argument_list|(
literal|'a'
argument_list|,
literal|'z'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'A'
case|:
case|case
literal|'B'
case|:
case|case
literal|'C'
case|:
case|case
literal|'D'
case|:
case|case
literal|'E'
case|:
case|case
literal|'F'
case|:
case|case
literal|'G'
case|:
case|case
literal|'H'
case|:
case|case
literal|'I'
case|:
case|case
literal|'J'
case|:
case|case
literal|'K'
case|:
case|case
literal|'L'
case|:
case|case
literal|'M'
case|:
case|case
literal|'N'
case|:
case|case
literal|'O'
case|:
case|case
literal|'P'
case|:
case|case
literal|'Q'
case|:
case|case
literal|'R'
case|:
case|case
literal|'S'
case|:
case|case
literal|'T'
case|:
case|case
literal|'U'
case|:
case|case
literal|'V'
case|:
case|case
literal|'W'
case|:
case|case
literal|'X'
case|:
case|case
literal|'Y'
case|:
case|case
literal|'Z'
case|:
block|{
name|matchRange
argument_list|(
literal|'A'
argument_list|,
literal|'Z'
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltForCharException
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|,
name|getLine
argument_list|()
argument_list|,
name|getColumn
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
block|{
name|_loop401
label|:
do|do
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
literal|'a'
case|:
case|case
literal|'b'
case|:
case|case
literal|'c'
case|:
case|case
literal|'d'
case|:
case|case
literal|'e'
case|:
case|case
literal|'f'
case|:
case|case
literal|'g'
case|:
case|case
literal|'h'
case|:
case|case
literal|'i'
case|:
case|case
literal|'j'
case|:
case|case
literal|'k'
case|:
case|case
literal|'l'
case|:
case|case
literal|'m'
case|:
case|case
literal|'n'
case|:
case|case
literal|'o'
case|:
case|case
literal|'p'
case|:
case|case
literal|'q'
case|:
case|case
literal|'r'
case|:
case|case
literal|'s'
case|:
case|case
literal|'t'
case|:
case|case
literal|'u'
case|:
case|case
literal|'v'
case|:
case|case
literal|'w'
case|:
case|case
literal|'x'
case|:
case|case
literal|'y'
case|:
case|case
literal|'z'
case|:
block|{
name|matchRange
argument_list|(
literal|'a'
argument_list|,
literal|'z'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'A'
case|:
case|case
literal|'B'
case|:
case|case
literal|'C'
case|:
case|case
literal|'D'
case|:
case|case
literal|'E'
case|:
case|case
literal|'F'
case|:
case|case
literal|'G'
case|:
case|case
literal|'H'
case|:
case|case
literal|'I'
case|:
case|case
literal|'J'
case|:
case|case
literal|'K'
case|:
case|case
literal|'L'
case|:
case|case
literal|'M'
case|:
case|case
literal|'N'
case|:
case|case
literal|'O'
case|:
case|case
literal|'P'
case|:
case|case
literal|'Q'
case|:
case|case
literal|'R'
case|:
case|case
literal|'S'
case|:
case|case
literal|'T'
case|:
case|case
literal|'U'
case|:
case|case
literal|'V'
case|:
case|case
literal|'W'
case|:
case|case
literal|'X'
case|:
case|case
literal|'Y'
case|:
case|case
literal|'Z'
case|:
block|{
name|matchRange
argument_list|(
literal|'A'
argument_list|,
literal|'Z'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'_'
case|:
block|{
name|match
argument_list|(
literal|'_'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'0'
case|:
case|case
literal|'1'
case|:
case|case
literal|'2'
case|:
case|case
literal|'3'
case|:
case|case
literal|'4'
case|:
case|case
literal|'5'
case|:
case|case
literal|'6'
case|:
case|case
literal|'7'
case|:
case|case
literal|'8'
case|:
case|case
literal|'9'
case|:
block|{
name|matchRange
argument_list|(
literal|'0'
argument_list|,
literal|'9'
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
block|{
break|break
name|_loop401
break|;
block|}
block|}
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
name|_begin
operator|++
expr_stmt|;
name|_ttype
operator|=
name|IDENT
expr_stmt|;
if|if
condition|(
name|_createToken
operator|&&
name|_token
operator|==
literal|null
operator|&&
name|_ttype
operator|!=
name|Token
operator|.
name|SKIP
condition|)
block|{
name|_token
operator|=
name|makeToken
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
name|_token
operator|.
name|setText
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|_returnToken
operator|=
name|_token
expr_stmt|;
block|}
specifier|private
specifier|static
name|long
index|[]
name|mk_tokenSet_0
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
operator|new
name|long
index|[
literal|1025
index|]
decl_stmt|;
name|data
index|[
literal|1
index|]
operator|=
literal|576460743847706622L
expr_stmt|;
return|return
name|data
return|;
block|}
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_0
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_0
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|long
index|[]
name|mk_tokenSet_1
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
operator|new
name|long
index|[
literal|2048
index|]
decl_stmt|;
name|data
index|[
literal|0
index|]
operator|=
operator|-
literal|1025L
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
literal|1022
condition|;
name|i
operator|++
control|)
block|{
name|data
index|[
name|i
index|]
operator|=
operator|-
literal|1L
expr_stmt|;
block|}
name|data
index|[
literal|1023
index|]
operator|=
literal|9223372036854775807L
expr_stmt|;
return|return
name|data
return|;
block|}
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_1
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_1
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|long
index|[]
name|mk_tokenSet_2
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
operator|new
name|long
index|[
literal|2048
index|]
decl_stmt|;
name|data
index|[
literal|0
index|]
operator|=
operator|-
literal|140737488355329L
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
literal|1022
condition|;
name|i
operator|++
control|)
block|{
name|data
index|[
name|i
index|]
operator|=
operator|-
literal|1L
expr_stmt|;
block|}
name|data
index|[
literal|1023
index|]
operator|=
literal|9223372036854775807L
expr_stmt|;
return|return
name|data
return|;
block|}
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_2
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_2
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|long
index|[]
name|mk_tokenSet_3
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
operator|new
name|long
index|[
literal|2048
index|]
decl_stmt|;
name|data
index|[
literal|0
index|]
operator|=
operator|-
literal|145135534867457L
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
literal|1022
condition|;
name|i
operator|++
control|)
block|{
name|data
index|[
name|i
index|]
operator|=
operator|-
literal|1L
expr_stmt|;
block|}
name|data
index|[
literal|1023
index|]
operator|=
literal|9223372036854775807L
expr_stmt|;
return|return
name|data
return|;
block|}
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_3
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_3
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|long
index|[]
name|mk_tokenSet_4
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
operator|new
name|long
index|[
literal|2048
index|]
decl_stmt|;
name|data
index|[
literal|0
index|]
operator|=
operator|-
literal|4398046512129L
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
literal|1022
condition|;
name|i
operator|++
control|)
block|{
name|data
index|[
name|i
index|]
operator|=
operator|-
literal|1L
expr_stmt|;
block|}
name|data
index|[
literal|1023
index|]
operator|=
literal|9223372036854775807L
expr_stmt|;
return|return
name|data
return|;
block|}
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_4
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_4
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|long
index|[]
name|mk_tokenSet_5
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
operator|new
name|long
index|[
literal|2048
index|]
decl_stmt|;
name|data
index|[
literal|0
index|]
operator|=
operator|-
literal|549755813889L
expr_stmt|;
name|data
index|[
literal|1
index|]
operator|=
operator|-
literal|268435457L
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|2
init|;
name|i
operator|<=
literal|1022
condition|;
name|i
operator|++
control|)
block|{
name|data
index|[
name|i
index|]
operator|=
operator|-
literal|1L
expr_stmt|;
block|}
name|data
index|[
literal|1023
index|]
operator|=
literal|9223372036854775807L
expr_stmt|;
return|return
name|data
return|;
block|}
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_5
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_5
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|long
index|[]
name|mk_tokenSet_6
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
operator|new
name|long
index|[
literal|1025
index|]
decl_stmt|;
name|data
index|[
literal|0
index|]
operator|=
literal|287948901175001088L
expr_stmt|;
name|data
index|[
literal|1
index|]
operator|=
literal|541165879422L
expr_stmt|;
return|return
name|data
return|;
block|}
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_6
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_6
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|long
index|[]
name|mk_tokenSet_7
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
operator|new
name|long
index|[
literal|2048
index|]
decl_stmt|;
name|data
index|[
literal|0
index|]
operator|=
operator|-
literal|17179869185L
expr_stmt|;
name|data
index|[
literal|1
index|]
operator|=
operator|-
literal|268435457L
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|2
init|;
name|i
operator|<=
literal|1022
condition|;
name|i
operator|++
control|)
block|{
name|data
index|[
name|i
index|]
operator|=
operator|-
literal|1L
expr_stmt|;
block|}
name|data
index|[
literal|1023
index|]
operator|=
literal|9223372036854775807L
expr_stmt|;
return|return
name|data
return|;
block|}
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_7
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_7
argument_list|()
argument_list|)
decl_stmt|;
block|}
end_class

end_unit

