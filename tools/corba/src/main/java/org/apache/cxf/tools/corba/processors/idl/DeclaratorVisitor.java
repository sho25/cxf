begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|corba
operator|.
name|processors
operator|.
name|idl
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|Definition
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|collections
operator|.
name|AST
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|Alias
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|CorbaTypeImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|Fixed
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|Sequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaComplexType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaSimpleType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaType
import|;
end_import

begin_class
specifier|public
class|class
name|DeclaratorVisitor
extends|extends
name|VisitorBase
block|{
comment|//<declarators> ::=<declarator> {","<declarator> }*
comment|//<declarator> ::=<simple_declarator>
comment|//                |<complex_declarator>
comment|//<simple_declarator> ::=<identifier>
comment|//<complex_declarator> ::=<array_declarator>
specifier|public
name|DeclaratorVisitor
parameter_list|(
name|Scope
name|scope
parameter_list|,
name|Definition
name|defn
parameter_list|,
name|XmlSchema
name|schemaRef
parameter_list|,
name|WSDLASTVisitor
name|wsdlASTVisitor
parameter_list|,
name|XmlSchemaType
name|schemaTypeRef
parameter_list|,
name|CorbaTypeImpl
name|corbaTypeRef
parameter_list|,
name|Scope
name|fQName
parameter_list|)
block|{
name|super
argument_list|(
name|scope
argument_list|,
name|defn
argument_list|,
name|schemaRef
argument_list|,
name|wsdlASTVisitor
argument_list|)
expr_stmt|;
name|setSchemaType
argument_list|(
name|schemaTypeRef
argument_list|)
expr_stmt|;
name|setCorbaType
argument_list|(
name|corbaTypeRef
argument_list|)
expr_stmt|;
name|setFullyQualifiedName
argument_list|(
name|fQName
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|visit
parameter_list|(
name|AST
name|node
parameter_list|)
block|{
if|if
condition|(
name|ArrayVisitor
operator|.
name|accept
argument_list|(
name|node
argument_list|)
condition|)
block|{
name|ArrayVisitor
name|arrayVisitor
init|=
operator|new
name|ArrayVisitor
argument_list|(
name|getScope
argument_list|()
argument_list|,
name|definition
argument_list|,
name|schema
argument_list|,
name|wsdlVisitor
argument_list|,
name|node
argument_list|,
name|getFullyQualifiedName
argument_list|()
argument_list|)
decl_stmt|;
name|arrayVisitor
operator|.
name|setSchemaType
argument_list|(
name|getSchemaType
argument_list|()
argument_list|)
expr_stmt|;
name|arrayVisitor
operator|.
name|setCorbaType
argument_list|(
name|getCorbaType
argument_list|()
argument_list|)
expr_stmt|;
name|arrayVisitor
operator|.
name|visit
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// add schemaType
if|if
condition|(
operator|(
name|getSchemaType
argument_list|()
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|schemas
operator|.
name|getTypeByQName
argument_list|(
name|getSchemaType
argument_list|()
operator|.
name|getQName
argument_list|()
argument_list|)
operator|==
literal|null
operator|)
operator|&&
operator|(
name|schema
operator|.
name|getTypeByName
argument_list|(
name|getSchemaType
argument_list|()
operator|.
name|getQName
argument_list|()
argument_list|)
operator|==
literal|null
operator|)
condition|)
block|{
name|schema
operator|.
name|getItems
argument_list|()
operator|.
name|add
argument_list|(
name|getSchemaType
argument_list|()
argument_list|)
expr_stmt|;
name|schema
operator|.
name|addType
argument_list|(
name|getSchemaType
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// add corbaType
name|typeMap
operator|.
name|getStructOrExceptionOrUnion
argument_list|()
operator|.
name|add
argument_list|(
name|getCorbaType
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|AST
name|nextDecl
init|=
name|node
operator|.
name|getNextSibling
argument_list|()
decl_stmt|;
while|while
condition|(
name|nextDecl
operator|!=
literal|null
condition|)
block|{
name|Scope
name|newScope
init|=
operator|new
name|Scope
argument_list|(
name|getScope
argument_list|()
operator|.
name|getParent
argument_list|()
argument_list|,
name|nextDecl
argument_list|)
decl_stmt|;
if|if
condition|(
name|ArrayVisitor
operator|.
name|accept
argument_list|(
name|nextDecl
argument_list|)
condition|)
block|{
name|ArrayVisitor
name|arrayVisitor
init|=
operator|new
name|ArrayVisitor
argument_list|(
name|newScope
argument_list|,
name|definition
argument_list|,
name|schema
argument_list|,
name|wsdlVisitor
argument_list|,
name|nextDecl
argument_list|,
name|getFullyQualifiedName
argument_list|()
argument_list|)
decl_stmt|;
name|arrayVisitor
operator|.
name|setSchemaType
argument_list|(
name|getSchemaType
argument_list|()
argument_list|)
expr_stmt|;
name|arrayVisitor
operator|.
name|setCorbaType
argument_list|(
name|getCorbaType
argument_list|()
argument_list|)
expr_stmt|;
name|arrayVisitor
operator|.
name|visit
argument_list|(
name|nextDecl
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|visitNewTypes
argument_list|(
name|newScope
argument_list|)
expr_stmt|;
block|}
name|nextDecl
operator|=
name|nextDecl
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|visitNewTypes
parameter_list|(
name|Scope
name|newScope
parameter_list|)
block|{
name|CorbaTypeImpl
name|nextCorbaType
init|=
literal|null
decl_stmt|;
name|XmlSchemaType
name|nextSchemaType
init|=
literal|null
decl_stmt|;
name|CorbaTypeImpl
name|oldCorbaType
init|=
name|getCorbaType
argument_list|()
decl_stmt|;
name|QName
name|newQname
init|=
operator|new
name|QName
argument_list|(
name|getCorbaType
argument_list|()
operator|.
name|getQName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
name|newScope
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldCorbaType
operator|instanceof
name|Alias
condition|)
block|{
comment|// Alias
comment|//
name|Alias
name|oldAlias
init|=
operator|(
name|Alias
operator|)
name|oldCorbaType
decl_stmt|;
name|Alias
name|alias
init|=
operator|new
name|Alias
argument_list|()
decl_stmt|;
name|alias
operator|.
name|setQName
argument_list|(
name|newQname
argument_list|)
expr_stmt|;
name|alias
operator|.
name|setBasetype
argument_list|(
name|oldAlias
operator|.
name|getBasetype
argument_list|()
argument_list|)
expr_stmt|;
name|alias
operator|.
name|setType
argument_list|(
name|oldAlias
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|alias
operator|.
name|setRepositoryID
argument_list|(
name|newScope
operator|.
name|toIDLRepositoryID
argument_list|()
argument_list|)
expr_stmt|;
name|nextCorbaType
operator|=
name|alias
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|oldCorbaType
operator|instanceof
name|Sequence
condition|)
block|{
comment|// Sequence
comment|//
name|nextSchemaType
operator|=
name|duplicateXmlSchemaComplexType
argument_list|(
name|newScope
argument_list|)
expr_stmt|;
name|Sequence
name|oldSequence
init|=
operator|(
name|Sequence
operator|)
name|oldCorbaType
decl_stmt|;
name|Sequence
name|newSequence
init|=
operator|new
name|Sequence
argument_list|()
decl_stmt|;
name|newSequence
operator|.
name|setQName
argument_list|(
name|newQname
argument_list|)
expr_stmt|;
name|newSequence
operator|.
name|setType
argument_list|(
name|nextSchemaType
operator|.
name|getQName
argument_list|()
argument_list|)
expr_stmt|;
name|newSequence
operator|.
name|setElemtype
argument_list|(
name|oldSequence
operator|.
name|getElemtype
argument_list|()
argument_list|)
expr_stmt|;
name|newSequence
operator|.
name|setElemname
argument_list|(
name|oldSequence
operator|.
name|getElemname
argument_list|()
argument_list|)
expr_stmt|;
name|newSequence
operator|.
name|setBound
argument_list|(
name|oldSequence
operator|.
name|getBound
argument_list|()
argument_list|)
expr_stmt|;
name|newSequence
operator|.
name|setRepositoryID
argument_list|(
name|newScope
operator|.
name|toIDLRepositoryID
argument_list|()
argument_list|)
expr_stmt|;
name|nextCorbaType
operator|=
name|newSequence
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|oldCorbaType
operator|instanceof
name|Fixed
condition|)
block|{
comment|// Fixed
comment|//
name|nextSchemaType
operator|=
name|duplicateXmlSchemaSimpleType
argument_list|(
name|newScope
argument_list|)
expr_stmt|;
name|Fixed
name|oldFixed
init|=
operator|(
name|Fixed
operator|)
name|getCorbaType
argument_list|()
decl_stmt|;
name|Fixed
name|newFixed
init|=
operator|new
name|Fixed
argument_list|()
decl_stmt|;
name|newFixed
operator|.
name|setQName
argument_list|(
name|newQname
argument_list|)
expr_stmt|;
name|newFixed
operator|.
name|setDigits
argument_list|(
name|oldFixed
operator|.
name|getDigits
argument_list|()
argument_list|)
expr_stmt|;
name|newFixed
operator|.
name|setScale
argument_list|(
name|oldFixed
operator|.
name|getScale
argument_list|()
argument_list|)
expr_stmt|;
name|newFixed
operator|.
name|setType
argument_list|(
name|oldFixed
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|newFixed
operator|.
name|setRepositoryID
argument_list|(
name|newScope
operator|.
name|toIDLRepositoryID
argument_list|()
argument_list|)
expr_stmt|;
name|nextCorbaType
operator|=
name|newFixed
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"[DeclaratorVisitor: Unexpected CORBA type error!]"
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|nextCorbaType
operator|!=
literal|null
condition|)
block|{
name|typeMap
operator|.
name|getStructOrExceptionOrUnion
argument_list|()
operator|.
name|add
argument_list|(
name|nextCorbaType
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|nextSchemaType
operator|!=
literal|null
condition|)
block|{
name|schema
operator|.
name|getItems
argument_list|()
operator|.
name|add
argument_list|(
name|nextSchemaType
argument_list|)
expr_stmt|;
name|schema
operator|.
name|addType
argument_list|(
name|nextSchemaType
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|XmlSchemaComplexType
name|duplicateXmlSchemaComplexType
parameter_list|(
name|Scope
name|newScope
parameter_list|)
block|{
name|XmlSchemaComplexType
name|oldSchemaType
init|=
operator|(
name|XmlSchemaComplexType
operator|)
name|getSchemaType
argument_list|()
decl_stmt|;
name|XmlSchemaComplexType
name|newSchemaType
init|=
operator|new
name|XmlSchemaComplexType
argument_list|(
name|schema
argument_list|)
decl_stmt|;
name|newSchemaType
operator|.
name|setName
argument_list|(
name|newScope
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|newSchemaType
operator|.
name|setParticle
argument_list|(
name|oldSchemaType
operator|.
name|getParticle
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|newSchemaType
return|;
block|}
specifier|private
name|XmlSchemaSimpleType
name|duplicateXmlSchemaSimpleType
parameter_list|(
name|Scope
name|newScope
parameter_list|)
block|{
name|XmlSchemaSimpleType
name|oldSimpleType
init|=
operator|(
name|XmlSchemaSimpleType
operator|)
name|getSchemaType
argument_list|()
decl_stmt|;
name|XmlSchemaSimpleType
name|simpleType
init|=
operator|new
name|XmlSchemaSimpleType
argument_list|(
name|schema
argument_list|)
decl_stmt|;
name|simpleType
operator|.
name|setContent
argument_list|(
name|oldSimpleType
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
name|simpleType
operator|.
name|setName
argument_list|(
name|newScope
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|simpleType
return|;
block|}
block|}
end_class

end_unit

