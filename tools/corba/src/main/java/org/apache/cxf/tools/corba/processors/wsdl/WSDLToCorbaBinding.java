begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|corba
operator|.
name|processors
operator|.
name|wsdl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|Binding
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|BindingFault
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|BindingInput
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|BindingOperation
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|BindingOutput
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|Definition
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|Fault
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|Operation
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|Part
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|Port
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|PortType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|WSDLException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|extensions
operator|.
name|ExtensibilityElement
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|extensions
operator|.
name|ExtensionRegistry
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|AddressType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|ArgType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|BindingType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|CorbaConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|CorbaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|MemberType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|OperationType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|ParamType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|RaisesType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|TypeMappingType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|W3CConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|xmlschema
operator|.
name|SchemaCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|CastUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|common
operator|.
name|ToolException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaAnnotation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaAnnotationItem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaAppInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaComplexType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaElement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaExternal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaType
import|;
end_import

begin_class
specifier|public
class|class
name|WSDLToCorbaBinding
block|{
specifier|protected
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|WSDLToCorbaBinding
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|static
name|XmlSchema
name|xmlSchemaType
decl_stmt|;
specifier|static
name|String
name|wsdlFileName
decl_stmt|;
specifier|static
name|String
name|outputFile
decl_stmt|;
specifier|static
name|String
name|namespace
decl_stmt|;
specifier|static
name|boolean
name|verboseOn
decl_stmt|;
specifier|protected
name|Definition
name|def
decl_stmt|;
specifier|protected
name|String
name|idlNamespace
decl_stmt|;
name|WSDLToCorbaHelper
name|helper
init|=
operator|new
name|WSDLToCorbaHelper
argument_list|()
decl_stmt|;
name|TypeMappingType
name|typeMappingType
decl_stmt|;
name|ExtensionRegistry
name|extReg
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|interfaceNames
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|bindingNameMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|String
name|bindingName
decl_stmt|;
name|String
name|address
decl_stmt|;
name|String
name|addressFile
decl_stmt|;
name|WSDLParameter
name|wsdlParameter
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|bindingNames
decl_stmt|;
name|SchemaCollection
name|xmlSchemaList
decl_stmt|;
name|WSDLToTypeProcessor
name|typeProcessor
init|=
operator|new
name|WSDLToTypeProcessor
argument_list|()
decl_stmt|;
specifier|private
name|boolean
name|allbindings
decl_stmt|;
specifier|public
name|WSDLToCorbaBinding
parameter_list|()
block|{     }
specifier|public
name|WSDLToCorbaHelper
name|getHelper
parameter_list|()
block|{
return|return
name|helper
return|;
block|}
specifier|public
name|Definition
name|generateCORBABinding
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|typeProcessor
operator|.
name|parseWSDL
argument_list|(
name|getWsdlFileName
argument_list|()
argument_list|)
expr_stmt|;
name|def
operator|=
name|typeProcessor
operator|.
name|getWSDLDefinition
argument_list|()
expr_stmt|;
name|generateCORBABinding
argument_list|(
name|def
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
name|ex
throw|;
block|}
return|return
name|def
return|;
block|}
specifier|public
name|Binding
index|[]
name|generateCORBABinding
parameter_list|(
name|Definition
name|definition
parameter_list|)
throws|throws
name|Exception
block|{
name|def
operator|=
name|definition
expr_stmt|;
name|helper
operator|.
name|setWsdlDefinition
argument_list|(
name|def
argument_list|)
expr_stmt|;
name|typeProcessor
operator|.
name|setWSDLDefinition
argument_list|(
name|def
argument_list|)
expr_stmt|;
name|wsdlParameter
operator|=
operator|new
name|WSDLParameter
argument_list|()
expr_stmt|;
if|if
condition|(
name|idlNamespace
operator|==
literal|null
condition|)
block|{
name|setIdlNamespace
argument_list|(
name|def
argument_list|)
expr_stmt|;
block|}
name|generateNSPrefix
argument_list|(
name|def
argument_list|,
name|getIdlNamespace
argument_list|()
argument_list|,
literal|"ns"
argument_list|)
expr_stmt|;
name|typeProcessor
operator|.
name|process
argument_list|()
expr_stmt|;
name|xmlSchemaList
operator|=
name|typeProcessor
operator|.
name|getXmlSchemaTypes
argument_list|()
expr_stmt|;
name|helper
operator|.
name|setXMLSchemaList
argument_list|(
name|xmlSchemaList
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|PortType
argument_list|>
name|intfs
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|interfaceNames
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|intfs
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|interfaceNames
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|interfaceName
range|:
name|interfaceNames
control|)
block|{
name|PortType
name|portType
init|=
literal|null
decl_stmt|;
name|Map
argument_list|<
name|QName
argument_list|,
name|PortType
argument_list|>
name|portTypes
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
name|def
operator|.
name|getAllPortTypes
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|portTypes
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Entry
argument_list|<
name|QName
argument_list|,
name|PortType
argument_list|>
name|entry
range|:
name|portTypes
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getLocalPart
argument_list|()
operator|.
name|equals
argument_list|(
name|interfaceName
argument_list|)
condition|)
block|{
name|portType
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|portType
operator|=
name|entry
operator|.
name|getValue
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
block|}
if|if
condition|(
name|portType
operator|==
literal|null
condition|)
block|{
name|String
name|msgStr
init|=
literal|"PortType "
operator|+
name|interfaceName
operator|+
literal|" doesn't exist in WSDL."
decl_stmt|;
throw|throw
operator|new
name|Exception
argument_list|(
name|msgStr
argument_list|)
throw|;
block|}
name|intfs
operator|.
name|add
argument_list|(
name|portType
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// gets default portType or all portTypes.
name|intfs
operator|=
name|getPortTypeList
argument_list|()
expr_stmt|;
block|}
name|Binding
index|[]
name|bindings
init|=
operator|new
name|Binding
index|[
name|intfs
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|intfs
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|bindings
index|[
name|i
index|]
operator|=
name|generateCORBABinding
argument_list|(
name|def
argument_list|,
name|intfs
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|generateCORBAServiceForBinding
argument_list|(
name|def
argument_list|,
name|intfs
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|bindings
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|bindings
return|;
block|}
specifier|private
name|List
argument_list|<
name|PortType
argument_list|>
name|getPortTypeList
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|QName
argument_list|,
name|PortType
argument_list|>
name|portTypes
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
name|def
operator|.
name|getAllPortTypes
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|PortType
argument_list|>
name|intfs
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|portTypes
operator|==
literal|null
condition|)
block|{
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
name|msg
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
argument_list|(
literal|"No PortTypes defined in wsdl"
argument_list|,
name|LOG
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|Exception
argument_list|(
name|msg
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
name|PortType
name|portType
init|=
literal|null
decl_stmt|;
name|intfs
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
if|if
condition|(
name|portTypes
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|portType
operator|=
name|portTypes
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
expr_stmt|;
name|interfaceNames
operator|.
name|add
argument_list|(
name|portType
operator|.
name|getQName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
name|intfs
operator|.
name|add
argument_list|(
name|portType
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|portTypes
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
if|if
condition|(
name|def
operator|.
name|getAllBindings
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|throwMultipleMultipleTypeException
argument_list|(
name|CastUtils
operator|.
name|cast
argument_list|(
name|def
operator|.
name|getAllBindings
argument_list|()
operator|.
name|keySet
argument_list|()
argument_list|,
name|QName
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|PortType
name|port
range|:
name|portTypes
operator|.
name|values
argument_list|()
control|)
block|{
name|interfaceNames
operator|.
name|add
argument_list|(
name|port
operator|.
name|getQName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
name|intfs
operator|.
name|add
argument_list|(
name|port
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|intfs
return|;
block|}
specifier|private
name|void
name|throwMultipleMultipleTypeException
parameter_list|(
name|Collection
argument_list|<
name|QName
argument_list|>
name|binds
parameter_list|)
throws|throws
name|Exception
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
name|msgDef
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
argument_list|(
literal|"Multiple Bindings already defined in the wsdl"
argument_list|,
name|LOG
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|msgDef
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|QName
argument_list|>
name|it2
init|=
name|binds
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|int
name|cnt
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|it2
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|cnt
operator|++
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"  "
operator|+
name|cnt
operator|+
literal|" --> "
operator|+
name|it2
operator|.
name|next
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
block|}
throw|throw
operator|new
name|Exception
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
specifier|private
name|Binding
name|generateCORBABinding
parameter_list|(
name|Definition
name|definition
parameter_list|,
name|PortType
name|portType
parameter_list|)
throws|throws
name|Exception
block|{
name|QName
name|bqname
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|extReg
operator|==
literal|null
condition|)
block|{
name|extReg
operator|=
name|def
operator|.
name|getExtensionRegistry
argument_list|()
expr_stmt|;
block|}
name|bindingNames
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|String
name|interfaceName
init|=
name|portType
operator|.
name|getQName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
decl_stmt|;
name|String
name|bname
init|=
name|getMappedBindingName
argument_list|(
name|interfaceName
argument_list|)
decl_stmt|;
name|String
name|prefix
init|=
name|definition
operator|.
name|getPrefix
argument_list|(
name|definition
operator|.
name|getTargetNamespace
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|prefix
operator|==
literal|null
condition|)
block|{
name|prefix
operator|=
literal|""
expr_stmt|;
block|}
if|if
condition|(
name|bname
operator|==
literal|null
operator|&&
operator|!
name|allbindings
condition|)
block|{
name|bname
operator|=
name|bindingName
expr_stmt|;
block|}
if|if
condition|(
name|bname
operator|==
literal|null
condition|)
block|{
name|bname
operator|=
name|mangleInterfaceName
argument_list|(
name|interfaceName
argument_list|)
operator|+
literal|"CORBABinding"
expr_stmt|;
name|setBindingName
argument_list|(
name|bname
argument_list|)
expr_stmt|;
name|bqname
operator|=
operator|new
name|QName
argument_list|(
name|definition
operator|.
name|getTargetNamespace
argument_list|()
argument_list|,
name|bname
argument_list|,
name|prefix
argument_list|)
expr_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|(
name|bname
argument_list|)
decl_stmt|;
while|while
condition|(
name|WSDLToCorbaHelper
operator|.
name|queryBinding
argument_list|(
name|definition
argument_list|,
name|bqname
argument_list|)
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
name|count
argument_list|)
expr_stmt|;
name|bqname
operator|=
operator|new
name|QName
argument_list|(
name|definition
operator|.
name|getTargetNamespace
argument_list|()
argument_list|,
name|builder
operator|.
name|toString
argument_list|()
argument_list|,
name|prefix
argument_list|)
expr_stmt|;
block|}
name|bname
operator|=
name|builder
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|bqname
operator|=
operator|new
name|QName
argument_list|(
name|definition
operator|.
name|getTargetNamespace
argument_list|()
argument_list|,
name|bname
argument_list|,
name|prefix
argument_list|)
expr_stmt|;
comment|// Check if the Binding with name already exists
if|if
condition|(
name|WSDLToCorbaHelper
operator|.
name|queryBinding
argument_list|(
name|definition
argument_list|,
name|bqname
argument_list|)
condition|)
block|{
name|String
name|msgStr
init|=
literal|"Binding "
operator|+
name|bqname
operator|.
name|getLocalPart
argument_list|()
operator|+
literal|" already exists in WSDL."
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
name|msg
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
argument_list|(
name|msgStr
argument_list|,
name|LOG
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|Exception
argument_list|(
name|msg
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|// jwsdl model should have all other bindings in it.
name|String
name|pfx
init|=
name|definition
operator|.
name|getPrefix
argument_list|(
name|CorbaConstants
operator|.
name|NU_WSDL_CORBA
argument_list|)
decl_stmt|;
if|if
condition|(
name|pfx
operator|==
literal|null
condition|)
block|{
name|pfx
operator|=
literal|"corba"
expr_stmt|;
name|def
operator|.
name|addNamespace
argument_list|(
name|pfx
argument_list|,
name|CorbaConstants
operator|.
name|NU_WSDL_CORBA
argument_list|)
expr_stmt|;
block|}
name|Binding
name|binding
init|=
literal|null
decl_stmt|;
name|binding
operator|=
name|def
operator|.
name|createBinding
argument_list|()
expr_stmt|;
name|binding
operator|.
name|setPortType
argument_list|(
name|portType
argument_list|)
expr_stmt|;
name|binding
operator|.
name|setQName
argument_list|(
name|bqname
argument_list|)
expr_stmt|;
name|bindingNames
operator|.
name|add
argument_list|(
name|bname
argument_list|)
expr_stmt|;
name|mapBindingToInterface
argument_list|(
name|portType
operator|.
name|getQName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|,
name|bname
argument_list|)
expr_stmt|;
name|BindingType
name|bindingType
init|=
literal|null
decl_stmt|;
name|addCorbaTypeMap
argument_list|(
name|def
argument_list|)
expr_stmt|;
try|try
block|{
name|bindingType
operator|=
operator|(
name|BindingType
operator|)
name|extReg
operator|.
name|createExtension
argument_list|(
name|Binding
operator|.
name|class
argument_list|,
name|CorbaConstants
operator|.
name|NE_CORBA_BINDING
argument_list|)
expr_stmt|;
name|bindingType
operator|.
name|setRepositoryID
argument_list|(
name|WSDLToCorbaHelper
operator|.
name|REPO_STRING
operator|+
name|binding
operator|.
name|getPortType
argument_list|()
operator|.
name|getQName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
operator|.
name|replace
argument_list|(
literal|'.'
argument_list|,
literal|'/'
argument_list|)
operator|+
name|WSDLToCorbaHelper
operator|.
name|IDL_VERSION
argument_list|)
expr_stmt|;
name|binding
operator|.
name|addExtensibilityElement
argument_list|(
operator|(
name|ExtensibilityElement
operator|)
name|bindingType
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|WSDLException
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
try|try
block|{
name|addBindingOperations
argument_list|(
name|def
argument_list|,
name|portType
argument_list|,
name|binding
argument_list|)
expr_stmt|;
name|binding
operator|.
name|setUndefined
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|definition
operator|.
name|addBinding
argument_list|(
name|binding
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|binding
operator|.
name|setUndefined
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|cleanUpTypeMap
argument_list|(
name|typeMappingType
argument_list|)
expr_stmt|;
return|return
name|binding
return|;
block|}
specifier|private
name|void
name|generateCORBAServiceForBinding
parameter_list|(
name|Definition
name|definition
parameter_list|,
name|PortType
name|portType
parameter_list|,
name|Binding
name|binding
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|extReg
operator|==
literal|null
condition|)
block|{
name|extReg
operator|=
name|def
operator|.
name|getExtensionRegistry
argument_list|()
expr_stmt|;
block|}
name|String
name|interfaceName
init|=
name|portType
operator|.
name|getQName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
decl_stmt|;
name|interfaceName
operator|=
name|mangleInterfaceName
argument_list|(
name|interfaceName
argument_list|)
expr_stmt|;
name|String
name|serviceName
init|=
name|interfaceName
operator|+
literal|"CORBAService"
decl_stmt|;
name|String
name|portName
init|=
name|interfaceName
operator|+
literal|"CORBAPort"
decl_stmt|;
name|String
name|prefix
init|=
name|definition
operator|.
name|getPrefix
argument_list|(
name|definition
operator|.
name|getTargetNamespace
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|prefix
operator|==
literal|null
condition|)
block|{
name|prefix
operator|=
literal|""
expr_stmt|;
block|}
name|String
name|corbaPrefix
init|=
name|definition
operator|.
name|getPrefix
argument_list|(
name|CorbaConstants
operator|.
name|NU_WSDL_CORBA
argument_list|)
decl_stmt|;
if|if
condition|(
name|corbaPrefix
operator|==
literal|null
condition|)
block|{
name|corbaPrefix
operator|=
literal|"corba"
expr_stmt|;
name|def
operator|.
name|addNamespace
argument_list|(
name|corbaPrefix
argument_list|,
name|CorbaConstants
operator|.
name|NU_WSDL_CORBA
argument_list|)
expr_stmt|;
block|}
comment|// Build the service and port information and add it to the wsdl
name|Service
name|service
init|=
name|def
operator|.
name|createService
argument_list|()
decl_stmt|;
name|Port
name|servicePort
init|=
name|def
operator|.
name|createPort
argument_list|()
decl_stmt|;
name|servicePort
operator|.
name|setName
argument_list|(
name|portName
argument_list|)
expr_stmt|;
name|servicePort
operator|.
name|setBinding
argument_list|(
name|binding
argument_list|)
expr_stmt|;
try|try
block|{
name|AddressType
name|addressType
init|=
operator|(
name|AddressType
operator|)
name|def
operator|.
name|getExtensionRegistry
argument_list|()
operator|.
name|createExtension
argument_list|(
name|Port
operator|.
name|class
argument_list|,
name|CorbaConstants
operator|.
name|NE_CORBA_ADDRESS
argument_list|)
decl_stmt|;
name|String
name|addr
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|getAddressFile
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|BufferedReader
name|bufferedReader
init|=
literal|null
decl_stmt|;
try|try
block|{
name|File
name|addrFile
init|=
operator|new
name|File
argument_list|(
name|getAddressFile
argument_list|()
argument_list|)
decl_stmt|;
name|FileReader
name|fileReader
init|=
operator|new
name|FileReader
argument_list|(
name|addrFile
argument_list|)
decl_stmt|;
name|bufferedReader
operator|=
operator|new
name|BufferedReader
argument_list|(
name|fileReader
argument_list|)
expr_stmt|;
name|addr
operator|=
name|bufferedReader
operator|.
name|readLine
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|ToolException
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ex
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|bufferedReader
operator|!=
literal|null
condition|)
block|{
name|bufferedReader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|addr
operator|=
name|getAddress
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|addr
operator|==
literal|null
condition|)
block|{
name|addr
operator|=
literal|"file:./"
operator|+
name|interfaceName
operator|+
literal|".ref"
expr_stmt|;
block|}
name|addressType
operator|.
name|setLocation
argument_list|(
name|addr
argument_list|)
expr_stmt|;
name|servicePort
operator|.
name|addExtensibilityElement
argument_list|(
operator|(
name|ExtensibilityElement
operator|)
name|addressType
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|WSDLException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Failed to create CORBA address for service"
argument_list|,
name|ex
argument_list|)
throw|;
block|}
name|QName
name|serviceQName
init|=
operator|new
name|QName
argument_list|(
name|definition
operator|.
name|getTargetNamespace
argument_list|()
argument_list|,
name|serviceName
argument_list|,
name|prefix
argument_list|)
decl_stmt|;
name|service
operator|.
name|setQName
argument_list|(
name|serviceQName
argument_list|)
expr_stmt|;
name|service
operator|.
name|addPort
argument_list|(
name|servicePort
argument_list|)
expr_stmt|;
name|definition
operator|.
name|addService
argument_list|(
name|service
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|addBindingOperations
parameter_list|(
name|Definition
name|definition
parameter_list|,
name|PortType
name|portType
parameter_list|,
name|Binding
name|binding
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|Operation
argument_list|>
name|ops
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
name|portType
operator|.
name|getOperations
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Operation
name|op
range|:
name|ops
control|)
block|{
try|try
block|{
name|BindingOperation
name|bindingOperation
init|=
name|definition
operator|.
name|createBindingOperation
argument_list|()
decl_stmt|;
name|addCorbaOperationExtElement
argument_list|(
name|bindingOperation
argument_list|,
name|op
argument_list|)
expr_stmt|;
name|bindingOperation
operator|.
name|setName
argument_list|(
name|op
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|op
operator|.
name|getInput
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|BindingInput
name|bindingInput
init|=
name|definition
operator|.
name|createBindingInput
argument_list|()
decl_stmt|;
name|bindingInput
operator|.
name|setName
argument_list|(
name|op
operator|.
name|getInput
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|bindingOperation
operator|.
name|setBindingInput
argument_list|(
name|bindingInput
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|op
operator|.
name|getOutput
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|BindingOutput
name|bindingOutput
init|=
name|definition
operator|.
name|createBindingOutput
argument_list|()
decl_stmt|;
name|bindingOutput
operator|.
name|setName
argument_list|(
name|op
operator|.
name|getOutput
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|bindingOperation
operator|.
name|setBindingOutput
argument_list|(
name|bindingOutput
argument_list|)
expr_stmt|;
block|}
comment|// add Faults
if|if
condition|(
name|op
operator|.
name|getFaults
argument_list|()
operator|!=
literal|null
operator|&&
name|op
operator|.
name|getFaults
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|Collection
argument_list|<
name|Fault
argument_list|>
name|faults
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
name|op
operator|.
name|getFaults
argument_list|()
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Fault
name|fault
range|:
name|faults
control|)
block|{
name|BindingFault
name|bindingFault
init|=
name|definition
operator|.
name|createBindingFault
argument_list|()
decl_stmt|;
name|bindingFault
operator|.
name|setName
argument_list|(
name|fault
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|bindingOperation
operator|.
name|addBindingFault
argument_list|(
name|bindingFault
argument_list|)
expr_stmt|;
block|}
block|}
name|bindingOperation
operator|.
name|setOperation
argument_list|(
name|op
argument_list|)
expr_stmt|;
name|binding
operator|.
name|addBindingOperation
argument_list|(
name|bindingOperation
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|warning
argument_list|(
literal|"Operation "
operator|+
name|op
operator|.
name|getName
argument_list|()
operator|+
literal|" not mapped to CORBA binding."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|addCorbaOperationExtElement
parameter_list|(
name|BindingOperation
name|bo
parameter_list|,
name|Operation
name|op
parameter_list|)
throws|throws
name|Exception
block|{
name|OperationType
name|operationType
init|=
literal|null
decl_stmt|;
try|try
block|{
name|operationType
operator|=
operator|(
name|OperationType
operator|)
name|extReg
operator|.
name|createExtension
argument_list|(
name|BindingOperation
operator|.
name|class
argument_list|,
name|CorbaConstants
operator|.
name|NE_CORBA_OPERATION
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|WSDLException
name|wse
parameter_list|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|SEVERE
argument_list|,
literal|"Failed to create a Binding Operation extension"
argument_list|,
name|wse
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|Exception
argument_list|(
name|LOG
operator|.
name|toString
argument_list|()
argument_list|,
name|wse
argument_list|)
throw|;
block|}
name|operationType
operator|.
name|setName
argument_list|(
name|op
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ParamType
argument_list|>
name|params
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ArgType
argument_list|>
name|returns
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|wsdlParameter
operator|.
name|processParameters
argument_list|(
name|this
argument_list|,
name|op
argument_list|,
name|def
argument_list|,
name|xmlSchemaList
argument_list|,
name|params
argument_list|,
name|returns
argument_list|,
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|ParamType
name|paramtype
range|:
name|params
control|)
block|{
name|operationType
operator|.
name|getParam
argument_list|()
operator|.
name|add
argument_list|(
name|paramtype
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|ArgType
name|retType
range|:
name|returns
control|)
block|{
name|operationType
operator|.
name|setReturn
argument_list|(
name|retType
argument_list|)
expr_stmt|;
block|}
name|Collection
argument_list|<
name|Fault
argument_list|>
name|faults
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
name|op
operator|.
name|getFaults
argument_list|()
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Fault
name|fault
range|:
name|faults
control|)
block|{
name|RaisesType
name|raisestype
init|=
operator|new
name|RaisesType
argument_list|()
decl_stmt|;
name|CorbaType
name|extype
init|=
name|convertFaultToCorbaType
argument_list|(
name|xmlSchemaType
argument_list|,
name|fault
argument_list|)
decl_stmt|;
if|if
condition|(
name|extype
operator|!=
literal|null
condition|)
block|{
name|raisestype
operator|.
name|setException
argument_list|(
name|helper
operator|.
name|createQNameCorbaNamespace
argument_list|(
name|extype
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|operationType
operator|.
name|getRaises
argument_list|()
operator|.
name|add
argument_list|(
name|raisestype
argument_list|)
expr_stmt|;
block|}
block|}
name|bo
operator|.
name|addExtensibilityElement
argument_list|(
operator|(
name|ExtensibilityElement
operator|)
name|operationType
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|addCorbaTypeMap
parameter_list|(
name|Definition
name|definition
parameter_list|)
throws|throws
name|Exception
block|{
name|Iterator
argument_list|<
name|?
argument_list|>
name|t
init|=
name|definition
operator|.
name|getExtensibilityElements
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|?
argument_list|>
name|j
init|=
name|definition
operator|.
name|getExtensibilityElements
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|t
operator|.
name|hasNext
argument_list|()
condition|)
block|{
if|if
condition|(
name|j
operator|.
name|next
argument_list|()
operator|instanceof
name|TypeMappingType
condition|)
block|{
name|typeMappingType
operator|=
operator|(
name|TypeMappingType
operator|)
name|t
operator|.
name|next
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|typeMappingType
operator|==
literal|null
condition|)
block|{
name|typeMappingType
operator|=
operator|(
name|TypeMappingType
operator|)
name|extReg
operator|.
name|createExtension
argument_list|(
name|Definition
operator|.
name|class
argument_list|,
name|CorbaConstants
operator|.
name|NE_CORBA_TYPEMAPPING
argument_list|)
expr_stmt|;
name|typeMappingType
operator|.
name|setTargetNamespace
argument_list|(
name|getIdlNamespace
argument_list|()
argument_list|)
expr_stmt|;
name|definition
operator|.
name|addExtensibilityElement
argument_list|(
operator|(
name|ExtensibilityElement
operator|)
name|typeMappingType
argument_list|)
expr_stmt|;
block|}
name|helper
operator|.
name|setTypeMap
argument_list|(
name|typeMappingType
argument_list|)
expr_stmt|;
name|addCorbaTypes
argument_list|(
name|definition
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|addCorbaTypes
parameter_list|(
name|Definition
name|definition
parameter_list|)
throws|throws
name|Exception
block|{
for|for
control|(
name|XmlSchema
name|xmlSchemaTypes
range|:
name|xmlSchemaList
operator|.
name|getXmlSchemas
argument_list|()
control|)
block|{
for|for
control|(
name|XmlSchemaExternal
name|ext
range|:
name|xmlSchemaTypes
operator|.
name|getExternals
argument_list|()
control|)
block|{
name|addCorbaTypes
argument_list|(
name|ext
operator|.
name|getSchema
argument_list|()
argument_list|)
expr_stmt|;
comment|// REVISIT: This was preventing certain types from being added to the corba
comment|// typemap even when they are referenced from other parts of the wsdl.
comment|//
comment|// Should this add the corba types if it IS an instance of the XmlSchemaImport
comment|// (and not an XmlSchemaInclude or XmlSchemaRedefine)?
comment|//if (!(extSchema instanceof XmlSchemaImport)) {
comment|//    addCorbaTypes(extSchema.getSchema());
comment|//}
block|}
if|if
condition|(
operator|!
name|W3CConstants
operator|.
name|NU_SCHEMA_XSD
operator|.
name|equals
argument_list|(
name|xmlSchemaTypes
operator|.
name|getTargetNamespace
argument_list|()
argument_list|)
condition|)
block|{
name|addCorbaTypes
argument_list|(
name|xmlSchemaTypes
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|addCorbaTypes
parameter_list|(
name|XmlSchema
name|xmlSchemaTypes
parameter_list|)
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|QName
argument_list|,
name|XmlSchemaType
argument_list|>
name|objs
init|=
name|xmlSchemaTypes
operator|.
name|getSchemaTypes
argument_list|()
decl_stmt|;
name|CorbaType
name|corbaTypeImpl
init|=
literal|null
decl_stmt|;
for|for
control|(
name|XmlSchemaType
name|type
range|:
name|objs
operator|.
name|values
argument_list|()
control|)
block|{
name|boolean
name|anonymous
init|=
name|WSDLTypes
operator|.
name|isAnonymous
argument_list|(
name|type
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|corbaTypeImpl
operator|=
name|helper
operator|.
name|convertSchemaToCorbaType
argument_list|(
name|type
argument_list|,
name|type
operator|.
name|getQName
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|anonymous
argument_list|)
expr_stmt|;
if|if
condition|(
name|corbaTypeImpl
operator|!=
literal|null
operator|&&
operator|!
name|helper
operator|.
name|isDuplicate
argument_list|(
name|corbaTypeImpl
argument_list|)
condition|)
block|{
name|typeMappingType
operator|.
name|getStructOrExceptionOrUnion
argument_list|()
operator|.
name|add
argument_list|(
name|corbaTypeImpl
argument_list|)
expr_stmt|;
block|}
block|}
name|addCorbaElements
argument_list|(
name|corbaTypeImpl
argument_list|,
name|xmlSchemaTypes
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|addCorbaElements
parameter_list|(
name|CorbaType
name|corbaTypeImpl
parameter_list|,
name|XmlSchema
name|xmlSchemaTypes
parameter_list|)
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|QName
argument_list|,
name|XmlSchemaElement
argument_list|>
name|elements
init|=
name|xmlSchemaTypes
operator|.
name|getElements
argument_list|()
decl_stmt|;
for|for
control|(
name|XmlSchemaElement
name|el
range|:
name|elements
operator|.
name|values
argument_list|()
control|)
block|{
name|QName
name|elName
init|=
name|el
operator|.
name|getQName
argument_list|()
decl_stmt|;
name|XmlSchemaType
name|schemaType
init|=
name|el
operator|.
name|getSchemaType
argument_list|()
decl_stmt|;
if|if
condition|(
name|elName
operator|==
literal|null
condition|)
block|{
name|elName
operator|=
name|el
operator|.
name|getRef
argument_list|()
operator|.
name|getTargetQName
argument_list|()
expr_stmt|;
name|schemaType
operator|=
name|helper
operator|.
name|getSchemaType
argument_list|(
name|elName
argument_list|)
expr_stmt|;
block|}
name|boolean
name|anonymous
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|schemaType
operator|==
literal|null
condition|)
block|{
name|anonymous
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|anonymous
operator|=
name|WSDLTypes
operator|.
name|isAnonymous
argument_list|(
name|schemaType
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|schemaType
operator|!=
literal|null
condition|)
block|{
name|XmlSchemaAnnotation
name|annotation
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|el
operator|.
name|getAnnotation
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|annotation
operator|=
name|el
operator|.
name|getAnnotation
argument_list|()
expr_stmt|;
block|}
comment|// Check to see if this element references the binding we are creating.  For now,
comment|// this situation won't be handled. REVISIT.
if|if
condition|(
name|annotation
operator|!=
literal|null
condition|)
block|{
name|XmlSchemaAppInfo
name|appInfo
init|=
literal|null
decl_stmt|;
for|for
control|(
name|XmlSchemaAnnotationItem
name|ann
range|:
name|annotation
operator|.
name|getItems
argument_list|()
control|)
block|{
if|if
condition|(
name|ann
operator|instanceof
name|XmlSchemaAppInfo
condition|)
block|{
name|appInfo
operator|=
operator|(
name|XmlSchemaAppInfo
operator|)
name|ann
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|appInfo
operator|!=
literal|null
condition|)
block|{
name|NodeList
name|nlist
init|=
name|appInfo
operator|.
name|getMarkup
argument_list|()
decl_stmt|;
name|Node
name|node
init|=
name|nlist
operator|.
name|item
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|String
name|info
init|=
name|node
operator|.
name|getNodeValue
argument_list|()
decl_stmt|;
name|info
operator|=
name|info
operator|.
name|trim
argument_list|()
expr_stmt|;
name|String
name|annotationBindingName
init|=
literal|""
decl_stmt|;
if|if
condition|(
literal|"corba:binding="
operator|.
name|equals
argument_list|(
name|info
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|14
argument_list|)
argument_list|)
condition|)
block|{
name|annotationBindingName
operator|=
name|info
operator|.
name|substring
argument_list|(
literal|14
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|bindingName
operator|.
name|equals
argument_list|(
name|annotationBindingName
argument_list|)
condition|)
block|{
name|annotation
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
name|corbaTypeImpl
operator|=
name|helper
operator|.
name|convertSchemaToCorbaType
argument_list|(
name|schemaType
argument_list|,
name|elName
argument_list|,
name|schemaType
argument_list|,
name|annotation
argument_list|,
name|anonymous
argument_list|)
expr_stmt|;
if|if
condition|(
name|el
operator|.
name|isNillable
argument_list|()
condition|)
block|{
name|QName
name|uname
init|=
name|helper
operator|.
name|createQNameCorbaNamespace
argument_list|(
name|corbaTypeImpl
operator|.
name|getQName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
operator|+
literal|"_nil"
argument_list|)
decl_stmt|;
name|boolean
name|isQualified
init|=
name|corbaTypeImpl
operator|.
name|isSetQualified
argument_list|()
operator|&&
name|corbaTypeImpl
operator|.
name|isQualified
argument_list|()
decl_stmt|;
name|corbaTypeImpl
operator|=
name|helper
operator|.
name|createNillableUnion
argument_list|(
name|uname
argument_list|,
name|helper
operator|.
name|checkPrefix
argument_list|(
name|elName
argument_list|)
argument_list|,
name|helper
operator|.
name|checkPrefix
argument_list|(
name|corbaTypeImpl
operator|.
name|getQName
argument_list|()
argument_list|)
argument_list|,
name|isQualified
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|corbaTypeImpl
operator|!=
literal|null
operator|&&
operator|!
name|helper
operator|.
name|isDuplicate
argument_list|(
name|corbaTypeImpl
argument_list|)
condition|)
block|{
name|typeMappingType
operator|.
name|getStructOrExceptionOrUnion
argument_list|()
operator|.
name|add
argument_list|(
name|corbaTypeImpl
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|CorbaType
name|convertFaultToCorbaType
parameter_list|(
name|XmlSchema
name|xmlSchema
parameter_list|,
name|Fault
name|fault
parameter_list|)
throws|throws
name|Exception
block|{
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|Exception
name|corbaex
init|=
literal|null
decl_stmt|;
name|XmlSchemaType
name|schemaType
init|=
literal|null
decl_stmt|;
name|Iterator
argument_list|<
name|Part
argument_list|>
name|parts
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
name|fault
operator|.
name|getMessage
argument_list|()
operator|.
name|getParts
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|parts
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|msgStr
init|=
literal|"Fault "
operator|+
name|fault
operator|.
name|getMessage
argument_list|()
operator|.
name|getQName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
operator|+
literal|" UNSUPPORTED_FAULT."
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
name|msg
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
argument_list|(
name|msgStr
argument_list|,
name|LOG
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|Exception
argument_list|(
name|msg
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
name|Part
name|part
init|=
name|parts
operator|.
name|next
argument_list|()
decl_stmt|;
name|schemaType
operator|=
name|helper
operator|.
name|lookUpType
argument_list|(
name|part
argument_list|)
expr_stmt|;
if|if
condition|(
name|schemaType
operator|!=
literal|null
condition|)
block|{
name|QName
name|name
init|=
name|schemaType
operator|.
name|getQName
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
name|name
operator|=
name|part
operator|.
name|getElementName
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|helper
operator|.
name|isSchemaTypeException
argument_list|(
name|schemaType
argument_list|)
condition|)
block|{
name|corbaex
operator|=
operator|new
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|Exception
argument_list|()
expr_stmt|;
name|String
name|faultName
init|=
name|fault
operator|.
name|getMessage
argument_list|()
operator|.
name|getQName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
decl_stmt|;
name|int
name|pos
init|=
name|faultName
operator|.
name|indexOf
argument_list|(
literal|"_exception."
argument_list|)
decl_stmt|;
if|if
condition|(
name|pos
operator|!=
operator|-
literal|1
condition|)
block|{
name|faultName
operator|=
name|faultName
operator|.
name|substring
argument_list|(
name|pos
operator|+
literal|11
argument_list|)
expr_stmt|;
name|faultName
operator|=
name|faultName
operator|+
literal|"Exception"
expr_stmt|;
block|}
name|QName
name|faultMsgName
init|=
name|helper
operator|.
name|createQNameCorbaNamespace
argument_list|(
name|faultName
argument_list|)
decl_stmt|;
name|corbaex
operator|.
name|setName
argument_list|(
name|faultName
argument_list|)
expr_stmt|;
name|corbaex
operator|.
name|setQName
argument_list|(
name|faultMsgName
argument_list|)
expr_stmt|;
name|CorbaType
name|corbaTypeImpl
init|=
name|helper
operator|.
name|convertSchemaToCorbaType
argument_list|(
name|schemaType
argument_list|,
name|name
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|corbaTypeImpl
operator|!=
literal|null
condition|)
block|{
name|MemberType
name|member
init|=
operator|new
name|MemberType
argument_list|()
decl_stmt|;
name|member
operator|.
name|setName
argument_list|(
name|corbaTypeImpl
operator|.
name|getQName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
name|member
operator|.
name|setIdltype
argument_list|(
name|corbaTypeImpl
operator|.
name|getQName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|corbaTypeImpl
operator|.
name|isSetQualified
argument_list|()
operator|&&
name|corbaTypeImpl
operator|.
name|isQualified
argument_list|()
condition|)
block|{
name|member
operator|.
name|setQualified
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|corbaex
operator|.
name|getMember
argument_list|()
operator|.
name|add
argument_list|(
name|member
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|corbaex
operator|=
name|createCorbaException
argument_list|(
name|name
argument_list|,
name|schemaType
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|schemaType
operator|==
literal|null
condition|)
block|{
name|String
name|msgStr
init|=
literal|"Fault "
operator|+
name|fault
operator|.
name|getMessage
argument_list|()
operator|.
name|getQName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
operator|+
literal|" INCORRECT_FAULT_MSG."
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
name|msg
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
argument_list|(
name|msgStr
argument_list|,
name|LOG
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|Exception
argument_list|(
name|msg
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|corbaex
operator|==
literal|null
condition|)
block|{
name|String
name|msgStr
init|=
literal|"Fault "
operator|+
name|fault
operator|.
name|getMessage
argument_list|()
operator|.
name|getQName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
operator|+
literal|" UNSUPPORTED_FAULT."
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
name|msg
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
argument_list|(
name|msgStr
argument_list|,
name|LOG
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|Exception
argument_list|(
name|msg
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
comment|// Set the repository ID for Exception
comment|// add to CorbaTypeMapping
name|String
name|repoId
init|=
name|WSDLToCorbaHelper
operator|.
name|REPO_STRING
operator|+
name|corbaex
operator|.
name|getName
argument_list|()
operator|.
name|replace
argument_list|(
literal|'.'
argument_list|,
literal|'/'
argument_list|)
operator|+
name|WSDLToCorbaHelper
operator|.
name|IDL_VERSION
decl_stmt|;
name|corbaex
operator|.
name|setRepositoryID
argument_list|(
name|repoId
argument_list|)
expr_stmt|;
name|CorbaType
name|corbaTypeImpl
init|=
name|corbaex
decl_stmt|;
if|if
condition|(
operator|!
name|helper
operator|.
name|isDuplicate
argument_list|(
name|corbaTypeImpl
argument_list|)
condition|)
block|{
name|CorbaType
name|dup
init|=
name|helper
operator|.
name|isDuplicateException
argument_list|(
name|corbaTypeImpl
argument_list|)
decl_stmt|;
if|if
condition|(
name|dup
operator|!=
literal|null
condition|)
block|{
name|typeMappingType
operator|.
name|getStructOrExceptionOrUnion
argument_list|()
operator|.
name|remove
argument_list|(
name|dup
argument_list|)
expr_stmt|;
name|typeMappingType
operator|.
name|getStructOrExceptionOrUnion
argument_list|()
operator|.
name|add
argument_list|(
name|corbaTypeImpl
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|typeMappingType
operator|.
name|getStructOrExceptionOrUnion
argument_list|()
operator|.
name|add
argument_list|(
name|corbaTypeImpl
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|corbaex
return|;
block|}
specifier|private
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|Exception
name|createCorbaException
parameter_list|(
name|QName
name|schemaTypeName
parameter_list|,
name|XmlSchemaType
name|stype
parameter_list|)
throws|throws
name|Exception
block|{
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|Exception
name|corbaex
init|=
literal|null
decl_stmt|;
name|XmlSchemaComplexType
name|complex
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|stype
operator|instanceof
name|XmlSchemaComplexType
condition|)
block|{
name|QName
name|defaultName
init|=
name|schemaTypeName
decl_stmt|;
name|complex
operator|=
operator|(
name|XmlSchemaComplexType
operator|)
name|stype
expr_stmt|;
name|corbaex
operator|=
operator|new
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|Exception
argument_list|()
expr_stmt|;
name|corbaex
operator|.
name|setQName
argument_list|(
name|schemaTypeName
argument_list|)
expr_stmt|;
name|corbaex
operator|.
name|setType
argument_list|(
name|helper
operator|.
name|checkPrefix
argument_list|(
name|schemaTypeName
argument_list|)
argument_list|)
expr_stmt|;
name|corbaex
operator|.
name|setName
argument_list|(
name|schemaTypeName
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
name|corbaex
operator|.
name|setRepositoryID
argument_list|(
name|WSDLToCorbaHelper
operator|.
name|REPO_STRING
operator|+
literal|"/"
operator|+
name|defaultName
operator|.
name|getLocalPart
argument_list|()
operator|+
name|WSDLToCorbaHelper
operator|.
name|IDL_VERSION
argument_list|)
expr_stmt|;
name|String
name|uri
init|=
name|defaultName
operator|.
name|getNamespaceURI
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|MemberType
argument_list|>
name|attributeMembers
init|=
name|helper
operator|.
name|processAttributesAsMembers
argument_list|(
name|complex
operator|.
name|getAttributes
argument_list|()
argument_list|,
name|uri
argument_list|)
decl_stmt|;
for|for
control|(
name|MemberType
name|memberType
range|:
name|attributeMembers
control|)
block|{
name|corbaex
operator|.
name|getMember
argument_list|()
operator|.
name|add
argument_list|(
name|memberType
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|MemberType
argument_list|>
name|members
init|=
name|helper
operator|.
name|processContainerAsMembers
argument_list|(
name|complex
operator|.
name|getParticle
argument_list|()
argument_list|,
name|stype
operator|.
name|getQName
argument_list|()
argument_list|,
name|defaultName
argument_list|)
decl_stmt|;
for|for
control|(
name|MemberType
name|memberType
range|:
name|members
control|)
block|{
name|corbaex
operator|.
name|getMember
argument_list|()
operator|.
name|add
argument_list|(
name|memberType
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|corbaex
return|;
block|}
specifier|public
name|void
name|setWsdlFile
parameter_list|(
name|String
name|file
parameter_list|)
block|{
name|wsdlFileName
operator|=
name|file
expr_stmt|;
block|}
specifier|public
name|String
name|getWsdlFileName
parameter_list|()
block|{
return|return
name|wsdlFileName
return|;
block|}
specifier|public
name|void
name|setIdlNamespace
parameter_list|(
name|Definition
name|definition
parameter_list|)
block|{
if|if
condition|(
name|idlNamespace
operator|==
literal|null
condition|)
block|{
name|String
name|tns
init|=
name|definition
operator|.
name|getTargetNamespace
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|tns
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|tns
operator|+=
literal|"/"
expr_stmt|;
block|}
name|idlNamespace
operator|=
name|tns
operator|+
literal|"corba/typemap/"
expr_stmt|;
block|}
name|setNamespace
argument_list|(
name|idlNamespace
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getIdlNamespace
parameter_list|()
block|{
return|return
name|idlNamespace
return|;
block|}
specifier|public
name|void
name|generateNSPrefix
parameter_list|(
name|Definition
name|definition
parameter_list|,
name|String
name|namespaceURI
parameter_list|,
name|String
name|str
parameter_list|)
block|{
name|String
name|pfx
init|=
name|def
operator|.
name|getPrefix
argument_list|(
name|namespaceURI
argument_list|)
decl_stmt|;
if|if
condition|(
name|pfx
operator|!=
literal|null
condition|)
block|{
return|return;
block|}
name|int
name|cnt
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|pfx
operator|==
literal|null
condition|)
block|{
name|cnt
operator|++
expr_stmt|;
name|pfx
operator|=
name|str
operator|+
name|cnt
expr_stmt|;
if|if
condition|(
name|def
operator|.
name|getNamespace
argument_list|(
name|pfx
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|pfx
operator|=
literal|null
expr_stmt|;
block|}
block|}
name|def
operator|.
name|addNamespace
argument_list|(
name|pfx
argument_list|,
name|namespaceURI
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setBindingName
parameter_list|(
name|String
name|bname
parameter_list|)
block|{
name|bindingName
operator|=
name|bname
expr_stmt|;
block|}
specifier|public
name|void
name|mapBindingToInterface
parameter_list|(
name|String
name|intfName
parameter_list|,
name|String
name|bName
parameter_list|)
block|{
name|bindingNameMap
operator|.
name|put
argument_list|(
name|intfName
argument_list|,
name|bName
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getMappedBindingName
parameter_list|(
name|String
name|interfaceName
parameter_list|)
block|{
return|return
operator|(
name|String
operator|)
name|bindingNameMap
operator|.
name|get
argument_list|(
name|interfaceName
argument_list|)
return|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getGeneratedBindingNames
parameter_list|()
block|{
return|return
name|bindingNames
return|;
block|}
specifier|private
name|String
name|mangleInterfaceName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|int
name|idx
init|=
name|name
operator|.
name|indexOf
argument_list|(
literal|"PortType"
argument_list|)
decl_stmt|;
if|if
condition|(
name|idx
operator|!=
operator|-
literal|1
condition|)
block|{
return|return
name|name
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|idx
argument_list|)
return|;
block|}
return|return
name|name
return|;
block|}
specifier|public
name|QName
name|convertToQName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|String
name|namespaceName
init|=
literal|null
decl_stmt|;
name|String
name|nametype
init|=
literal|null
decl_stmt|;
name|String
name|pfx
init|=
literal|""
decl_stmt|;
name|int
name|i
init|=
name|name
operator|.
name|lastIndexOf
argument_list|(
literal|"}"
argument_list|)
decl_stmt|;
name|int
name|i2
init|=
name|name
operator|.
name|indexOf
argument_list|(
literal|"}"
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|>=
literal|1
condition|)
block|{
if|if
condition|(
name|i
operator|==
name|i2
condition|)
block|{
name|namespaceName
operator|=
name|name
operator|.
name|substring
argument_list|(
literal|1
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|nametype
operator|=
name|name
operator|.
name|substring
argument_list|(
name|i
operator|+
literal|1
argument_list|,
name|name
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|namespaceName
operator|=
name|name
operator|.
name|substring
argument_list|(
literal|1
argument_list|,
name|i2
argument_list|)
expr_stmt|;
name|pfx
operator|=
name|name
operator|.
name|substring
argument_list|(
name|i2
operator|+
literal|2
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|nametype
operator|=
name|name
operator|.
name|substring
argument_list|(
name|i
operator|+
literal|1
argument_list|,
name|name
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|QName
argument_list|(
name|namespaceName
argument_list|,
name|nametype
argument_list|,
name|pfx
argument_list|)
return|;
block|}
specifier|public
name|void
name|setOutputDirectory
parameter_list|(
name|String
name|dir
parameter_list|)
block|{
comment|// Force directory creation
comment|// before setting output directory
if|if
condition|(
name|dir
operator|!=
literal|null
condition|)
block|{
name|File
name|fileOutputDir
init|=
operator|new
name|File
argument_list|(
name|dir
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fileOutputDir
operator|.
name|exists
argument_list|()
condition|)
block|{
name|fileOutputDir
operator|.
name|mkdir
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|setExtensionRegistry
parameter_list|(
name|ExtensionRegistry
name|reg
parameter_list|)
block|{
name|extReg
operator|=
name|reg
expr_stmt|;
block|}
specifier|public
name|ExtensionRegistry
name|getExtensionRegistry
parameter_list|()
block|{
return|return
name|extReg
return|;
block|}
specifier|public
name|void
name|setAddress
parameter_list|(
name|String
name|addr
parameter_list|)
block|{
name|address
operator|=
name|addr
expr_stmt|;
block|}
specifier|public
name|String
name|getAddress
parameter_list|()
block|{
return|return
name|address
return|;
block|}
specifier|public
name|void
name|setAddressFile
parameter_list|(
name|String
name|addrFile
parameter_list|)
block|{
name|addressFile
operator|=
name|addrFile
expr_stmt|;
block|}
specifier|public
name|String
name|getAddressFile
parameter_list|()
block|{
return|return
name|addressFile
return|;
block|}
specifier|public
name|void
name|setOutputFile
parameter_list|(
name|String
name|file
parameter_list|)
block|{
name|outputFile
operator|=
name|file
expr_stmt|;
block|}
specifier|public
name|void
name|setNamespace
parameter_list|(
name|String
name|nameSpaceName
parameter_list|)
block|{
name|idlNamespace
operator|=
name|nameSpaceName
expr_stmt|;
name|helper
operator|.
name|setIdlNamespace
argument_list|(
name|idlNamespace
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addInterfaceName
parameter_list|(
name|String
name|interfaceName
parameter_list|)
block|{
name|interfaceNames
operator|.
name|add
argument_list|(
name|interfaceName
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getInterfaceNames
parameter_list|()
block|{
return|return
name|interfaceNames
return|;
block|}
specifier|public
name|void
name|setVerboseOn
parameter_list|(
name|boolean
name|verbose
parameter_list|)
block|{
name|verboseOn
operator|=
name|verbose
expr_stmt|;
block|}
specifier|public
name|void
name|setAllBindings
parameter_list|(
name|boolean
name|all
parameter_list|)
block|{
name|allbindings
operator|=
name|all
expr_stmt|;
block|}
specifier|public
name|boolean
name|isGenerateAllBindings
parameter_list|()
block|{
return|return
name|allbindings
return|;
block|}
specifier|public
name|void
name|cleanUpTypeMap
parameter_list|(
name|TypeMappingType
name|typeMap
parameter_list|)
block|{
name|List
argument_list|<
name|CorbaType
argument_list|>
name|types
init|=
name|typeMap
operator|.
name|getStructOrExceptionOrUnion
argument_list|()
decl_stmt|;
if|if
condition|(
name|types
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|types
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|CorbaType
name|type
init|=
name|types
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|.
name|getQName
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|type
operator|.
name|setName
argument_list|(
name|type
operator|.
name|getQName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
name|type
operator|.
name|setQName
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
name|void
name|main
parameter_list|(
name|String
name|args
index|[]
parameter_list|)
block|{
if|if
condition|(
name|args
operator|.
name|length
operator|!=
literal|6
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"usage: WSDLToCORBABinding "
operator|+
literal|"-w<wsdl file> -i<interfaceName> -o<output wsdl file>"
argument_list|)
expr_stmt|;
return|return;
block|}
try|try
block|{
name|WSDLToCorbaBinding
name|wsdlToCorbaBinding
init|=
operator|new
name|WSDLToCorbaBinding
argument_list|()
decl_stmt|;
name|wsdlToCorbaBinding
operator|.
name|setWsdlFile
argument_list|(
name|args
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|wsdlToCorbaBinding
operator|.
name|addInterfaceName
argument_list|(
name|args
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|wsdlToCorbaBinding
operator|.
name|setOutputDirectory
argument_list|(
literal|"."
argument_list|)
expr_stmt|;
name|wsdlToCorbaBinding
operator|.
name|generateCORBABinding
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Error : "
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|()
expr_stmt|;
if|if
condition|(
name|verboseOn
condition|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

