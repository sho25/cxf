begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|corba
operator|.
name|processors
operator|.
name|idl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|corba
operator|.
name|common
operator|.
name|ToolCorbaConstants
import|;
end_import

begin_class
specifier|public
class|class
name|ModuleToNSMapper
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|userMap
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|exModules
decl_stmt|;
name|boolean
name|defaultMapping
init|=
literal|true
decl_stmt|;
specifier|public
name|ModuleToNSMapper
parameter_list|()
block|{
name|userMap
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|exModules
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|setDefaultMapping
parameter_list|(
name|boolean
name|flag
parameter_list|)
block|{
name|defaultMapping
operator|=
name|flag
expr_stmt|;
block|}
specifier|public
name|boolean
name|isDefaultMapping
parameter_list|()
block|{
return|return
name|defaultMapping
return|;
block|}
specifier|public
name|void
name|setUserMapping
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
parameter_list|)
block|{
name|userMap
operator|=
name|map
expr_stmt|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getUserMapping
parameter_list|()
block|{
return|return
name|userMap
return|;
block|}
specifier|public
name|void
name|setExcludedModuleMap
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|map
parameter_list|)
block|{
name|exModules
operator|=
name|map
expr_stmt|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|getExcludedModuleMap
parameter_list|()
block|{
return|return
name|exModules
return|;
block|}
specifier|public
name|Iterator
argument_list|<
name|String
argument_list|>
name|getExcludedModules
parameter_list|()
block|{
return|return
name|exModules
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
return|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getExcludedImports
parameter_list|(
name|String
name|module
parameter_list|)
block|{
return|return
name|exModules
operator|.
name|get
argument_list|(
name|module
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|containsExcludedModule
parameter_list|(
name|String
name|module
parameter_list|)
block|{
return|return
name|exModules
operator|.
name|containsKey
argument_list|(
name|module
argument_list|)
return|;
block|}
specifier|public
name|String
name|map
parameter_list|(
name|String
name|scopeStr
parameter_list|,
name|String
name|separator
parameter_list|)
block|{
name|Scope
name|scope
init|=
operator|new
name|Scope
argument_list|(
name|scopeStr
argument_list|,
name|separator
argument_list|)
decl_stmt|;
return|return
name|map
argument_list|(
name|scope
argument_list|)
return|;
block|}
specifier|public
name|String
name|map
parameter_list|(
name|Scope
name|scope
parameter_list|)
block|{
return|return
name|map
argument_list|(
name|scope
argument_list|,
name|ToolCorbaConstants
operator|.
name|MODULE_SEPARATOR
argument_list|)
return|;
block|}
specifier|public
name|String
name|map
parameter_list|(
name|Scope
name|scope
parameter_list|,
name|String
name|separator
parameter_list|)
block|{
if|if
condition|(
name|defaultMapping
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
name|String
name|uri
init|=
name|userMap
operator|.
name|get
argument_list|(
name|scope
operator|.
name|toString
argument_list|(
name|separator
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|uri
operator|==
literal|null
condition|)
block|{
comment|//try the parent scope for mapping
name|Scope
name|currentScope
init|=
name|scope
decl_stmt|;
name|String
name|parentURI
init|=
literal|null
decl_stmt|;
name|uri
operator|=
literal|""
expr_stmt|;
while|while
condition|(
name|parentURI
operator|==
literal|null
operator|&&
operator|!
name|currentScope
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
operator|&&
name|currentScope
operator|!=
name|currentScope
operator|.
name|getParent
argument_list|()
condition|)
block|{
name|parentURI
operator|=
name|userMap
operator|.
name|get
argument_list|(
name|currentScope
operator|.
name|toString
argument_list|(
name|separator
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|parentURI
operator|==
literal|null
condition|)
block|{
if|if
condition|(
operator|!
literal|""
operator|.
name|equals
argument_list|(
name|uri
argument_list|)
condition|)
block|{
name|uri
operator|=
literal|"/"
operator|+
name|uri
expr_stmt|;
block|}
name|uri
operator|=
name|currentScope
operator|.
name|tail
argument_list|()
operator|+
name|uri
expr_stmt|;
block|}
name|currentScope
operator|=
name|currentScope
operator|.
name|getParent
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|parentURI
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|parentURI
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|parentURI
operator|=
name|parentURI
operator|+
literal|"/"
expr_stmt|;
block|}
name|uri
operator|=
name|parentURI
operator|+
name|uri
expr_stmt|;
block|}
else|else
block|{
name|uri
operator|=
literal|"urn:"
operator|+
name|uri
expr_stmt|;
block|}
block|}
return|return
name|uri
return|;
block|}
block|}
specifier|public
name|String
name|mapToQName
parameter_list|(
name|Scope
name|scope
parameter_list|)
block|{
if|if
condition|(
name|defaultMapping
condition|)
block|{
return|return
name|scope
operator|.
name|toString
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|scope
operator|.
name|tail
argument_list|()
return|;
block|}
block|}
specifier|public
name|String
name|mapNSToPrefix
parameter_list|(
name|String
name|nsURI
parameter_list|)
block|{
name|int
name|pos
init|=
name|nsURI
operator|.
name|indexOf
argument_list|(
literal|":"
argument_list|)
decl_stmt|;
if|if
condition|(
name|pos
operator|!=
operator|-
literal|1
condition|)
block|{
name|nsURI
operator|=
name|nsURI
operator|.
name|substring
argument_list|(
name|pos
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
name|nsURI
operator|.
name|replaceAll
argument_list|(
literal|"/"
argument_list|,
literal|"_"
argument_list|)
return|;
block|}
block|}
end_class

end_unit

