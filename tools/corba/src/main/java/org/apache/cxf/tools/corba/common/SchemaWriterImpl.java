begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|corba
operator|.
name|common
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStreamWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|Definition
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|Types
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|WSDLException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|extensions
operator|.
name|ExtensibilityElement
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|extensions
operator|.
name|schema
operator|.
name|Schema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Attr
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NamedNodeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|ibm
operator|.
name|wsdl
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|com
operator|.
name|ibm
operator|.
name|wsdl
operator|.
name|util
operator|.
name|xml
operator|.
name|DOM2Writer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|ibm
operator|.
name|wsdl
operator|.
name|xml
operator|.
name|WSDLWriterImpl
import|;
end_import

begin_comment
comment|/*   * This class is extending the wsdl4j RI class to print out the    * extensibility elements of the schema into a separate file.   *    */
end_comment

begin_class
specifier|public
class|class
name|SchemaWriterImpl
extends|extends
name|WSDLWriterImpl
block|{
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_INDENT_LEVEL
init|=
literal|0
decl_stmt|;
comment|/**      * Write the specified schema of the WSDL definition       * to the specified Writer.      *       * @param wsdlDef contains the schema to be written.      * @param sink the Writer to write the xml to.      */
specifier|public
name|void
name|writeWSDL
parameter_list|(
name|Definition
name|wsdlDef
parameter_list|,
name|Writer
name|sink
parameter_list|)
throws|throws
name|WSDLException
block|{
name|PrintWriter
name|pw
init|=
operator|new
name|PrintWriter
argument_list|(
name|sink
argument_list|)
decl_stmt|;
name|String
name|javaEncoding
init|=
operator|(
name|sink
operator|instanceof
name|OutputStreamWriter
operator|)
condition|?
operator|(
operator|(
name|OutputStreamWriter
operator|)
name|sink
operator|)
operator|.
name|getEncoding
argument_list|()
else|:
literal|null
decl_stmt|;
name|String
name|xmlEncoding
init|=
name|DOM2Writer
operator|.
name|java2XMLEncoding
argument_list|(
name|javaEncoding
argument_list|)
decl_stmt|;
if|if
condition|(
name|xmlEncoding
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|WSDLException
argument_list|(
name|WSDLException
operator|.
name|CONFIGURATION_ERROR
argument_list|,
literal|"Unsupported Java encoding for writing "
operator|+
literal|"schema file: '"
operator|+
name|javaEncoding
operator|+
literal|"'."
argument_list|)
throw|;
block|}
name|pw
operator|.
name|println
argument_list|(
name|Constants
operator|.
name|XML_DECL_START
operator|+
name|xmlEncoding
operator|+
name|Constants
operator|.
name|XML_DECL_END
argument_list|)
expr_stmt|;
name|printSchema
argument_list|(
name|wsdlDef
argument_list|,
name|pw
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|printSchema
parameter_list|(
name|Definition
name|def
parameter_list|,
name|PrintWriter
name|pw
parameter_list|)
throws|throws
name|WSDLException
block|{
if|if
condition|(
name|def
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|Types
name|types
init|=
name|def
operator|.
name|getTypes
argument_list|()
decl_stmt|;
if|if
condition|(
name|types
operator|!=
literal|null
condition|)
block|{
name|List
name|extElements
init|=
name|types
operator|.
name|getExtensibilityElements
argument_list|()
decl_stmt|;
name|printExtensibilityElements
argument_list|(
name|Types
operator|.
name|class
argument_list|,
name|extElements
argument_list|,
name|def
argument_list|,
name|pw
argument_list|)
expr_stmt|;
block|}
name|pw
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|printExtensibilityElements
parameter_list|(
name|Class
name|class1
parameter_list|,
name|List
name|list
parameter_list|,
name|Definition
name|def
parameter_list|,
name|PrintWriter
name|pw
parameter_list|)
throws|throws
name|WSDLException
block|{
if|if
condition|(
name|list
operator|!=
literal|null
condition|)
block|{
name|Iterator
name|it
init|=
name|list
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|ExtensibilityElement
name|extElement
init|=
operator|(
name|ExtensibilityElement
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|extElement
operator|instanceof
name|Schema
condition|)
block|{
name|printDOMElement
argument_list|(
operator|(
operator|(
name|Schema
operator|)
name|extElement
operator|)
operator|.
name|getElement
argument_list|()
argument_list|,
name|pw
argument_list|,
name|DEFAULT_INDENT_LEVEL
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|super
operator|.
name|printExtensibilityElements
argument_list|(
name|class1
argument_list|,
name|list
argument_list|,
name|def
argument_list|,
name|pw
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|void
name|printDOMElement
parameter_list|(
name|Element
name|element
parameter_list|,
name|PrintWriter
name|pw
parameter_list|,
name|int
name|indentCount
parameter_list|)
block|{
name|indent
argument_list|(
name|pw
argument_list|,
name|indentCount
argument_list|)
expr_stmt|;
if|if
condition|(
name|element
operator|.
name|getLocalName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"schema"
argument_list|)
condition|)
block|{
name|pw
operator|.
name|print
argument_list|(
literal|"<xs:"
operator|+
name|element
operator|.
name|getLocalName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|pw
operator|.
name|print
argument_list|(
literal|"<"
operator|+
name|element
operator|.
name|getNodeName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|NamedNodeMap
name|attrs
init|=
name|element
operator|.
name|getAttributes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|attrs
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Attr
name|attr
init|=
operator|(
name|Attr
operator|)
name|attrs
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|pw
operator|.
name|print
argument_list|(
literal|" "
operator|+
name|attr
operator|.
name|getName
argument_list|()
operator|+
literal|"=\""
operator|+
name|attr
operator|.
name|getValue
argument_list|()
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
name|pw
operator|.
name|print
argument_list|(
literal|">"
argument_list|)
expr_stmt|;
name|NodeList
name|list
init|=
name|element
operator|.
name|getChildNodes
argument_list|()
decl_stmt|;
name|pw
operator|.
name|println
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|list
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Node
name|node
init|=
name|list
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|ELEMENT_NODE
condition|)
block|{
name|printDOMElement
argument_list|(
operator|(
name|Element
operator|)
name|node
argument_list|,
name|pw
argument_list|,
name|indentCount
operator|+
literal|2
argument_list|)
expr_stmt|;
name|pw
operator|.
name|println
argument_list|()
expr_stmt|;
block|}
block|}
name|indent
argument_list|(
name|pw
argument_list|,
name|indentCount
argument_list|)
expr_stmt|;
if|if
condition|(
name|element
operator|.
name|getLocalName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"schema"
argument_list|)
condition|)
block|{
name|pw
operator|.
name|print
argument_list|(
literal|"</xs:"
operator|+
name|element
operator|.
name|getLocalName
argument_list|()
operator|+
literal|">"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|pw
operator|.
name|print
argument_list|(
literal|"</"
operator|+
name|element
operator|.
name|getNodeName
argument_list|()
operator|+
literal|">"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|indent
parameter_list|(
name|PrintWriter
name|pw
parameter_list|,
name|int
name|count
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|pw
operator|.
name|print
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

