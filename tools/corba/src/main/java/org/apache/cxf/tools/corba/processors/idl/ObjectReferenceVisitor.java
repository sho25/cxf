begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|corba
operator|.
name|processors
operator|.
name|idl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|Binding
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|Definition
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilderFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|ParserConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|collections
operator|.
name|AST
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|BindingType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|CorbaTypeImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|Object
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|CastUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|corba
operator|.
name|common
operator|.
name|ReferenceConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaAnnotation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaAppInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaElement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaExternal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaImport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaSimpleType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|utils
operator|.
name|NamespaceMap
import|;
end_import

begin_class
specifier|public
class|class
name|ObjectReferenceVisitor
extends|extends
name|VisitorBase
block|{
specifier|private
name|WSDLASTVisitor
name|objRefWsdlVisitor
decl_stmt|;
specifier|public
name|ObjectReferenceVisitor
parameter_list|(
name|Scope
name|scope
parameter_list|,
name|Definition
name|defn
parameter_list|,
name|XmlSchema
name|schemaRef
parameter_list|,
name|WSDLASTVisitor
name|wsdlVisitor
parameter_list|)
block|{
name|super
argument_list|(
name|scope
argument_list|,
name|defn
argument_list|,
name|schemaRef
argument_list|,
name|wsdlVisitor
argument_list|)
expr_stmt|;
name|objRefWsdlVisitor
operator|=
name|wsdlVisitor
expr_stmt|;
block|}
specifier|public
specifier|static
name|boolean
name|accept
parameter_list|(
name|Scope
name|scope
parameter_list|,
name|XmlSchema
name|s
parameter_list|,
name|Definition
name|def
parameter_list|,
name|AST
name|node
parameter_list|,
name|WSDLASTVisitor
name|wsdlVisitor
parameter_list|)
block|{
name|boolean
name|result
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|node
operator|.
name|getType
argument_list|()
operator|==
name|IDLTokenTypes
operator|.
name|LITERAL_Object
condition|)
block|{
name|result
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|node
operator|.
name|getType
argument_list|()
operator|==
name|IDLTokenTypes
operator|.
name|IDENT
operator|&&
name|hasBinding
argument_list|(
name|scope
argument_list|,
name|s
argument_list|,
name|def
argument_list|,
name|node
argument_list|,
name|wsdlVisitor
argument_list|)
condition|)
block|{
name|result
operator|=
literal|true
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|public
name|void
name|visit
parameter_list|(
name|AST
name|node
parameter_list|)
block|{
if|if
condition|(
operator|!
name|objRefWsdlVisitor
operator|.
name|getDeclaredWSAImport
argument_list|()
condition|)
block|{
name|addWSAddressingImport
argument_list|(
name|schema
argument_list|)
expr_stmt|;
block|}
name|objRefWsdlVisitor
operator|.
name|setDeclaredWSAImport
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// There are two types of object references we can encounter.  Each one
comment|// requires us to do something differnt so we'll have methods for each
comment|// type. Also need to check if its a forward declared object reference.
if|if
condition|(
name|isForwardDeclaredReference
argument_list|(
name|getScope
argument_list|()
argument_list|,
name|schema
argument_list|,
name|node
argument_list|,
name|scopedNames
argument_list|,
name|wsdlVisitor
argument_list|)
condition|)
block|{
name|visitForwardDeclaredObjectReference
argument_list|(
name|getScope
argument_list|()
argument_list|,
name|schemas
argument_list|,
name|schema
argument_list|,
name|node
argument_list|,
name|scopedNames
argument_list|,
name|wsdlVisitor
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|node
operator|.
name|getType
argument_list|()
operator|==
name|IDLTokenTypes
operator|.
name|LITERAL_Object
condition|)
block|{
name|visitDefaultTypeObjectReference
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// This should be of type IDENT
name|visitCustomTypeObjectReference
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|visitDefaultTypeObjectReference
parameter_list|(
name|AST
name|node
parameter_list|)
block|{
comment|// Even though we don't need to add a schema definition for a default endpoint
comment|// type, we still need to create a schema type so that the visitor knows what
comment|// kind of parameter this is.  For a default endpoint, we'll just provide a
comment|// reference to a WS addressing EndpointReferenceType.
name|XmlSchema
name|scs
index|[]
init|=
name|schemas
operator|.
name|getXmlSchema
argument_list|(
name|ReferenceConstants
operator|.
name|WSADDRESSING_NAMESPACE
argument_list|)
decl_stmt|;
name|XmlSchema
name|wsaSchema
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|scs
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|XmlSchema
name|sc
range|:
name|scs
control|)
block|{
if|if
condition|(
name|ReferenceConstants
operator|.
name|WSADDRESSING_NAMESPACE
operator|.
name|equals
argument_list|(
name|sc
operator|.
name|getTargetNamespace
argument_list|()
argument_list|)
condition|)
block|{
name|wsaSchema
operator|=
name|sc
expr_stmt|;
break|break;
block|}
block|}
block|}
if|if
condition|(
name|wsaSchema
operator|==
literal|null
condition|)
block|{
name|wsaSchema
operator|=
operator|new
name|XmlSchema
argument_list|(
name|ReferenceConstants
operator|.
name|WSADDRESSING_NAMESPACE
argument_list|,
name|schemas
argument_list|)
expr_stmt|;
block|}
name|XmlSchemaType
name|objectType
init|=
operator|new
name|XmlSchemaSimpleType
argument_list|(
name|wsaSchema
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|objectType
operator|.
name|setName
argument_list|(
name|ReferenceConstants
operator|.
name|WSADDRESSING_LOCAL_NAME
argument_list|)
expr_stmt|;
name|setSchemaType
argument_list|(
name|objectType
argument_list|)
expr_stmt|;
comment|// Build and assign the corba:object to the visitor
name|Object
name|corbaObject
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|corbaObject
operator|.
name|setQName
argument_list|(
operator|new
name|QName
argument_list|(
name|typeMap
operator|.
name|getTargetNamespace
argument_list|()
argument_list|,
literal|"CORBA.Object"
argument_list|)
argument_list|)
expr_stmt|;
name|corbaObject
operator|.
name|setRepositoryID
argument_list|(
literal|"IDL:omg.org/CORBA/Object/1.0"
argument_list|)
expr_stmt|;
name|corbaObject
operator|.
name|setType
argument_list|(
name|objectType
operator|.
name|getQName
argument_list|()
argument_list|)
expr_stmt|;
name|setCorbaType
argument_list|(
name|corbaObject
argument_list|)
expr_stmt|;
comment|// Add the object definition to the typemap.  We only need to add the default
comment|// type once.
if|if
condition|(
operator|!
name|isReferenceCORBATypeDefined
argument_list|(
name|corbaObject
operator|.
name|getQName
argument_list|()
argument_list|)
condition|)
block|{
name|typeMap
operator|.
name|getStructOrExceptionOrUnion
argument_list|()
operator|.
name|add
argument_list|(
name|corbaObject
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|visitCustomTypeObjectReference
parameter_list|(
name|AST
name|node
parameter_list|)
block|{
name|QName
name|bindingName
init|=
literal|null
decl_stmt|;
name|QName
name|referenceName
init|=
literal|null
decl_stmt|;
name|String
name|repositoryID
init|=
literal|null
decl_stmt|;
name|Scope
name|currentScope
init|=
name|getScope
argument_list|()
decl_stmt|;
name|Scope
name|customScope
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|(
name|node
operator|.
name|getFirstChild
argument_list|()
operator|==
literal|null
operator|)
operator|||
operator|(
name|node
operator|.
name|getFirstChild
argument_list|()
operator|!=
literal|null
operator|&&
name|node
operator|.
name|getFirstChild
argument_list|()
operator|.
name|getType
argument_list|()
operator|!=
name|IDLTokenTypes
operator|.
name|SCOPEOP
operator|)
condition|)
block|{
while|while
condition|(
name|bindingName
operator|==
literal|null
operator|&&
name|currentScope
operator|!=
name|currentScope
operator|.
name|getParent
argument_list|()
condition|)
block|{
if|if
condition|(
name|ScopedNameVisitor
operator|.
name|isFullyScopedName
argument_list|(
name|node
argument_list|)
condition|)
block|{
name|customScope
operator|=
name|ScopedNameVisitor
operator|.
name|getFullyScopedName
argument_list|(
name|currentScope
argument_list|,
name|node
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|customScope
operator|=
operator|new
name|Scope
argument_list|(
name|currentScope
argument_list|,
name|node
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|mapper
operator|.
name|isDefaultMapping
argument_list|()
condition|)
block|{
name|referenceName
operator|=
operator|new
name|QName
argument_list|(
name|schema
operator|.
name|getTargetNamespace
argument_list|()
argument_list|,
name|customScope
operator|.
name|toString
argument_list|()
operator|+
literal|"Ref"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|tns
init|=
name|mapper
operator|.
name|map
argument_list|(
name|customScope
operator|.
name|getParent
argument_list|()
argument_list|)
decl_stmt|;
name|referenceName
operator|=
operator|new
name|QName
argument_list|(
name|tns
argument_list|,
name|customScope
operator|.
name|tail
argument_list|()
operator|+
literal|"Ref"
argument_list|)
expr_stmt|;
block|}
name|repositoryID
operator|=
name|customScope
operator|.
name|toIDLRepositoryID
argument_list|()
expr_stmt|;
name|bindingName
operator|=
name|getBindingQNameByID
argument_list|(
name|definition
argument_list|,
name|repositoryID
argument_list|,
name|objRefWsdlVisitor
argument_list|)
expr_stmt|;
name|currentScope
operator|=
name|currentScope
operator|.
name|getParent
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|bindingName
operator|==
literal|null
condition|)
block|{
comment|// Global scope is our last chance to resolve the node
if|if
condition|(
name|ScopedNameVisitor
operator|.
name|isFullyScopedName
argument_list|(
name|node
argument_list|)
condition|)
block|{
name|customScope
operator|=
name|ScopedNameVisitor
operator|.
name|getFullyScopedName
argument_list|(
operator|new
name|Scope
argument_list|()
argument_list|,
name|node
argument_list|)
expr_stmt|;
if|if
condition|(
name|mapper
operator|.
name|isDefaultMapping
argument_list|()
condition|)
block|{
name|referenceName
operator|=
operator|new
name|QName
argument_list|(
name|schema
operator|.
name|getTargetNamespace
argument_list|()
argument_list|,
name|customScope
operator|.
name|toString
argument_list|()
operator|+
literal|"Ref"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|tns
init|=
name|mapper
operator|.
name|map
argument_list|(
name|customScope
operator|.
name|getParent
argument_list|()
argument_list|)
decl_stmt|;
name|referenceName
operator|=
operator|new
name|QName
argument_list|(
name|tns
argument_list|,
name|customScope
operator|.
name|tail
argument_list|()
operator|+
literal|"Ref"
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|//customScope = currentScope;
name|customScope
operator|=
operator|new
name|Scope
argument_list|(
operator|new
name|Scope
argument_list|()
argument_list|,
name|node
argument_list|)
expr_stmt|;
if|if
condition|(
name|mapper
operator|.
name|isDefaultMapping
argument_list|()
condition|)
block|{
name|referenceName
operator|=
operator|new
name|QName
argument_list|(
name|schema
operator|.
name|getTargetNamespace
argument_list|()
argument_list|,
name|customScope
operator|.
name|toString
argument_list|()
operator|+
literal|"Ref"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|tns
init|=
name|mapper
operator|.
name|map
argument_list|(
name|customScope
operator|.
name|getParent
argument_list|()
argument_list|)
decl_stmt|;
name|referenceName
operator|=
operator|new
name|QName
argument_list|(
name|tns
argument_list|,
name|customScope
operator|.
name|tail
argument_list|()
operator|+
literal|"Ref"
argument_list|)
expr_stmt|;
block|}
block|}
name|repositoryID
operator|=
name|customScope
operator|.
name|toIDLRepositoryID
argument_list|()
expr_stmt|;
name|bindingName
operator|=
name|getBindingQNameByID
argument_list|(
name|definition
argument_list|,
name|repositoryID
argument_list|,
name|objRefWsdlVisitor
argument_list|)
expr_stmt|;
if|if
condition|(
name|bindingName
operator|==
literal|null
condition|)
block|{
comment|//check bindingName with prefix
name|customScope
operator|.
name|setPrefix
argument_list|(
name|objRefWsdlVisitor
operator|.
name|getPragmaPrefix
argument_list|()
argument_list|)
expr_stmt|;
name|repositoryID
operator|=
name|customScope
operator|.
name|toIDLRepositoryID
argument_list|()
expr_stmt|;
name|bindingName
operator|=
name|getBindingQNameByID
argument_list|(
name|definition
argument_list|,
name|repositoryID
argument_list|,
name|objRefWsdlVisitor
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|bindingName
operator|==
literal|null
condition|)
block|{
comment|// We need to have a binding for this kind of object reference to work
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"[ObjectReferenceVisitor: No binding available for endpoint]"
argument_list|)
throw|;
block|}
comment|// Create a schema namespace for WS addressing and use it to create an endpoint
comment|// reference type.  This will be used as the type for our endpoint reference.
name|XmlSchema
name|scs
index|[]
init|=
name|schemas
operator|.
name|getXmlSchema
argument_list|(
name|ReferenceConstants
operator|.
name|WSADDRESSING_NAMESPACE
argument_list|)
decl_stmt|;
name|XmlSchema
name|wsaSchema
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|scs
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|XmlSchema
name|sc
range|:
name|scs
control|)
block|{
if|if
condition|(
name|ReferenceConstants
operator|.
name|WSADDRESSING_NAMESPACE
operator|.
name|equals
argument_list|(
name|sc
operator|.
name|getTargetNamespace
argument_list|()
argument_list|)
condition|)
block|{
name|wsaSchema
operator|=
name|sc
expr_stmt|;
break|break;
block|}
block|}
block|}
if|if
condition|(
name|wsaSchema
operator|==
literal|null
condition|)
block|{
name|wsaSchema
operator|=
operator|new
name|XmlSchema
argument_list|(
name|ReferenceConstants
operator|.
name|WSADDRESSING_NAMESPACE
argument_list|,
name|schemas
argument_list|)
expr_stmt|;
block|}
name|XmlSchemaType
name|wsaType
init|=
operator|new
name|XmlSchemaSimpleType
argument_list|(
name|wsaSchema
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|wsaType
operator|.
name|setName
argument_list|(
name|ReferenceConstants
operator|.
name|WSADDRESSING_LOCAL_NAME
argument_list|)
expr_stmt|;
comment|// Check to see if we have already defined an element for this reference type.  If
comment|// we have, then there is no need to add it to the schema again.
name|isDuplicateReference
argument_list|(
name|referenceName
argument_list|,
name|bindingName
argument_list|,
name|customScope
argument_list|,
name|wsaType
argument_list|,
name|node
argument_list|)
expr_stmt|;
name|setSchemaType
argument_list|(
name|wsaType
argument_list|)
expr_stmt|;
comment|// Build and assign the corba:object to the visitor
name|Object
name|corbaObject
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|corbaObject
operator|.
name|setBinding
argument_list|(
name|bindingName
argument_list|)
expr_stmt|;
name|corbaObject
operator|.
name|setQName
argument_list|(
operator|new
name|QName
argument_list|(
name|typeMap
operator|.
name|getTargetNamespace
argument_list|()
argument_list|,
name|customScope
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|corbaObject
operator|.
name|setRepositoryID
argument_list|(
name|repositoryID
argument_list|)
expr_stmt|;
name|corbaObject
operator|.
name|setType
argument_list|(
name|wsaType
operator|.
name|getQName
argument_list|()
argument_list|)
expr_stmt|;
name|setCorbaType
argument_list|(
name|corbaObject
argument_list|)
expr_stmt|;
comment|// Add the object definition to the typemap.  We only need to add the default
comment|// type once.
if|if
condition|(
operator|!
name|isReferenceCORBATypeDefined
argument_list|(
name|corbaObject
operator|.
name|getQName
argument_list|()
argument_list|)
condition|)
block|{
name|typeMap
operator|.
name|getStructOrExceptionOrUnion
argument_list|()
operator|.
name|add
argument_list|(
name|corbaObject
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|isDuplicateReference
parameter_list|(
name|QName
name|referenceName
parameter_list|,
name|QName
name|bindingName
parameter_list|,
name|Scope
name|refScope
parameter_list|,
name|XmlSchemaType
name|wsaType
parameter_list|,
name|AST
name|node
parameter_list|)
block|{
name|XmlSchema
name|refSchema
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|mapper
operator|.
name|isDefaultMapping
argument_list|()
condition|)
block|{
name|String
name|tns
init|=
name|mapper
operator|.
name|map
argument_list|(
name|refScope
operator|.
name|getParent
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|refSchemaFileName
init|=
name|getWsdlVisitor
argument_list|()
operator|.
name|getOutputDir
argument_list|()
operator|+
name|System
operator|.
name|getProperty
argument_list|(
literal|"file.separator"
argument_list|)
operator|+
name|refScope
operator|.
name|getParent
argument_list|()
operator|.
name|toString
argument_list|(
literal|"_"
argument_list|)
operator|+
literal|".xsd"
decl_stmt|;
name|refSchema
operator|=
name|manager
operator|.
name|getXmlSchema
argument_list|(
name|tns
argument_list|)
expr_stmt|;
if|if
condition|(
name|refSchema
operator|==
literal|null
condition|)
block|{
name|refSchema
operator|=
name|manager
operator|.
name|createXmlSchema
argument_list|(
name|tns
argument_list|,
name|wsdlVisitor
operator|.
name|getSchemas
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|addWSAddressingImport
argument_list|(
name|refSchema
argument_list|)
expr_stmt|;
name|manager
operator|.
name|addXmlSchemaImport
argument_list|(
name|schema
argument_list|,
name|refSchema
argument_list|,
name|refSchemaFileName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|refSchema
operator|=
name|schema
expr_stmt|;
block|}
comment|// Check to see if we have already defined an element for this reference type.  If
comment|// we have, then there is no need to add it to the schema again.
if|if
condition|(
operator|!
name|isReferenceSchemaTypeDefined
argument_list|(
name|referenceName
argument_list|,
name|refSchema
argument_list|)
condition|)
block|{
comment|// We need to add a new element definition to the schema section of our WSDL.
comment|// For custom endpoint types, this should contain an annotation which points
comment|// to the binding which will be used for this endpoint type.
name|XmlSchemaElement
name|refElement
init|=
operator|new
name|XmlSchemaElement
argument_list|(
name|schema
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|refElement
operator|.
name|setName
argument_list|(
name|referenceName
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
name|refElement
operator|.
name|setSchemaType
argument_list|(
name|wsaType
argument_list|)
expr_stmt|;
name|refElement
operator|.
name|setSchemaTypeName
argument_list|(
name|wsaType
operator|.
name|getQName
argument_list|()
argument_list|)
expr_stmt|;
comment|// Create an annotation which contains the CORBA binding for the element
name|XmlSchemaAnnotation
name|annotation
init|=
operator|new
name|XmlSchemaAnnotation
argument_list|()
decl_stmt|;
name|XmlSchemaAppInfo
name|appInfo
init|=
operator|new
name|XmlSchemaAppInfo
argument_list|()
decl_stmt|;
try|try
block|{
name|DocumentBuilder
name|db
init|=
name|DocumentBuilderFactory
operator|.
name|newInstance
argument_list|()
operator|.
name|newDocumentBuilder
argument_list|()
decl_stmt|;
name|Document
name|doc
init|=
name|db
operator|.
name|newDocument
argument_list|()
decl_stmt|;
name|Element
name|el
init|=
name|doc
operator|.
name|createElement
argument_list|(
literal|"appinfo"
argument_list|)
decl_stmt|;
name|el
operator|.
name|setTextContent
argument_list|(
literal|"corba:binding="
operator|+
name|bindingName
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
comment|// TODO: This is correct but the appinfo markup is never added to the
comment|// schema.  Investigate.
name|appInfo
operator|.
name|setMarkup
argument_list|(
name|el
operator|.
name|getChildNodes
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParserConfigurationException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"[ObjectReferenceVisitor: error creating endpoint schema]"
argument_list|)
throw|;
block|}
name|annotation
operator|.
name|getItems
argument_list|()
operator|.
name|add
argument_list|(
name|appInfo
argument_list|)
expr_stmt|;
name|refElement
operator|.
name|setAnnotation
argument_list|(
name|annotation
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|boolean
name|isReferenceCORBATypeDefined
parameter_list|(
name|QName
name|objectReferenceName
parameter_list|)
block|{
comment|// Get the list of all corba types already defined and look for the provided
comment|// QName.  If we have defined this type, we don't need to add it to the typemap
comment|// again.
name|List
argument_list|<
name|CorbaTypeImpl
argument_list|>
name|allTypes
init|=
name|typeMap
operator|.
name|getStructOrExceptionOrUnion
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|CorbaTypeImpl
argument_list|>
name|iter
init|=
name|allTypes
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|CorbaTypeImpl
name|impl
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|impl
operator|.
name|getQName
argument_list|()
operator|.
name|equals
argument_list|(
name|objectReferenceName
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|isReferenceSchemaTypeDefined
parameter_list|(
name|QName
name|objectReferenceName
parameter_list|,
name|XmlSchema
name|refSchema
parameter_list|)
block|{
name|List
argument_list|<
name|XmlSchemaObject
argument_list|>
name|schemaObjects
init|=
name|refSchema
operator|.
name|getItems
argument_list|()
decl_stmt|;
for|for
control|(
name|XmlSchemaObject
name|schemaObj
range|:
name|schemaObjects
control|)
block|{
if|if
condition|(
name|schemaObj
operator|instanceof
name|XmlSchemaElement
condition|)
block|{
name|XmlSchemaElement
name|el
init|=
operator|(
name|XmlSchemaElement
operator|)
name|schemaObj
decl_stmt|;
if|if
condition|(
name|el
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|objectReferenceName
operator|.
name|getLocalPart
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|void
name|addWSAddressingImport
parameter_list|(
name|XmlSchema
name|s
parameter_list|)
block|{
name|boolean
name|alreadyImported
init|=
literal|false
decl_stmt|;
for|for
control|(
name|XmlSchemaExternal
name|ext
range|:
name|s
operator|.
name|getExternals
argument_list|()
control|)
block|{
if|if
condition|(
name|ext
operator|instanceof
name|XmlSchemaImport
condition|)
block|{
name|XmlSchemaImport
name|schemaImport
init|=
operator|(
name|XmlSchemaImport
operator|)
name|ext
decl_stmt|;
if|if
condition|(
name|schemaImport
operator|.
name|getNamespace
argument_list|()
operator|.
name|equals
argument_list|(
name|ReferenceConstants
operator|.
name|WSADDRESSING_NAMESPACE
argument_list|)
condition|)
block|{
name|alreadyImported
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|alreadyImported
condition|)
block|{
comment|// We need to add an import statement to include the WS addressing types
name|XmlSchemaImport
name|wsaImport
init|=
operator|new
name|XmlSchemaImport
argument_list|(
name|s
argument_list|)
decl_stmt|;
name|wsaImport
operator|.
name|setNamespace
argument_list|(
name|ReferenceConstants
operator|.
name|WSADDRESSING_NAMESPACE
argument_list|)
expr_stmt|;
name|wsaImport
operator|.
name|setSchemaLocation
argument_list|(
name|ReferenceConstants
operator|.
name|WSADDRESSING_LOCATION
argument_list|)
expr_stmt|;
block|}
comment|// Add the addressing namespace to the WSDLs list of namespaces.
name|definition
operator|.
name|addNamespace
argument_list|(
name|ReferenceConstants
operator|.
name|WSADDRESSING_PREFIX
argument_list|,
name|ReferenceConstants
operator|.
name|WSADDRESSING_NAMESPACE
argument_list|)
expr_stmt|;
try|try
block|{
comment|// This is used to get the correct prefix in the schema section of
comment|// the wsdl.  If we don't have this, then this namespace gets an
comment|// arbitrary prefix (e.g. ns5 instead of wsa).
name|NamespaceMap
name|nsMap
init|=
operator|(
name|NamespaceMap
operator|)
name|s
operator|.
name|getNamespaceContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|nsMap
operator|==
literal|null
condition|)
block|{
name|nsMap
operator|=
operator|new
name|NamespaceMap
argument_list|()
expr_stmt|;
name|nsMap
operator|.
name|add
argument_list|(
name|ReferenceConstants
operator|.
name|WSADDRESSING_PREFIX
argument_list|,
name|ReferenceConstants
operator|.
name|WSADDRESSING_NAMESPACE
argument_list|)
expr_stmt|;
name|s
operator|.
name|setNamespaceContext
argument_list|(
name|nsMap
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|nsMap
operator|.
name|add
argument_list|(
name|ReferenceConstants
operator|.
name|WSADDRESSING_PREFIX
argument_list|,
name|ReferenceConstants
operator|.
name|WSADDRESSING_NAMESPACE
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|ClassCastException
name|ex
parameter_list|)
block|{
comment|// Consume the exception.  It is still OK with the default prefix,
comment|// just not as clear.
block|}
block|}
specifier|private
specifier|static
name|QName
name|getBindingQNameByID
parameter_list|(
name|Definition
name|wsdlDef
parameter_list|,
name|String
name|repositoryID
parameter_list|,
name|WSDLASTVisitor
name|wsdlVisitor
parameter_list|)
block|{
comment|// We need to find the binding which corresponds with the given repository ID.
comment|// This is specified in the schema definition for a custom endpoint
comment|// reference type.
name|Collection
argument_list|<
name|Binding
argument_list|>
name|bindings
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
name|wsdlDef
operator|.
name|getBindings
argument_list|()
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|bindings
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|wsdlVisitor
operator|.
name|getModuleToNSMapper
argument_list|()
operator|.
name|isDefaultMapping
argument_list|()
condition|)
block|{
comment|// If we are not using the default mapping, then the binding definitions are not
comment|// located in the current Definition object, but nistead in the root Definition
name|bindings
operator|=
name|CastUtils
operator|.
name|cast
argument_list|(
name|wsdlVisitor
operator|.
name|getDefinition
argument_list|()
operator|.
name|getBindings
argument_list|()
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Binding
name|b
range|:
name|bindings
control|)
block|{
name|List
argument_list|<
name|?
argument_list|>
name|extElements
init|=
name|b
operator|.
name|getExtensibilityElements
argument_list|()
decl_stmt|;
for|for
control|(
name|java
operator|.
name|lang
operator|.
name|Object
name|element
range|:
name|extElements
control|)
block|{
if|if
condition|(
name|element
operator|instanceof
name|BindingType
condition|)
block|{
name|BindingType
name|bt
init|=
operator|(
name|BindingType
operator|)
name|element
decl_stmt|;
if|if
condition|(
name|bt
operator|.
name|getRepositoryID
argument_list|()
operator|.
name|equals
argument_list|(
name|repositoryID
argument_list|)
condition|)
block|{
if|if
condition|(
name|wsdlVisitor
operator|.
name|getSupportPolymorphicFactories
argument_list|()
condition|)
block|{
return|return
operator|new
name|QName
argument_list|(
name|b
operator|.
name|getQName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
literal|"InferFromTypeId"
argument_list|,
name|b
operator|.
name|getQName
argument_list|()
operator|.
name|getPrefix
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|b
operator|.
name|getQName
argument_list|()
return|;
block|}
block|}
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|protected
specifier|static
name|boolean
name|isForwardDeclaredReference
parameter_list|(
name|Scope
name|scope
parameter_list|,
name|XmlSchema
name|schema
parameter_list|,
name|AST
name|node
parameter_list|,
name|ScopeNameCollection
name|scopedNames
parameter_list|,
name|WSDLASTVisitor
name|wsdlVisitor
parameter_list|)
block|{
name|boolean
name|isForward
init|=
literal|false
decl_stmt|;
name|Scope
name|currentScope
init|=
name|scope
decl_stmt|;
comment|// Check for forward declaration from local scope outwards
if|if
condition|(
operator|(
name|node
operator|.
name|getFirstChild
argument_list|()
operator|==
literal|null
operator|)
operator|||
operator|(
name|node
operator|.
name|getFirstChild
argument_list|()
operator|!=
literal|null
operator|&&
name|node
operator|.
name|getFirstChild
argument_list|()
operator|.
name|getType
argument_list|()
operator|!=
name|IDLTokenTypes
operator|.
name|SCOPEOP
operator|)
condition|)
block|{
while|while
condition|(
operator|!
name|isForward
operator|&&
name|currentScope
operator|!=
name|currentScope
operator|.
name|getParent
argument_list|()
condition|)
block|{
name|Scope
name|scopedName
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|ScopedNameVisitor
operator|.
name|isFullyScopedName
argument_list|(
name|node
argument_list|)
condition|)
block|{
name|scopedName
operator|=
name|ScopedNameVisitor
operator|.
name|getFullyScopedName
argument_list|(
name|currentScope
argument_list|,
name|node
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|scopedName
operator|=
operator|new
name|Scope
argument_list|(
name|currentScope
argument_list|,
name|node
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|scopedNames
operator|.
name|getScope
argument_list|(
name|scopedName
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|isForward
operator|=
literal|true
expr_stmt|;
block|}
name|currentScope
operator|=
name|currentScope
operator|.
name|getParent
argument_list|()
expr_stmt|;
comment|//fqName = scopedName;
block|}
block|}
comment|// Check for forward declaration in global scope
if|if
condition|(
operator|!
name|isForward
condition|)
block|{
name|Scope
name|scopedName
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|ScopedNameVisitor
operator|.
name|isFullyScopedName
argument_list|(
name|node
argument_list|)
condition|)
block|{
name|scopedName
operator|=
name|ScopedNameVisitor
operator|.
name|getFullyScopedName
argument_list|(
operator|new
name|Scope
argument_list|()
argument_list|,
name|node
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//scopedName = scope;
name|scopedName
operator|=
operator|new
name|Scope
argument_list|(
operator|new
name|Scope
argument_list|()
argument_list|,
name|node
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|scopedNames
operator|.
name|getScope
argument_list|(
name|scopedName
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|isForward
operator|=
literal|true
expr_stmt|;
block|}
comment|//fqName = scopedName;
block|}
return|return
name|isForward
return|;
block|}
specifier|protected
name|void
name|visitForwardDeclaredObjectReference
parameter_list|(
name|Scope
name|scope
parameter_list|,
name|XmlSchemaCollection
name|schemas
parameter_list|,
name|XmlSchema
name|schema
parameter_list|,
name|AST
name|node
parameter_list|,
name|ScopeNameCollection
name|scopedNames
parameter_list|,
name|WSDLASTVisitor
name|wsdlVisitor
parameter_list|)
block|{
name|XmlSchemaType
name|result
init|=
literal|null
decl_stmt|;
name|Scope
name|currentScope
init|=
name|scope
decl_stmt|;
comment|// checks from innermost local scope outwards
if|if
condition|(
operator|(
name|node
operator|.
name|getFirstChild
argument_list|()
operator|==
literal|null
operator|)
operator|||
operator|(
name|node
operator|.
name|getFirstChild
argument_list|()
operator|!=
literal|null
operator|&&
name|node
operator|.
name|getFirstChild
argument_list|()
operator|.
name|getType
argument_list|()
operator|!=
name|IDLTokenTypes
operator|.
name|SCOPEOP
operator|)
condition|)
block|{
while|while
condition|(
name|result
operator|==
literal|null
operator|&&
name|currentScope
operator|!=
name|currentScope
operator|.
name|getParent
argument_list|()
condition|)
block|{
name|Scope
name|scopedName
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|ScopedNameVisitor
operator|.
name|isFullyScopedName
argument_list|(
name|node
argument_list|)
condition|)
block|{
name|scopedName
operator|=
name|ScopedNameVisitor
operator|.
name|getFullyScopedName
argument_list|(
name|currentScope
argument_list|,
name|node
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|scopedName
operator|=
operator|new
name|Scope
argument_list|(
name|currentScope
argument_list|,
name|node
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|scopedNames
operator|.
name|getScope
argument_list|(
name|scopedName
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|XmlSchema
name|wsaSchema
init|=
literal|null
decl_stmt|;
comment|// check whether a schema with the required namespace has already been created
name|XmlSchema
index|[]
name|existingSchemas
init|=
name|schemas
operator|.
name|getXmlSchemas
argument_list|()
decl_stmt|;
for|for
control|(
name|XmlSchema
name|xs
range|:
name|existingSchemas
control|)
block|{
if|if
condition|(
name|xs
operator|.
name|getTargetNamespace
argument_list|()
operator|.
name|equals
argument_list|(
name|ReferenceConstants
operator|.
name|WSADDRESSING_NAMESPACE
argument_list|)
condition|)
block|{
comment|// if it has been created, reuse it
name|wsaSchema
operator|=
name|xs
expr_stmt|;
name|result
operator|=
name|wsaSchema
operator|.
name|getTypeByName
argument_list|(
name|ReferenceConstants
operator|.
name|WSADDRESSING_LOCAL_NAME
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
comment|// if not, create a new one and create the WS-Addressing EndpointReferenceType
if|if
condition|(
name|wsaSchema
operator|==
literal|null
condition|)
block|{
name|wsaSchema
operator|=
operator|new
name|XmlSchema
argument_list|(
name|ReferenceConstants
operator|.
name|WSADDRESSING_NAMESPACE
argument_list|,
name|schemas
argument_list|)
expr_stmt|;
name|XmlSchemaType
name|wsaType
init|=
operator|new
name|XmlSchemaType
argument_list|(
name|wsaSchema
argument_list|,
literal|false
argument_list|)
block|{ }
decl_stmt|;
name|wsaType
operator|.
name|setName
argument_list|(
name|ReferenceConstants
operator|.
name|WSADDRESSING_LOCAL_NAME
argument_list|)
expr_stmt|;
name|result
operator|=
name|wsaType
expr_stmt|;
block|}
block|}
name|currentScope
operator|=
name|currentScope
operator|.
name|getParent
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
name|Scope
name|scopedName
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|ScopedNameVisitor
operator|.
name|isFullyScopedName
argument_list|(
name|node
argument_list|)
condition|)
block|{
name|scopedName
operator|=
name|ScopedNameVisitor
operator|.
name|getFullyScopedName
argument_list|(
operator|new
name|Scope
argument_list|()
argument_list|,
name|node
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|scopedName
operator|=
name|scope
expr_stmt|;
block|}
if|if
condition|(
name|scopedNames
operator|.
name|getScope
argument_list|(
name|scopedName
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|XmlSchema
name|wsaSchema
init|=
literal|null
decl_stmt|;
comment|// check whether a schema with the required namespace has already been created
name|XmlSchema
index|[]
name|existingSchemas
init|=
name|schemas
operator|.
name|getXmlSchemas
argument_list|()
decl_stmt|;
for|for
control|(
name|XmlSchema
name|xs
range|:
name|existingSchemas
control|)
block|{
if|if
condition|(
name|xs
operator|.
name|getTargetNamespace
argument_list|()
operator|.
name|equals
argument_list|(
name|ReferenceConstants
operator|.
name|WSADDRESSING_NAMESPACE
argument_list|)
condition|)
block|{
comment|// if it has been created, reuse it
name|wsaSchema
operator|=
name|xs
expr_stmt|;
name|result
operator|=
name|wsaSchema
operator|.
name|getTypeByName
argument_list|(
name|ReferenceConstants
operator|.
name|WSADDRESSING_LOCAL_NAME
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
comment|// if not, create a new one and create the WS-Addressing EndpointReferenceType
if|if
condition|(
name|wsaSchema
operator|==
literal|null
condition|)
block|{
name|wsaSchema
operator|=
operator|new
name|XmlSchema
argument_list|(
name|ReferenceConstants
operator|.
name|WSADDRESSING_NAMESPACE
argument_list|,
name|schemas
argument_list|)
expr_stmt|;
name|XmlSchemaType
name|wsaType
init|=
operator|new
name|XmlSchemaType
argument_list|(
name|wsaSchema
argument_list|,
literal|false
argument_list|)
block|{ }
decl_stmt|;
name|wsaType
operator|.
name|setName
argument_list|(
name|ReferenceConstants
operator|.
name|WSADDRESSING_LOCAL_NAME
argument_list|)
expr_stmt|;
name|result
operator|=
name|wsaType
expr_stmt|;
block|}
block|}
block|}
name|setSchemaType
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|boolean
name|hasBinding
parameter_list|(
name|Scope
name|scope
parameter_list|,
name|XmlSchema
name|s
parameter_list|,
name|Definition
name|def
parameter_list|,
name|AST
name|node
parameter_list|,
name|WSDLASTVisitor
name|wsdlVisitor
parameter_list|)
block|{
name|boolean
name|result
init|=
literal|false
decl_stmt|;
name|QName
name|bindingName
init|=
literal|null
decl_stmt|;
name|String
name|repositoryID
init|=
literal|null
decl_stmt|;
name|Scope
name|currentScope
init|=
name|scope
decl_stmt|;
name|Scope
name|customScope
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|(
name|node
operator|.
name|getFirstChild
argument_list|()
operator|==
literal|null
operator|)
operator|||
operator|(
name|node
operator|.
name|getFirstChild
argument_list|()
operator|!=
literal|null
operator|&&
name|node
operator|.
name|getFirstChild
argument_list|()
operator|.
name|getType
argument_list|()
operator|!=
name|IDLTokenTypes
operator|.
name|SCOPEOP
operator|)
condition|)
block|{
while|while
condition|(
name|bindingName
operator|==
literal|null
operator|&&
name|currentScope
operator|!=
name|currentScope
operator|.
name|getParent
argument_list|()
condition|)
block|{
if|if
condition|(
name|ScopedNameVisitor
operator|.
name|isFullyScopedName
argument_list|(
name|node
argument_list|)
condition|)
block|{
name|customScope
operator|=
name|ScopedNameVisitor
operator|.
name|getFullyScopedName
argument_list|(
name|currentScope
argument_list|,
name|node
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|customScope
operator|=
operator|new
name|Scope
argument_list|(
name|currentScope
argument_list|,
name|node
argument_list|)
expr_stmt|;
block|}
name|repositoryID
operator|=
name|customScope
operator|.
name|toIDLRepositoryID
argument_list|()
expr_stmt|;
name|bindingName
operator|=
name|getBindingQNameByID
argument_list|(
name|def
argument_list|,
name|repositoryID
argument_list|,
name|wsdlVisitor
argument_list|)
expr_stmt|;
name|currentScope
operator|=
name|currentScope
operator|.
name|getParent
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|bindingName
operator|==
literal|null
condition|)
block|{
comment|// Global scope is our last chance to resolve the node
if|if
condition|(
name|ScopedNameVisitor
operator|.
name|isFullyScopedName
argument_list|(
name|node
argument_list|)
condition|)
block|{
name|customScope
operator|=
name|ScopedNameVisitor
operator|.
name|getFullyScopedName
argument_list|(
operator|new
name|Scope
argument_list|()
argument_list|,
name|node
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|customScope
operator|=
operator|new
name|Scope
argument_list|(
operator|new
name|Scope
argument_list|()
argument_list|,
name|node
argument_list|)
expr_stmt|;
block|}
name|repositoryID
operator|=
name|customScope
operator|.
name|toIDLRepositoryID
argument_list|()
expr_stmt|;
name|bindingName
operator|=
name|getBindingQNameByID
argument_list|(
name|def
argument_list|,
name|repositoryID
argument_list|,
name|wsdlVisitor
argument_list|)
expr_stmt|;
if|if
condition|(
name|bindingName
operator|==
literal|null
condition|)
block|{
comment|//check bindingName with prefix
name|customScope
operator|.
name|setPrefix
argument_list|(
name|wsdlVisitor
operator|.
name|getPragmaPrefix
argument_list|()
argument_list|)
expr_stmt|;
name|repositoryID
operator|=
name|customScope
operator|.
name|toIDLRepositoryID
argument_list|()
expr_stmt|;
name|bindingName
operator|=
name|getBindingQNameByID
argument_list|(
name|def
argument_list|,
name|repositoryID
argument_list|,
name|wsdlVisitor
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|bindingName
operator|!=
literal|null
condition|)
block|{
name|result
operator|=
literal|true
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

