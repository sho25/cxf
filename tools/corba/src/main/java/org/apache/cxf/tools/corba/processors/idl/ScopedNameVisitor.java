begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|corba
operator|.
name|processors
operator|.
name|idl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|Definition
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|collections
operator|.
name|AST
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|Alias
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|Anonarray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|Anonsequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|Array
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|CorbaConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|CorbaTypeImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|Sequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|TypeMappingType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|corba
operator|.
name|common
operator|.
name|XmlSchemaPrimitiveMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|constants
operator|.
name|Constants
import|;
end_import

begin_class
specifier|public
class|class
name|ScopedNameVisitor
extends|extends
name|VisitorBase
block|{
specifier|private
specifier|static
name|boolean
name|exceptionMode
decl_stmt|;
specifier|private
specifier|static
name|XmlSchemaPrimitiveMap
name|xmlSchemaPrimitiveMap
init|=
operator|new
name|XmlSchemaPrimitiveMap
argument_list|()
decl_stmt|;
specifier|public
name|ScopedNameVisitor
parameter_list|(
name|Scope
name|scope
parameter_list|,
name|Definition
name|defn
parameter_list|,
name|XmlSchema
name|schemaRef
parameter_list|,
name|WSDLASTVisitor
name|wsdlVisitor
parameter_list|)
block|{
name|super
argument_list|(
name|scope
argument_list|,
name|defn
argument_list|,
name|schemaRef
argument_list|,
name|wsdlVisitor
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setExceptionMode
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|exceptionMode
operator|=
name|value
expr_stmt|;
block|}
specifier|public
specifier|static
name|boolean
name|accept
parameter_list|(
name|Scope
name|scope
parameter_list|,
name|Definition
name|defn
parameter_list|,
name|XmlSchema
name|schemaRef
parameter_list|,
name|AST
name|node
parameter_list|,
name|WSDLASTVisitor
name|wsdlVisitor
parameter_list|)
block|{
return|return
name|accept
argument_list|(
name|scope
argument_list|,
name|defn
argument_list|,
name|schemaRef
argument_list|,
name|node
argument_list|,
name|wsdlVisitor
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|// when accepting a "name" (for example, name of a field in a struct), we may need
comment|// to relax the strict checking for forward decls and schema types to not count for
comment|// exact parent scope names
specifier|public
specifier|static
name|boolean
name|accept
parameter_list|(
name|Scope
name|scope
parameter_list|,
name|Definition
name|defn
parameter_list|,
name|XmlSchema
name|schemaRef
parameter_list|,
name|AST
name|node
parameter_list|,
name|WSDLASTVisitor
name|wsdlVisitor
parameter_list|,
name|boolean
name|asName
parameter_list|)
block|{
name|boolean
name|result
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|PrimitiveTypesVisitor
operator|.
name|accept
argument_list|(
name|node
argument_list|)
condition|)
block|{
name|result
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|isforwardDeclared
argument_list|(
name|scope
argument_list|,
name|node
argument_list|,
name|wsdlVisitor
argument_list|,
name|asName
argument_list|)
condition|)
block|{
name|result
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ObjectReferenceVisitor
operator|.
name|accept
argument_list|(
name|scope
argument_list|,
name|schemaRef
argument_list|,
name|defn
argument_list|,
name|node
argument_list|,
name|wsdlVisitor
argument_list|)
condition|)
block|{
name|result
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|findSchemaType
argument_list|(
name|scope
argument_list|,
name|defn
argument_list|,
name|schemaRef
argument_list|,
name|node
argument_list|,
name|wsdlVisitor
argument_list|,
literal|null
argument_list|,
name|asName
argument_list|)
condition|)
block|{
name|result
operator|=
literal|true
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|public
name|void
name|visit
parameter_list|(
name|AST
name|node
parameter_list|)
block|{
comment|//<scoped_name> ::=<identifier>
comment|//                 | ::<identifier>
comment|//                 |<scoped_name> "::"<identifier>
name|XmlSchemaType
name|stype
init|=
literal|null
decl_stmt|;
name|CorbaTypeImpl
name|ctype
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|PrimitiveTypesVisitor
operator|.
name|accept
argument_list|(
name|node
argument_list|)
condition|)
block|{
comment|// primitive type
name|PrimitiveTypesVisitor
name|primitiveVisitor
init|=
operator|new
name|PrimitiveTypesVisitor
argument_list|(
literal|null
argument_list|,
name|definition
argument_list|,
name|schema
argument_list|,
name|schemas
argument_list|)
decl_stmt|;
name|primitiveVisitor
operator|.
name|visit
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|stype
operator|=
name|primitiveVisitor
operator|.
name|getSchemaType
argument_list|()
expr_stmt|;
name|ctype
operator|=
name|primitiveVisitor
operator|.
name|getCorbaType
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|isforwardDeclared
argument_list|(
name|getScope
argument_list|()
argument_list|,
name|node
argument_list|,
name|wsdlVisitor
argument_list|)
condition|)
block|{
comment|// forward declaration
name|Scope
name|scope
init|=
name|forwardDeclared
argument_list|(
name|getScope
argument_list|()
argument_list|,
name|definition
argument_list|,
name|schema
argument_list|,
name|node
argument_list|,
name|wsdlVisitor
argument_list|)
decl_stmt|;
name|setFullyQualifiedName
argument_list|(
name|scope
argument_list|)
expr_stmt|;
comment|// how will we create the corbatype ????
block|}
elseif|else
if|if
condition|(
name|ObjectReferenceVisitor
operator|.
name|accept
argument_list|(
name|getScope
argument_list|()
argument_list|,
name|schema
argument_list|,
name|definition
argument_list|,
name|node
argument_list|,
name|wsdlVisitor
argument_list|)
condition|)
block|{
name|ObjectReferenceVisitor
name|objRefVisitor
init|=
operator|new
name|ObjectReferenceVisitor
argument_list|(
name|getScope
argument_list|()
argument_list|,
name|definition
argument_list|,
name|schema
argument_list|,
name|wsdlVisitor
argument_list|)
decl_stmt|;
name|objRefVisitor
operator|.
name|visit
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|stype
operator|=
name|objRefVisitor
operator|.
name|getSchemaType
argument_list|()
expr_stmt|;
name|ctype
operator|=
name|objRefVisitor
operator|.
name|getCorbaType
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|VisitorTypeHolder
name|holder
init|=
operator|new
name|VisitorTypeHolder
argument_list|()
decl_stmt|;
name|boolean
name|found
init|=
name|findSchemaType
argument_list|(
name|getScope
argument_list|()
argument_list|,
name|definition
argument_list|,
name|schema
argument_list|,
name|node
argument_list|,
name|wsdlVisitor
argument_list|,
name|holder
argument_list|)
decl_stmt|;
if|if
condition|(
name|found
condition|)
block|{
name|ctype
operator|=
name|holder
operator|.
name|getCorbaType
argument_list|()
expr_stmt|;
name|stype
operator|=
name|holder
operator|.
name|getSchemaType
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|Scope
name|scopedName
init|=
operator|new
name|Scope
argument_list|(
name|getScope
argument_list|()
argument_list|,
name|node
argument_list|)
decl_stmt|;
name|QName
name|qname
init|=
operator|new
name|QName
argument_list|(
name|schema
operator|.
name|getTargetNamespace
argument_list|()
argument_list|,
name|scopedName
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"[ScopedNameVisitor:  Corba type "
operator|+
name|qname
operator|+
literal|" not found in typeMap]"
argument_list|)
throw|;
block|}
block|}
name|setSchemaType
argument_list|(
name|stype
argument_list|)
expr_stmt|;
name|setCorbaType
argument_list|(
name|ctype
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|CorbaTypeImpl
name|getCorbaSchemaType
parameter_list|(
name|XmlSchema
name|xmlSchema
parameter_list|,
name|TypeMappingType
name|typeMap
parameter_list|,
name|XmlSchemaType
name|stype
parameter_list|,
name|Scope
name|scopedName
parameter_list|)
block|{
name|CorbaTypeImpl
name|ctype
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|stype
operator|.
name|getQName
argument_list|()
operator|.
name|equals
argument_list|(
name|Constants
operator|.
name|XSD_STRING
argument_list|)
condition|)
block|{
name|ctype
operator|=
operator|new
name|CorbaTypeImpl
argument_list|()
expr_stmt|;
name|ctype
operator|.
name|setName
argument_list|(
name|CorbaConstants
operator|.
name|NT_CORBA_STRING
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
name|ctype
operator|.
name|setQName
argument_list|(
name|CorbaConstants
operator|.
name|NT_CORBA_STRING
argument_list|)
expr_stmt|;
name|ctype
operator|.
name|setType
argument_list|(
name|Constants
operator|.
name|XSD_STRING
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QName
name|qname
init|=
name|stype
operator|.
name|getQName
argument_list|()
decl_stmt|;
name|ctype
operator|=
name|findCorbaTypeForSchemaType
argument_list|(
name|typeMap
argument_list|,
name|qname
argument_list|,
name|scopedName
argument_list|)
expr_stmt|;
block|}
return|return
name|ctype
return|;
block|}
specifier|protected
specifier|static
name|boolean
name|isforwardDeclared
parameter_list|(
name|Scope
name|scope
parameter_list|,
name|AST
name|node
parameter_list|,
name|WSDLASTVisitor
name|wsdlVisitor
parameter_list|)
block|{
return|return
name|isforwardDeclared
argument_list|(
name|scope
argument_list|,
name|node
argument_list|,
name|wsdlVisitor
argument_list|,
literal|false
argument_list|)
return|;
block|}
specifier|protected
specifier|static
name|boolean
name|isforwardDeclared
parameter_list|(
name|Scope
name|scope
parameter_list|,
name|AST
name|node
parameter_list|,
name|WSDLASTVisitor
name|wsdlVisitor
parameter_list|,
name|boolean
name|b
parameter_list|)
block|{
name|boolean
name|isForward
init|=
literal|false
decl_stmt|;
name|Scope
name|currentScope
init|=
name|scope
decl_stmt|;
name|ScopeNameCollection
name|scopedNames
init|=
name|wsdlVisitor
operator|.
name|getScopedNames
argument_list|()
decl_stmt|;
comment|// Check for forward declaration from local scope outwards
if|if
condition|(
operator|(
name|node
operator|.
name|getFirstChild
argument_list|()
operator|==
literal|null
operator|)
operator|||
operator|(
name|node
operator|.
name|getFirstChild
argument_list|()
operator|!=
literal|null
operator|&&
name|node
operator|.
name|getFirstChild
argument_list|()
operator|.
name|getType
argument_list|()
operator|!=
name|IDLTokenTypes
operator|.
name|SCOPEOP
operator|)
condition|)
block|{
while|while
condition|(
operator|!
name|isForward
operator|&&
name|currentScope
operator|!=
name|currentScope
operator|.
name|getParent
argument_list|()
condition|)
block|{
name|Scope
name|scopedName
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|isFullyScopedName
argument_list|(
name|node
argument_list|)
condition|)
block|{
name|scopedName
operator|=
name|getFullyScopedName
argument_list|(
name|currentScope
argument_list|,
name|node
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|scopedName
operator|=
operator|new
name|Scope
argument_list|(
name|currentScope
argument_list|,
name|node
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|scopedNames
operator|.
name|getScope
argument_list|(
name|scopedName
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|isForward
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|b
operator|&&
name|currentScope
operator|.
name|equals
argument_list|(
operator|new
name|Scope
argument_list|(
name|currentScope
operator|.
name|getParent
argument_list|()
argument_list|,
name|node
argument_list|)
argument_list|)
condition|)
block|{
break|break;
block|}
name|currentScope
operator|=
name|currentScope
operator|.
name|getParent
argument_list|()
expr_stmt|;
block|}
block|}
comment|// Check for forward declaration in global scope
if|if
condition|(
operator|!
name|isForward
condition|)
block|{
name|Scope
name|scopedName
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|isFullyScopedName
argument_list|(
name|node
argument_list|)
condition|)
block|{
name|scopedName
operator|=
name|getFullyScopedName
argument_list|(
operator|new
name|Scope
argument_list|()
argument_list|,
name|node
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|scopedName
operator|=
operator|new
name|Scope
argument_list|(
operator|new
name|Scope
argument_list|()
argument_list|,
name|node
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|scopedNames
operator|.
name|getScope
argument_list|(
name|scopedName
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|isForward
operator|=
literal|true
expr_stmt|;
block|}
block|}
return|return
name|isForward
return|;
block|}
specifier|protected
specifier|static
name|Scope
name|forwardDeclared
parameter_list|(
name|Scope
name|scope
parameter_list|,
name|Definition
name|defn
parameter_list|,
name|XmlSchema
name|schemaRef
parameter_list|,
name|AST
name|node
parameter_list|,
name|WSDLASTVisitor
name|wsdlVisitor
parameter_list|)
block|{
comment|//XmlSchemaType result = null;
name|Scope
name|result
init|=
literal|null
decl_stmt|;
name|Scope
name|currentScope
init|=
name|scope
decl_stmt|;
name|ScopeNameCollection
name|scopedNames
init|=
name|wsdlVisitor
operator|.
name|getScopedNames
argument_list|()
decl_stmt|;
comment|// Check for forward declaration from local scope outwards
if|if
condition|(
operator|(
name|node
operator|.
name|getFirstChild
argument_list|()
operator|==
literal|null
operator|)
operator|||
operator|(
name|node
operator|.
name|getFirstChild
argument_list|()
operator|!=
literal|null
operator|&&
name|node
operator|.
name|getFirstChild
argument_list|()
operator|.
name|getType
argument_list|()
operator|!=
name|IDLTokenTypes
operator|.
name|SCOPEOP
operator|)
condition|)
block|{
while|while
condition|(
name|result
operator|==
literal|null
operator|&&
name|currentScope
operator|!=
name|currentScope
operator|.
name|getParent
argument_list|()
condition|)
block|{
name|Scope
name|scopedName
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|isFullyScopedName
argument_list|(
name|node
argument_list|)
condition|)
block|{
name|scopedName
operator|=
name|getFullyScopedName
argument_list|(
name|currentScope
argument_list|,
name|node
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|scopedName
operator|=
operator|new
name|Scope
argument_list|(
name|currentScope
argument_list|,
name|node
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|scopedNames
operator|.
name|getScope
argument_list|(
name|scopedName
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|XmlSchema
name|xmlSchema
init|=
name|schemaRef
decl_stmt|;
name|String
name|tns
init|=
name|wsdlVisitor
operator|.
name|getModuleToNSMapper
argument_list|()
operator|.
name|map
argument_list|(
name|scopedName
operator|.
name|getParent
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|tns
operator|!=
literal|null
condition|)
block|{
name|xmlSchema
operator|=
name|wsdlVisitor
operator|.
name|getManager
argument_list|()
operator|.
name|getXmlSchema
argument_list|(
name|tns
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ObjectReferenceVisitor
operator|.
name|accept
argument_list|(
name|scope
argument_list|,
name|xmlSchema
argument_list|,
name|defn
argument_list|,
name|node
argument_list|,
name|wsdlVisitor
argument_list|)
condition|)
block|{
comment|// checks if its a forward
name|Visitor
name|visitor
init|=
operator|new
name|ObjectReferenceVisitor
argument_list|(
name|scope
argument_list|,
name|defn
argument_list|,
name|xmlSchema
argument_list|,
name|wsdlVisitor
argument_list|)
decl_stmt|;
name|visitor
operator|.
name|visit
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
name|result
operator|=
name|scopedName
expr_stmt|;
block|}
name|currentScope
operator|=
name|currentScope
operator|.
name|getParent
argument_list|()
expr_stmt|;
block|}
block|}
comment|// Check for forward declaration in global scope
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
name|Scope
name|scopedName
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|isFullyScopedName
argument_list|(
name|node
argument_list|)
condition|)
block|{
name|scopedName
operator|=
name|getFullyScopedName
argument_list|(
operator|new
name|Scope
argument_list|()
argument_list|,
name|node
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|scopedName
operator|=
operator|new
name|Scope
argument_list|(
operator|new
name|Scope
argument_list|()
argument_list|,
name|node
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|scopedNames
operator|.
name|getScope
argument_list|(
name|scopedName
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|XmlSchema
name|xmlSchema
init|=
name|schemaRef
decl_stmt|;
name|String
name|tns
init|=
name|wsdlVisitor
operator|.
name|getModuleToNSMapper
argument_list|()
operator|.
name|map
argument_list|(
name|scopedName
operator|.
name|getParent
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|tns
operator|!=
literal|null
condition|)
block|{
name|xmlSchema
operator|=
name|wsdlVisitor
operator|.
name|getManager
argument_list|()
operator|.
name|getXmlSchema
argument_list|(
name|tns
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ObjectReferenceVisitor
operator|.
name|accept
argument_list|(
name|scope
argument_list|,
name|xmlSchema
argument_list|,
name|defn
argument_list|,
name|node
argument_list|,
name|wsdlVisitor
argument_list|)
condition|)
block|{
comment|// checks if an object ref
name|Visitor
name|visitor
init|=
operator|new
name|ObjectReferenceVisitor
argument_list|(
name|scope
argument_list|,
name|defn
argument_list|,
name|xmlSchema
argument_list|,
name|wsdlVisitor
argument_list|)
decl_stmt|;
name|visitor
operator|.
name|visit
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
name|result
operator|=
name|scopedName
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
specifier|protected
specifier|static
name|boolean
name|findSchemaType
parameter_list|(
name|Scope
name|scope
parameter_list|,
name|Definition
name|defn
parameter_list|,
name|XmlSchema
name|schemaRef
parameter_list|,
name|AST
name|node
parameter_list|,
name|WSDLASTVisitor
name|wsdlVisitor
parameter_list|,
name|VisitorTypeHolder
name|holder
parameter_list|)
block|{
return|return
name|findSchemaType
argument_list|(
name|scope
argument_list|,
name|defn
argument_list|,
name|schemaRef
argument_list|,
name|node
argument_list|,
name|wsdlVisitor
argument_list|,
name|holder
argument_list|,
literal|false
argument_list|)
return|;
block|}
specifier|protected
specifier|static
name|boolean
name|findSchemaType
parameter_list|(
name|Scope
name|scope
parameter_list|,
name|Definition
name|defn
parameter_list|,
name|XmlSchema
name|schemaRef
parameter_list|,
name|AST
name|node
parameter_list|,
name|WSDLASTVisitor
name|wsdlVisitor
parameter_list|,
name|VisitorTypeHolder
name|holder
parameter_list|,
name|boolean
name|checkExact
parameter_list|)
block|{
name|boolean
name|result
init|=
literal|false
decl_stmt|;
name|Scope
name|currentScope
init|=
name|scope
decl_stmt|;
comment|// checks from innermost local scope outwards
if|if
condition|(
operator|(
name|node
operator|.
name|getFirstChild
argument_list|()
operator|==
literal|null
operator|)
operator|||
operator|(
name|node
operator|.
name|getFirstChild
argument_list|()
operator|!=
literal|null
operator|&&
name|node
operator|.
name|getFirstChild
argument_list|()
operator|.
name|getType
argument_list|()
operator|!=
name|IDLTokenTypes
operator|.
name|SCOPEOP
operator|)
condition|)
block|{
while|while
condition|(
operator|!
name|result
operator|&&
name|currentScope
operator|!=
name|currentScope
operator|.
name|getParent
argument_list|()
condition|)
block|{
comment|// A name can be used in an unqualified form within a particular
comment|// scope;
comment|// it will be resolved by successvely n searching farther out in
comment|// enclosing scopes, while taking into consideration
comment|// inheritance relationships among interfaces.
name|Scope
name|scopedName
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|isFullyScopedName
argument_list|(
name|node
argument_list|)
condition|)
block|{
name|scopedName
operator|=
name|getFullyScopedName
argument_list|(
name|currentScope
argument_list|,
name|node
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|scopedName
operator|=
operator|new
name|Scope
argument_list|(
name|currentScope
argument_list|,
name|node
argument_list|)
expr_stmt|;
block|}
name|result
operator|=
name|findScopeSchemaType
argument_list|(
name|scopedName
argument_list|,
name|schemaRef
argument_list|,
name|wsdlVisitor
argument_list|,
name|holder
argument_list|)
expr_stmt|;
comment|// Search inherited scopes for the type
if|if
condition|(
operator|!
name|result
condition|)
block|{
name|result
operator|=
name|findSchemaTypeInInheritedScope
argument_list|(
name|scope
argument_list|,
name|defn
argument_list|,
name|schemaRef
argument_list|,
name|node
argument_list|,
name|wsdlVisitor
argument_list|,
name|holder
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|checkExact
operator|&&
name|currentScope
operator|.
name|equals
argument_list|(
operator|new
name|Scope
argument_list|(
name|currentScope
operator|.
name|getParent
argument_list|()
argument_list|,
name|node
argument_list|)
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|currentScope
operator|=
name|currentScope
operator|.
name|getParent
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|result
condition|)
block|{
comment|// Global scope is our last chance to resolve the node
name|result
operator|=
name|findSchemaTypeInGlobalScope
argument_list|(
name|scope
argument_list|,
name|defn
argument_list|,
name|schemaRef
argument_list|,
name|node
argument_list|,
name|wsdlVisitor
argument_list|,
name|holder
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|private
specifier|static
name|boolean
name|findSchemaTypeInGlobalScope
parameter_list|(
name|Scope
name|scope
parameter_list|,
name|Definition
name|defn
parameter_list|,
name|XmlSchema
name|currentSchema
parameter_list|,
name|AST
name|node
parameter_list|,
name|WSDLASTVisitor
name|wsdlVisitor
parameter_list|,
name|VisitorTypeHolder
name|holder
parameter_list|)
block|{
name|XmlSchemaCollection
name|schemas
init|=
name|wsdlVisitor
operator|.
name|getSchemas
argument_list|()
decl_stmt|;
name|TypeMappingType
name|typeMap
init|=
name|wsdlVisitor
operator|.
name|getTypeMap
argument_list|()
decl_stmt|;
name|ModuleToNSMapper
name|mapper
init|=
name|wsdlVisitor
operator|.
name|getModuleToNSMapper
argument_list|()
decl_stmt|;
name|WSDLSchemaManager
name|manager
init|=
name|wsdlVisitor
operator|.
name|getManager
argument_list|()
decl_stmt|;
name|Scope
name|scopedName
init|=
operator|new
name|Scope
argument_list|(
name|scope
argument_list|,
name|node
argument_list|)
decl_stmt|;
name|String
name|name
init|=
name|node
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|isFullyScopedName
argument_list|(
name|node
argument_list|)
condition|)
block|{
name|scopedName
operator|=
name|getFullyScopedName
argument_list|(
operator|new
name|Scope
argument_list|()
argument_list|,
name|node
argument_list|)
expr_stmt|;
name|name
operator|=
name|scopedName
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
name|boolean
name|result
init|=
name|findNonSchemaType
argument_list|(
name|name
argument_list|,
name|wsdlVisitor
argument_list|,
name|holder
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|result
condition|)
block|{
name|XmlSchema
name|xmlSchema
init|=
name|currentSchema
decl_stmt|;
name|QName
name|qname
init|=
literal|null
decl_stmt|;
name|String
name|tns
init|=
name|mapper
operator|.
name|map
argument_list|(
name|scopedName
operator|.
name|getParent
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|tns
operator|!=
literal|null
condition|)
block|{
name|xmlSchema
operator|=
name|manager
operator|.
name|getXmlSchema
argument_list|(
name|tns
argument_list|)
expr_stmt|;
if|if
condition|(
name|xmlSchema
operator|!=
literal|null
condition|)
block|{
name|qname
operator|=
operator|new
name|QName
argument_list|(
name|xmlSchema
operator|.
name|getTargetNamespace
argument_list|()
argument_list|,
name|scopedName
operator|.
name|tail
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|qname
operator|=
operator|new
name|QName
argument_list|(
name|xmlSchema
operator|.
name|getTargetNamespace
argument_list|()
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
name|XmlSchemaType
name|stype
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|qname
operator|!=
literal|null
condition|)
block|{
comment|// Exceptions are treated as a special case as above
if|if
condition|(
name|exceptionMode
condition|)
block|{
name|qname
operator|=
operator|new
name|QName
argument_list|(
name|xmlSchema
operator|.
name|getTargetNamespace
argument_list|()
argument_list|,
name|qname
operator|.
name|getLocalPart
argument_list|()
operator|+
literal|"Type"
argument_list|)
expr_stmt|;
block|}
name|stype
operator|=
name|xmlSchema
operator|.
name|getTypeByName
argument_list|(
name|qname
argument_list|)
expr_stmt|;
if|if
condition|(
name|stype
operator|==
literal|null
condition|)
block|{
name|stype
operator|=
name|schemas
operator|.
name|getTypeByQName
argument_list|(
name|qname
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|stype
operator|!=
literal|null
condition|)
block|{
name|result
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|holder
operator|!=
literal|null
condition|)
block|{
name|holder
operator|.
name|setSchemaType
argument_list|(
name|stype
argument_list|)
expr_stmt|;
name|holder
operator|.
name|setCorbaType
argument_list|(
name|getCorbaSchemaType
argument_list|(
name|xmlSchema
argument_list|,
name|typeMap
argument_list|,
name|stype
argument_list|,
name|scopedName
argument_list|)
argument_list|)
expr_stmt|;
comment|//add a xmlschema import
if|if
condition|(
operator|!
name|currentSchema
operator|.
name|getTargetNamespace
argument_list|()
operator|.
name|equals
argument_list|(
name|xmlSchema
operator|.
name|getTargetNamespace
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|importFile
init|=
name|wsdlVisitor
operator|.
name|getOutputDir
argument_list|()
operator|+
name|System
operator|.
name|getProperty
argument_list|(
literal|"file.separator"
argument_list|)
operator|+
name|scopedName
operator|.
name|getParent
argument_list|()
operator|.
name|toString
argument_list|(
literal|"_"
argument_list|)
decl_stmt|;
name|manager
operator|.
name|addXmlSchemaImport
argument_list|(
name|currentSchema
argument_list|,
name|xmlSchema
argument_list|,
name|importFile
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|result
return|;
block|}
comment|// Searches all the inherited interfaces for the type.
specifier|private
specifier|static
name|boolean
name|findSchemaTypeInInheritedScope
parameter_list|(
name|Scope
name|scope
parameter_list|,
name|Definition
name|defn
parameter_list|,
name|XmlSchema
name|schemaRef
parameter_list|,
name|AST
name|node
parameter_list|,
name|WSDLASTVisitor
name|wsdlVisitor
parameter_list|,
name|VisitorTypeHolder
name|holder
parameter_list|)
block|{
name|boolean
name|result
init|=
literal|false
decl_stmt|;
name|List
argument_list|<
name|Scope
argument_list|>
name|baseScopes
init|=
name|wsdlVisitor
operator|.
name|getInheritedScopeMap
argument_list|()
operator|.
name|get
argument_list|(
name|scope
argument_list|)
decl_stmt|;
if|if
condition|(
name|baseScopes
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|Scope
argument_list|>
name|scopeList
init|=
operator|new
name|ArrayList
argument_list|<
name|Scope
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Scope
name|scopeName
range|:
name|baseScopes
control|)
block|{
name|scopeList
operator|.
name|add
argument_list|(
name|scopeName
argument_list|)
expr_stmt|;
block|}
name|result
operator|=
name|findSchemaTypeInBaseScope
argument_list|(
name|scopeList
argument_list|,
name|scope
argument_list|,
name|defn
argument_list|,
name|schemaRef
argument_list|,
name|node
argument_list|,
name|wsdlVisitor
argument_list|,
name|holder
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|// Does a breath depth search first.
specifier|public
specifier|static
name|boolean
name|findSchemaTypeInBaseScope
parameter_list|(
name|List
argument_list|<
name|Scope
argument_list|>
name|scopeList
parameter_list|,
name|Scope
name|scope
parameter_list|,
name|Definition
name|defn
parameter_list|,
name|XmlSchema
name|schemaRef
parameter_list|,
name|AST
name|node
parameter_list|,
name|WSDLASTVisitor
name|wsdlVisitor
parameter_list|,
name|VisitorTypeHolder
name|holder
parameter_list|)
block|{
name|List
argument_list|<
name|Scope
argument_list|>
name|inheritedList
init|=
operator|new
name|ArrayList
argument_list|<
name|Scope
argument_list|>
argument_list|()
decl_stmt|;
name|boolean
name|result
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|scopeList
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Scope
name|scopeName
range|:
name|scopeList
control|)
block|{
name|inheritedList
operator|.
name|add
argument_list|(
name|scopeName
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Scope
name|inheritScope
range|:
name|scopeList
control|)
block|{
name|Scope
name|scopedName
init|=
operator|new
name|Scope
argument_list|(
name|inheritScope
argument_list|,
name|node
argument_list|)
decl_stmt|;
name|result
operator|=
name|findScopeSchemaType
argument_list|(
name|scopedName
argument_list|,
name|schemaRef
argument_list|,
name|wsdlVisitor
argument_list|,
name|holder
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|result
condition|)
block|{
name|inheritedList
operator|.
name|remove
argument_list|(
name|inheritScope
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Scope
argument_list|>
name|scopes
init|=
name|wsdlVisitor
operator|.
name|getInheritedScopeMap
argument_list|()
operator|.
name|get
argument_list|(
name|inheritScope
argument_list|)
decl_stmt|;
if|if
condition|(
name|scopes
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Scope
name|scopeName
range|:
name|scopes
control|)
block|{
name|inheritedList
operator|.
name|add
argument_list|(
name|scopeName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
return|return
name|result
return|;
block|}
block|}
if|if
condition|(
operator|!
name|inheritedList
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|Scope
argument_list|>
name|baseList
init|=
operator|new
name|ArrayList
argument_list|<
name|Scope
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Scope
name|scopeName
range|:
name|inheritedList
control|)
block|{
name|baseList
operator|.
name|add
argument_list|(
name|scopeName
argument_list|)
expr_stmt|;
block|}
name|result
operator|=
name|findSchemaTypeInBaseScope
argument_list|(
name|baseList
argument_list|,
name|scope
argument_list|,
name|defn
argument_list|,
name|schemaRef
argument_list|,
name|node
argument_list|,
name|wsdlVisitor
argument_list|,
name|holder
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
comment|// Searches this scope for the schema type.
specifier|private
specifier|static
name|boolean
name|findScopeSchemaType
parameter_list|(
name|Scope
name|scopedName
parameter_list|,
name|XmlSchema
name|schemaRef
parameter_list|,
name|WSDLASTVisitor
name|wsdlVisitor
parameter_list|,
name|VisitorTypeHolder
name|holder
parameter_list|)
block|{
name|XmlSchemaCollection
name|schemas
init|=
name|wsdlVisitor
operator|.
name|getSchemas
argument_list|()
decl_stmt|;
name|TypeMappingType
name|typeMap
init|=
name|wsdlVisitor
operator|.
name|getTypeMap
argument_list|()
decl_stmt|;
name|ModuleToNSMapper
name|mapper
init|=
name|wsdlVisitor
operator|.
name|getModuleToNSMapper
argument_list|()
decl_stmt|;
name|WSDLSchemaManager
name|manager
init|=
name|wsdlVisitor
operator|.
name|getManager
argument_list|()
decl_stmt|;
name|boolean
name|result
init|=
name|findNonSchemaType
argument_list|(
name|scopedName
operator|.
name|toString
argument_list|()
argument_list|,
name|wsdlVisitor
argument_list|,
name|holder
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|result
condition|)
block|{
name|QName
name|qname
init|=
literal|null
decl_stmt|;
name|XmlSchema
name|xmlSchema
init|=
name|schemaRef
decl_stmt|;
name|String
name|tns
init|=
name|wsdlVisitor
operator|.
name|getModuleToNSMapper
argument_list|()
operator|.
name|map
argument_list|(
name|scopedName
operator|.
name|getParent
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|tns
operator|!=
literal|null
condition|)
block|{
name|xmlSchema
operator|=
name|wsdlVisitor
operator|.
name|getManager
argument_list|()
operator|.
name|getXmlSchema
argument_list|(
name|tns
argument_list|)
expr_stmt|;
block|}
name|XmlSchemaType
name|stype
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|xmlSchema
operator|!=
literal|null
condition|)
block|{
comment|// Exceptions are treated as a special case as for the
comment|// doc/literal style
comment|// in the schema we will have an element and a complextype
comment|// so the name
comment|// and the typename will be different.
name|String
name|scopedNameString
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|mapper
operator|.
name|isDefaultMapping
argument_list|()
condition|)
block|{
name|scopedNameString
operator|=
name|scopedName
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|scopedNameString
operator|=
name|scopedName
operator|.
name|tail
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|exceptionMode
condition|)
block|{
name|qname
operator|=
operator|new
name|QName
argument_list|(
name|xmlSchema
operator|.
name|getTargetNamespace
argument_list|()
argument_list|,
name|scopedNameString
operator|+
literal|"Type"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|qname
operator|=
operator|new
name|QName
argument_list|(
name|xmlSchema
operator|.
name|getTargetNamespace
argument_list|()
argument_list|,
name|scopedNameString
argument_list|)
expr_stmt|;
block|}
name|stype
operator|=
name|xmlSchema
operator|.
name|getTypeByName
argument_list|(
name|qname
argument_list|)
expr_stmt|;
if|if
condition|(
name|stype
operator|==
literal|null
condition|)
block|{
name|stype
operator|=
name|schemas
operator|.
name|getTypeByQName
argument_list|(
name|qname
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|stype
operator|!=
literal|null
condition|)
block|{
name|result
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|result
operator|&&
name|holder
operator|!=
literal|null
condition|)
block|{
name|holder
operator|.
name|setSchemaType
argument_list|(
name|stype
argument_list|)
expr_stmt|;
name|holder
operator|.
name|setCorbaType
argument_list|(
name|getCorbaSchemaType
argument_list|(
name|xmlSchema
argument_list|,
name|typeMap
argument_list|,
name|stype
argument_list|,
name|scopedName
argument_list|)
argument_list|)
expr_stmt|;
comment|// add a xmlschema import
if|if
condition|(
operator|!
name|schemaRef
operator|.
name|getTargetNamespace
argument_list|()
operator|.
name|equals
argument_list|(
name|xmlSchema
operator|.
name|getTargetNamespace
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|importFile
init|=
name|wsdlVisitor
operator|.
name|getOutputDir
argument_list|()
operator|+
name|System
operator|.
name|getProperty
argument_list|(
literal|"file.separator"
argument_list|)
operator|+
name|scopedName
operator|.
name|getParent
argument_list|()
operator|.
name|toString
argument_list|(
literal|"_"
argument_list|)
decl_stmt|;
name|manager
operator|.
name|addXmlSchemaImport
argument_list|(
name|schemaRef
argument_list|,
name|xmlSchema
argument_list|,
name|importFile
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|result
return|;
block|}
specifier|public
specifier|static
name|CorbaTypeImpl
name|findCorbaTypeForSchemaType
parameter_list|(
name|TypeMappingType
name|typeMap
parameter_list|,
name|QName
name|schemaTypeName
parameter_list|,
name|Scope
name|scopedName
parameter_list|)
block|{
name|CorbaTypeImpl
name|result
init|=
literal|null
decl_stmt|;
for|for
control|(
name|CorbaTypeImpl
name|type
range|:
name|typeMap
operator|.
name|getStructOrExceptionOrUnion
argument_list|()
control|)
block|{
if|if
condition|(
operator|(
name|type
operator|instanceof
name|Sequence
operator|)
operator|||
operator|(
name|type
operator|instanceof
name|Array
operator|)
operator|||
operator|(
name|type
operator|.
name|getType
argument_list|()
operator|==
literal|null
operator|)
operator|||
operator|(
name|type
operator|instanceof
name|Anonsequence
operator|)
operator|||
operator|(
name|type
operator|instanceof
name|Anonarray
operator|)
condition|)
block|{
comment|//REVISIT, cannot compare the type because they are incorrect
if|if
condition|(
name|type
operator|.
name|getQName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
operator|.
name|equals
argument_list|(
name|schemaTypeName
operator|.
name|getLocalPart
argument_list|()
argument_list|)
condition|)
block|{
name|result
operator|=
name|type
expr_stmt|;
break|break;
block|}
comment|// If we are using the module to ns mapping, then the name of the type in schema
comment|// and in the typemap are actually different.  We should then compare with the scoped
comment|// name that we are given.
if|if
condition|(
name|type
operator|.
name|getQName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
operator|.
name|equals
argument_list|(
name|scopedName
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
name|result
operator|=
name|type
expr_stmt|;
break|break;
block|}
block|}
elseif|else
if|if
condition|(
name|schemaTypeName
operator|.
name|equals
argument_list|(
name|type
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
name|result
operator|=
name|type
expr_stmt|;
break|break;
block|}
block|}
return|return
name|result
return|;
block|}
specifier|public
specifier|static
name|CorbaTypeImpl
name|findCorbaType
parameter_list|(
name|TypeMappingType
name|typeMap
parameter_list|,
name|QName
name|typeName
parameter_list|)
block|{
name|CorbaTypeImpl
name|result
init|=
literal|null
decl_stmt|;
for|for
control|(
name|CorbaTypeImpl
name|type
range|:
name|typeMap
operator|.
name|getStructOrExceptionOrUnion
argument_list|()
control|)
block|{
if|if
condition|(
name|type
operator|.
name|getQName
argument_list|()
operator|.
name|equals
argument_list|(
name|typeName
argument_list|)
condition|)
block|{
name|result
operator|=
name|type
expr_stmt|;
break|break;
block|}
block|}
return|return
name|result
return|;
block|}
specifier|protected
specifier|static
name|boolean
name|isFullyScopedName
parameter_list|(
name|AST
name|node
parameter_list|)
block|{
if|if
condition|(
name|node
operator|.
name|getType
argument_list|()
operator|==
name|IDLTokenTypes
operator|.
name|IDENT
operator|&&
name|node
operator|.
name|getFirstChild
argument_list|()
operator|!=
literal|null
operator|&&
operator|(
operator|(
name|node
operator|.
name|getFirstChild
argument_list|()
operator|.
name|getType
argument_list|()
operator|==
name|IDLTokenTypes
operator|.
name|SCOPEOP
operator|)
operator|||
operator|(
name|node
operator|.
name|getFirstChild
argument_list|()
operator|.
name|getType
argument_list|()
operator|==
name|IDLTokenTypes
operator|.
name|IDENT
operator|)
operator|)
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|protected
specifier|static
name|Scope
name|getFullyScopedName
parameter_list|(
name|Scope
name|currentScope
parameter_list|,
name|AST
name|node
parameter_list|)
block|{
name|Scope
name|scopedName
init|=
operator|new
name|Scope
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|currentScope
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|node
operator|.
name|getText
argument_list|()
argument_list|)
condition|)
block|{
name|scopedName
operator|=
operator|new
name|Scope
argument_list|(
name|currentScope
argument_list|)
expr_stmt|;
block|}
name|scopedName
operator|=
operator|new
name|Scope
argument_list|(
name|scopedName
argument_list|,
name|node
argument_list|)
expr_stmt|;
name|AST
name|scopeNode
init|=
name|node
operator|.
name|getFirstChild
argument_list|()
decl_stmt|;
if|if
condition|(
name|node
operator|.
name|getFirstChild
argument_list|()
operator|.
name|getType
argument_list|()
operator|==
name|IDLTokenTypes
operator|.
name|IDENT
condition|)
block|{
name|scopedName
operator|=
operator|new
name|Scope
argument_list|(
name|scopedName
argument_list|,
name|scopeNode
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
name|scopeNode
operator|.
name|getNextSibling
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|scopeNode
operator|=
name|scopeNode
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
name|scopedName
operator|=
operator|new
name|Scope
argument_list|(
name|scopedName
argument_list|,
name|scopeNode
argument_list|)
expr_stmt|;
block|}
return|return
name|scopedName
return|;
block|}
specifier|protected
specifier|static
name|boolean
name|findNonSchemaType
parameter_list|(
name|String
name|name
parameter_list|,
name|WSDLASTVisitor
name|wsdlVisitor
parameter_list|,
name|VisitorTypeHolder
name|holder
parameter_list|)
block|{
name|boolean
name|result
init|=
literal|false
decl_stmt|;
name|TypeMappingType
name|typeMap
init|=
name|wsdlVisitor
operator|.
name|getTypeMap
argument_list|()
decl_stmt|;
name|XmlSchemaCollection
name|schemas
init|=
name|wsdlVisitor
operator|.
name|getSchemas
argument_list|()
decl_stmt|;
name|QName
name|qname
init|=
operator|new
name|QName
argument_list|(
name|typeMap
operator|.
name|getTargetNamespace
argument_list|()
argument_list|,
name|name
argument_list|)
decl_stmt|;
name|CorbaTypeImpl
name|corbaType
init|=
name|findCorbaType
argument_list|(
name|typeMap
argument_list|,
name|qname
argument_list|)
decl_stmt|;
if|if
condition|(
name|corbaType
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|corbaType
operator|instanceof
name|Alias
condition|)
block|{
name|result
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|holder
operator|!=
literal|null
condition|)
block|{
name|populateAliasSchemaType
argument_list|(
name|corbaType
argument_list|,
name|wsdlVisitor
argument_list|,
name|holder
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
operator|(
operator|(
name|corbaType
operator|instanceof
name|Sequence
operator|)
operator|||
operator|(
name|corbaType
operator|instanceof
name|Anonsequence
operator|)
operator|)
operator|&&
operator|(
operator|(
name|corbaType
operator|.
name|getType
argument_list|()
operator|.
name|equals
argument_list|(
name|Constants
operator|.
name|XSD_BASE64
argument_list|)
operator|)
operator|||
operator|(
name|corbaType
operator|.
name|getType
argument_list|()
operator|.
name|equals
argument_list|(
name|Constants
operator|.
name|XSD_BASE64
argument_list|)
operator|)
operator|)
condition|)
block|{
comment|//special case of sequence of octets
name|result
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|holder
operator|!=
literal|null
condition|)
block|{
name|holder
operator|.
name|setCorbaType
argument_list|(
name|corbaType
argument_list|)
expr_stmt|;
name|holder
operator|.
name|setSchemaType
argument_list|(
name|schemas
operator|.
name|getTypeByQName
argument_list|(
name|corbaType
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|result
return|;
block|}
specifier|protected
specifier|static
name|void
name|populateAliasSchemaType
parameter_list|(
name|CorbaTypeImpl
name|corbaType
parameter_list|,
name|WSDLASTVisitor
name|wsdlVisitor
parameter_list|,
name|VisitorTypeHolder
name|holder
parameter_list|)
block|{
name|XmlSchemaCollection
name|schemas
init|=
name|wsdlVisitor
operator|.
name|getSchemas
argument_list|()
decl_stmt|;
name|TypeMappingType
name|typeMap
init|=
name|wsdlVisitor
operator|.
name|getTypeMap
argument_list|()
decl_stmt|;
name|holder
operator|.
name|setCorbaType
argument_list|(
name|corbaType
argument_list|)
expr_stmt|;
name|Alias
name|alias
init|=
operator|(
name|Alias
operator|)
name|corbaType
decl_stmt|;
comment|//loop through alias base types, till you get a non-alias corba type
name|CorbaTypeImpl
name|type
init|=
name|findCorbaType
argument_list|(
name|typeMap
argument_list|,
name|alias
operator|.
name|getBasetype
argument_list|()
argument_list|)
decl_stmt|;
while|while
condition|(
operator|(
name|type
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|type
operator|instanceof
name|Alias
operator|)
condition|)
block|{
name|alias
operator|=
operator|(
name|Alias
operator|)
name|type
expr_stmt|;
name|type
operator|=
name|findCorbaType
argument_list|(
name|typeMap
argument_list|,
name|alias
operator|.
name|getBasetype
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|QName
name|tname
decl_stmt|;
if|if
condition|(
name|type
operator|==
literal|null
condition|)
block|{
comment|//it must be a primitive type
name|tname
operator|=
name|xmlSchemaPrimitiveMap
operator|.
name|get
argument_list|(
name|alias
operator|.
name|getBasetype
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|tname
operator|=
name|type
operator|.
name|getType
argument_list|()
expr_stmt|;
block|}
name|XmlSchemaType
name|stype
init|=
name|schemas
operator|.
name|getTypeByQName
argument_list|(
name|tname
argument_list|)
decl_stmt|;
if|if
condition|(
name|stype
operator|==
literal|null
condition|)
block|{
name|XmlSchema
name|xmlSchema
init|=
name|wsdlVisitor
operator|.
name|getManager
argument_list|()
operator|.
name|getXmlSchema
argument_list|(
name|tname
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|xmlSchema
operator|!=
literal|null
condition|)
block|{
name|stype
operator|=
name|xmlSchema
operator|.
name|getTypeByName
argument_list|(
name|tname
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|stype
operator|=
name|wsdlVisitor
operator|.
name|getSchema
argument_list|()
operator|.
name|getTypeByName
argument_list|(
name|tname
argument_list|)
expr_stmt|;
block|}
block|}
name|holder
operator|.
name|setSchemaType
argument_list|(
name|stype
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

