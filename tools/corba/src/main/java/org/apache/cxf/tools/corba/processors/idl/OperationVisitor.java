begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|corba
operator|.
name|processors
operator|.
name|idl
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|Binding
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|BindingFault
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|BindingInput
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|BindingOperation
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|BindingOutput
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|Definition
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|Fault
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|Input
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|Operation
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|Output
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|Part
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|PortType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|WSDLException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|extensions
operator|.
name|ExtensibilityElement
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|extensions
operator|.
name|ExtensionRegistry
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|collections
operator|.
name|AST
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|ArgType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|CorbaConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|CorbaTypeImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|OperationType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|RaisesType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|corba
operator|.
name|common
operator|.
name|ReferenceConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaComplexType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaElement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaSequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaType
import|;
end_import

begin_class
specifier|public
class|class
name|OperationVisitor
extends|extends
name|VisitorBase
block|{
specifier|private
specifier|static
specifier|final
name|String
name|REQUEST_SUFFIX
init|=
literal|"Request"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|RESPONSE_SUFFIX
init|=
literal|"Response"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|IN_PARAMETER
init|=
literal|"inparameter"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|OUT_PARAMETER
init|=
literal|"outparameter"
decl_stmt|;
comment|//private static final String INOUT_PARAMETER = "inoutparameter";
specifier|private
specifier|static
specifier|final
name|String
name|RETURN_PARAMETER
init|=
literal|"return"
decl_stmt|;
specifier|private
name|ExtensionRegistry
name|extReg
decl_stmt|;
specifier|private
name|PortType
name|portType
decl_stmt|;
specifier|private
name|Binding
name|binding
decl_stmt|;
specifier|private
name|Message
name|inputMsg
decl_stmt|;
specifier|private
name|Message
name|outputMsg
decl_stmt|;
specifier|private
name|OperationType
name|corbaOperation
decl_stmt|;
specifier|public
name|OperationVisitor
parameter_list|(
name|Scope
name|scope
parameter_list|,
name|Definition
name|defn
parameter_list|,
name|XmlSchema
name|schemaRef
parameter_list|,
name|WSDLASTVisitor
name|wsdlVisitor
parameter_list|,
name|PortType
name|wsdlPortType
parameter_list|,
name|Binding
name|wsdlBinding
parameter_list|)
block|{
name|super
argument_list|(
name|scope
argument_list|,
name|defn
argument_list|,
name|schemaRef
argument_list|,
name|wsdlVisitor
argument_list|)
expr_stmt|;
name|extReg
operator|=
name|definition
operator|.
name|getExtensionRegistry
argument_list|()
expr_stmt|;
name|portType
operator|=
name|wsdlPortType
expr_stmt|;
name|binding
operator|=
name|wsdlBinding
expr_stmt|;
block|}
specifier|public
specifier|static
name|boolean
name|accept
parameter_list|(
name|Scope
name|scope
parameter_list|,
name|Definition
name|def
parameter_list|,
name|XmlSchema
name|schema
parameter_list|,
name|AST
name|node
parameter_list|,
name|WSDLASTVisitor
name|wsdlVisitor
parameter_list|)
block|{
name|boolean
name|result
init|=
literal|false
decl_stmt|;
name|AST
name|node2
init|=
name|node
operator|.
name|getFirstChild
argument_list|()
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|node2
condition|)
block|{
comment|// throw whatever appropriate error
comment|// or do nothing and return false
block|}
elseif|else
if|if
condition|(
name|node2
operator|.
name|getType
argument_list|()
operator|==
name|IDLTokenTypes
operator|.
name|LITERAL_oneway
condition|)
block|{
name|result
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|int
name|type
init|=
name|node2
operator|.
name|getType
argument_list|()
decl_stmt|;
name|result
operator|=
name|type
operator|==
name|IDLTokenTypes
operator|.
name|LITERAL_void
operator|||
name|PrimitiveTypesVisitor
operator|.
name|accept
argument_list|(
name|node2
argument_list|)
operator|||
name|StringVisitor
operator|.
name|accept
argument_list|(
name|node2
argument_list|)
operator|||
name|ScopedNameVisitor
operator|.
name|accept
argument_list|(
name|scope
argument_list|,
name|def
argument_list|,
name|schema
argument_list|,
name|node2
argument_list|,
name|wsdlVisitor
argument_list|)
comment|//REVISIT, change this to be def& then schema
operator|||
name|ObjectReferenceVisitor
operator|.
name|accept
argument_list|(
name|scope
argument_list|,
name|schema
argument_list|,
name|def
argument_list|,
name|node2
argument_list|,
name|wsdlVisitor
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|public
name|void
name|visit
parameter_list|(
name|AST
name|node
parameter_list|)
block|{
comment|//<op_dcl> ::= [<op_attribute>]<op_type_spec>
comment|//<identifier><parameter_dcls>
comment|//              [<raises_expr>] [<context_expr>]
comment|//<op_attribute> ::= "oneway"
comment|//<op_type_spec> ::=<param_type_spec>
comment|//                  | "void"
comment|//<parameter_dcls> ::= "("<param_dcl> {","<param_dcl>}* ")"
comment|//                    | "(" ")"
comment|//<raises_expr> ::= "raises" "("<scoped_name> {","<scoped_name>}* ")"
comment|//<context_expr> ::= "context" "("<string_literal> {","<string_literal>}* ")"
name|QName
name|operationQName
init|=
operator|new
name|QName
argument_list|(
name|schema
operator|.
name|getTargetNamespace
argument_list|()
argument_list|,
name|node
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|isDuplicate
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|schema
operator|.
name|getElements
argument_list|()
operator|.
name|containsKey
argument_list|(
name|operationQName
argument_list|)
condition|)
block|{
name|isDuplicate
operator|=
literal|true
expr_stmt|;
block|}
name|Operation
name|operation
init|=
name|generateOperation
argument_list|(
name|operationQName
operator|.
name|getLocalPart
argument_list|()
argument_list|,
name|isDuplicate
argument_list|)
decl_stmt|;
name|BindingOperation
name|bindingOperation
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|isDuplicate
condition|)
block|{
name|bindingOperation
operator|=
name|generateBindingOperation
argument_list|(
name|binding
argument_list|,
name|operation
argument_list|,
name|operationQName
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|bindingOperation
operator|=
name|generateBindingOperation
argument_list|(
name|binding
argument_list|,
name|operation
argument_list|,
name|operation
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|XmlSchemaSequence
name|inputWrappingSequence
init|=
operator|new
name|XmlSchemaSequence
argument_list|()
decl_stmt|;
name|XmlSchemaElement
name|inputElement
init|=
name|generateWrapper
argument_list|(
operator|new
name|QName
argument_list|(
name|schema
operator|.
name|getTargetNamespace
argument_list|()
argument_list|,
name|operation
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|inputWrappingSequence
argument_list|)
decl_stmt|;
name|inputMsg
operator|=
name|generateInputMessage
argument_list|(
name|operation
argument_list|,
name|bindingOperation
argument_list|)
expr_stmt|;
name|generateInputPart
argument_list|(
name|inputMsg
argument_list|,
name|inputElement
argument_list|)
expr_stmt|;
comment|//<op_attribute>
name|node
operator|=
name|node
operator|.
name|getFirstChild
argument_list|()
expr_stmt|;
name|XmlSchemaSequence
name|outputWrappingSequence
init|=
literal|null
decl_stmt|;
name|XmlSchemaElement
name|outputElement
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|node
operator|!=
literal|null
operator|&&
operator|(
name|node
operator|.
name|getType
argument_list|()
operator|==
name|IDLTokenTypes
operator|.
name|LITERAL_oneway
operator|)
condition|)
block|{
comment|// oneway operations map to operations with only input message
comment|// no outputMsg nor outputPart need be created
name|node
operator|=
name|node
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// normal operations map to request-response operations
comment|// with input and output messages
name|outputWrappingSequence
operator|=
operator|new
name|XmlSchemaSequence
argument_list|()
expr_stmt|;
name|outputElement
operator|=
name|generateWrapper
argument_list|(
operator|new
name|QName
argument_list|(
name|schema
operator|.
name|getTargetNamespace
argument_list|()
argument_list|,
name|operation
operator|.
name|getName
argument_list|()
operator|+
name|RESPONSE_SUFFIX
argument_list|)
argument_list|,
name|outputWrappingSequence
argument_list|)
expr_stmt|;
name|outputMsg
operator|=
name|generateOutputMessage
argument_list|(
name|operation
argument_list|,
name|bindingOperation
argument_list|)
expr_stmt|;
name|generateOutputPart
argument_list|(
name|outputMsg
argument_list|,
name|outputElement
argument_list|)
expr_stmt|;
block|}
comment|//<op_type_spec>
name|visitOpTypeSpec
argument_list|(
name|node
argument_list|,
name|outputWrappingSequence
argument_list|)
expr_stmt|;
comment|//<parameter_dcls>
name|node
operator|=
name|TypesUtils
operator|.
name|getCorbaTypeNameNode
argument_list|(
name|node
argument_list|)
expr_stmt|;
while|while
condition|(
name|ParamDclVisitor
operator|.
name|accept
argument_list|(
name|node
argument_list|)
condition|)
block|{
name|ParamDclVisitor
name|visitor
init|=
operator|new
name|ParamDclVisitor
argument_list|(
name|getScope
argument_list|()
argument_list|,
name|definition
argument_list|,
name|schema
argument_list|,
name|wsdlVisitor
argument_list|,
name|inputWrappingSequence
argument_list|,
name|outputWrappingSequence
argument_list|,
name|corbaOperation
argument_list|)
decl_stmt|;
name|visitor
operator|.
name|visit
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|node
operator|=
name|node
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
block|}
comment|//<raises_expr>
if|if
condition|(
name|node
operator|!=
literal|null
operator|&&
name|node
operator|.
name|getType
argument_list|()
operator|==
name|IDLTokenTypes
operator|.
name|LITERAL_raises
condition|)
block|{
name|node
operator|=
name|node
operator|.
name|getFirstChild
argument_list|()
expr_stmt|;
while|while
condition|(
name|node
operator|!=
literal|null
condition|)
block|{
comment|//
name|ScopedNameVisitor
name|visitor
init|=
operator|new
name|ScopedNameVisitor
argument_list|(
name|getScope
argument_list|()
argument_list|,
name|definition
argument_list|,
name|schema
argument_list|,
name|wsdlVisitor
argument_list|)
decl_stmt|;
name|visitor
operator|.
name|setExceptionMode
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|visitor
operator|.
name|visit
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|CorbaTypeImpl
name|corbaType
init|=
name|visitor
operator|.
name|getCorbaType
argument_list|()
decl_stmt|;
name|XmlSchemaType
name|schemaType
init|=
name|visitor
operator|.
name|getSchemaType
argument_list|()
decl_stmt|;
comment|//REVISIT, schema type ends with Type for exceptions, so strip it to get the element name.
name|int
name|pos
init|=
name|schemaType
operator|.
name|getQName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|"Type"
argument_list|)
decl_stmt|;
name|QName
name|elementQName
init|=
operator|new
name|QName
argument_list|(
name|schemaType
operator|.
name|getQName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
name|schemaType
operator|.
name|getQName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|pos
argument_list|)
argument_list|)
decl_stmt|;
name|createFaultMessage
argument_list|(
name|corbaType
argument_list|,
name|operation
argument_list|,
name|bindingOperation
argument_list|,
name|elementQName
argument_list|)
expr_stmt|;
name|node
operator|=
name|node
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
name|visitor
operator|.
name|setExceptionMode
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|Operation
name|generateOperation
parameter_list|(
name|String
name|name
parameter_list|,
name|boolean
name|isDuplicate
parameter_list|)
block|{
name|Operation
name|op
init|=
name|definition
operator|.
name|createOperation
argument_list|()
decl_stmt|;
if|if
condition|(
name|isDuplicate
condition|)
block|{
comment|// Replace '.' in the scoping name with '_'.  This results in the final
comment|// operation name being more readable (otherwise generated code removes
comment|// the '.' and merges all of the scoping names together)
name|String
name|prefix
init|=
name|getScope
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|replace
argument_list|(
literal|'.'
argument_list|,
literal|'_'
argument_list|)
decl_stmt|;
name|name
operator|=
name|prefix
operator|+
literal|"_"
operator|+
name|name
expr_stmt|;
block|}
name|op
operator|.
name|setName
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|op
operator|.
name|setUndefined
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|portType
operator|.
name|addOperation
argument_list|(
name|op
argument_list|)
expr_stmt|;
return|return
name|op
return|;
block|}
specifier|private
name|BindingOperation
name|generateBindingOperation
parameter_list|(
name|Binding
name|wsdlBinding
parameter_list|,
name|Operation
name|op
parameter_list|,
name|String
name|corbaOpName
parameter_list|)
block|{
name|BindingOperation
name|bindingOperation
init|=
name|definition
operator|.
name|createBindingOperation
argument_list|()
decl_stmt|;
comment|//OperationType operationType = null;
try|try
block|{
name|corbaOperation
operator|=
operator|(
name|OperationType
operator|)
name|extReg
operator|.
name|createExtension
argument_list|(
name|BindingOperation
operator|.
name|class
argument_list|,
name|CorbaConstants
operator|.
name|NE_CORBA_OPERATION
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|WSDLException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
name|corbaOperation
operator|.
name|setName
argument_list|(
name|corbaOpName
argument_list|)
expr_stmt|;
name|bindingOperation
operator|.
name|addExtensibilityElement
argument_list|(
operator|(
name|ExtensibilityElement
operator|)
name|corbaOperation
argument_list|)
expr_stmt|;
name|bindingOperation
operator|.
name|setOperation
argument_list|(
name|op
argument_list|)
expr_stmt|;
name|bindingOperation
operator|.
name|setName
argument_list|(
name|op
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|binding
operator|.
name|addBindingOperation
argument_list|(
name|bindingOperation
argument_list|)
expr_stmt|;
return|return
name|bindingOperation
return|;
block|}
specifier|public
name|Message
name|generateInputMessage
parameter_list|(
name|Operation
name|operation
parameter_list|,
name|BindingOperation
name|bindingOperation
parameter_list|)
block|{
name|Message
name|msg
init|=
name|definition
operator|.
name|createMessage
argument_list|()
decl_stmt|;
name|QName
name|msgName
decl_stmt|;
if|if
condition|(
operator|!
name|mapper
operator|.
name|isDefaultMapping
argument_list|()
condition|)
block|{
comment|//mangle the message name
comment|//REVISIT, do we put in the entire scope for mangling
name|msgName
operator|=
operator|new
name|QName
argument_list|(
name|definition
operator|.
name|getTargetNamespace
argument_list|()
argument_list|,
name|getScope
argument_list|()
operator|.
name|tail
argument_list|()
operator|+
literal|"."
operator|+
name|operation
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|msgName
operator|=
operator|new
name|QName
argument_list|(
name|definition
operator|.
name|getTargetNamespace
argument_list|()
argument_list|,
name|operation
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|msg
operator|.
name|setQName
argument_list|(
name|msgName
argument_list|)
expr_stmt|;
name|msg
operator|.
name|setUndefined
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|String
name|inputName
init|=
name|operation
operator|.
name|getName
argument_list|()
operator|+
name|REQUEST_SUFFIX
decl_stmt|;
name|Input
name|input
init|=
name|definition
operator|.
name|createInput
argument_list|()
decl_stmt|;
name|input
operator|.
name|setName
argument_list|(
name|inputName
argument_list|)
expr_stmt|;
name|input
operator|.
name|setMessage
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|BindingInput
name|bindingInput
init|=
name|definition
operator|.
name|createBindingInput
argument_list|()
decl_stmt|;
name|bindingInput
operator|.
name|setName
argument_list|(
name|inputName
argument_list|)
expr_stmt|;
name|bindingOperation
operator|.
name|setBindingInput
argument_list|(
name|bindingInput
argument_list|)
expr_stmt|;
name|operation
operator|.
name|setInput
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|definition
operator|.
name|addMessage
argument_list|(
name|msg
argument_list|)
expr_stmt|;
return|return
name|msg
return|;
block|}
specifier|public
name|Message
name|generateOutputMessage
parameter_list|(
name|Operation
name|operation
parameter_list|,
name|BindingOperation
name|bindingOperation
parameter_list|)
block|{
name|Message
name|msg
init|=
name|definition
operator|.
name|createMessage
argument_list|()
decl_stmt|;
name|QName
name|msgName
decl_stmt|;
if|if
condition|(
operator|!
name|mapper
operator|.
name|isDefaultMapping
argument_list|()
condition|)
block|{
comment|//mangle the message name
comment|//REVISIT, do we put in the entire scope for mangling
name|msgName
operator|=
operator|new
name|QName
argument_list|(
name|definition
operator|.
name|getTargetNamespace
argument_list|()
argument_list|,
name|getScope
argument_list|()
operator|.
name|tail
argument_list|()
operator|+
literal|"."
operator|+
name|operation
operator|.
name|getName
argument_list|()
operator|+
name|RESPONSE_SUFFIX
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|msgName
operator|=
operator|new
name|QName
argument_list|(
name|definition
operator|.
name|getTargetNamespace
argument_list|()
argument_list|,
name|operation
operator|.
name|getName
argument_list|()
operator|+
name|RESPONSE_SUFFIX
argument_list|)
expr_stmt|;
block|}
name|msg
operator|.
name|setQName
argument_list|(
name|msgName
argument_list|)
expr_stmt|;
name|msg
operator|.
name|setUndefined
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|String
name|outputName
init|=
name|operation
operator|.
name|getName
argument_list|()
operator|+
name|RESPONSE_SUFFIX
decl_stmt|;
name|Output
name|output
init|=
name|definition
operator|.
name|createOutput
argument_list|()
decl_stmt|;
name|output
operator|.
name|setName
argument_list|(
name|outputName
argument_list|)
expr_stmt|;
name|output
operator|.
name|setMessage
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|BindingOutput
name|bindingOutput
init|=
name|definition
operator|.
name|createBindingOutput
argument_list|()
decl_stmt|;
name|bindingOutput
operator|.
name|setName
argument_list|(
name|outputName
argument_list|)
expr_stmt|;
name|bindingOperation
operator|.
name|setBindingOutput
argument_list|(
name|bindingOutput
argument_list|)
expr_stmt|;
name|operation
operator|.
name|setOutput
argument_list|(
name|output
argument_list|)
expr_stmt|;
name|definition
operator|.
name|addMessage
argument_list|(
name|msg
argument_list|)
expr_stmt|;
return|return
name|msg
return|;
block|}
specifier|private
name|Part
name|generateInputPart
parameter_list|(
name|Message
name|inputMessage
parameter_list|,
name|XmlSchemaElement
name|element
parameter_list|)
block|{
comment|// message - part
name|Part
name|part
init|=
name|definition
operator|.
name|createPart
argument_list|()
decl_stmt|;
name|part
operator|.
name|setName
argument_list|(
name|IN_PARAMETER
argument_list|)
expr_stmt|;
name|part
operator|.
name|setElementName
argument_list|(
name|element
operator|.
name|getQName
argument_list|()
argument_list|)
expr_stmt|;
name|inputMessage
operator|.
name|addPart
argument_list|(
name|part
argument_list|)
expr_stmt|;
return|return
name|part
return|;
block|}
specifier|private
name|Part
name|generateOutputPart
parameter_list|(
name|Message
name|outputMessage
parameter_list|,
name|XmlSchemaElement
name|element
parameter_list|)
block|{
comment|// message - part
name|Part
name|part
init|=
name|definition
operator|.
name|createPart
argument_list|()
decl_stmt|;
name|part
operator|.
name|setName
argument_list|(
name|OUT_PARAMETER
argument_list|)
expr_stmt|;
name|part
operator|.
name|setElementName
argument_list|(
name|element
operator|.
name|getQName
argument_list|()
argument_list|)
expr_stmt|;
name|outputMessage
operator|.
name|addPart
argument_list|(
name|part
argument_list|)
expr_stmt|;
return|return
name|part
return|;
block|}
comment|/*-      * Build the Wrapped Document Style wrapping elements      * i.e.<xs:element name="...">      *<xs:complexType>      *<xs:sequence>      *         ...      *</xs:sequence>      *</xs:complexType>      *</xs:element>      */
specifier|private
name|XmlSchemaElement
name|generateWrapper
parameter_list|(
name|QName
name|el
parameter_list|,
name|XmlSchemaSequence
name|wrappingSequence
parameter_list|)
block|{
name|XmlSchemaComplexType
name|schemaComplexType
init|=
operator|new
name|XmlSchemaComplexType
argument_list|(
name|schema
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|schemaComplexType
operator|.
name|setParticle
argument_list|(
name|wrappingSequence
argument_list|)
expr_stmt|;
name|XmlSchemaElement
name|wrappingSchemaElement
init|=
operator|new
name|XmlSchemaElement
argument_list|(
name|schema
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|wrappingSchemaElement
operator|.
name|setName
argument_list|(
name|el
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
name|wrappingSchemaElement
operator|.
name|setSchemaType
argument_list|(
name|schemaComplexType
argument_list|)
expr_stmt|;
return|return
name|wrappingSchemaElement
return|;
block|}
specifier|private
name|XmlSchemaElement
name|addElement
parameter_list|(
name|XmlSchemaSequence
name|schemaSequence
parameter_list|,
name|XmlSchemaType
name|schemaType
parameter_list|,
name|Scope
name|fqName
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|XmlSchemaElement
name|element
init|=
operator|new
name|XmlSchemaElement
argument_list|(
name|schema
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|element
operator|.
name|setName
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|schemaType
operator|!=
literal|null
condition|)
block|{
name|element
operator|.
name|setSchemaTypeName
argument_list|(
name|schemaType
operator|.
name|getQName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|schemaType
operator|.
name|getQName
argument_list|()
operator|.
name|equals
argument_list|(
name|ReferenceConstants
operator|.
name|WSADDRESSING_TYPE
argument_list|)
condition|)
block|{
name|element
operator|.
name|setNillable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|wsdlVisitor
operator|.
name|getDeferredActions
argument_list|()
operator|.
name|add
argument_list|(
name|fqName
argument_list|,
operator|new
name|OperationDeferredAction
argument_list|(
name|element
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|schemaSequence
operator|.
name|getItems
argument_list|()
operator|.
name|add
argument_list|(
name|element
argument_list|)
expr_stmt|;
return|return
name|element
return|;
block|}
specifier|private
name|void
name|visitOpTypeSpec
parameter_list|(
name|AST
name|node
parameter_list|,
name|XmlSchemaSequence
name|outputWrappingSequence
parameter_list|)
block|{
if|if
condition|(
name|node
operator|.
name|getType
argument_list|()
operator|==
name|IDLTokenTypes
operator|.
name|LITERAL_void
condition|)
block|{
comment|// nothing to do here, move along
return|return;
block|}
else|else
block|{
name|ParamTypeSpecVisitor
name|visitor
init|=
operator|new
name|ParamTypeSpecVisitor
argument_list|(
name|getScope
argument_list|()
argument_list|,
name|definition
argument_list|,
name|schema
argument_list|,
name|wsdlVisitor
argument_list|)
decl_stmt|;
name|visitor
operator|.
name|visit
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|XmlSchemaType
name|schemaType
init|=
name|visitor
operator|.
name|getSchemaType
argument_list|()
decl_stmt|;
name|CorbaTypeImpl
name|corbaType
init|=
name|visitor
operator|.
name|getCorbaType
argument_list|()
decl_stmt|;
name|Scope
name|fqName
init|=
name|visitor
operator|.
name|getFullyQualifiedName
argument_list|()
decl_stmt|;
name|addElement
argument_list|(
name|outputWrappingSequence
argument_list|,
name|schemaType
argument_list|,
name|fqName
argument_list|,
name|RETURN_PARAMETER
argument_list|)
expr_stmt|;
name|addCorbaReturn
argument_list|(
name|corbaType
argument_list|,
name|fqName
argument_list|,
name|RETURN_PARAMETER
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|addCorbaReturn
parameter_list|(
name|CorbaTypeImpl
name|corbaType
parameter_list|,
name|Scope
name|fqName
parameter_list|,
name|String
name|partName
parameter_list|)
block|{
name|ArgType
name|param
init|=
operator|new
name|ArgType
argument_list|()
decl_stmt|;
name|param
operator|.
name|setName
argument_list|(
name|partName
argument_list|)
expr_stmt|;
if|if
condition|(
name|corbaType
operator|!=
literal|null
condition|)
block|{
name|param
operator|.
name|setIdltype
argument_list|(
name|corbaType
operator|.
name|getQName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|wsdlVisitor
operator|.
name|getDeferredActions
argument_list|()
operator|.
name|add
argument_list|(
name|fqName
argument_list|,
operator|new
name|OperationDeferredAction
argument_list|(
name|param
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|corbaOperation
operator|.
name|setReturn
argument_list|(
name|param
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|createFaultMessage
parameter_list|(
name|CorbaTypeImpl
name|corbaType
parameter_list|,
name|Operation
name|operation
parameter_list|,
name|BindingOperation
name|bindingOperation
parameter_list|,
name|QName
name|elementQName
parameter_list|)
block|{
name|String
name|exceptionName
init|=
name|corbaType
operator|.
name|getQName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
decl_stmt|;
name|Definition
name|faultDef
init|=
name|manager
operator|.
name|getWSDLDefinition
argument_list|(
name|elementQName
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|faultDef
operator|==
literal|null
condition|)
block|{
name|faultDef
operator|=
name|definition
expr_stmt|;
block|}
name|Message
name|faultMsg
init|=
name|faultDef
operator|.
name|getMessage
argument_list|(
operator|new
name|QName
argument_list|(
name|faultDef
operator|.
name|getTargetNamespace
argument_list|()
argument_list|,
name|exceptionName
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|faultMsg
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Fault message for exception "
operator|+
name|exceptionName
operator|+
literal|" not found"
argument_list|)
throw|;
block|}
comment|// porttype - operation - fault
name|Fault
name|fault
init|=
name|definition
operator|.
name|createFault
argument_list|()
decl_stmt|;
name|fault
operator|.
name|setMessage
argument_list|(
name|faultMsg
argument_list|)
expr_stmt|;
name|fault
operator|.
name|setName
argument_list|(
name|faultMsg
operator|.
name|getQName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
name|operation
operator|.
name|addFault
argument_list|(
name|fault
argument_list|)
expr_stmt|;
comment|// binding - operation - corba:operation - corba:raises
name|RaisesType
name|raisesType
init|=
operator|new
name|RaisesType
argument_list|()
decl_stmt|;
name|raisesType
operator|.
name|setException
argument_list|(
operator|new
name|QName
argument_list|(
name|typeMap
operator|.
name|getTargetNamespace
argument_list|()
argument_list|,
name|exceptionName
argument_list|)
argument_list|)
expr_stmt|;
name|corbaOperation
operator|.
name|getRaises
argument_list|()
operator|.
name|add
argument_list|(
name|raisesType
argument_list|)
expr_stmt|;
comment|// binding - operation - fault
name|BindingFault
name|bindingFault
init|=
name|definition
operator|.
name|createBindingFault
argument_list|()
decl_stmt|;
name|bindingFault
operator|.
name|setName
argument_list|(
name|faultMsg
operator|.
name|getQName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
name|bindingOperation
operator|.
name|addBindingFault
argument_list|(
name|bindingFault
argument_list|)
expr_stmt|;
comment|//add the fault element namespace to the definition
name|String
name|nsURI
init|=
name|elementQName
operator|.
name|getNamespaceURI
argument_list|()
decl_stmt|;
name|manager
operator|.
name|addWSDLDefinitionNamespace
argument_list|(
name|definition
argument_list|,
name|mapper
operator|.
name|mapNSToPrefix
argument_list|(
name|nsURI
argument_list|)
argument_list|,
name|nsURI
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

