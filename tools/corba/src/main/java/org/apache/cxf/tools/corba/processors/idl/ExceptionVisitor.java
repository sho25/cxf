begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|corba
operator|.
name|processors
operator|.
name|idl
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|Definition
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|Part
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|collections
operator|.
name|AST
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|CorbaTypeImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|MemberType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|corba
operator|.
name|common
operator|.
name|ReferenceConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaComplexType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaElement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaSequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaType
import|;
end_import

begin_class
specifier|public
class|class
name|ExceptionVisitor
extends|extends
name|VisitorBase
block|{
specifier|private
specifier|static
specifier|final
name|String
name|TYPE_SUFFIX
init|=
literal|"Type"
decl_stmt|;
specifier|public
name|ExceptionVisitor
parameter_list|(
name|Scope
name|scope
parameter_list|,
name|Definition
name|defn
parameter_list|,
name|XmlSchema
name|schemaRef
parameter_list|,
name|WSDLASTVisitor
name|wsdlASTVisitor
parameter_list|)
block|{
name|super
argument_list|(
name|scope
argument_list|,
name|defn
argument_list|,
name|schemaRef
argument_list|,
name|wsdlASTVisitor
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|boolean
name|accept
parameter_list|(
name|AST
name|node
parameter_list|)
block|{
if|if
condition|(
name|node
operator|.
name|getType
argument_list|()
operator|==
name|IDLTokenTypes
operator|.
name|LITERAL_exception
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|void
name|visit
parameter_list|(
name|AST
name|node
parameter_list|)
block|{
comment|//<exception_dcl> ::= "exception"<identifier> "{"<member>* "}"
comment|//<member> ::=<type_spec><declarators> ";"
comment|//<type_spec> visited by TypesVisitor
comment|// Following should be visited by a separate visitor
comment|//<declarators> ::=<declarator> { ","<declarator> }*
comment|//<declarator> ::=<simple_declarator>
comment|//                |<complex_declarator>
comment|//<simple_declarator> ::=<identifier>
comment|//<complex_declarator> ::=<array_declarator>
comment|//<array_declarator> ::=<identifier><fixed_array_size>+
comment|//<fixed_array_size> ::= "["<positive_int_const> "]"
name|AST
name|identifierNode
init|=
name|node
operator|.
name|getFirstChild
argument_list|()
decl_stmt|;
name|Scope
name|exceptionScope
init|=
operator|new
name|Scope
argument_list|(
name|getScope
argument_list|()
argument_list|,
name|identifierNode
argument_list|)
decl_stmt|;
comment|// xmlschema:exception
name|Scope
name|scopedName
init|=
operator|new
name|Scope
argument_list|(
name|getScope
argument_list|()
argument_list|,
name|identifierNode
argument_list|)
decl_stmt|;
name|String
name|exceptionName
init|=
name|mapper
operator|.
name|mapToQName
argument_list|(
name|scopedName
argument_list|)
decl_stmt|;
name|XmlSchemaElement
name|element
init|=
operator|new
name|XmlSchemaElement
argument_list|(
name|schema
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|element
operator|.
name|setName
argument_list|(
name|mapper
operator|.
name|mapToQName
argument_list|(
name|scopedName
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|exceptionTypeName
init|=
name|exceptionName
operator|+
name|TYPE_SUFFIX
decl_stmt|;
name|XmlSchemaComplexType
name|complexType
init|=
operator|new
name|XmlSchemaComplexType
argument_list|(
name|schema
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|complexType
operator|.
name|setName
argument_list|(
name|exceptionTypeName
argument_list|)
expr_stmt|;
comment|//complexType.setQName(new QName(schema.getTargetNamespace(), exceptionTypeName));
name|XmlSchemaSequence
name|sequence
init|=
operator|new
name|XmlSchemaSequence
argument_list|()
decl_stmt|;
name|complexType
operator|.
name|setParticle
argument_list|(
name|sequence
argument_list|)
expr_stmt|;
name|element
operator|.
name|setSchemaTypeName
argument_list|(
name|complexType
operator|.
name|getQName
argument_list|()
argument_list|)
expr_stmt|;
comment|// corba:exception
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|Exception
name|exception
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|Exception
argument_list|()
decl_stmt|;
name|exception
operator|.
name|setQName
argument_list|(
operator|new
name|QName
argument_list|(
name|typeMap
operator|.
name|getTargetNamespace
argument_list|()
argument_list|,
name|exceptionName
argument_list|)
argument_list|)
expr_stmt|;
name|exception
operator|.
name|setType
argument_list|(
name|complexType
operator|.
name|getQName
argument_list|()
argument_list|)
expr_stmt|;
name|exception
operator|.
name|setRepositoryID
argument_list|(
name|scopedName
operator|.
name|toIDLRepositoryID
argument_list|()
argument_list|)
expr_stmt|;
comment|// exception members
name|AST
name|memberTypeNode
init|=
name|identifierNode
operator|.
name|getNextSibling
argument_list|()
decl_stmt|;
while|while
condition|(
name|memberTypeNode
operator|!=
literal|null
condition|)
block|{
name|AST
name|memberNode
init|=
name|memberTypeNode
operator|.
name|getNextSibling
argument_list|()
decl_stmt|;
name|TypesVisitor
name|visitor
init|=
operator|new
name|TypesVisitor
argument_list|(
name|exceptionScope
argument_list|,
name|definition
argument_list|,
name|schema
argument_list|,
name|wsdlVisitor
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|visitor
operator|.
name|visit
argument_list|(
name|memberTypeNode
argument_list|)
expr_stmt|;
name|XmlSchemaType
name|stype
init|=
name|visitor
operator|.
name|getSchemaType
argument_list|()
decl_stmt|;
name|CorbaTypeImpl
name|ctype
init|=
name|visitor
operator|.
name|getCorbaType
argument_list|()
decl_stmt|;
name|Scope
name|fullyQualifiedName
init|=
name|visitor
operator|.
name|getFullyQualifiedName
argument_list|()
decl_stmt|;
comment|// needed for anonymous arrays in exceptions
if|if
condition|(
name|ArrayVisitor
operator|.
name|accept
argument_list|(
name|memberNode
argument_list|)
condition|)
block|{
name|Scope
name|anonScope
init|=
operator|new
name|Scope
argument_list|(
name|exceptionScope
argument_list|,
name|TypesUtils
operator|.
name|getCorbaTypeNameNode
argument_list|(
name|memberTypeNode
argument_list|)
argument_list|)
decl_stmt|;
name|ArrayVisitor
name|arrayVisitor
init|=
operator|new
name|ArrayVisitor
argument_list|(
name|anonScope
argument_list|,
name|definition
argument_list|,
name|schema
argument_list|,
name|wsdlVisitor
argument_list|,
literal|null
argument_list|,
name|fullyQualifiedName
argument_list|)
decl_stmt|;
name|arrayVisitor
operator|.
name|setSchemaType
argument_list|(
name|stype
argument_list|)
expr_stmt|;
name|arrayVisitor
operator|.
name|setCorbaType
argument_list|(
name|ctype
argument_list|)
expr_stmt|;
name|arrayVisitor
operator|.
name|visit
argument_list|(
name|memberNode
argument_list|)
expr_stmt|;
name|stype
operator|=
name|arrayVisitor
operator|.
name|getSchemaType
argument_list|()
expr_stmt|;
name|ctype
operator|=
name|arrayVisitor
operator|.
name|getCorbaType
argument_list|()
expr_stmt|;
block|}
name|XmlSchemaElement
name|member
init|=
name|createElementType
argument_list|(
name|memberNode
argument_list|,
name|stype
argument_list|,
name|fullyQualifiedName
argument_list|)
decl_stmt|;
name|sequence
operator|.
name|getItems
argument_list|()
operator|.
name|add
argument_list|(
name|member
argument_list|)
expr_stmt|;
name|MemberType
name|memberType
init|=
name|createMemberType
argument_list|(
name|memberNode
argument_list|,
name|ctype
argument_list|,
name|fullyQualifiedName
argument_list|)
decl_stmt|;
name|exception
operator|.
name|getMember
argument_list|()
operator|.
name|add
argument_list|(
name|memberType
argument_list|)
expr_stmt|;
name|memberTypeNode
operator|=
name|memberNode
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
block|}
name|schema
operator|.
name|addType
argument_list|(
name|complexType
argument_list|)
expr_stmt|;
name|schema
operator|.
name|getItems
argument_list|()
operator|.
name|add
argument_list|(
name|element
argument_list|)
expr_stmt|;
name|schema
operator|.
name|getItems
argument_list|()
operator|.
name|add
argument_list|(
name|complexType
argument_list|)
expr_stmt|;
comment|// add exception to corba typemap
name|typeMap
operator|.
name|getStructOrExceptionOrUnion
argument_list|()
operator|.
name|add
argument_list|(
name|exception
argument_list|)
expr_stmt|;
name|setSchemaType
argument_list|(
name|complexType
argument_list|)
expr_stmt|;
name|setCorbaType
argument_list|(
name|exception
argument_list|)
expr_stmt|;
name|createFaultMessage
argument_list|(
name|element
operator|.
name|getQName
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|createFaultMessage
parameter_list|(
name|QName
name|qname
parameter_list|)
block|{
name|String
name|exceptionName
init|=
name|qname
operator|.
name|getLocalPart
argument_list|()
decl_stmt|;
comment|// messages
name|Message
name|faultMsg
init|=
name|definition
operator|.
name|createMessage
argument_list|()
decl_stmt|;
name|faultMsg
operator|.
name|setQName
argument_list|(
operator|new
name|QName
argument_list|(
name|definition
operator|.
name|getTargetNamespace
argument_list|()
argument_list|,
name|exceptionName
argument_list|)
argument_list|)
expr_stmt|;
name|faultMsg
operator|.
name|setUndefined
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// message - part
name|Part
name|part
init|=
name|definition
operator|.
name|createPart
argument_list|()
decl_stmt|;
name|part
operator|.
name|setName
argument_list|(
literal|"exception"
argument_list|)
expr_stmt|;
name|part
operator|.
name|setElementName
argument_list|(
name|qname
argument_list|)
expr_stmt|;
name|faultMsg
operator|.
name|addPart
argument_list|(
name|part
argument_list|)
expr_stmt|;
comment|//add the fault element namespace to the definition
name|String
name|nsURI
init|=
name|qname
operator|.
name|getNamespaceURI
argument_list|()
decl_stmt|;
name|manager
operator|.
name|addWSDLDefinitionNamespace
argument_list|(
name|definition
argument_list|,
name|mapper
operator|.
name|mapNSToPrefix
argument_list|(
name|nsURI
argument_list|)
argument_list|,
name|nsURI
argument_list|)
expr_stmt|;
name|definition
operator|.
name|addMessage
argument_list|(
name|faultMsg
argument_list|)
expr_stmt|;
block|}
specifier|private
name|XmlSchemaElement
name|createElementType
parameter_list|(
name|AST
name|memberNode
parameter_list|,
name|XmlSchemaType
name|stype
parameter_list|,
name|Scope
name|fqName
parameter_list|)
block|{
comment|// xmlschema:member
name|XmlSchemaElement
name|member
init|=
operator|new
name|XmlSchemaElement
argument_list|(
name|schema
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|String
name|memberName
init|=
name|memberNode
operator|.
name|toString
argument_list|()
decl_stmt|;
name|member
operator|.
name|setName
argument_list|(
name|memberName
argument_list|)
expr_stmt|;
if|if
condition|(
name|stype
operator|!=
literal|null
condition|)
block|{
name|member
operator|.
name|setSchemaType
argument_list|(
name|stype
argument_list|)
expr_stmt|;
name|member
operator|.
name|setSchemaTypeName
argument_list|(
name|stype
operator|.
name|getQName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|stype
operator|.
name|getQName
argument_list|()
operator|.
name|equals
argument_list|(
name|ReferenceConstants
operator|.
name|WSADDRESSING_TYPE
argument_list|)
condition|)
block|{
name|member
operator|.
name|setNillable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|wsdlVisitor
operator|.
name|getDeferredActions
argument_list|()
operator|.
name|add
argument_list|(
name|fqName
argument_list|,
operator|new
name|ExceptionDeferredAction
argument_list|(
name|member
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|member
return|;
block|}
specifier|private
name|MemberType
name|createMemberType
parameter_list|(
name|AST
name|memberNode
parameter_list|,
name|CorbaTypeImpl
name|ctype
parameter_list|,
name|Scope
name|fqName
parameter_list|)
block|{
comment|// corba:member
name|MemberType
name|memberType
init|=
operator|new
name|MemberType
argument_list|()
decl_stmt|;
name|memberType
operator|.
name|setName
argument_list|(
name|memberNode
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|ctype
operator|!=
literal|null
condition|)
block|{
name|memberType
operator|.
name|setIdltype
argument_list|(
name|ctype
operator|.
name|getQName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|wsdlVisitor
operator|.
name|getDeferredActions
argument_list|()
operator|.
name|add
argument_list|(
name|fqName
argument_list|,
operator|new
name|ExceptionDeferredAction
argument_list|(
name|memberType
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|memberType
return|;
block|}
block|}
end_class

end_unit

