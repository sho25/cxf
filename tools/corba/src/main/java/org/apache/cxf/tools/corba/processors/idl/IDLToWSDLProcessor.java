begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|corba
operator|.
name|processors
operator|.
name|idl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|Binding
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|Definition
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|Port
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|Types
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|extensions
operator|.
name|ExtensibilityElement
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|extensions
operator|.
name|schema
operator|.
name|Schema
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|extensions
operator|.
name|schema
operator|.
name|SchemaImport
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|collections
operator|.
name|AST
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|AddressType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|CorbaConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|CorbaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|TypeMappingType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|CastUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|common
operator|.
name|ToolConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|common
operator|.
name|ToolException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|corba
operator|.
name|common
operator|.
name|ReferenceConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|corba
operator|.
name|common
operator|.
name|ToolCorbaConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|util
operator|.
name|FileWriterUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|constants
operator|.
name|Constants
import|;
end_import

begin_class
specifier|public
class|class
name|IDLToWSDLProcessor
extends|extends
name|IDLProcessor
block|{
specifier|private
name|String
name|idl
decl_stmt|;
specifier|private
name|String
name|schemaFilename
decl_stmt|;
specifier|private
name|String
name|importSchemaFilename
decl_stmt|;
specifier|private
name|String
name|logical
decl_stmt|;
specifier|private
name|String
name|physical
decl_stmt|;
specifier|private
name|String
name|outputDir
decl_stmt|;
specifier|private
name|Writer
name|outputWriter
decl_stmt|;
specifier|private
name|Writer
name|schemaOutputWriter
decl_stmt|;
specifier|private
name|Writer
name|logicalOutputWriter
decl_stmt|;
specifier|private
name|Writer
name|physicalOutputWriter
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|File
argument_list|>
name|importDefnWriters
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|File
argument_list|>
name|importSchemaWriters
decl_stmt|;
specifier|private
name|boolean
name|ignoreImports
decl_stmt|;
specifier|public
name|void
name|process
parameter_list|()
throws|throws
name|ToolException
block|{
name|super
operator|.
name|process
argument_list|()
expr_stmt|;
name|process
argument_list|(
name|getIDLTree
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|process
parameter_list|(
name|AST
name|idlTree
parameter_list|)
throws|throws
name|ToolException
block|{
name|idl
operator|=
name|getBaseFilename
argument_list|(
name|env
operator|.
name|get
argument_list|(
name|ToolCorbaConstants
operator|.
name|CFG_IDLFILE
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|checkFileOptions
argument_list|()
expr_stmt|;
try|try
block|{
name|parseIDL
argument_list|(
name|idlTree
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ToolException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|setOutputWriter
parameter_list|(
name|Writer
name|writer
parameter_list|)
block|{
name|outputWriter
operator|=
name|writer
expr_stmt|;
block|}
specifier|public
name|void
name|setSchemaOutputWriter
parameter_list|(
name|Writer
name|writer
parameter_list|)
block|{
name|schemaOutputWriter
operator|=
name|writer
expr_stmt|;
block|}
specifier|public
name|void
name|setLogicalOutputWriter
parameter_list|(
name|Writer
name|writer
parameter_list|)
block|{
name|logicalOutputWriter
operator|=
name|writer
expr_stmt|;
block|}
specifier|public
name|void
name|setPhysicalOutputWriter
parameter_list|(
name|Writer
name|writer
parameter_list|)
block|{
name|physicalOutputWriter
operator|=
name|writer
expr_stmt|;
block|}
comment|/**      * Used only for test cases to set writers for imports when using      * the -mns option      */
specifier|protected
name|void
name|setImportDefinitionWriters
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|File
argument_list|>
name|writers
parameter_list|)
block|{
name|importDefnWriters
operator|=
name|writers
expr_stmt|;
block|}
specifier|protected
name|void
name|setImportSchemaWriters
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|File
argument_list|>
name|writers
parameter_list|)
block|{
name|importSchemaWriters
operator|=
name|writers
expr_stmt|;
block|}
specifier|protected
name|void
name|setIgnoreImports
parameter_list|(
name|boolean
name|flag
parameter_list|)
block|{
name|ignoreImports
operator|=
name|flag
expr_stmt|;
block|}
specifier|private
name|void
name|checkFileOptions
parameter_list|()
block|{
if|if
condition|(
name|env
operator|.
name|optionSet
argument_list|(
name|ToolCorbaConstants
operator|.
name|CFG_LOGICAL
argument_list|)
condition|)
block|{
comment|// set the logical filename
name|logical
operator|=
name|env
operator|.
name|get
argument_list|(
name|ToolCorbaConstants
operator|.
name|CFG_LOGICAL
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|env
operator|.
name|optionSet
argument_list|(
name|ToolCorbaConstants
operator|.
name|CFG_PHYSICAL
argument_list|)
condition|)
block|{
comment|// set the physical file name
name|physical
operator|=
name|env
operator|.
name|get
argument_list|(
name|ToolCorbaConstants
operator|.
name|CFG_PHYSICAL
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|env
operator|.
name|optionSet
argument_list|(
name|ToolCorbaConstants
operator|.
name|CFG_SCHEMA
argument_list|)
condition|)
block|{
comment|// deal with writing schema types to the schema specified file
name|schemaFilename
operator|=
name|env
operator|.
name|get
argument_list|(
name|ToolCorbaConstants
operator|.
name|CFG_SCHEMA
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|env
operator|.
name|optionSet
argument_list|(
name|ToolCorbaConstants
operator|.
name|CFG_IMPORTSCHEMA
argument_list|)
condition|)
block|{
comment|// deal with importing schema types
name|importSchemaFilename
operator|=
name|env
operator|.
name|get
argument_list|(
name|ToolCorbaConstants
operator|.
name|CFG_IMPORTSCHEMA
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|parseIDL
parameter_list|(
name|AST
name|idlTree
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|env
operator|.
name|isVerbose
argument_list|()
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|idlTree
operator|.
name|toStringTree
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// target namespace
name|String
name|tns
init|=
operator|(
name|String
operator|)
name|env
operator|.
name|get
argument_list|(
name|ToolCorbaConstants
operator|.
name|CFG_TNS
argument_list|)
decl_stmt|;
if|if
condition|(
name|tns
operator|==
literal|null
condition|)
block|{
name|tns
operator|=
name|CorbaConstants
operator|.
name|WSDL_NS_URI
operator|+
name|idl
expr_stmt|;
block|}
comment|// XmlSchema namespace
name|String
name|schemans
init|=
operator|(
name|String
operator|)
name|env
operator|.
name|get
argument_list|(
name|ToolCorbaConstants
operator|.
name|CFG_SCHEMA_NAMESPACE
argument_list|)
decl_stmt|;
comment|// corba typemap namespace
name|String
name|corbatypemaptns
init|=
operator|(
name|String
operator|)
name|env
operator|.
name|get
argument_list|(
name|ToolCorbaConstants
operator|.
name|CFG_CORBATYPEMAP_NAMESPACE
argument_list|)
decl_stmt|;
name|outputDir
operator|=
literal|"."
expr_stmt|;
try|try
block|{
name|WSDLASTVisitor
name|visitor
init|=
operator|new
name|WSDLASTVisitor
argument_list|(
name|tns
argument_list|,
name|schemans
argument_list|,
name|corbatypemaptns
argument_list|,
name|preprocessor
operator|.
name|getPragmaPrefix
argument_list|()
argument_list|)
decl_stmt|;
name|visitor
operator|.
name|getManager
argument_list|()
operator|.
name|setIgnoreImports
argument_list|(
name|ignoreImports
argument_list|)
expr_stmt|;
if|if
condition|(
name|env
operator|.
name|optionSet
argument_list|(
name|ToolConstants
operator|.
name|CFG_OUTPUTDIR
argument_list|)
condition|)
block|{
name|outputDir
operator|=
operator|(
name|String
operator|)
name|env
operator|.
name|get
argument_list|(
name|ToolConstants
operator|.
name|CFG_OUTPUTDIR
argument_list|)
expr_stmt|;
block|}
name|visitor
operator|.
name|setOutputDir
argument_list|(
name|outputDir
argument_list|)
expr_stmt|;
name|Definition
name|def
init|=
name|visitor
operator|.
name|getDefinition
argument_list|()
decl_stmt|;
if|if
condition|(
name|env
operator|.
name|optionSet
argument_list|(
name|ToolCorbaConstants
operator|.
name|CFG_SEQUENCE_OCTET_TYPE
argument_list|)
condition|)
block|{
name|visitor
operator|.
name|setSequenceOctetType
argument_list|(
operator|(
name|String
operator|)
name|env
operator|.
name|get
argument_list|(
name|ToolCorbaConstants
operator|.
name|CFG_SEQUENCE_OCTET_TYPE
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|env
operator|.
name|optionSet
argument_list|(
name|ToolCorbaConstants
operator|.
name|CFG_SCHEMA_NAMESPACE
argument_list|)
condition|)
block|{
comment|//visitor.getDefinition()
name|def
operator|.
name|addNamespace
argument_list|(
name|ToolCorbaConstants
operator|.
name|CFG_SCHEMA_NAMESPACE_PREFIX
argument_list|,
operator|(
name|String
operator|)
name|env
operator|.
name|get
argument_list|(
name|ToolCorbaConstants
operator|.
name|CFG_SCHEMA_NAMESPACE
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|env
operator|.
name|optionSet
argument_list|(
name|ToolCorbaConstants
operator|.
name|CFG_BOUNDEDSTRINGS
argument_list|)
condition|)
block|{
name|visitor
operator|.
name|setBoundedStringOverride
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|env
operator|.
name|optionSet
argument_list|(
name|ToolCorbaConstants
operator|.
name|CFG_MODULETONS
argument_list|)
condition|)
block|{
name|String
name|mapping
init|=
operator|(
name|String
operator|)
name|env
operator|.
name|get
argument_list|(
name|ToolCorbaConstants
operator|.
name|CFG_MODULETONS
argument_list|)
decl_stmt|;
comment|//parse the mapping& set a map of module to namespace mapping in the visitor
name|visitor
operator|.
name|setModuleToNSMapping
argument_list|(
name|getModuleToNSMapping
argument_list|(
name|mapping
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|env
operator|.
name|optionSet
argument_list|(
name|ToolCorbaConstants
operator|.
name|CFG_QUALIFIED
argument_list|)
condition|)
block|{
name|visitor
operator|.
name|setQualified
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|env
operator|.
name|optionSet
argument_list|(
name|ToolCorbaConstants
operator|.
name|CFG_POLYMORPHIC_FACTORIES
argument_list|)
condition|)
block|{
name|visitor
operator|.
name|setSupportPolymorphicFactories
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|env
operator|.
name|optionSet
argument_list|(
name|ToolCorbaConstants
operator|.
name|CFG_SCHEMA
argument_list|)
condition|)
block|{
name|visitor
operator|.
name|setSchemaGenerated
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// generate default namespace for schema if -T is used alone.
if|if
condition|(
name|env
operator|.
name|get
argument_list|(
name|ToolCorbaConstants
operator|.
name|CFG_SCHEMA_NAMESPACE
argument_list|)
operator|==
literal|null
condition|)
block|{
name|visitor
operator|.
name|updateSchemaNamespace
argument_list|(
name|def
operator|.
name|getTargetNamespace
argument_list|()
operator|+
literal|"-types"
argument_list|)
expr_stmt|;
name|def
operator|.
name|addNamespace
argument_list|(
name|ToolCorbaConstants
operator|.
name|CFG_SCHEMA_NAMESPACE_PREFIX
argument_list|,
name|def
operator|.
name|getTargetNamespace
argument_list|()
operator|+
literal|"-types"
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|env
operator|.
name|optionSet
argument_list|(
name|ToolCorbaConstants
operator|.
name|CFG_EXCLUDEMODULES
argument_list|)
condition|)
block|{
name|String
name|modules
init|=
operator|(
name|String
operator|)
name|env
operator|.
name|get
argument_list|(
name|ToolCorbaConstants
operator|.
name|CFG_EXCLUDEMODULES
argument_list|)
decl_stmt|;
comment|//parse the mapping& set a map of module to namespace mapping in the visitor
name|visitor
operator|.
name|setExcludedModules
argument_list|(
name|getExcludedModules
argument_list|(
name|modules
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|visitor
operator|.
name|visit
argument_list|(
name|idlTree
argument_list|)
expr_stmt|;
name|cleanUpTypeMap
argument_list|(
name|visitor
operator|.
name|getTypeMap
argument_list|()
argument_list|)
expr_stmt|;
name|Binding
index|[]
name|bindings
init|=
name|visitor
operator|.
name|getCorbaBindings
argument_list|()
decl_stmt|;
name|generateCORBAService
argument_list|(
name|def
argument_list|,
name|bindings
argument_list|,
name|visitor
operator|.
name|getModuleToNSMapper
argument_list|()
operator|.
name|isDefaultMapping
argument_list|()
argument_list|)
expr_stmt|;
name|writeDefinitions
argument_list|(
name|visitor
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|ToolException
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
comment|// Sets the output directory and the generated filenames.
comment|// Output directory is specified
comment|//     - File names have no path specified
comment|//     - File names do have specified so they take precedence.
comment|// Output directory is not specified
comment|//     - File names have no path specified so use current directory.
comment|//     - File names have full path specified.
specifier|private
name|void
name|writeDefinitions
parameter_list|(
name|WSDLASTVisitor
name|visitor
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|env
operator|.
name|optionSet
argument_list|(
name|ToolCorbaConstants
operator|.
name|CFG_LOGICAL
argument_list|)
operator|||
name|env
operator|.
name|optionSet
argument_list|(
name|ToolCorbaConstants
operator|.
name|CFG_PHYSICAL
argument_list|)
operator|||
name|env
operator|.
name|optionSet
argument_list|(
name|ToolCorbaConstants
operator|.
name|CFG_SCHEMA
argument_list|)
operator|||
name|env
operator|.
name|optionSet
argument_list|(
name|ToolCorbaConstants
operator|.
name|CFG_IMPORTSCHEMA
argument_list|)
condition|)
block|{
if|if
condition|(
name|logical
operator|==
literal|null
operator|||
name|physical
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|outputWriter
operator|==
literal|null
condition|)
block|{
name|outputWriter
operator|=
name|getOutputWriter
argument_list|(
name|idl
operator|+
literal|".wsdl"
argument_list|,
name|outputDir
argument_list|)
expr_stmt|;
block|}
name|String
name|separator
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"file.separator"
argument_list|)
decl_stmt|;
name|File
name|file
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|env
operator|.
name|get
argument_list|(
name|ToolConstants
operator|.
name|CFG_OUTPUTDIR
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|file
operator|=
operator|new
name|File
argument_list|(
name|outputDir
operator|+
name|separator
operator|+
name|idl
operator|+
literal|".wsdl"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|file
operator|=
operator|new
name|File
argument_list|(
name|idl
operator|+
literal|".wsdl"
argument_list|)
expr_stmt|;
block|}
name|visitor
operator|.
name|setIdlFile
argument_list|(
name|file
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|logical
operator|!=
literal|null
condition|)
block|{
name|logical
operator|=
name|getFilePath
argument_list|(
name|logical
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
expr_stmt|;
if|if
condition|(
name|logicalOutputWriter
operator|==
literal|null
condition|)
block|{
name|logicalOutputWriter
operator|=
name|createOutputWriter
argument_list|(
name|logical
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|physical
operator|!=
literal|null
condition|)
block|{
name|physical
operator|=
name|getFilePath
argument_list|(
name|physical
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
expr_stmt|;
if|if
condition|(
name|physicalOutputWriter
operator|==
literal|null
condition|)
block|{
name|physicalOutputWriter
operator|=
name|createOutputWriter
argument_list|(
name|physical
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|schemaFilename
operator|!=
literal|null
condition|)
block|{
name|schemaFilename
operator|=
name|getFilePath
argument_list|(
name|schemaFilename
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
expr_stmt|;
if|if
condition|(
name|schemaOutputWriter
operator|==
literal|null
condition|)
block|{
name|schemaOutputWriter
operator|=
name|createOutputWriter
argument_list|(
name|schemaFilename
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|importSchemaFilename
operator|!=
literal|null
condition|)
block|{
name|importSchemaFilename
operator|=
name|getImportFile
argument_list|(
name|importSchemaFilename
argument_list|)
expr_stmt|;
name|visitor
operator|.
name|setImportSchema
argument_list|(
name|importSchemaFilename
argument_list|)
expr_stmt|;
block|}
name|visitor
operator|.
name|writeDefinitions
argument_list|(
name|outputWriter
argument_list|,
name|schemaOutputWriter
argument_list|,
name|logicalOutputWriter
argument_list|,
name|physicalOutputWriter
argument_list|,
name|schemaFilename
argument_list|,
name|logical
argument_list|,
name|physical
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|outputWriter
operator|==
literal|null
condition|)
block|{
name|String
name|outputFile
init|=
name|idl
operator|+
literal|".wsdl"
decl_stmt|;
if|if
condition|(
name|env
operator|.
name|optionSet
argument_list|(
name|ToolCorbaConstants
operator|.
name|CFG_WSDLOUTPUTFILE
argument_list|)
condition|)
block|{
name|outputFile
operator|=
operator|(
name|String
operator|)
name|env
operator|.
name|get
argument_list|(
name|ToolCorbaConstants
operator|.
name|CFG_WSDLOUTPUTFILE
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|outputFile
operator|.
name|endsWith
argument_list|(
literal|".wsdl"
argument_list|)
condition|)
block|{
name|outputFile
operator|=
name|outputFile
operator|+
literal|".wsdl"
expr_stmt|;
block|}
block|}
name|outputWriter
operator|=
name|getOutputWriter
argument_list|(
name|outputFile
argument_list|,
name|outputDir
argument_list|)
expr_stmt|;
block|}
name|Definition
name|defn
init|=
name|visitor
operator|.
name|getDefinition
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|visitor
operator|.
name|getModuleToNSMapper
argument_list|()
operator|.
name|isDefaultMapping
argument_list|()
condition|)
block|{
name|addTypeMapSchemaImports
argument_list|(
name|defn
argument_list|,
name|visitor
argument_list|)
expr_stmt|;
name|visitor
operator|.
name|getManager
argument_list|()
operator|.
name|attachDeferredSchemasToWSDL
argument_list|()
expr_stmt|;
block|}
name|visitor
operator|.
name|writeDefinition
argument_list|(
name|defn
argument_list|,
name|outputWriter
argument_list|)
expr_stmt|;
name|writeImportedDefinitionsAndSchemas
argument_list|(
name|visitor
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|writeImportedDefinitionsAndSchemas
parameter_list|(
name|WSDLASTVisitor
name|visitor
parameter_list|)
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|File
argument_list|,
name|Definition
argument_list|>
name|defns
init|=
name|visitor
operator|.
name|getManager
argument_list|()
operator|.
name|getImportedWSDLDefinitions
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|File
argument_list|,
name|XmlSchema
argument_list|>
name|schemas
init|=
name|visitor
operator|.
name|getManager
argument_list|()
operator|.
name|getImportedXmlSchemas
argument_list|()
decl_stmt|;
if|if
condition|(
name|importDefnWriters
operator|!=
literal|null
condition|)
block|{
assert|assert
name|importDefnWriters
operator|.
name|size
argument_list|()
operator|==
name|defns
operator|.
name|size
argument_list|()
assert|;
block|}
if|if
condition|(
name|importSchemaWriters
operator|!=
literal|null
condition|)
block|{
assert|assert
name|importSchemaWriters
operator|.
name|size
argument_list|()
operator|==
name|schemas
operator|.
name|size
argument_list|()
assert|;
block|}
for|for
control|(
name|Entry
argument_list|<
name|File
argument_list|,
name|Definition
argument_list|>
name|entry
range|:
name|defns
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Writer
name|writer
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|importDefnWriters
operator|!=
literal|null
condition|)
block|{
name|writer
operator|=
name|getOutputWriter
argument_list|(
name|importDefnWriters
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getTargetNamespace
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|writer
operator|==
literal|null
condition|)
block|{
name|writer
operator|=
name|getOutputWriter
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|visitor
operator|.
name|writeDefinition
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|Entry
argument_list|<
name|File
argument_list|,
name|XmlSchema
argument_list|>
name|entry
range|:
name|schemas
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Writer
name|writer
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|importSchemaWriters
operator|!=
literal|null
condition|)
block|{
name|writer
operator|=
name|getOutputWriter
argument_list|(
name|importSchemaWriters
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getTargetNamespace
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|writer
operator|==
literal|null
condition|)
block|{
name|writer
operator|=
name|getOutputWriter
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|visitor
operator|.
name|writeSchema
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|// Get the imported schema file.
specifier|private
name|String
name|getImportFile
parameter_list|(
name|String
name|importFilename
parameter_list|)
block|{
comment|// check that file exists
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|importFilename
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|file
operator|.
name|isAbsolute
argument_list|()
condition|)
block|{
name|String
name|separator
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"file.separator"
argument_list|)
decl_stmt|;
name|String
name|userdir
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.dir"
argument_list|)
decl_stmt|;
name|file
operator|=
operator|new
name|File
argument_list|(
name|userdir
operator|+
name|separator
operator|+
name|importFilename
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
name|String
name|msg
init|=
name|importFilename
operator|+
literal|" File not found"
decl_stmt|;
name|FileNotFoundException
name|ex
init|=
operator|new
name|FileNotFoundException
argument_list|(
name|msg
argument_list|)
decl_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"IDLToWsdl Error : "
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|()
expr_stmt|;
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|URI
name|url
init|=
name|file
operator|.
name|toURI
argument_list|()
decl_stmt|;
return|return
name|url
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
else|else
block|{
name|URI
name|url
init|=
name|file
operator|.
name|toURI
argument_list|()
decl_stmt|;
return|return
name|url
operator|.
name|toString
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|Writer
name|createOutputWriter
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|outDir
init|=
name|outputDir
decl_stmt|;
name|int
name|index
init|=
name|name
operator|.
name|lastIndexOf
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"file.separator"
argument_list|)
argument_list|)
decl_stmt|;
name|outDir
operator|=
name|name
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|index
argument_list|)
expr_stmt|;
name|String
name|filename
init|=
name|name
operator|.
name|substring
argument_list|(
name|index
operator|+
literal|1
argument_list|,
name|name
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|getOutputWriter
argument_list|(
name|filename
argument_list|,
name|outDir
argument_list|)
return|;
block|}
comment|// Gets the fully qualified path of a file.
specifier|private
name|File
name|getFilePath
parameter_list|(
name|String
name|ifile
parameter_list|)
block|{
name|String
name|separator
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"file.separator"
argument_list|)
decl_stmt|;
name|StringTokenizer
name|token
init|=
operator|new
name|StringTokenizer
argument_list|(
name|ifile
argument_list|,
name|separator
argument_list|)
decl_stmt|;
if|if
condition|(
name|token
operator|.
name|countTokens
argument_list|()
operator|==
literal|1
condition|)
block|{
if|if
condition|(
name|env
operator|.
name|get
argument_list|(
name|ToolConstants
operator|.
name|CFG_OUTPUTDIR
argument_list|)
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|File
argument_list|(
name|outputDir
operator|+
name|separator
operator|+
name|ifile
argument_list|)
return|;
block|}
return|return
operator|new
name|File
argument_list|(
name|ifile
argument_list|)
return|;
block|}
return|return
operator|new
name|File
argument_list|(
name|ifile
argument_list|)
return|;
block|}
specifier|public
name|Writer
name|getOutputWriter
parameter_list|(
name|String
name|filename
parameter_list|,
name|String
name|outputDirectory
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|env
operator|.
name|optionSet
argument_list|(
name|ToolCorbaConstants
operator|.
name|CFG_WSDL_ENCODING
argument_list|)
condition|)
block|{
name|String
name|encoding
init|=
name|env
operator|.
name|get
argument_list|(
name|ToolCorbaConstants
operator|.
name|CFG_WSDL_ENCODING
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
return|return
operator|new
name|FileWriterUtil
argument_list|()
operator|.
name|getWriter
argument_list|(
operator|new
name|File
argument_list|(
name|outputDirectory
argument_list|,
name|filename
argument_list|)
argument_list|,
name|encoding
argument_list|)
return|;
block|}
name|FileWriterUtil
name|fw
init|=
operator|new
name|FileWriterUtil
argument_list|(
name|outputDirectory
argument_list|,
literal|null
argument_list|)
decl_stmt|;
return|return
name|fw
operator|.
name|getWriter
argument_list|(
literal|""
argument_list|,
name|filename
argument_list|)
return|;
block|}
specifier|public
name|Writer
name|getOutputWriter
parameter_list|(
name|File
name|file
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|env
operator|.
name|optionSet
argument_list|(
name|ToolCorbaConstants
operator|.
name|CFG_WSDL_ENCODING
argument_list|)
condition|)
block|{
name|String
name|encoding
init|=
name|env
operator|.
name|get
argument_list|(
name|ToolCorbaConstants
operator|.
name|CFG_WSDL_ENCODING
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
return|return
operator|new
name|FileWriterUtil
argument_list|()
operator|.
name|getWriter
argument_list|(
name|file
argument_list|,
name|encoding
argument_list|)
return|;
block|}
return|return
operator|new
name|FileWriterUtil
argument_list|()
operator|.
name|getWriter
argument_list|(
name|file
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
operator|.
name|name
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|String
name|getBaseFilename
parameter_list|(
name|String
name|ifile
parameter_list|)
block|{
name|String
name|fileName
init|=
name|ifile
decl_stmt|;
name|StringTokenizer
name|token
init|=
operator|new
name|StringTokenizer
argument_list|(
name|ifile
argument_list|,
literal|"\\/"
argument_list|)
decl_stmt|;
while|while
condition|(
name|token
operator|.
name|hasMoreTokens
argument_list|()
condition|)
block|{
name|fileName
operator|=
name|token
operator|.
name|nextToken
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|fileName
operator|.
name|endsWith
argument_list|(
literal|".idl"
argument_list|)
condition|)
block|{
name|fileName
operator|=
name|fileName
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|fileName
operator|.
name|length
argument_list|()
operator|-
literal|4
argument_list|)
expr_stmt|;
block|}
return|return
name|fileName
return|;
block|}
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getServiceNames
parameter_list|(
name|Binding
index|[]
name|bindings
parameter_list|,
name|boolean
name|isDefaultMapping
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|serviceNames
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|bindings
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|QName
name|portTypeName
init|=
name|bindings
index|[
name|i
index|]
operator|.
name|getPortType
argument_list|()
operator|.
name|getQName
argument_list|()
decl_stmt|;
name|String
name|ns
init|=
name|portTypeName
operator|.
name|getNamespaceURI
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|isDefaultMapping
operator|&&
operator|!
name|serviceNames
operator|.
name|containsKey
argument_list|(
name|ns
argument_list|)
condition|)
block|{
name|String
index|[]
name|bindingTokens
init|=
name|bindings
index|[
name|i
index|]
operator|.
name|getQName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
operator|.
name|split
argument_list|(
literal|"\\."
argument_list|)
decl_stmt|;
if|if
condition|(
name|bindingTokens
operator|.
name|length
operator|>
literal|1
condition|)
block|{
name|StringBuilder
name|name
init|=
operator|new
name|StringBuilder
argument_list|(
literal|""
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|bindingTokens
operator|.
name|length
operator|-
literal|2
condition|;
name|j
operator|++
control|)
block|{
name|name
operator|.
name|append
argument_list|(
name|bindingTokens
index|[
name|j
index|]
argument_list|)
operator|.
name|append
argument_list|(
literal|"."
argument_list|)
expr_stmt|;
block|}
name|name
operator|.
name|append
argument_list|(
name|bindingTokens
index|[
name|bindingTokens
operator|.
name|length
operator|-
literal|2
index|]
operator|+
literal|"CORBAService"
argument_list|)
expr_stmt|;
name|serviceNames
operator|.
name|put
argument_list|(
name|ns
argument_list|,
name|name
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|serviceNames
operator|.
name|put
argument_list|(
name|ns
argument_list|,
name|idl
operator|+
literal|"CORBAService"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|serviceNames
return|;
block|}
specifier|public
name|void
name|generateCORBAService
parameter_list|(
name|Definition
name|def
parameter_list|,
name|Binding
index|[]
name|bindings
parameter_list|,
name|boolean
name|isDefaultMapping
parameter_list|)
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Service
argument_list|>
name|serviceMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|serviceNames
init|=
name|getServiceNames
argument_list|(
name|bindings
argument_list|,
name|isDefaultMapping
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|bindings
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|QName
name|portTypeName
init|=
name|bindings
index|[
name|i
index|]
operator|.
name|getPortType
argument_list|()
operator|.
name|getQName
argument_list|()
decl_stmt|;
name|Service
name|service
decl_stmt|;
if|if
condition|(
name|isDefaultMapping
condition|)
block|{
name|service
operator|=
name|def
operator|.
name|createService
argument_list|()
expr_stmt|;
name|service
operator|.
name|setQName
argument_list|(
operator|new
name|QName
argument_list|(
name|def
operator|.
name|getTargetNamespace
argument_list|()
argument_list|,
name|portTypeName
operator|.
name|getLocalPart
argument_list|()
operator|+
literal|"CORBAService"
argument_list|)
argument_list|)
expr_stmt|;
name|def
operator|.
name|addService
argument_list|(
name|service
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|ns
init|=
name|portTypeName
operator|.
name|getNamespaceURI
argument_list|()
decl_stmt|;
name|String
name|serviceName
init|=
name|serviceNames
operator|.
name|get
argument_list|(
name|ns
argument_list|)
decl_stmt|;
name|service
operator|=
name|serviceMap
operator|.
name|get
argument_list|(
name|ns
argument_list|)
expr_stmt|;
if|if
condition|(
name|service
operator|==
literal|null
condition|)
block|{
name|service
operator|=
name|def
operator|.
name|createService
argument_list|()
expr_stmt|;
name|serviceMap
operator|.
name|put
argument_list|(
name|ns
argument_list|,
name|service
argument_list|)
expr_stmt|;
name|String
index|[]
name|serviceTokens
init|=
name|serviceName
operator|.
name|split
argument_list|(
literal|"\\."
argument_list|)
decl_stmt|;
name|String
name|serviceToken
init|=
name|serviceTokens
index|[
name|serviceTokens
operator|.
name|length
operator|-
literal|1
index|]
decl_stmt|;
name|QName
name|serviceQName
init|=
operator|new
name|QName
argument_list|(
name|def
operator|.
name|getTargetNamespace
argument_list|()
argument_list|,
name|serviceToken
argument_list|)
decl_stmt|;
name|Service
name|existingService
init|=
name|def
operator|.
name|getService
argument_list|(
name|serviceQName
argument_list|)
decl_stmt|;
if|if
condition|(
name|existingService
operator|!=
literal|null
condition|)
block|{
name|String
name|existingServiceNS
init|=
operator|(
operator|(
name|Port
operator|)
name|existingService
operator|.
name|getPorts
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|)
operator|.
name|getBinding
argument_list|()
operator|.
name|getPortType
argument_list|()
operator|.
name|getQName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
decl_stmt|;
name|existingService
operator|.
name|setQName
argument_list|(
operator|new
name|QName
argument_list|(
name|def
operator|.
name|getTargetNamespace
argument_list|()
argument_list|,
name|serviceNames
operator|.
name|get
argument_list|(
name|existingServiceNS
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|serviceMap
operator|.
name|put
argument_list|(
name|existingServiceNS
argument_list|,
name|existingService
argument_list|)
expr_stmt|;
name|service
operator|.
name|setQName
argument_list|(
operator|new
name|QName
argument_list|(
name|def
operator|.
name|getTargetNamespace
argument_list|()
argument_list|,
name|serviceName
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|service
operator|.
name|setQName
argument_list|(
name|serviceQName
argument_list|)
expr_stmt|;
block|}
name|def
operator|.
name|addService
argument_list|(
name|service
argument_list|)
expr_stmt|;
block|}
block|}
name|Port
name|port
init|=
name|def
operator|.
name|createPort
argument_list|()
decl_stmt|;
name|port
operator|.
name|setName
argument_list|(
name|portTypeName
operator|.
name|getLocalPart
argument_list|()
operator|+
literal|"CORBAPort"
argument_list|)
expr_stmt|;
name|AddressType
name|address
init|=
operator|(
name|AddressType
operator|)
name|def
operator|.
name|getExtensionRegistry
argument_list|()
operator|.
name|createExtension
argument_list|(
name|Port
operator|.
name|class
argument_list|,
name|CorbaConstants
operator|.
name|NE_CORBA_ADDRESS
argument_list|)
decl_stmt|;
name|String
name|addr
init|=
literal|null
decl_stmt|;
name|String
name|addrFileName
init|=
operator|(
name|String
operator|)
name|env
operator|.
name|get
argument_list|(
name|ToolCorbaConstants
operator|.
name|CFG_ADDRESSFILE
argument_list|)
decl_stmt|;
if|if
condition|(
name|addrFileName
operator|!=
literal|null
condition|)
block|{
name|BufferedReader
name|bufferedReader
init|=
literal|null
decl_stmt|;
try|try
block|{
name|File
name|addrFile
init|=
operator|new
name|File
argument_list|(
name|addrFileName
argument_list|)
decl_stmt|;
name|FileReader
name|fileReader
init|=
operator|new
name|FileReader
argument_list|(
name|addrFile
argument_list|)
decl_stmt|;
name|bufferedReader
operator|=
operator|new
name|BufferedReader
argument_list|(
name|fileReader
argument_list|)
expr_stmt|;
name|addr
operator|=
name|bufferedReader
operator|.
name|readLine
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|ToolException
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ex
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|bufferedReader
operator|!=
literal|null
condition|)
block|{
name|bufferedReader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|addr
operator|=
operator|(
name|String
operator|)
name|env
operator|.
name|get
argument_list|(
name|ToolCorbaConstants
operator|.
name|CFG_ADDRESS
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|addr
operator|==
literal|null
condition|)
block|{
name|addr
operator|=
literal|"IOR:"
expr_stmt|;
block|}
name|address
operator|.
name|setLocation
argument_list|(
name|addr
argument_list|)
expr_stmt|;
name|port
operator|.
name|addExtensibilityElement
argument_list|(
operator|(
name|ExtensibilityElement
operator|)
name|address
argument_list|)
expr_stmt|;
name|service
operator|.
name|addPort
argument_list|(
name|port
argument_list|)
expr_stmt|;
name|port
operator|.
name|setBinding
argument_list|(
name|bindings
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|cleanUpTypeMap
parameter_list|(
name|TypeMappingType
name|typeMap
parameter_list|)
block|{
name|List
argument_list|<
name|CorbaType
argument_list|>
name|types
init|=
name|typeMap
operator|.
name|getStructOrExceptionOrUnion
argument_list|()
decl_stmt|;
if|if
condition|(
name|types
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|types
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|CorbaType
name|type
init|=
name|types
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|.
name|getQName
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|type
operator|.
name|setName
argument_list|(
name|type
operator|.
name|getQName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
name|type
operator|.
name|setQName
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
name|void
name|addTypeMapSchemaImports
parameter_list|(
name|Definition
name|def
parameter_list|,
name|WSDLASTVisitor
name|visitor
parameter_list|)
block|{
name|List
argument_list|<
name|CorbaType
argument_list|>
name|types
init|=
name|visitor
operator|.
name|getTypeMap
argument_list|()
operator|.
name|getStructOrExceptionOrUnion
argument_list|()
decl_stmt|;
name|ModuleToNSMapper
name|mapper
init|=
name|visitor
operator|.
name|getModuleToNSMapper
argument_list|()
decl_stmt|;
name|WSDLSchemaManager
name|manager
init|=
name|visitor
operator|.
name|getManager
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|String
argument_list|>
name|namespaces
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
name|def
operator|.
name|getNamespaces
argument_list|()
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|userModuleMappings
init|=
name|mapper
operator|.
name|getUserMapping
argument_list|()
operator|.
name|entrySet
argument_list|()
decl_stmt|;
if|if
condition|(
name|types
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|types
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|CorbaType
name|type
init|=
name|types
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|QName
name|schemaType
init|=
name|type
operator|.
name|getType
argument_list|()
decl_stmt|;
if|if
condition|(
name|schemaType
operator|!=
literal|null
condition|)
block|{
name|String
name|typeNamespace
init|=
name|schemaType
operator|.
name|getNamespaceURI
argument_list|()
decl_stmt|;
try|try
block|{
comment|// WS-Addressing namespace is a special case.  We need to import the schema from
comment|// a remote location.
if|if
condition|(
operator|!
name|namespaces
operator|.
name|contains
argument_list|(
name|typeNamespace
argument_list|)
operator|&&
name|typeNamespace
operator|.
name|equals
argument_list|(
name|ReferenceConstants
operator|.
name|WSADDRESSING_NAMESPACE
argument_list|)
condition|)
block|{
comment|// build up the ws-addressing schema import
name|Schema
name|wsdlSchema
init|=
operator|(
name|Schema
operator|)
name|def
operator|.
name|getExtensionRegistry
argument_list|()
operator|.
name|createExtension
argument_list|(
name|Types
operator|.
name|class
argument_list|,
operator|new
name|QName
argument_list|(
name|Constants
operator|.
name|URI_2001_SCHEMA_XSD
argument_list|,
literal|"schema"
argument_list|)
argument_list|)
decl_stmt|;
name|SchemaImport
name|schemaimport
init|=
name|wsdlSchema
operator|.
name|createImport
argument_list|()
decl_stmt|;
name|schemaimport
operator|.
name|setNamespaceURI
argument_list|(
name|ReferenceConstants
operator|.
name|WSADDRESSING_NAMESPACE
argument_list|)
expr_stmt|;
name|schemaimport
operator|.
name|setSchemaLocationURI
argument_list|(
name|ReferenceConstants
operator|.
name|WSADDRESSING_LOCATION
argument_list|)
expr_stmt|;
name|wsdlSchema
operator|.
name|addImport
argument_list|(
name|schemaimport
argument_list|)
expr_stmt|;
comment|// add the import and the prefix to the definition
name|def
operator|.
name|getTypes
argument_list|()
operator|.
name|addExtensibilityElement
argument_list|(
name|wsdlSchema
argument_list|)
expr_stmt|;
name|CastUtils
operator|.
name|cast
argument_list|(
name|def
operator|.
name|getNamespaces
argument_list|()
argument_list|,
name|String
operator|.
name|class
argument_list|,
name|String
operator|.
name|class
argument_list|)
operator|.
name|put
argument_list|(
name|ReferenceConstants
operator|.
name|WSADDRESSING_PREFIX
argument_list|,
name|typeNamespace
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|namespaces
operator|.
name|contains
argument_list|(
name|typeNamespace
argument_list|)
condition|)
block|{
name|String
name|prefix
init|=
name|getModulePrefixForNamespace
argument_list|(
name|userModuleMappings
argument_list|,
name|mapper
argument_list|,
name|typeNamespace
argument_list|)
decl_stmt|;
comment|//prefix = mapper.mapNSToPrefix(typeNamespace);
name|XmlSchema
name|schema
init|=
name|manager
operator|.
name|getXmlSchema
argument_list|(
name|typeNamespace
argument_list|)
decl_stmt|;
comment|// TODO: REVISIT - Is this the only way we can create the file name for the
comment|// imported schema?
name|String
name|importFile
init|=
name|visitor
operator|.
name|getOutputDir
argument_list|()
operator|+
name|System
operator|.
name|getProperty
argument_list|(
literal|"file.separator"
argument_list|)
operator|+
name|prefix
operator|+
literal|".xsd"
decl_stmt|;
name|manager
operator|.
name|addWSDLSchemaImport
argument_list|(
name|def
argument_list|,
name|typeNamespace
argument_list|,
name|importFile
argument_list|)
expr_stmt|;
name|manager
operator|.
name|getImportedXmlSchemas
argument_list|()
operator|.
name|put
argument_list|(
operator|new
name|File
argument_list|(
name|importFile
argument_list|)
argument_list|,
name|schema
argument_list|)
expr_stmt|;
name|CastUtils
operator|.
name|cast
argument_list|(
name|def
operator|.
name|getNamespaces
argument_list|()
argument_list|,
name|String
operator|.
name|class
argument_list|,
name|String
operator|.
name|class
argument_list|)
operator|.
name|put
argument_list|(
name|prefix
argument_list|,
name|typeNamespace
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|ToolException
argument_list|(
literal|"Unable to add schema import for namespace"
operator|+
name|typeNamespace
argument_list|)
throw|;
block|}
block|}
block|}
block|}
block|}
specifier|private
name|String
name|getModulePrefixForNamespace
parameter_list|(
name|Set
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|map
parameter_list|,
name|ModuleToNSMapper
name|mapper
parameter_list|,
name|String
name|namespace
parameter_list|)
block|{
name|String
name|prefix
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|iter
init|=
name|map
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|equals
argument_list|(
name|namespace
argument_list|)
condition|)
block|{
name|prefix
operator|=
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|replace
argument_list|(
name|ToolCorbaConstants
operator|.
name|MODULE_SEPARATOR
argument_list|,
literal|"_"
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|prefix
operator|==
literal|null
condition|)
block|{
name|prefix
operator|=
name|mapper
operator|.
name|mapNSToPrefix
argument_list|(
name|namespace
argument_list|)
expr_stmt|;
block|}
return|return
name|prefix
return|;
block|}
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getModuleToNSMapping
parameter_list|(
name|String
name|mapping
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|mapping
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|mapping
operator|.
name|length
argument_list|()
operator|>
literal|0
operator|)
condition|)
block|{
if|if
condition|(
operator|(
name|mapping
operator|.
name|startsWith
argument_list|(
literal|"["
argument_list|)
operator|)
operator|&&
operator|(
name|mapping
operator|.
name|endsWith
argument_list|(
literal|"]"
argument_list|)
operator|)
condition|)
block|{
name|mapping
operator|=
name|mapping
operator|.
name|substring
argument_list|(
literal|1
argument_list|,
name|mapping
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|StringTokenizer
name|tokens
init|=
operator|new
name|StringTokenizer
argument_list|(
name|mapping
argument_list|,
literal|",;"
argument_list|)
decl_stmt|;
while|while
condition|(
name|tokens
operator|.
name|hasMoreTokens
argument_list|()
condition|)
block|{
name|String
name|token
init|=
name|tokens
operator|.
name|nextToken
argument_list|()
decl_stmt|;
name|int
name|pos
init|=
name|token
operator|.
name|indexOf
argument_list|(
literal|'='
argument_list|)
decl_stmt|;
if|if
condition|(
name|pos
operator|==
operator|-
literal|1
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Mapping of idl modules to namespaces "
operator|+
literal|"is not specified correctly."
operator|+
literal|"Missing a equals(=) sign for specifying "
operator|+
literal|"the custom mapping."
operator|+
literal|"("
operator|+
name|token
operator|+
literal|")"
argument_list|)
throw|;
block|}
name|map
operator|.
name|put
argument_list|(
name|token
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|pos
argument_list|)
argument_list|,
name|token
operator|.
name|substring
argument_list|(
name|pos
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|mapping
operator|.
name|startsWith
argument_list|(
literal|":"
argument_list|)
condition|)
block|{
name|mapping
operator|=
name|mapping
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
try|try
init|(
name|BufferedReader
name|reader
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|FileReader
argument_list|(
name|mapping
argument_list|)
argument_list|)
init|)
block|{
name|String
name|token
init|=
name|reader
operator|.
name|readLine
argument_list|()
decl_stmt|;
while|while
condition|(
name|token
operator|!=
literal|null
condition|)
block|{
name|int
name|pos
init|=
name|token
operator|.
name|indexOf
argument_list|(
literal|'='
argument_list|)
decl_stmt|;
if|if
condition|(
name|pos
operator|==
operator|-
literal|1
condition|)
block|{
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Mapping of idl modules to namespaces "
operator|+
literal|"is not specified correctly in the file "
operator|+
name|mapping
operator|+
literal|"."
operator|+
literal|"Missing a equals(=) sign for specifying "
operator|+
literal|"the custom mapping."
operator|+
literal|"("
operator|+
name|token
operator|+
literal|")"
argument_list|)
throw|;
block|}
name|map
operator|.
name|put
argument_list|(
name|token
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|pos
argument_list|)
argument_list|,
name|token
operator|.
name|substring
argument_list|(
name|pos
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|token
operator|=
name|reader
operator|.
name|readLine
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Incorrect properties file for mns mapping - "
operator|+
name|mapping
operator|+
literal|". Cause: "
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Option mns should have a start([)& close(]) bracket"
operator|+
literal|" or a properties file"
operator|+
literal|" to customize the mapping of modules to namespaces"
argument_list|)
throw|;
block|}
block|}
return|return
name|map
return|;
block|}
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|getExcludedModules
parameter_list|(
name|String
name|modules
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|exModules
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|modules
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|modules
operator|.
name|length
argument_list|()
operator|>
literal|0
operator|)
condition|)
block|{
if|if
condition|(
operator|(
name|modules
operator|.
name|startsWith
argument_list|(
literal|"["
argument_list|)
operator|)
operator|&&
operator|(
name|modules
operator|.
name|endsWith
argument_list|(
literal|"]"
argument_list|)
operator|)
condition|)
block|{
name|modules
operator|=
name|modules
operator|.
name|substring
argument_list|(
literal|1
argument_list|,
name|modules
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|StringTokenizer
name|tokens
init|=
operator|new
name|StringTokenizer
argument_list|(
name|modules
argument_list|,
literal|",;"
argument_list|)
decl_stmt|;
while|while
condition|(
name|tokens
operator|.
name|hasMoreTokens
argument_list|()
condition|)
block|{
name|String
name|token
init|=
name|tokens
operator|.
name|nextToken
argument_list|()
decl_stmt|;
comment|//Revisit, Do we also take in the imports of the wsdl/schema?
name|exModules
operator|.
name|put
argument_list|(
name|token
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|modules
operator|.
name|startsWith
argument_list|(
literal|":"
argument_list|)
condition|)
block|{
comment|//TO DO
block|}
else|else
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Option ex should have a start([)& close(]) bracket"
operator|+
literal|" or a properties file"
operator|+
literal|" to specify the exclusion of modules"
argument_list|)
throw|;
block|}
block|}
return|return
name|exModules
return|;
block|}
block|}
end_class

end_unit

