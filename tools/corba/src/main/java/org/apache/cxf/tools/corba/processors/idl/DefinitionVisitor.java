begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|corba
operator|.
name|processors
operator|.
name|idl
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|Definition
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|collections
operator|.
name|AST
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchema
import|;
end_import

begin_class
specifier|public
class|class
name|DefinitionVisitor
extends|extends
name|VisitorBase
block|{
specifier|public
name|DefinitionVisitor
parameter_list|(
name|Scope
name|scope
parameter_list|,
name|Definition
name|defn
parameter_list|,
name|XmlSchema
name|schemaRef
parameter_list|,
name|WSDLASTVisitor
name|wsdlVisitor
parameter_list|)
block|{
name|super
argument_list|(
name|scope
argument_list|,
name|defn
argument_list|,
name|schemaRef
argument_list|,
name|wsdlVisitor
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|visit
parameter_list|(
name|AST
name|node
parameter_list|)
block|{
comment|//<definition> ::=<type_dcl> ";"
comment|//                |<const_dcl> ";"
comment|//                |<except_dcl> ";"
comment|//                |<interface> ";"
comment|//                |<module> ";"
comment|//                |<value> ";"
switch|switch
condition|(
name|node
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|IDLTokenTypes
operator|.
name|LITERAL_custom
case|:
case|case
name|IDLTokenTypes
operator|.
name|LITERAL_valuetype
case|:
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Valuetypes not supported"
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|IDLTokenTypes
operator|.
name|LITERAL_module
case|:
block|{
name|ModuleVisitor
name|moduleVisitor
init|=
operator|new
name|ModuleVisitor
argument_list|(
name|getScope
argument_list|()
argument_list|,
name|definition
argument_list|,
name|schema
argument_list|,
name|wsdlVisitor
argument_list|)
decl_stmt|;
name|moduleVisitor
operator|.
name|visit
argument_list|(
name|node
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|IDLTokenTypes
operator|.
name|LITERAL_interface
case|:
block|{
name|Definition
name|newDefinition
init|=
name|createDefinition
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|PortTypeVisitor
name|portTypeVisitor
init|=
operator|new
name|PortTypeVisitor
argument_list|(
name|getScope
argument_list|()
argument_list|,
name|newDefinition
argument_list|,
name|schema
argument_list|,
name|wsdlVisitor
argument_list|)
decl_stmt|;
name|portTypeVisitor
operator|.
name|visit
argument_list|(
name|node
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|IDLTokenTypes
operator|.
name|LITERAL_exception
case|:
block|{
name|XmlSchema
name|newSchema
init|=
name|createSchema
argument_list|()
decl_stmt|;
name|Definition
name|newDefinition
init|=
name|createDefinition
argument_list|(
name|newSchema
argument_list|)
decl_stmt|;
name|ExceptionVisitor
name|exceptionVisitor
init|=
operator|new
name|ExceptionVisitor
argument_list|(
name|getScope
argument_list|()
argument_list|,
name|newDefinition
argument_list|,
name|newSchema
argument_list|,
name|wsdlVisitor
argument_list|)
decl_stmt|;
name|exceptionVisitor
operator|.
name|visit
argument_list|(
name|node
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|IDLTokenTypes
operator|.
name|LITERAL_const
case|:
block|{
name|XmlSchema
name|newSchema
init|=
name|createSchema
argument_list|()
decl_stmt|;
name|ConstVisitor
name|constVisitor
init|=
operator|new
name|ConstVisitor
argument_list|(
name|getScope
argument_list|()
argument_list|,
name|definition
argument_list|,
name|newSchema
argument_list|,
name|wsdlVisitor
argument_list|)
decl_stmt|;
name|constVisitor
operator|.
name|visit
argument_list|(
name|node
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
block|{
name|XmlSchema
name|newSchema
init|=
name|createSchema
argument_list|()
decl_stmt|;
name|TypeDclVisitor
name|typeDclVisitor
init|=
operator|new
name|TypeDclVisitor
argument_list|(
name|getScope
argument_list|()
argument_list|,
name|definition
argument_list|,
name|newSchema
argument_list|,
name|wsdlVisitor
argument_list|)
decl_stmt|;
name|typeDclVisitor
operator|.
name|visit
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Creates the XmlSchema corresponding to the module scope if none exists      */
specifier|private
name|XmlSchema
name|createSchema
parameter_list|()
block|{
name|String
name|tns
init|=
name|mapper
operator|.
name|map
argument_list|(
name|getScope
argument_list|()
argument_list|)
decl_stmt|;
name|XmlSchema
name|xmlSchema
init|=
name|schema
decl_stmt|;
if|if
condition|(
name|tns
operator|!=
literal|null
condition|)
block|{
name|xmlSchema
operator|=
name|manager
operator|.
name|getXmlSchema
argument_list|(
name|tns
argument_list|)
expr_stmt|;
if|if
condition|(
name|xmlSchema
operator|==
literal|null
condition|)
block|{
name|xmlSchema
operator|=
name|manager
operator|.
name|createXmlSchema
argument_list|(
name|tns
argument_list|,
name|schemas
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|xmlSchema
return|;
block|}
comment|/**      * Creates the WSDL definition correspoinding to the module scope if none exists      */
specifier|private
name|Definition
name|createDefinition
parameter_list|(
name|XmlSchema
name|schema
parameter_list|)
block|{
name|String
name|tns
init|=
name|mapper
operator|.
name|map
argument_list|(
name|getScope
argument_list|()
argument_list|)
decl_stmt|;
name|Definition
name|defn
init|=
name|definition
decl_stmt|;
if|if
condition|(
name|tns
operator|!=
literal|null
condition|)
block|{
name|defn
operator|=
name|manager
operator|.
name|getWSDLDefinition
argument_list|(
name|tns
argument_list|)
expr_stmt|;
if|if
condition|(
name|defn
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|defn
operator|=
name|manager
operator|.
name|createWSDLDefinition
argument_list|(
name|tns
argument_list|)
expr_stmt|;
name|String
name|key
init|=
name|getScope
argument_list|()
operator|.
name|toString
argument_list|(
literal|"_"
argument_list|)
decl_stmt|;
name|String
name|fileName
init|=
name|getWsdlVisitor
argument_list|()
operator|.
name|getOutputDir
argument_list|()
operator|+
name|System
operator|.
name|getProperty
argument_list|(
literal|"file.separator"
argument_list|)
operator|+
name|key
decl_stmt|;
name|manager
operator|.
name|addWSDLDefinitionImport
argument_list|(
name|definition
argument_list|,
name|defn
argument_list|,
name|key
argument_list|,
name|fileName
argument_list|)
expr_stmt|;
if|if
condition|(
name|schema
operator|==
literal|null
condition|)
block|{
name|schema
operator|=
name|manager
operator|.
name|getXmlSchema
argument_list|(
name|tns
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|schema
operator|!=
literal|null
condition|)
block|{
comment|// add a schema based on the module with a corresponding import to the actual schema
name|manager
operator|.
name|addWSDLSchemaImport
argument_list|(
name|defn
argument_list|,
name|tns
argument_list|,
name|fileName
argument_list|)
expr_stmt|;
comment|// make sure that if we are adding the import to the wsdl, then we also
comment|// add the schema to the list of imported schemas
name|manager
operator|.
name|getImportedXmlSchemas
argument_list|()
operator|.
name|put
argument_list|(
operator|new
name|java
operator|.
name|io
operator|.
name|File
argument_list|(
name|fileName
operator|+
literal|".xsd"
argument_list|)
argument_list|,
name|schema
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
block|}
return|return
name|defn
return|;
block|}
block|}
end_class

end_unit

