begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|corba
operator|.
name|common
operator|.
name|idltypes
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_class
specifier|public
specifier|final
class|class
name|IdlOperation
extends|extends
name|IdlScopeBase
block|{
specifier|private
name|IdlType
name|returnType
decl_stmt|;
specifier|private
name|List
argument_list|<
name|IdlException
argument_list|>
name|exceptions
decl_stmt|;
specifier|private
name|boolean
name|oneway
decl_stmt|;
specifier|private
name|IdlOperation
parameter_list|(
name|IdlScopeBase
name|parent
parameter_list|,
name|String
name|name
parameter_list|,
name|boolean
name|isOneway
parameter_list|)
block|{
name|super
argument_list|(
name|parent
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|exceptions
operator|=
operator|new
name|Vector
argument_list|<>
argument_list|()
expr_stmt|;
name|oneway
operator|=
name|isOneway
expr_stmt|;
block|}
specifier|public
specifier|static
name|IdlOperation
name|create
parameter_list|(
name|IdlScopeBase
name|parent
parameter_list|,
name|String
name|name
parameter_list|,
name|boolean
name|isOneway
parameter_list|)
block|{
return|return
operator|new
name|IdlOperation
argument_list|(
name|parent
argument_list|,
name|name
argument_list|,
name|isOneway
argument_list|)
return|;
block|}
specifier|public
name|void
name|addParameter
parameter_list|(
name|IdlParam
name|arg
parameter_list|)
block|{
name|super
operator|.
name|addToScope
argument_list|(
name|arg
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addReturnType
parameter_list|(
name|IdlType
name|rt
parameter_list|)
block|{
name|returnType
operator|=
name|rt
expr_stmt|;
block|}
specifier|public
name|void
name|addException
parameter_list|(
name|IdlException
name|exc
parameter_list|)
block|{
name|exceptions
operator|.
name|add
argument_list|(
name|exc
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|PrintWriter
name|pw
parameter_list|)
block|{
name|IdlScopedName
name|sn
init|=
name|scopeName
argument_list|()
decl_stmt|;
name|pw
operator|.
name|print
argument_list|(
name|indent
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|returnType
operator|!=
literal|null
operator|&&
operator|!
name|returnType
operator|.
name|isEmptyDef
argument_list|()
condition|)
block|{
name|pw
operator|.
name|println
argument_list|(
name|returnType
operator|.
name|fullName
argument_list|(
name|sn
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|oneway
condition|)
block|{
name|pw
operator|.
name|print
argument_list|(
literal|"oneway "
argument_list|)
expr_stmt|;
block|}
name|pw
operator|.
name|println
argument_list|(
literal|"void"
argument_list|)
expr_stmt|;
block|}
name|pw
operator|.
name|print
argument_list|(
name|indent
argument_list|()
operator|+
name|localName
argument_list|()
operator|+
literal|"("
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|IdlDefn
argument_list|>
name|defns
init|=
name|definitions
argument_list|()
decl_stmt|;
if|if
condition|(
name|defns
operator|.
name|size
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|pw
operator|.
name|println
argument_list|()
expr_stmt|;
name|indentMore
argument_list|()
expr_stmt|;
name|int
name|needComma
init|=
name|defns
operator|.
name|size
argument_list|()
operator|-
literal|1
decl_stmt|;
name|Iterator
argument_list|<
name|IdlDefn
argument_list|>
name|it
init|=
name|defns
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|IdlParam
name|def
init|=
operator|(
name|IdlParam
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|def
operator|.
name|write
argument_list|(
name|pw
argument_list|)
expr_stmt|;
if|if
condition|(
name|needComma
operator|--
operator|!=
literal|0
operator|&&
operator|!
name|def
operator|.
name|isEmptyDef
argument_list|()
condition|)
block|{
name|pw
operator|.
name|println
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
block|}
name|pw
operator|.
name|println
argument_list|()
expr_stmt|;
name|indentLess
argument_list|()
expr_stmt|;
name|pw
operator|.
name|print
argument_list|(
name|indent
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|exceptions
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|pw
operator|.
name|println
argument_list|(
literal|");"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|pw
operator|.
name|println
argument_list|(
literal|") raises("
argument_list|)
expr_stmt|;
name|indentMore
argument_list|()
expr_stmt|;
name|int
name|needComma
init|=
name|exceptions
operator|.
name|size
argument_list|()
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|IdlException
name|exc
range|:
name|exceptions
control|)
block|{
name|pw
operator|.
name|print
argument_list|(
name|indent
argument_list|()
operator|+
name|exc
operator|.
name|fullName
argument_list|(
name|scopeName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|needComma
operator|--
operator|!=
literal|0
condition|)
block|{
name|pw
operator|.
name|println
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
block|}
name|pw
operator|.
name|println
argument_list|()
expr_stmt|;
name|indentLess
argument_list|()
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
name|indent
argument_list|()
operator|+
literal|");"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

