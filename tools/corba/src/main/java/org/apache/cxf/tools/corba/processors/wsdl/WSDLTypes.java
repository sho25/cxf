begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|corba
operator|.
name|processors
operator|.
name|wsdl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|Binding
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|Definition
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|PortType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|Anonarray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|Anonfixed
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|Anonsequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|Anonstring
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|Array
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|BindingType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|CaseType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|CorbaConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|CorbaTypeImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|Fixed
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|MemberType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|Sequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|Union
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|Unionbranch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|W3CConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaAnnotation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaAnnotationItem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaAppInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaChoice
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaComplexType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaElement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaFacet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaFractionDigitsFacet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaParticle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaSequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaSimpleTypeRestriction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaTotalDigitsFacet
import|;
end_import

begin_class
specifier|public
specifier|final
class|class
name|WSDLTypes
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|WSDLTypes
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|WSDLTypes
parameter_list|()
block|{     }
specifier|public
specifier|static
name|CorbaTypeImpl
name|processObject
parameter_list|(
name|Definition
name|definition
parameter_list|,
name|XmlSchemaComplexType
name|complex
parameter_list|,
name|XmlSchemaAnnotation
name|annotation
parameter_list|,
name|QName
name|typeName
parameter_list|,
name|QName
name|defaultName
parameter_list|,
name|String
name|idlNamespace
parameter_list|)
throws|throws
name|Exception
block|{
name|CorbaTypeImpl
name|corbaTypeImpl
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|annotation
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|XmlSchemaAnnotationItem
name|item
range|:
name|annotation
operator|.
name|getItems
argument_list|()
control|)
block|{
name|XmlSchemaAppInfo
name|appInfo
init|=
operator|(
name|XmlSchemaAppInfo
operator|)
name|item
decl_stmt|;
if|if
condition|(
name|appInfo
operator|!=
literal|null
condition|)
block|{
name|NodeList
name|nlist
init|=
name|appInfo
operator|.
name|getMarkup
argument_list|()
decl_stmt|;
name|Node
name|node
init|=
name|nlist
operator|.
name|item
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|String
name|info
init|=
name|node
operator|.
name|getNodeValue
argument_list|()
decl_stmt|;
name|info
operator|.
name|trim
argument_list|()
expr_stmt|;
if|if
condition|(
literal|"corba:binding="
operator|.
name|equals
argument_list|(
name|info
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|14
argument_list|)
argument_list|)
condition|)
block|{
name|String
name|bindingName
init|=
name|info
operator|.
name|substring
argument_list|(
literal|14
argument_list|)
decl_stmt|;
name|QName
name|bqname
init|=
operator|new
name|QName
argument_list|(
name|definition
operator|.
name|getTargetNamespace
argument_list|()
argument_list|,
name|bindingName
argument_list|)
decl_stmt|;
comment|//Check if the Binding with name already exists
name|Binding
name|binding
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|WSDLToCorbaHelper
operator|.
name|queryBinding
argument_list|(
name|definition
argument_list|,
name|bqname
argument_list|)
condition|)
block|{
name|binding
operator|=
name|definition
operator|.
name|getBinding
argument_list|(
name|bqname
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|binding
operator|!=
literal|null
condition|)
block|{
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|Object
name|obj
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|Object
argument_list|()
decl_stmt|;
name|PortType
name|portT
init|=
name|binding
operator|.
name|getPortType
argument_list|()
decl_stmt|;
name|QName
name|name
init|=
operator|new
name|QName
argument_list|(
name|idlNamespace
argument_list|,
name|portT
operator|.
name|getQName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|,
name|definition
operator|.
name|getPrefix
argument_list|(
name|idlNamespace
argument_list|)
argument_list|)
decl_stmt|;
name|obj
operator|.
name|setName
argument_list|(
name|name
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
name|obj
operator|.
name|setQName
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|QName
name|bName
init|=
name|binding
operator|.
name|getQName
argument_list|()
decl_stmt|;
name|obj
operator|.
name|setBinding
argument_list|(
name|bName
argument_list|)
expr_stmt|;
comment|// get the repository id of the binding.
name|String
name|repId
init|=
literal|null
decl_stmt|;
name|Iterator
argument_list|<
name|?
argument_list|>
name|bindIter
init|=
name|binding
operator|.
name|getExtensibilityElements
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|bindIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|BindingType
name|type
init|=
operator|(
name|BindingType
operator|)
name|bindIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|repId
operator|=
name|type
operator|.
name|getRepositoryID
argument_list|()
expr_stmt|;
block|}
name|obj
operator|.
name|setRepositoryID
argument_list|(
name|repId
argument_list|)
expr_stmt|;
name|obj
operator|.
name|setType
argument_list|(
name|typeName
argument_list|)
expr_stmt|;
name|corbaTypeImpl
operator|=
name|obj
expr_stmt|;
block|}
else|else
block|{
comment|//if (isVerboseOn()) {
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Could not find binding for: "
operator|+
name|bqname
argument_list|)
expr_stmt|;
comment|//}
block|}
block|}
block|}
block|}
block|}
if|if
condition|(
name|corbaTypeImpl
operator|==
literal|null
condition|)
block|{
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|Object
name|obj
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|Object
argument_list|()
decl_stmt|;
name|QName
name|name
init|=
operator|new
name|QName
argument_list|(
name|idlNamespace
argument_list|,
literal|"CORBA.Object"
argument_list|,
name|definition
operator|.
name|getPrefix
argument_list|(
name|idlNamespace
argument_list|)
argument_list|)
decl_stmt|;
name|obj
operator|.
name|setName
argument_list|(
name|name
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
name|obj
operator|.
name|setQName
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|obj
operator|.
name|setRepositoryID
argument_list|(
literal|"IDL:omg.org/CORBA/Object/1.0"
argument_list|)
expr_stmt|;
name|obj
operator|.
name|setType
argument_list|(
name|typeName
argument_list|)
expr_stmt|;
name|corbaTypeImpl
operator|=
name|obj
expr_stmt|;
block|}
return|return
name|corbaTypeImpl
return|;
block|}
specifier|public
specifier|static
name|CorbaTypeImpl
name|processStringType
parameter_list|(
name|CorbaTypeImpl
name|corbaTypeImpl
parameter_list|,
name|QName
name|name
parameter_list|,
name|String
name|maxLength
parameter_list|,
name|String
name|length
parameter_list|)
throws|throws
name|Exception
block|{
name|boolean
name|boundedString
init|=
literal|true
decl_stmt|;
name|int
name|bound
init|=
literal|0
decl_stmt|;
try|try
block|{
if|if
condition|(
name|maxLength
operator|!=
literal|null
condition|)
block|{
name|bound
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|maxLength
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|length
operator|!=
literal|null
condition|)
block|{
name|bound
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|length
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|boundedString
operator|=
literal|false
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"illegal number"
argument_list|,
name|ex
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"illegal number"
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|boundedString
condition|)
block|{
comment|// bounded string
name|Anonstring
name|anonString
init|=
operator|new
name|Anonstring
argument_list|()
decl_stmt|;
name|anonString
operator|.
name|setBound
argument_list|(
name|bound
argument_list|)
expr_stmt|;
name|anonString
operator|.
name|setName
argument_list|(
name|name
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
name|anonString
operator|.
name|setQName
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|anonString
operator|.
name|setType
argument_list|(
name|corbaTypeImpl
operator|.
name|getQName
argument_list|()
argument_list|)
expr_stmt|;
name|corbaTypeImpl
operator|=
name|anonString
expr_stmt|;
block|}
return|return
name|corbaTypeImpl
return|;
block|}
specifier|public
specifier|static
name|CorbaTypeImpl
name|mapToArray
parameter_list|(
name|QName
name|name
parameter_list|,
name|QName
name|schematypeName
parameter_list|,
name|QName
name|arrayType
parameter_list|,
name|QName
name|elName
parameter_list|,
name|int
name|bound
parameter_list|,
name|boolean
name|anonymous
parameter_list|)
block|{
name|CorbaTypeImpl
name|corbatype
init|=
literal|null
decl_stmt|;
comment|//schematypeName = checkPrefix(schematypeName);
if|if
condition|(
operator|!
name|anonymous
condition|)
block|{
comment|//Create an Array
name|Array
name|corbaArray
init|=
operator|new
name|Array
argument_list|()
decl_stmt|;
name|corbaArray
operator|.
name|setName
argument_list|(
name|name
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
name|corbaArray
operator|.
name|setType
argument_list|(
name|schematypeName
argument_list|)
expr_stmt|;
name|corbaArray
operator|.
name|setElemtype
argument_list|(
name|arrayType
argument_list|)
expr_stmt|;
name|corbaArray
operator|.
name|setElemname
argument_list|(
name|elName
argument_list|)
expr_stmt|;
name|corbaArray
operator|.
name|setBound
argument_list|(
name|bound
argument_list|)
expr_stmt|;
name|corbaArray
operator|.
name|setRepositoryID
argument_list|(
name|WSDLToCorbaHelper
operator|.
name|REPO_STRING
operator|+
name|name
operator|.
name|getLocalPart
argument_list|()
operator|.
name|replace
argument_list|(
literal|'.'
argument_list|,
literal|'/'
argument_list|)
operator|+
name|WSDLToCorbaHelper
operator|.
name|IDL_VERSION
argument_list|)
expr_stmt|;
name|corbaArray
operator|.
name|setQName
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|corbatype
operator|=
name|corbaArray
expr_stmt|;
block|}
else|else
block|{
comment|//Create an Anonymous Array
name|Anonarray
name|corbaArray
init|=
operator|new
name|Anonarray
argument_list|()
decl_stmt|;
name|corbaArray
operator|.
name|setName
argument_list|(
name|name
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
name|corbaArray
operator|.
name|setType
argument_list|(
name|schematypeName
argument_list|)
expr_stmt|;
name|corbaArray
operator|.
name|setElemtype
argument_list|(
name|arrayType
argument_list|)
expr_stmt|;
name|corbaArray
operator|.
name|setElemname
argument_list|(
name|elName
argument_list|)
expr_stmt|;
name|corbaArray
operator|.
name|setBound
argument_list|(
name|bound
argument_list|)
expr_stmt|;
name|corbaArray
operator|.
name|setQName
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|corbatype
operator|=
name|corbaArray
expr_stmt|;
block|}
return|return
name|corbatype
return|;
block|}
specifier|public
specifier|static
name|CorbaTypeImpl
name|mapToSequence
parameter_list|(
name|QName
name|name
parameter_list|,
name|QName
name|schematypeName
parameter_list|,
name|QName
name|arrayType
parameter_list|,
name|QName
name|elName
parameter_list|,
name|int
name|bound
parameter_list|,
name|boolean
name|anonymous
parameter_list|)
block|{
name|CorbaTypeImpl
name|corbaTypeImpl
init|=
literal|null
decl_stmt|;
comment|//schematypeName = checkPrefix(schematypeName);
if|if
condition|(
operator|!
name|anonymous
condition|)
block|{
comment|// Create a Sequence
name|Sequence
name|corbaSeq
init|=
operator|new
name|Sequence
argument_list|()
decl_stmt|;
name|corbaSeq
operator|.
name|setName
argument_list|(
name|name
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
name|corbaSeq
operator|.
name|setQName
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|corbaSeq
operator|.
name|setType
argument_list|(
name|schematypeName
argument_list|)
expr_stmt|;
name|corbaSeq
operator|.
name|setElemtype
argument_list|(
name|arrayType
argument_list|)
expr_stmt|;
name|corbaSeq
operator|.
name|setElemname
argument_list|(
name|elName
argument_list|)
expr_stmt|;
name|corbaSeq
operator|.
name|setBound
argument_list|(
name|bound
argument_list|)
expr_stmt|;
name|corbaSeq
operator|.
name|setRepositoryID
argument_list|(
name|WSDLToCorbaHelper
operator|.
name|REPO_STRING
operator|+
name|name
operator|.
name|getLocalPart
argument_list|()
operator|.
name|replace
argument_list|(
literal|'.'
argument_list|,
literal|'/'
argument_list|)
operator|+
name|WSDLToCorbaHelper
operator|.
name|IDL_VERSION
argument_list|)
expr_stmt|;
name|corbaTypeImpl
operator|=
name|corbaSeq
expr_stmt|;
block|}
else|else
block|{
comment|// Create a Anonymous Sequence
name|Anonsequence
name|corbaSeq
init|=
operator|new
name|Anonsequence
argument_list|()
decl_stmt|;
name|corbaSeq
operator|.
name|setName
argument_list|(
name|name
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
name|corbaSeq
operator|.
name|setQName
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|corbaSeq
operator|.
name|setType
argument_list|(
name|schematypeName
argument_list|)
expr_stmt|;
name|corbaSeq
operator|.
name|setElemtype
argument_list|(
name|arrayType
argument_list|)
expr_stmt|;
name|corbaSeq
operator|.
name|setElemname
argument_list|(
name|elName
argument_list|)
expr_stmt|;
name|corbaSeq
operator|.
name|setBound
argument_list|(
name|bound
argument_list|)
expr_stmt|;
name|corbaTypeImpl
operator|=
name|corbaSeq
expr_stmt|;
block|}
return|return
name|corbaTypeImpl
return|;
block|}
specifier|public
specifier|static
name|Union
name|processUnionBranches
parameter_list|(
name|Union
name|corbaUnion
parameter_list|,
name|List
argument_list|<
name|MemberType
argument_list|>
name|fields
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|caselist
parameter_list|)
block|{
name|int
name|caseIndex
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fields
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|MemberType
name|field
init|=
operator|(
name|MemberType
operator|)
name|fields
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Unionbranch
name|branch
init|=
operator|new
name|Unionbranch
argument_list|()
decl_stmt|;
name|branch
operator|.
name|setName
argument_list|(
name|field
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|branch
operator|.
name|setIdltype
argument_list|(
name|field
operator|.
name|getIdltype
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|isSetQualified
argument_list|()
operator|&&
name|field
operator|.
name|isQualified
argument_list|()
condition|)
block|{
name|branch
operator|.
name|setQualified
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|branch
operator|.
name|setDefault
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|CaseType
name|c
init|=
operator|new
name|CaseType
argument_list|()
decl_stmt|;
name|c
operator|.
name|setLabel
argument_list|(
operator|(
name|String
operator|)
name|caselist
operator|.
name|get
argument_list|(
name|caseIndex
argument_list|)
argument_list|)
expr_stmt|;
name|caseIndex
operator|++
expr_stmt|;
name|branch
operator|.
name|getCase
argument_list|()
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|corbaUnion
operator|.
name|getUnionbranch
argument_list|()
operator|.
name|add
argument_list|(
name|branch
argument_list|)
expr_stmt|;
block|}
return|return
name|corbaUnion
return|;
block|}
specifier|public
specifier|static
name|boolean
name|isOMGUnion
parameter_list|(
name|XmlSchemaComplexType
name|type
parameter_list|)
block|{
name|boolean
name|isUnion
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|type
operator|.
name|getParticle
argument_list|()
operator|instanceof
name|XmlSchemaSequence
operator|&&
name|type
operator|.
name|getAttributes
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|XmlSchemaSequence
name|stype
init|=
operator|(
name|XmlSchemaSequence
operator|)
name|type
operator|.
name|getParticle
argument_list|()
decl_stmt|;
if|if
condition|(
name|stype
operator|.
name|getItems
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|2
condition|)
block|{
name|XmlSchemaParticle
name|st1
init|=
operator|(
name|XmlSchemaParticle
operator|)
name|stype
operator|.
name|getItems
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|XmlSchemaParticle
name|st2
init|=
operator|(
name|XmlSchemaParticle
operator|)
name|stype
operator|.
name|getItems
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|XmlSchemaElement
name|discEl
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|st1
operator|instanceof
name|XmlSchemaChoice
operator|&&
name|st2
operator|instanceof
name|XmlSchemaElement
condition|)
block|{
name|isUnion
operator|=
literal|true
expr_stmt|;
name|discEl
operator|=
operator|(
name|XmlSchemaElement
operator|)
name|st2
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|st2
operator|instanceof
name|XmlSchemaChoice
operator|&&
name|st1
operator|instanceof
name|XmlSchemaElement
condition|)
block|{
name|isUnion
operator|=
literal|true
expr_stmt|;
name|discEl
operator|=
operator|(
name|XmlSchemaElement
operator|)
name|st1
expr_stmt|;
block|}
if|if
condition|(
name|isUnion
operator|&&
operator|!
literal|"discriminator"
operator|.
name|equals
argument_list|(
name|discEl
operator|.
name|getQName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
condition|)
block|{
name|isUnion
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
return|return
name|isUnion
return|;
block|}
specifier|public
specifier|static
name|boolean
name|isUnion
parameter_list|(
name|XmlSchemaComplexType
name|type
parameter_list|)
block|{
name|boolean
name|isUnion
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|type
operator|.
name|getParticle
argument_list|()
operator|instanceof
name|XmlSchemaChoice
operator|&&
name|type
operator|.
name|getAttributes
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|isUnion
operator|=
literal|true
expr_stmt|;
block|}
return|return
name|isUnion
return|;
block|}
specifier|public
specifier|static
name|CorbaTypeImpl
name|processDecimalType
parameter_list|(
name|XmlSchemaSimpleTypeRestriction
name|restrictionType
parameter_list|,
name|QName
name|name
parameter_list|,
name|CorbaTypeImpl
name|corbaTypeImpl
parameter_list|,
name|boolean
name|anonymous
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|tdigits
init|=
literal|null
decl_stmt|;
name|String
name|fdigits
init|=
literal|null
decl_stmt|;
name|boolean
name|boundedDecimal
init|=
literal|false
decl_stmt|;
name|boolean
name|boundedScale
init|=
literal|false
decl_stmt|;
for|for
control|(
name|XmlSchemaFacet
name|val
range|:
name|restrictionType
operator|.
name|getFacets
argument_list|()
control|)
block|{
if|if
condition|(
name|val
operator|instanceof
name|XmlSchemaTotalDigitsFacet
condition|)
block|{
name|tdigits
operator|=
name|val
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
name|boundedDecimal
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|val
operator|instanceof
name|XmlSchemaFractionDigitsFacet
condition|)
block|{
name|fdigits
operator|=
name|val
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
name|boundedScale
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|int
name|digits
init|=
literal|0
decl_stmt|;
name|int
name|scale
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|boundedDecimal
condition|)
block|{
try|try
block|{
name|digits
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|tdigits
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|digits
operator|>
literal|31
operator|)
operator|||
operator|(
name|digits
operator|<
literal|1
operator|)
condition|)
block|{
name|String
name|msg
init|=
literal|"totalDigits facet for the type "
operator|+
name|name
operator|+
literal|" cannot be more than 31 for corba fixed types"
decl_stmt|;
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
name|msg
argument_list|)
expr_stmt|;
name|boundedDecimal
operator|=
literal|false
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|digits
operator|==
literal|31
condition|)
block|{
name|boundedDecimal
operator|=
literal|false
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|ex
parameter_list|)
block|{
name|String
name|msg
init|=
literal|"totalDigits facet on the simple type restriction for type"
operator|+
name|name
operator|.
name|getLocalPart
argument_list|()
operator|+
literal|"is incorrect."
decl_stmt|;
throw|throw
operator|new
name|Exception
argument_list|(
name|msg
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|boundedScale
condition|)
block|{
try|try
block|{
name|scale
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|fdigits
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|scale
operator|>
literal|6
operator|)
operator|||
operator|(
name|scale
operator|<
literal|0
operator|)
condition|)
block|{
name|String
name|msg
init|=
literal|"fixedDigits facet for the type "
operator|+
name|name
operator|+
literal|" cannot be more than 6 for corba fixed types"
decl_stmt|;
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
name|msg
argument_list|)
expr_stmt|;
name|boundedScale
operator|=
literal|false
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|scale
operator|==
literal|6
condition|)
block|{
name|boundedScale
operator|=
literal|false
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|ex
parameter_list|)
block|{
name|String
name|msg
init|=
literal|"fractionDigits facet on the simple type restriction for type"
operator|+
name|name
operator|.
name|getLocalPart
argument_list|()
operator|+
literal|" is incorrect."
decl_stmt|;
throw|throw
operator|new
name|Exception
argument_list|(
name|msg
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
operator|!
name|boundedDecimal
condition|)
block|{
if|if
condition|(
name|anonymous
condition|)
block|{
name|Anonfixed
name|fixed
init|=
operator|(
name|Anonfixed
operator|)
name|corbaTypeImpl
decl_stmt|;
name|digits
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|fixed
operator|.
name|getDigits
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Fixed
name|fixed
init|=
operator|(
name|Fixed
operator|)
name|corbaTypeImpl
decl_stmt|;
name|digits
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|fixed
operator|.
name|getDigits
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|boundedScale
condition|)
block|{
if|if
condition|(
name|anonymous
condition|)
block|{
name|Anonfixed
name|fixed
init|=
operator|(
name|Anonfixed
operator|)
name|corbaTypeImpl
decl_stmt|;
name|scale
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|fixed
operator|.
name|getScale
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Fixed
name|fixed
init|=
operator|(
name|Fixed
operator|)
name|corbaTypeImpl
decl_stmt|;
name|scale
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|fixed
operator|.
name|getScale
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|boundedDecimal
operator|||
name|boundedScale
condition|)
block|{
if|if
condition|(
name|anonymous
condition|)
block|{
name|corbaTypeImpl
operator|=
operator|(
name|CorbaTypeImpl
operator|)
name|getAnonFixedCorbaType
argument_list|(
name|name
argument_list|,
name|W3CConstants
operator|.
name|NT_SCHEMA_DECIMAL
argument_list|,
name|digits
argument_list|,
name|scale
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|corbaTypeImpl
operator|=
operator|(
name|CorbaTypeImpl
operator|)
name|getFixedCorbaType
argument_list|(
name|name
argument_list|,
name|W3CConstants
operator|.
name|NT_SCHEMA_DECIMAL
argument_list|,
name|digits
argument_list|,
name|scale
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|corbaTypeImpl
return|;
block|}
specifier|public
specifier|static
name|CorbaTypeImpl
name|processBase64Type
parameter_list|(
name|CorbaTypeImpl
name|corbaTypeImpl
parameter_list|,
name|QName
name|name
parameter_list|,
name|String
name|maxLength
parameter_list|,
name|String
name|length
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|bound
init|=
literal|0
decl_stmt|;
name|boolean
name|boundedOctet
init|=
literal|true
decl_stmt|;
try|try
block|{
if|if
condition|(
name|maxLength
operator|!=
literal|null
condition|)
block|{
name|bound
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|maxLength
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|length
operator|!=
literal|null
condition|)
block|{
name|bound
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|length
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|boundedOctet
operator|=
literal|false
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|ex
parameter_list|)
block|{
name|String
name|msg
init|=
literal|"length facet on the simple type restriction for type"
operator|+
name|name
operator|.
name|getLocalPart
argument_list|()
operator|+
literal|" is incorrect."
decl_stmt|;
throw|throw
operator|new
name|Exception
argument_list|(
name|msg
argument_list|)
throw|;
block|}
if|if
condition|(
name|boundedOctet
condition|)
block|{
name|corbaTypeImpl
operator|=
name|getOctetCorbaType
argument_list|(
name|name
argument_list|,
name|corbaTypeImpl
operator|.
name|getType
argument_list|()
argument_list|,
name|bound
argument_list|)
expr_stmt|;
block|}
return|return
name|corbaTypeImpl
return|;
block|}
comment|//  checks if the type is an anonymous type.
specifier|public
specifier|static
name|boolean
name|isAnonymous
parameter_list|(
name|String
name|typeName
parameter_list|)
block|{
name|boolean
name|anonymous
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|typeName
operator|==
literal|null
condition|)
block|{
name|anonymous
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|StringTokenizer
name|strtok
init|=
operator|new
name|StringTokenizer
argument_list|(
name|typeName
argument_list|,
literal|"."
argument_list|)
decl_stmt|;
while|while
condition|(
name|strtok
operator|.
name|hasMoreTokens
argument_list|()
condition|)
block|{
name|String
name|token
init|=
name|strtok
operator|.
name|nextToken
argument_list|()
decl_stmt|;
if|if
condition|(
name|token
operator|.
name|startsWith
argument_list|(
literal|"_"
argument_list|)
operator|&&
name|Character
operator|.
name|isDigit
argument_list|(
name|token
operator|.
name|charAt
argument_list|(
literal|1
argument_list|)
argument_list|)
condition|)
block|{
name|anonymous
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
block|}
return|return
name|anonymous
return|;
block|}
specifier|public
specifier|static
name|CorbaTypeImpl
name|getFixedCorbaType
parameter_list|(
name|QName
name|name
parameter_list|,
name|QName
name|stype
parameter_list|,
name|int
name|digits
parameter_list|,
name|int
name|scale
parameter_list|)
block|{
name|Fixed
name|fixed
init|=
operator|new
name|Fixed
argument_list|()
decl_stmt|;
name|fixed
operator|.
name|setName
argument_list|(
name|name
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
name|fixed
operator|.
name|setQName
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|fixed
operator|.
name|setType
argument_list|(
name|stype
argument_list|)
expr_stmt|;
name|fixed
operator|.
name|setDigits
argument_list|(
name|digits
argument_list|)
expr_stmt|;
name|fixed
operator|.
name|setScale
argument_list|(
name|scale
argument_list|)
expr_stmt|;
name|fixed
operator|.
name|setRepositoryID
argument_list|(
name|WSDLToCorbaHelper
operator|.
name|REPO_STRING
operator|+
name|name
operator|.
name|getLocalPart
argument_list|()
operator|.
name|replace
argument_list|(
literal|'.'
argument_list|,
literal|'/'
argument_list|)
operator|+
name|WSDLToCorbaHelper
operator|.
name|IDL_VERSION
argument_list|)
expr_stmt|;
return|return
name|fixed
return|;
block|}
specifier|public
specifier|static
name|CorbaTypeImpl
name|getAnonFixedCorbaType
parameter_list|(
name|QName
name|name
parameter_list|,
name|QName
name|stype
parameter_list|,
name|int
name|digits
parameter_list|,
name|int
name|scale
parameter_list|)
block|{
name|Anonfixed
name|fixed
init|=
operator|new
name|Anonfixed
argument_list|()
decl_stmt|;
name|fixed
operator|.
name|setName
argument_list|(
name|name
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
name|fixed
operator|.
name|setQName
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|fixed
operator|.
name|setType
argument_list|(
name|stype
argument_list|)
expr_stmt|;
name|fixed
operator|.
name|setDigits
argument_list|(
name|digits
argument_list|)
expr_stmt|;
name|fixed
operator|.
name|setScale
argument_list|(
name|scale
argument_list|)
expr_stmt|;
return|return
name|fixed
return|;
block|}
specifier|public
specifier|static
name|CorbaTypeImpl
name|getOctetCorbaType
parameter_list|(
name|QName
name|name
parameter_list|,
name|QName
name|stype
parameter_list|,
name|int
name|bound
parameter_list|)
block|{
name|Sequence
name|seq
init|=
operator|new
name|Sequence
argument_list|()
decl_stmt|;
name|seq
operator|.
name|setName
argument_list|(
name|name
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
name|seq
operator|.
name|setQName
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|seq
operator|.
name|setType
argument_list|(
name|stype
argument_list|)
expr_stmt|;
name|seq
operator|.
name|setElemtype
argument_list|(
name|CorbaConstants
operator|.
name|NT_CORBA_OCTET
argument_list|)
expr_stmt|;
name|seq
operator|.
name|setBound
argument_list|(
name|bound
argument_list|)
expr_stmt|;
name|seq
operator|.
name|setRepositoryID
argument_list|(
name|WSDLToCorbaHelper
operator|.
name|REPO_STRING
operator|+
name|name
operator|.
name|getLocalPart
argument_list|()
operator|.
name|replace
argument_list|(
literal|'.'
argument_list|,
literal|'/'
argument_list|)
operator|+
name|WSDLToCorbaHelper
operator|.
name|IDL_VERSION
argument_list|)
expr_stmt|;
return|return
name|seq
return|;
block|}
block|}
end_class

end_unit

