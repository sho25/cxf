begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|corba
operator|.
name|common
operator|.
name|idltypes
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_class
specifier|public
specifier|final
class|class
name|IdlPrimitive
extends|extends
name|IdlDefnImplBase
implements|implements
name|IdlType
block|{
specifier|static
specifier|final
name|short
name|MINIMUM
init|=
literal|1
decl_stmt|;
specifier|static
specifier|final
name|short
name|LONG
init|=
name|MINIMUM
decl_stmt|;
specifier|static
specifier|final
name|short
name|ULONG
init|=
literal|2
decl_stmt|;
specifier|static
specifier|final
name|short
name|LONGLONG
init|=
literal|3
decl_stmt|;
specifier|static
specifier|final
name|short
name|ULONGLONG
init|=
literal|4
decl_stmt|;
specifier|static
specifier|final
name|short
name|SHORT
init|=
literal|5
decl_stmt|;
specifier|static
specifier|final
name|short
name|USHORT
init|=
literal|6
decl_stmt|;
specifier|static
specifier|final
name|short
name|FLOAT
init|=
literal|7
decl_stmt|;
specifier|static
specifier|final
name|short
name|DOUBLE
init|=
literal|8
decl_stmt|;
specifier|static
specifier|final
name|short
name|LONGDOUBLE
init|=
literal|9
decl_stmt|;
specifier|static
specifier|final
name|short
name|CHAR
init|=
literal|10
decl_stmt|;
specifier|static
specifier|final
name|short
name|WCHAR
init|=
literal|11
decl_stmt|;
specifier|static
specifier|final
name|short
name|BOOLEAN
init|=
literal|12
decl_stmt|;
specifier|static
specifier|final
name|short
name|OCTET
init|=
literal|13
decl_stmt|;
specifier|static
specifier|final
name|short
name|ANY
init|=
literal|14
decl_stmt|;
specifier|static
specifier|final
name|short
name|MAXIMUM
init|=
literal|15
decl_stmt|;
specifier|static
specifier|final
name|short
name|DATETIME
init|=
name|MAXIMUM
decl_stmt|;
specifier|private
name|String
name|wsdlName
decl_stmt|;
specifier|private
name|short
name|type
decl_stmt|;
specifier|private
name|IdlPrimitive
parameter_list|(
name|IdlScopeBase
name|parent
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|wsdlFileName
parameter_list|,
name|short
name|typeValue
parameter_list|)
block|{
name|super
argument_list|(
name|parent
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|this
operator|.
name|wsdlName
operator|=
operator|new
name|String
argument_list|(
name|wsdlFileName
argument_list|)
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|typeValue
expr_stmt|;
block|}
specifier|public
specifier|static
name|IdlPrimitive
name|create
parameter_list|(
name|IdlScopeBase
name|parent
parameter_list|,
name|short
name|type
parameter_list|)
block|{
name|String
name|name
init|=
literal|null
decl_stmt|;
name|String
name|wsdlName
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|LONG
case|:
name|name
operator|=
literal|"long"
expr_stmt|;
name|wsdlName
operator|=
literal|"long"
expr_stmt|;
break|break;
case|case
name|ULONG
case|:
name|name
operator|=
literal|"unsigned long"
expr_stmt|;
name|wsdlName
operator|=
literal|"ulong"
expr_stmt|;
break|break;
case|case
name|LONGLONG
case|:
name|name
operator|=
literal|"long long"
expr_stmt|;
name|wsdlName
operator|=
literal|"longlong"
expr_stmt|;
break|break;
case|case
name|ULONGLONG
case|:
name|name
operator|=
literal|"unsigned long long"
expr_stmt|;
name|wsdlName
operator|=
literal|"ulonglong"
expr_stmt|;
break|break;
case|case
name|SHORT
case|:
name|name
operator|=
literal|"short"
expr_stmt|;
name|wsdlName
operator|=
literal|"short"
expr_stmt|;
break|break;
case|case
name|USHORT
case|:
name|name
operator|=
literal|"unsigned short"
expr_stmt|;
name|wsdlName
operator|=
literal|"ushort"
expr_stmt|;
break|break;
case|case
name|FLOAT
case|:
name|name
operator|=
literal|"float"
expr_stmt|;
name|wsdlName
operator|=
literal|"float"
expr_stmt|;
break|break;
case|case
name|DOUBLE
case|:
name|name
operator|=
literal|"double"
expr_stmt|;
name|wsdlName
operator|=
literal|"double"
expr_stmt|;
break|break;
case|case
name|LONGDOUBLE
case|:
name|name
operator|=
literal|"long double"
expr_stmt|;
name|wsdlName
operator|=
literal|"longdouble"
expr_stmt|;
break|break;
case|case
name|CHAR
case|:
name|name
operator|=
literal|"char"
expr_stmt|;
name|wsdlName
operator|=
literal|"char"
expr_stmt|;
break|break;
case|case
name|WCHAR
case|:
name|name
operator|=
literal|"wchar"
expr_stmt|;
name|wsdlName
operator|=
literal|"wchar"
expr_stmt|;
break|break;
case|case
name|BOOLEAN
case|:
name|name
operator|=
literal|"boolean"
expr_stmt|;
name|wsdlName
operator|=
literal|"boolean"
expr_stmt|;
break|break;
case|case
name|OCTET
case|:
name|name
operator|=
literal|"octet"
expr_stmt|;
name|wsdlName
operator|=
literal|"octet"
expr_stmt|;
break|break;
case|case
name|ANY
case|:
name|name
operator|=
literal|"any"
expr_stmt|;
name|wsdlName
operator|=
literal|"any"
expr_stmt|;
break|break;
case|case
name|DATETIME
case|:
name|name
operator|=
literal|"TimeBase::UtcT"
expr_stmt|;
name|wsdlName
operator|=
literal|"dateTime"
expr_stmt|;
break|break;
default|default:
break|break;
block|}
return|return
operator|new
name|IdlPrimitive
argument_list|(
name|parent
argument_list|,
name|name
argument_list|,
name|wsdlName
argument_list|,
name|type
argument_list|)
return|;
block|}
specifier|public
name|String
name|fullName
parameter_list|()
block|{
return|return
name|localName
argument_list|()
return|;
block|}
specifier|public
name|String
name|fullName
parameter_list|(
name|IdlScopedName
name|rel
parameter_list|)
block|{
return|return
name|localName
argument_list|()
return|;
block|}
specifier|public
name|IdlScopedName
name|scopeName
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
name|short
name|primitiveType
parameter_list|()
block|{
return|return
name|type
return|;
block|}
name|String
name|wsdlName
parameter_list|()
block|{
return|return
name|this
operator|.
name|wsdlName
return|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|PrintWriter
name|pw
parameter_list|)
block|{
name|pw
operator|.
name|print
argument_list|(
name|localName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

