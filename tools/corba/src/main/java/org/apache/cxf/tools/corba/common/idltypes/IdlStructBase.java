begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|corba
operator|.
name|common
operator|.
name|idltypes
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_class
specifier|public
specifier|abstract
class|class
name|IdlStructBase
extends|extends
name|IdlScopeBase
implements|implements
name|IdlType
block|{
specifier|private
name|String
name|kind
decl_stmt|;
specifier|protected
name|IdlStructBase
parameter_list|(
name|IdlScopeBase
name|parent
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|type
parameter_list|)
block|{
name|super
argument_list|(
name|parent
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|this
operator|.
name|kind
operator|=
operator|new
name|String
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
name|void
name|addField
parameter_list|(
name|IdlField
name|f
parameter_list|)
block|{
name|addToScope
argument_list|(
name|f
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|PrintWriter
name|pw
parameter_list|)
block|{
name|pw
operator|.
name|println
argument_list|(
name|indent
argument_list|()
operator|+
name|kind
operator|+
literal|" "
operator|+
name|localName
argument_list|()
operator|+
literal|" {"
argument_list|)
expr_stmt|;
name|indentMore
argument_list|()
expr_stmt|;
name|super
operator|.
name|write
argument_list|(
name|pw
argument_list|)
expr_stmt|;
name|indentLess
argument_list|()
expr_stmt|;
name|pw
operator|.
name|println
argument_list|(
name|indent
argument_list|()
operator|+
literal|"};"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|writeFwd
parameter_list|(
name|PrintWriter
name|pw
parameter_list|)
block|{
if|if
condition|(
name|isCircular
argument_list|()
condition|)
block|{
name|pw
operator|.
name|println
argument_list|(
name|indent
argument_list|()
operator|+
name|kind
operator|+
literal|" "
operator|+
name|localName
argument_list|()
operator|+
literal|";"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|isEmptyDef
parameter_list|()
block|{
if|if
condition|(
name|isCircular
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|definitions
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|true
return|;
block|}
name|boolean
name|hasNonEmptyMembers
init|=
literal|false
decl_stmt|;
for|for
control|(
name|IdlDefn
name|defn
range|:
name|definitions
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|defn
operator|.
name|isEmptyDef
argument_list|()
condition|)
block|{
name|hasNonEmptyMembers
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
return|return
operator|!
name|hasNonEmptyMembers
return|;
block|}
specifier|public
name|IdlScopeBase
name|getCircularScope
parameter_list|(
name|IdlScopeBase
name|startScope
parameter_list|,
name|List
argument_list|<
name|Object
argument_list|>
name|doneDefn
parameter_list|)
block|{
if|if
condition|(
name|startScope
operator|==
literal|null
condition|)
block|{
name|startScope
operator|=
name|this
expr_stmt|;
block|}
return|return
name|super
operator|.
name|getCircularScope
argument_list|(
name|startScope
argument_list|,
name|doneDefn
argument_list|)
return|;
block|}
block|}
end_class

end_unit

