begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|corba
operator|.
name|common
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|InputSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|PackageUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|common
operator|.
name|ToolConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|util
operator|.
name|PropertyUtil
import|;
end_import

begin_class
specifier|public
class|class
name|ProcessorEnvironment
block|{
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|paramMap
decl_stmt|;
specifier|private
name|String
name|packageName
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|namespacePackageMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|excludeNamespacePackageMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|InputSource
argument_list|>
name|jaxbBindingFiles
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|public
name|ProcessorEnvironment
parameter_list|()
block|{     }
specifier|public
name|void
name|loadDefaultNS2Pck
parameter_list|()
block|{
try|try
block|{
name|PropertyUtil
name|properties
init|=
operator|new
name|PropertyUtil
argument_list|()
decl_stmt|;
name|properties
operator|.
name|load
argument_list|(
name|getResourceAsStream
argument_list|(
literal|"toolspec/toolspecs/namespace2package.cfg"
argument_list|)
argument_list|)
expr_stmt|;
name|namespacePackageMap
operator|.
name|putAll
argument_list|(
name|properties
operator|.
name|getMaps
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|loadDefaultExcludes
parameter_list|()
block|{
try|try
block|{
name|PropertyUtil
name|properties
init|=
operator|new
name|PropertyUtil
argument_list|()
decl_stmt|;
name|properties
operator|.
name|load
argument_list|(
name|getResourceAsStream
argument_list|(
literal|"toolspec/toolspecs/wsdltojavaexclude.cfg"
argument_list|)
argument_list|)
expr_stmt|;
name|excludeNamespacePackageMap
operator|.
name|putAll
argument_list|(
name|properties
operator|.
name|getMaps
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|InputStream
name|getResourceAsStream
parameter_list|(
name|String
name|file
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|ProcessorEnvironment
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
name|file
argument_list|)
return|;
block|}
specifier|public
name|void
name|setParameters
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
parameter_list|)
block|{
name|this
operator|.
name|paramMap
operator|=
name|map
expr_stmt|;
block|}
specifier|public
name|boolean
name|containsKey
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
operator|(
name|paramMap
operator|==
literal|null
operator|)
condition|?
literal|false
else|:
name|paramMap
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
return|;
block|}
specifier|public
name|Object
name|get
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
operator|(
name|paramMap
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|paramMap
operator|.
name|get
argument_list|(
name|key
argument_list|)
return|;
block|}
specifier|public
name|Object
name|get
parameter_list|(
name|String
name|key
parameter_list|,
name|Object
name|defaultValue
parameter_list|)
block|{
if|if
condition|(
operator|!
name|optionSet
argument_list|(
name|key
argument_list|)
condition|)
block|{
return|return
name|defaultValue
return|;
block|}
return|return
name|get
argument_list|(
name|key
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|getBooleanValue
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|defaultValue
parameter_list|)
block|{
return|return
name|Boolean
operator|.
name|valueOf
argument_list|(
operator|(
name|String
operator|)
name|get
argument_list|(
name|key
argument_list|,
name|defaultValue
argument_list|)
argument_list|)
operator|.
name|booleanValue
argument_list|()
return|;
block|}
specifier|public
name|void
name|put
parameter_list|(
name|String
name|key
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
if|if
condition|(
name|paramMap
operator|==
literal|null
condition|)
block|{
name|paramMap
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|paramMap
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|remove
parameter_list|(
name|String
name|key
parameter_list|)
block|{
if|if
condition|(
name|paramMap
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|paramMap
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|optionSet
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
operator|(
name|get
argument_list|(
name|key
argument_list|)
operator|==
literal|null
operator|)
condition|?
literal|false
else|:
literal|true
return|;
block|}
specifier|public
name|boolean
name|isVerbose
parameter_list|()
block|{
return|return
name|optionSet
argument_list|(
name|ToolConstants
operator|.
name|CFG_VERBOSE
argument_list|)
return|;
block|}
specifier|public
name|void
name|addNamespacePackageMap
parameter_list|(
name|String
name|namespace
parameter_list|,
name|String
name|pn
parameter_list|)
block|{
name|this
operator|.
name|namespacePackageMap
operator|.
name|put
argument_list|(
name|namespace
argument_list|,
name|pn
argument_list|)
expr_stmt|;
block|}
specifier|private
name|String
name|mapNamespaceToPackageName
parameter_list|(
name|String
name|ns
parameter_list|)
block|{
return|return
name|this
operator|.
name|namespacePackageMap
operator|.
name|get
argument_list|(
name|ns
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|hasNamespace
parameter_list|(
name|String
name|ns
parameter_list|)
block|{
return|return
name|this
operator|.
name|namespacePackageMap
operator|.
name|containsKey
argument_list|(
name|ns
argument_list|)
return|;
block|}
specifier|public
name|void
name|addExcludeNamespacePackageMap
parameter_list|(
name|String
name|namespace
parameter_list|,
name|String
name|pn
parameter_list|)
block|{
name|this
operator|.
name|excludeNamespacePackageMap
operator|.
name|put
argument_list|(
name|namespace
argument_list|,
name|pn
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|hasExcludeNamespace
parameter_list|(
name|String
name|ns
parameter_list|)
block|{
return|return
name|this
operator|.
name|excludeNamespacePackageMap
operator|.
name|containsKey
argument_list|(
name|ns
argument_list|)
return|;
block|}
specifier|public
name|String
name|getExcludePackageName
parameter_list|(
name|String
name|ns
parameter_list|)
block|{
return|return
name|this
operator|.
name|excludeNamespacePackageMap
operator|.
name|get
argument_list|(
name|ns
argument_list|)
return|;
block|}
specifier|public
name|void
name|setPackageName
parameter_list|(
name|String
name|pkgName
parameter_list|)
block|{
name|this
operator|.
name|packageName
operator|=
name|pkgName
expr_stmt|;
block|}
specifier|public
name|String
name|getPackageName
parameter_list|()
block|{
return|return
name|this
operator|.
name|packageName
return|;
block|}
specifier|public
name|String
name|mapPackageName
parameter_list|(
name|String
name|ns
parameter_list|)
block|{
if|if
condition|(
name|hasNamespace
argument_list|(
name|ns
argument_list|)
condition|)
block|{
return|return
name|mapNamespaceToPackageName
argument_list|(
name|ns
argument_list|)
return|;
block|}
return|return
name|getPackageName
argument_list|()
return|;
block|}
specifier|public
name|String
name|getCustomizedNS
parameter_list|(
name|String
name|ns
parameter_list|)
block|{
return|return
name|PackageUtils
operator|.
name|getNamespace
argument_list|(
name|mapPackageName
argument_list|(
name|ns
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|void
name|addJaxbBindingFile
parameter_list|(
name|String
name|location
parameter_list|,
name|InputSource
name|is
parameter_list|)
block|{
name|this
operator|.
name|jaxbBindingFiles
operator|.
name|put
argument_list|(
name|location
argument_list|,
name|is
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|InputSource
argument_list|>
name|getJaxbBindingFile
parameter_list|()
block|{
return|return
name|this
operator|.
name|jaxbBindingFiles
return|;
block|}
specifier|public
name|boolean
name|isExcludeNamespaceEnabled
parameter_list|()
block|{
return|return
operator|!
name|excludeNamespacePackageMap
operator|.
name|isEmpty
argument_list|()
return|;
block|}
block|}
end_class

end_unit

