begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|corba
operator|.
name|processors
operator|.
name|idl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|Definition
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|collections
operator|.
name|AST
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|CorbaConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|CorbaTypeImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|corba
operator|.
name|common
operator|.
name|XmlSchemaPrimitiveMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaType
import|;
end_import

begin_class
specifier|public
class|class
name|PrimitiveTypesVisitor
implements|implements
name|Visitor
block|{
specifier|private
specifier|static
name|XmlSchemaPrimitiveMap
name|xmlSchemaPrimitiveMap
init|=
operator|new
name|XmlSchemaPrimitiveMap
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|List
argument_list|<
name|Integer
argument_list|>
name|PRIMITIVE_TYPES
init|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
name|PRIMITIVE_TYPES
operator|.
name|add
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|IDLTokenTypes
operator|.
name|LITERAL_float
argument_list|)
argument_list|)
expr_stmt|;
name|PRIMITIVE_TYPES
operator|.
name|add
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|IDLTokenTypes
operator|.
name|LITERAL_double
argument_list|)
argument_list|)
expr_stmt|;
name|PRIMITIVE_TYPES
operator|.
name|add
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|IDLTokenTypes
operator|.
name|LITERAL_long
argument_list|)
argument_list|)
expr_stmt|;
name|PRIMITIVE_TYPES
operator|.
name|add
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|IDLTokenTypes
operator|.
name|LITERAL_short
argument_list|)
argument_list|)
expr_stmt|;
name|PRIMITIVE_TYPES
operator|.
name|add
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|IDLTokenTypes
operator|.
name|LITERAL_unsigned
argument_list|)
argument_list|)
expr_stmt|;
name|PRIMITIVE_TYPES
operator|.
name|add
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|IDLTokenTypes
operator|.
name|LITERAL_char
argument_list|)
argument_list|)
expr_stmt|;
name|PRIMITIVE_TYPES
operator|.
name|add
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|IDLTokenTypes
operator|.
name|LITERAL_wchar
argument_list|)
argument_list|)
expr_stmt|;
name|PRIMITIVE_TYPES
operator|.
name|add
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|IDLTokenTypes
operator|.
name|LITERAL_boolean
argument_list|)
argument_list|)
expr_stmt|;
name|PRIMITIVE_TYPES
operator|.
name|add
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|IDLTokenTypes
operator|.
name|LITERAL_any
argument_list|)
argument_list|)
expr_stmt|;
name|PRIMITIVE_TYPES
operator|.
name|add
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|IDLTokenTypes
operator|.
name|LITERAL_octet
argument_list|)
argument_list|)
expr_stmt|;
name|PRIMITIVE_TYPES
operator|.
name|add
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|IDLTokenTypes
operator|.
name|LITERAL_any
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|XmlSchemaType
name|schemaType
decl_stmt|;
specifier|private
name|CorbaTypeImpl
name|corbaType
decl_stmt|;
specifier|private
name|Scope
name|scope
decl_stmt|;
specifier|private
name|XmlSchemaCollection
name|schemas
decl_stmt|;
specifier|public
name|PrimitiveTypesVisitor
parameter_list|(
name|Scope
name|scopeRef
parameter_list|,
name|Definition
name|defn
parameter_list|,
name|XmlSchema
name|schemaRef
parameter_list|,
name|XmlSchemaCollection
name|xmlSchemas
parameter_list|)
block|{
name|scope
operator|=
name|scopeRef
expr_stmt|;
name|schemas
operator|=
name|xmlSchemas
expr_stmt|;
block|}
specifier|public
specifier|static
name|boolean
name|accept
parameter_list|(
name|AST
name|node
parameter_list|)
block|{
return|return
name|PRIMITIVE_TYPES
operator|.
name|contains
argument_list|(
name|node
operator|.
name|getType
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|void
name|visit
parameter_list|(
name|AST
name|node
parameter_list|)
block|{
comment|//<base_type_spec> ::=<floating_pt_type>
comment|//                    |<integer_type>
comment|//                    |<char_type>
comment|//                    |<wide_char_type>
comment|//                    |<boolean_type>
comment|//                    |<octet_type>
comment|//                    |<any_type>
comment|//                    |<object_type><= NOT SUPPORTED
comment|//                    |<value_base_type><= NOT SUPPORTED
comment|//<floating_pt_type> ::= "float"
comment|//                      | "double"
comment|//                      | "long" double"
comment|//<integer_type> ::=<signed_int>
comment|//                  |<unsigned_int>
comment|//<signed_int> ::=<signed_short_int>
comment|//                |<signed_long_int>
comment|//                |<signed_longlong_int>
comment|//<signed_short_int> ::= "short"
comment|//<signed_long_int> ::= "long"
comment|//<signed_longlong_int> ::= "long" "long"
comment|//<unsigned_int> ::=<unsigned_short_int>
comment|//                  |<unsigned_long_int>
comment|//                  |<unsigned_longlong_int>
comment|//<unsigned_short_int> ::= "unsigned" "short"
comment|//<unsigned_long_int> ::= "unsigned" "long"
comment|//<unsigned_longlong_int> ::= "unsigned" "long" "long"
comment|//<char_type> ::= "char"
comment|//<wide_char_type> ::= "wchar"
comment|//<boolean_type> ::= "boolean"
comment|//<octet_type> ::= "octet"
comment|//<any_type> ::= "any"
name|XmlSchemaType
name|stype
init|=
literal|null
decl_stmt|;
name|CorbaTypeImpl
name|ctype
init|=
literal|null
decl_stmt|;
name|QName
name|corbaTypeQName
init|=
name|PrimitiveTypesVisitor
operator|.
name|getPrimitiveType
argument_list|(
name|node
argument_list|)
decl_stmt|;
if|if
condition|(
name|corbaTypeQName
operator|!=
literal|null
condition|)
block|{
name|QName
name|schemaTypeQName
init|=
name|xmlSchemaPrimitiveMap
operator|.
name|get
argument_list|(
name|corbaTypeQName
argument_list|)
decl_stmt|;
if|if
condition|(
name|schemaTypeQName
operator|!=
literal|null
condition|)
block|{
comment|//XmlSchemaCollection schemas = new XmlSchemaCollection();
name|stype
operator|=
name|schemas
operator|.
name|getTypeByQName
argument_list|(
name|schemaTypeQName
argument_list|)
expr_stmt|;
if|if
condition|(
name|stype
operator|!=
literal|null
condition|)
block|{
name|ctype
operator|=
operator|new
name|CorbaTypeImpl
argument_list|()
expr_stmt|;
name|ctype
operator|.
name|setQName
argument_list|(
name|corbaTypeQName
argument_list|)
expr_stmt|;
name|ctype
operator|.
name|setType
argument_list|(
name|stype
operator|.
name|getQName
argument_list|()
argument_list|)
expr_stmt|;
name|ctype
operator|.
name|setName
argument_list|(
name|stype
operator|.
name|getQName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|schemaType
operator|=
name|stype
expr_stmt|;
name|corbaType
operator|=
name|ctype
expr_stmt|;
block|}
specifier|public
name|XmlSchemaType
name|getSchemaType
parameter_list|()
block|{
return|return
name|schemaType
return|;
block|}
specifier|public
name|CorbaTypeImpl
name|getCorbaType
parameter_list|()
block|{
return|return
name|corbaType
return|;
block|}
specifier|public
name|Scope
name|getScope
parameter_list|()
block|{
return|return
name|scope
return|;
block|}
specifier|public
name|Scope
name|getFullyQualifiedName
parameter_list|()
block|{
return|return
name|scope
return|;
block|}
specifier|public
specifier|static
name|QName
name|getPrimitiveType
parameter_list|(
name|AST
name|node
parameter_list|)
block|{
name|QName
name|result
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|node
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|IDLTokenTypes
operator|.
name|LITERAL_long
case|:
if|if
condition|(
operator|(
name|node
operator|.
name|getNextSibling
argument_list|()
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|node
operator|.
name|getNextSibling
argument_list|()
operator|.
name|getType
argument_list|()
operator|==
name|IDLTokenTypes
operator|.
name|LITERAL_long
operator|)
condition|)
block|{
comment|// long long
name|result
operator|=
name|CorbaConstants
operator|.
name|NT_CORBA_LONGLONG
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|node
operator|.
name|getFirstChild
argument_list|()
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|node
operator|.
name|getFirstChild
argument_list|()
operator|.
name|getType
argument_list|()
operator|==
name|IDLTokenTypes
operator|.
name|LITERAL_double
operator|)
condition|)
block|{
comment|// "double" node is a child of "long" node - instead of being a sibling
comment|// long double
name|result
operator|=
name|CorbaConstants
operator|.
name|NT_CORBA_LONGDOUBLE
expr_stmt|;
block|}
else|else
block|{
comment|// long
name|result
operator|=
name|CorbaConstants
operator|.
name|NT_CORBA_LONG
expr_stmt|;
block|}
break|break;
case|case
name|IDLTokenTypes
operator|.
name|LITERAL_unsigned
case|:
name|AST
name|node2
init|=
name|node
operator|.
name|getNextSibling
argument_list|()
decl_stmt|;
if|if
condition|(
name|node2
operator|!=
literal|null
operator|&&
name|node2
operator|.
name|getType
argument_list|()
operator|==
name|IDLTokenTypes
operator|.
name|LITERAL_short
condition|)
block|{
comment|// unsigned short
name|result
operator|=
name|CorbaConstants
operator|.
name|NT_CORBA_USHORT
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|node2
operator|!=
literal|null
operator|&&
name|node2
operator|.
name|getType
argument_list|()
operator|==
name|IDLTokenTypes
operator|.
name|LITERAL_long
condition|)
block|{
name|AST
name|node3
init|=
name|node2
operator|.
name|getNextSibling
argument_list|()
decl_stmt|;
if|if
condition|(
name|node3
operator|!=
literal|null
operator|&&
name|node3
operator|.
name|getType
argument_list|()
operator|==
name|IDLTokenTypes
operator|.
name|LITERAL_long
condition|)
block|{
comment|// unsigned long long
name|result
operator|=
name|CorbaConstants
operator|.
name|NT_CORBA_ULONGLONG
expr_stmt|;
block|}
else|else
block|{
comment|// unsigned long
name|result
operator|=
name|CorbaConstants
operator|.
name|NT_CORBA_ULONG
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// TBD: we should never get here
block|}
break|break;
case|case
name|IDLTokenTypes
operator|.
name|LITERAL_short
case|:
name|result
operator|=
name|CorbaConstants
operator|.
name|NT_CORBA_SHORT
expr_stmt|;
break|break;
case|case
name|IDLTokenTypes
operator|.
name|LITERAL_float
case|:
name|result
operator|=
name|CorbaConstants
operator|.
name|NT_CORBA_FLOAT
expr_stmt|;
break|break;
case|case
name|IDLTokenTypes
operator|.
name|LITERAL_double
case|:
name|result
operator|=
name|CorbaConstants
operator|.
name|NT_CORBA_DOUBLE
expr_stmt|;
break|break;
case|case
name|IDLTokenTypes
operator|.
name|LITERAL_char
case|:
name|result
operator|=
name|CorbaConstants
operator|.
name|NT_CORBA_CHAR
expr_stmt|;
break|break;
case|case
name|IDLTokenTypes
operator|.
name|LITERAL_wchar
case|:
name|result
operator|=
name|CorbaConstants
operator|.
name|NT_CORBA_WCHAR
expr_stmt|;
break|break;
case|case
name|IDLTokenTypes
operator|.
name|LITERAL_string
case|:
name|result
operator|=
name|CorbaConstants
operator|.
name|NT_CORBA_STRING
expr_stmt|;
break|break;
case|case
name|IDLTokenTypes
operator|.
name|LITERAL_wstring
case|:
name|result
operator|=
name|CorbaConstants
operator|.
name|NT_CORBA_WSTRING
expr_stmt|;
break|break;
case|case
name|IDLTokenTypes
operator|.
name|LITERAL_boolean
case|:
name|result
operator|=
name|CorbaConstants
operator|.
name|NT_CORBA_BOOLEAN
expr_stmt|;
break|break;
case|case
name|IDLTokenTypes
operator|.
name|LITERAL_octet
case|:
name|result
operator|=
name|CorbaConstants
operator|.
name|NT_CORBA_OCTET
expr_stmt|;
break|break;
case|case
name|IDLTokenTypes
operator|.
name|LITERAL_any
case|:
name|result
operator|=
name|CorbaConstants
operator|.
name|NT_CORBA_ANY
expr_stmt|;
break|break;
default|default:
comment|// TBD
break|break;
block|}
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

