begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|corba
operator|.
name|processors
operator|.
name|idl
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|CorbaTypeImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|ParamType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|corba
operator|.
name|common
operator|.
name|ReferenceConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaElement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaExternal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaImport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaType
import|;
end_import

begin_class
specifier|public
class|class
name|ParamDeferredAction
implements|implements
name|SchemaDeferredAction
block|{
specifier|protected
name|ParamType
name|param
decl_stmt|;
specifier|protected
name|XmlSchemaElement
name|element
decl_stmt|;
specifier|protected
name|XmlSchema
name|schema
decl_stmt|;
specifier|protected
name|XmlSchemaCollection
name|schemas
decl_stmt|;
specifier|protected
name|Scope
name|typeScope
decl_stmt|;
specifier|protected
name|WSDLSchemaManager
name|manager
decl_stmt|;
specifier|protected
name|ModuleToNSMapper
name|mapper
decl_stmt|;
specifier|public
name|ParamDeferredAction
parameter_list|(
name|ParamType
name|defParam
parameter_list|,
name|XmlSchemaElement
name|elem
parameter_list|)
block|{
name|param
operator|=
name|defParam
expr_stmt|;
name|element
operator|=
name|elem
expr_stmt|;
block|}
specifier|public
name|ParamDeferredAction
parameter_list|(
name|ParamType
name|defParam
parameter_list|)
block|{
name|param
operator|=
name|defParam
expr_stmt|;
block|}
specifier|public
name|ParamDeferredAction
parameter_list|(
name|XmlSchemaElement
name|elem
parameter_list|)
block|{
name|element
operator|=
name|elem
expr_stmt|;
block|}
specifier|public
name|ParamDeferredAction
parameter_list|(
name|XmlSchemaElement
name|elem
parameter_list|,
name|Scope
name|ts
parameter_list|,
name|XmlSchema
name|xmlSchema
parameter_list|,
name|XmlSchemaCollection
name|xmlSchemas
parameter_list|,
name|WSDLSchemaManager
name|man
parameter_list|,
name|ModuleToNSMapper
name|map
parameter_list|)
block|{
name|element
operator|=
name|elem
expr_stmt|;
name|schema
operator|=
name|xmlSchema
expr_stmt|;
name|schemas
operator|=
name|xmlSchemas
expr_stmt|;
name|typeScope
operator|=
name|ts
expr_stmt|;
name|manager
operator|=
name|man
expr_stmt|;
name|mapper
operator|=
name|map
expr_stmt|;
block|}
specifier|public
name|void
name|execute
parameter_list|(
name|XmlSchemaType
name|stype
parameter_list|,
name|CorbaTypeImpl
name|ctype
parameter_list|)
block|{
if|if
condition|(
name|param
operator|!=
literal|null
condition|)
block|{
name|param
operator|.
name|setIdltype
argument_list|(
name|ctype
operator|.
name|getQName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|element
operator|!=
literal|null
condition|)
block|{
name|element
operator|.
name|setSchemaTypeName
argument_list|(
name|stype
operator|.
name|getQName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|stype
operator|.
name|getQName
argument_list|()
operator|.
name|equals
argument_list|(
name|ReferenceConstants
operator|.
name|WSADDRESSING_TYPE
argument_list|)
condition|)
block|{
name|element
operator|.
name|setNillable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|manager
operator|==
literal|null
condition|)
block|{
return|return;
block|}
comment|// Now we need to make sure we are importing any types we need
name|XmlSchema
name|importedSchema
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|stype
operator|.
name|getQName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
operator|.
name|equals
argument_list|(
name|ReferenceConstants
operator|.
name|WSADDRESSING_NAMESPACE
argument_list|)
condition|)
block|{
name|boolean
name|alreadyImported
init|=
literal|false
decl_stmt|;
for|for
control|(
name|XmlSchemaExternal
name|ext
range|:
name|schema
operator|.
name|getExternals
argument_list|()
control|)
block|{
if|if
condition|(
name|ext
operator|instanceof
name|XmlSchemaImport
condition|)
block|{
name|XmlSchemaImport
name|schemaImport
init|=
operator|(
name|XmlSchemaImport
operator|)
name|ext
decl_stmt|;
if|if
condition|(
name|schemaImport
operator|.
name|getNamespace
argument_list|()
operator|.
name|equals
argument_list|(
name|ReferenceConstants
operator|.
name|WSADDRESSING_NAMESPACE
argument_list|)
condition|)
block|{
name|alreadyImported
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|alreadyImported
condition|)
block|{
comment|// We need to add an import statement to include the WS addressing types
name|XmlSchemaImport
name|wsaImport
init|=
operator|new
name|XmlSchemaImport
argument_list|(
name|schema
argument_list|)
decl_stmt|;
name|wsaImport
operator|.
name|setNamespace
argument_list|(
name|ReferenceConstants
operator|.
name|WSADDRESSING_NAMESPACE
argument_list|)
expr_stmt|;
name|wsaImport
operator|.
name|setSchemaLocation
argument_list|(
name|ReferenceConstants
operator|.
name|WSADDRESSING_LOCATION
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
operator|!
name|stype
operator|.
name|getQName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
operator|.
name|equals
argument_list|(
name|schema
operator|.
name|getTargetNamespace
argument_list|()
argument_list|)
condition|)
block|{
name|importedSchema
operator|=
name|manager
operator|.
name|getXmlSchema
argument_list|(
name|mapper
operator|.
name|map
argument_list|(
name|typeScope
argument_list|)
argument_list|)
expr_stmt|;
name|manager
operator|.
name|addXmlSchemaImport
argument_list|(
name|schema
argument_list|,
name|importedSchema
argument_list|,
name|typeScope
operator|.
name|toString
argument_list|(
literal|"_"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

