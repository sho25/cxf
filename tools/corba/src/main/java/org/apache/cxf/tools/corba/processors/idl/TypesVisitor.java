begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|corba
operator|.
name|processors
operator|.
name|idl
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|Definition
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|collections
operator|.
name|AST
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|ArgType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaObject
import|;
end_import

begin_class
specifier|public
class|class
name|TypesVisitor
extends|extends
name|VisitorBase
block|{
specifier|static
specifier|final
name|int
name|PRIMITIVE
init|=
literal|0
decl_stmt|;
name|XmlSchemaObject
name|currentType
decl_stmt|;
name|ArgType
name|currentParam
decl_stmt|;
specifier|private
name|AST
name|identifierNode
decl_stmt|;
comment|// identifierNode null if anonymous type
specifier|public
name|TypesVisitor
parameter_list|(
name|Scope
name|scope
parameter_list|,
name|Definition
name|defn
parameter_list|,
name|XmlSchema
name|schemaRef
parameter_list|,
name|WSDLASTVisitor
name|wsdlVisitor
parameter_list|,
name|AST
name|identifierNodeRef
parameter_list|)
block|{
name|super
argument_list|(
name|scope
argument_list|,
name|defn
argument_list|,
name|schemaRef
argument_list|,
name|wsdlVisitor
argument_list|)
expr_stmt|;
name|identifierNode
operator|=
name|identifierNodeRef
expr_stmt|;
block|}
specifier|public
name|void
name|visit
parameter_list|(
name|AST
name|node
parameter_list|)
block|{
comment|//<type_spec> ::=<simple_type_spec>
comment|//               |<constr_type_spec>
name|Visitor
name|visitor
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|ConstrTypeSpecVisitor
operator|.
name|accept
argument_list|(
name|node
argument_list|)
condition|)
block|{
comment|// type_spec - constr_type_spec
name|visitor
operator|=
operator|new
name|ConstrTypeSpecVisitor
argument_list|(
name|getScope
argument_list|()
argument_list|,
name|definition
argument_list|,
name|schema
argument_list|,
name|wsdlVisitor
argument_list|,
name|identifierNode
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|SimpleTypeSpecVisitor
operator|.
name|accept
argument_list|(
name|node
argument_list|)
condition|)
block|{
comment|// type_spec - simple_type_spec
name|visitor
operator|=
operator|new
name|SimpleTypeSpecVisitor
argument_list|(
name|getScope
argument_list|()
argument_list|,
name|definition
argument_list|,
name|schema
argument_list|,
name|wsdlVisitor
argument_list|,
name|identifierNode
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// REVISIT: !!!!!
comment|// This is ugly. It should be done in the SimpleTypeSpecVisitor.accept(node) method.
comment|// More precisely, that accept method should contained an ORed
comment|// ScopedNameVisitor.accept(schemas, schema, node)
comment|// It is not done currently because that would require changing accept method signature
comment|// to accept(schemas, schema, node).
comment|// Perhaps passing a pointer to DefinitionVisitor or some other class (to be designed)
comment|// would be a better solution.
comment|//
comment|// To work around that redesign and get things working now, I am assuming that if visitor
comment|// is null at this point, then it has to be a scoped_name.
comment|// REVISIT!!!
name|visitor
operator|=
operator|new
name|ScopedNameVisitor
argument_list|(
name|getScope
argument_list|()
argument_list|,
name|definition
argument_list|,
name|schema
argument_list|,
name|wsdlVisitor
argument_list|)
expr_stmt|;
block|}
name|visitor
operator|.
name|visit
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|setSchemaType
argument_list|(
name|visitor
operator|.
name|getSchemaType
argument_list|()
argument_list|)
expr_stmt|;
name|setCorbaType
argument_list|(
name|visitor
operator|.
name|getCorbaType
argument_list|()
argument_list|)
expr_stmt|;
name|setFullyQualifiedName
argument_list|(
name|visitor
operator|.
name|getFullyQualifiedName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

