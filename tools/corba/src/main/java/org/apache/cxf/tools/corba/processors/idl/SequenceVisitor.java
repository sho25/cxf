begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|corba
operator|.
name|processors
operator|.
name|idl
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|Definition
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|collections
operator|.
name|AST
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|Anonsequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|CorbaTypeImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|Sequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|corba
operator|.
name|common
operator|.
name|ReferenceConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaComplexType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaElement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaSequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|constants
operator|.
name|Constants
import|;
end_import

begin_class
specifier|public
class|class
name|SequenceVisitor
extends|extends
name|VisitorBase
block|{
specifier|private
specifier|static
specifier|final
name|String
name|ELEMENT_NAME
init|=
literal|"item"
decl_stmt|;
specifier|private
name|AST
name|identifierNode
decl_stmt|;
specifier|public
name|SequenceVisitor
parameter_list|(
name|Scope
name|scope
parameter_list|,
name|Definition
name|defn
parameter_list|,
name|XmlSchema
name|schemaRef
parameter_list|,
name|WSDLASTVisitor
name|wsdlVisitor
parameter_list|,
name|AST
name|identifierNodeRef
parameter_list|)
block|{
name|super
argument_list|(
name|scope
argument_list|,
name|defn
argument_list|,
name|schemaRef
argument_list|,
name|wsdlVisitor
argument_list|)
expr_stmt|;
name|identifierNode
operator|=
name|identifierNodeRef
expr_stmt|;
block|}
specifier|public
specifier|static
name|boolean
name|accept
parameter_list|(
name|AST
name|node
parameter_list|)
block|{
if|if
condition|(
name|node
operator|.
name|getType
argument_list|()
operator|==
name|IDLTokenTypes
operator|.
name|LITERAL_sequence
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|void
name|visit
parameter_list|(
name|AST
name|seq
parameter_list|)
block|{
comment|//<sequence_type> ::= "sequence" "<"<simple_type_spec> ","<positive_int_const> ">"
comment|//                   | "sequence" "<"<simple_type_spec> ">"
name|AST
name|simpleTypeSpecNode
init|=
name|seq
operator|.
name|getFirstChild
argument_list|()
decl_stmt|;
comment|// REVISIT: TypesUtils.getPrimitiveCorbaTypeNameNode should be renamed
comment|// to something more suitable and should be made more general.
name|AST
name|boundNode
init|=
name|TypesUtils
operator|.
name|getCorbaTypeNameNode
argument_list|(
name|simpleTypeSpecNode
argument_list|)
decl_stmt|;
comment|//get chance to check if bound is symbol name which defined as const,
comment|//if so, replace the symbol name with defined const
if|if
condition|(
name|boundNode
operator|!=
literal|null
condition|)
block|{
name|String
name|constValue
init|=
name|TypesUtils
operator|.
name|getConstValueByName
argument_list|(
name|boundNode
argument_list|,
name|typeMap
argument_list|)
decl_stmt|;
if|if
condition|(
name|constValue
operator|!=
literal|null
condition|)
block|{
name|boundNode
operator|.
name|setText
argument_list|(
name|constValue
argument_list|)
expr_stmt|;
block|}
block|}
name|SimpleTypeSpecVisitor
name|visitor
init|=
operator|new
name|SimpleTypeSpecVisitor
argument_list|(
operator|new
name|Scope
argument_list|(
name|getScope
argument_list|()
argument_list|,
name|identifierNode
argument_list|)
argument_list|,
name|definition
argument_list|,
name|schema
argument_list|,
name|wsdlVisitor
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|visitor
operator|.
name|visit
argument_list|(
name|simpleTypeSpecNode
argument_list|)
expr_stmt|;
name|XmlSchemaType
name|stype
init|=
name|visitor
operator|.
name|getSchemaType
argument_list|()
decl_stmt|;
name|CorbaTypeImpl
name|ctype
init|=
name|visitor
operator|.
name|getCorbaType
argument_list|()
decl_stmt|;
name|Scope
name|fullyQualifiedName
init|=
name|visitor
operator|.
name|getFullyQualifiedName
argument_list|()
decl_stmt|;
name|long
name|bound
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|boundNode
operator|!=
literal|null
condition|)
block|{
name|bound
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|boundNode
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Scope
name|scopedName
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|identifierNode
operator|==
literal|null
condition|)
block|{
comment|// anonymous type
name|scopedName
operator|=
name|TypesUtils
operator|.
name|generateAnonymousScopedName
argument_list|(
name|getScope
argument_list|()
argument_list|,
name|schema
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|scopedName
operator|=
operator|new
name|Scope
argument_list|(
name|getScope
argument_list|()
argument_list|,
name|identifierNode
argument_list|)
expr_stmt|;
block|}
name|XmlSchemaType
name|schemaType
init|=
literal|null
decl_stmt|;
comment|// According to CORBA Binding for WSDL specification,
comment|// idl:sequence<octet> maps to xs:base64Binary by default.
comment|//
comment|// wsdlVisitor.getSequenceOctetType() returns the XmlSchema type
comment|// that idl:sequence<octet> should map to, as specified by the
comment|// -s command line option or the default type xsd:base64Binary.
comment|//
if|if
condition|(
name|stype
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|stype
operator|.
name|getQName
argument_list|()
operator|.
name|equals
argument_list|(
name|Constants
operator|.
name|XSD_UNSIGNEDBYTE
argument_list|)
condition|)
block|{
name|schemaType
operator|=
name|generateSchemaType
argument_list|(
name|stype
argument_list|,
name|scopedName
argument_list|,
name|bound
argument_list|,
name|fullyQualifiedName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|schemaType
operator|=
name|wsdlVisitor
operator|.
name|getSequenceOctetType
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|schemaType
operator|=
name|generateSchemaType
argument_list|(
name|stype
argument_list|,
name|scopedName
argument_list|,
name|bound
argument_list|,
name|fullyQualifiedName
argument_list|)
expr_stmt|;
block|}
name|CorbaTypeImpl
name|corbaType
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|identifierNode
operator|==
literal|null
condition|)
block|{
name|corbaType
operator|=
name|generateCorbaAnonsequence
argument_list|(
name|ctype
argument_list|,
name|schemaType
argument_list|,
name|scopedName
argument_list|,
name|bound
argument_list|,
name|fullyQualifiedName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|corbaType
operator|=
name|generateCorbaSequence
argument_list|(
name|ctype
argument_list|,
name|schemaType
argument_list|,
name|scopedName
argument_list|,
name|bound
argument_list|,
name|fullyQualifiedName
argument_list|)
expr_stmt|;
block|}
name|setSchemaType
argument_list|(
name|schemaType
argument_list|)
expr_stmt|;
name|setCorbaType
argument_list|(
name|corbaType
argument_list|)
expr_stmt|;
name|setFullyQualifiedName
argument_list|(
name|fullyQualifiedName
argument_list|)
expr_stmt|;
block|}
specifier|private
name|XmlSchemaType
name|generateSchemaType
parameter_list|(
name|XmlSchemaType
name|stype
parameter_list|,
name|Scope
name|scopedName
parameter_list|,
name|long
name|bound
parameter_list|,
name|Scope
name|fullyQualifiedName
parameter_list|)
block|{
name|XmlSchemaComplexType
name|ct
init|=
operator|new
name|XmlSchemaComplexType
argument_list|(
name|schema
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|ct
operator|.
name|setName
argument_list|(
name|mapper
operator|.
name|mapToQName
argument_list|(
name|scopedName
argument_list|)
argument_list|)
expr_stmt|;
name|XmlSchemaSequence
name|sequence
init|=
operator|new
name|XmlSchemaSequence
argument_list|()
decl_stmt|;
name|XmlSchemaElement
name|el
init|=
operator|new
name|XmlSchemaElement
argument_list|(
name|schema
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|el
operator|.
name|setName
argument_list|(
name|ELEMENT_NAME
argument_list|)
expr_stmt|;
name|el
operator|.
name|setMinOccurs
argument_list|(
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|bound
operator|!=
operator|-
literal|1
condition|)
block|{
name|el
operator|.
name|setMaxOccurs
argument_list|(
name|bound
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|el
operator|.
name|setMaxOccurs
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|stype
operator|!=
literal|null
condition|)
block|{
name|el
operator|.
name|setSchemaTypeName
argument_list|(
name|stype
operator|.
name|getQName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|stype
operator|.
name|getQName
argument_list|()
operator|.
name|equals
argument_list|(
name|ReferenceConstants
operator|.
name|WSADDRESSING_TYPE
argument_list|)
condition|)
block|{
name|el
operator|.
name|setNillable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|SequenceDeferredAction
name|elementAction
init|=
operator|new
name|SequenceDeferredAction
argument_list|(
name|el
argument_list|)
decl_stmt|;
name|wsdlVisitor
operator|.
name|getDeferredActions
argument_list|()
operator|.
name|add
argument_list|(
name|fullyQualifiedName
argument_list|,
name|elementAction
argument_list|)
expr_stmt|;
block|}
name|sequence
operator|.
name|getItems
argument_list|()
operator|.
name|add
argument_list|(
name|el
argument_list|)
expr_stmt|;
name|ct
operator|.
name|setParticle
argument_list|(
name|sequence
argument_list|)
expr_stmt|;
return|return
name|ct
return|;
block|}
specifier|private
name|CorbaTypeImpl
name|generateCorbaSequence
parameter_list|(
name|CorbaTypeImpl
name|ctype
parameter_list|,
name|XmlSchemaType
name|schemaType
parameter_list|,
name|Scope
name|scopedName
parameter_list|,
name|long
name|bound
parameter_list|,
name|Scope
name|fullyQualifiedName
parameter_list|)
block|{
comment|//create the corba sequence
name|Sequence
name|corbaSeq
init|=
operator|new
name|Sequence
argument_list|()
decl_stmt|;
if|if
condition|(
name|bound
operator|==
operator|-
literal|1
condition|)
block|{
name|bound
operator|=
literal|0
expr_stmt|;
block|}
name|corbaSeq
operator|.
name|setBound
argument_list|(
name|bound
argument_list|)
expr_stmt|;
name|corbaSeq
operator|.
name|setQName
argument_list|(
operator|new
name|QName
argument_list|(
name|typeMap
operator|.
name|getTargetNamespace
argument_list|()
argument_list|,
name|scopedName
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|corbaSeq
operator|.
name|setType
argument_list|(
name|schemaType
operator|.
name|getQName
argument_list|()
argument_list|)
expr_stmt|;
comment|//REVISIT, if we add qualification then change the below.
name|corbaSeq
operator|.
name|setElemname
argument_list|(
operator|new
name|QName
argument_list|(
literal|""
argument_list|,
name|ELEMENT_NAME
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|ctype
operator|!=
literal|null
condition|)
block|{
name|corbaSeq
operator|.
name|setElemtype
argument_list|(
name|ctype
operator|.
name|getQName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|SequenceDeferredAction
name|seqAction
init|=
operator|new
name|SequenceDeferredAction
argument_list|(
name|corbaSeq
argument_list|)
decl_stmt|;
name|wsdlVisitor
operator|.
name|getDeferredActions
argument_list|()
operator|.
name|add
argument_list|(
name|fullyQualifiedName
argument_list|,
name|seqAction
argument_list|)
expr_stmt|;
block|}
name|corbaSeq
operator|.
name|setRepositoryID
argument_list|(
name|scopedName
operator|.
name|toIDLRepositoryID
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|corbaSeq
return|;
block|}
specifier|private
name|Anonsequence
name|generateCorbaAnonsequence
parameter_list|(
name|CorbaTypeImpl
name|ctype
parameter_list|,
name|XmlSchemaType
name|schemaType
parameter_list|,
name|Scope
name|scopedName
parameter_list|,
name|long
name|bound
parameter_list|,
name|Scope
name|fullyQualifiedName
parameter_list|)
block|{
comment|// create corba anonsequence
name|Anonsequence
name|result
init|=
operator|new
name|Anonsequence
argument_list|()
decl_stmt|;
if|if
condition|(
name|bound
operator|==
operator|-
literal|1
condition|)
block|{
name|bound
operator|=
literal|0
expr_stmt|;
block|}
name|result
operator|.
name|setBound
argument_list|(
name|bound
argument_list|)
expr_stmt|;
name|result
operator|.
name|setQName
argument_list|(
operator|new
name|QName
argument_list|(
name|typeMap
operator|.
name|getTargetNamespace
argument_list|()
argument_list|,
name|scopedName
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|//REVISIT, if we add qualification then change the below.
name|result
operator|.
name|setElemname
argument_list|(
operator|new
name|QName
argument_list|(
literal|""
argument_list|,
name|ELEMENT_NAME
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|schemaType
operator|==
literal|null
operator|||
name|ctype
operator|==
literal|null
condition|)
block|{
name|SequenceDeferredAction
name|anonSeqAction
init|=
operator|new
name|SequenceDeferredAction
argument_list|(
name|result
argument_list|)
decl_stmt|;
name|wsdlVisitor
operator|.
name|getDeferredActions
argument_list|()
operator|.
name|add
argument_list|(
name|fullyQualifiedName
argument_list|,
name|anonSeqAction
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|.
name|setType
argument_list|(
name|schemaType
operator|.
name|getQName
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|.
name|setElemtype
argument_list|(
name|ctype
operator|.
name|getQName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Need to create an action if the type was forward declared.
if|if
condition|(
name|schemaType
operator|==
literal|null
condition|)
block|{
name|SequenceDeferredAction
name|anonSeqAction
init|=
operator|new
name|SequenceDeferredAction
argument_list|(
name|schemas
argument_list|,
name|schema
argument_list|)
decl_stmt|;
name|wsdlVisitor
operator|.
name|getDeferredActions
argument_list|()
operator|.
name|add
argument_list|(
name|fullyQualifiedName
argument_list|,
name|anonSeqAction
argument_list|)
expr_stmt|;
block|}
comment|// add corbaType
name|typeMap
operator|.
name|getStructOrExceptionOrUnion
argument_list|()
operator|.
name|add
argument_list|(
name|result
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

