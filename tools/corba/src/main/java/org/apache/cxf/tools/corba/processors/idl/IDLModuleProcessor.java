begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|corba
operator|.
name|processors
operator|.
name|idl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|collections
operator|.
name|AST
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|corba
operator|.
name|common
operator|.
name|ToolCorbaConstants
import|;
end_import

begin_class
specifier|public
class|class
name|IDLModuleProcessor
extends|extends
name|IDLProcessor
block|{
name|ModuleToNSMapper
name|mapper
decl_stmt|;
specifier|public
name|IDLModuleProcessor
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
name|mapper
operator|=
operator|new
name|ModuleToNSMapper
argument_list|()
expr_stmt|;
name|mapper
operator|.
name|setDefaultMapping
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ModuleToNSMapper
name|getMapper
parameter_list|()
block|{
return|return
name|mapper
return|;
block|}
specifier|public
name|void
name|buildModuleNSMap
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|moduleNSMap
parameter_list|)
block|{
name|AST
name|node
init|=
name|getIDLTree
argument_list|()
decl_stmt|;
name|Scope
name|rootScope
init|=
operator|new
name|Scope
argument_list|()
decl_stmt|;
name|buildModuleNSMap
argument_list|(
name|moduleNSMap
argument_list|,
name|rootScope
argument_list|,
name|node
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|buildModuleNSMap
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
parameter_list|,
name|Scope
name|parent
parameter_list|,
name|AST
name|node
parameter_list|)
block|{
while|while
condition|(
name|node
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|node
operator|.
name|getType
argument_list|()
operator|==
name|IDLTokenTypes
operator|.
name|LITERAL_module
condition|)
block|{
name|AST
name|identifierNode
init|=
name|node
operator|.
name|getFirstChild
argument_list|()
decl_stmt|;
name|AST
name|definitionNode
init|=
name|identifierNode
operator|.
name|getNextSibling
argument_list|()
decl_stmt|;
name|Scope
name|moduleScope
init|=
operator|new
name|Scope
argument_list|(
name|parent
argument_list|,
name|identifierNode
argument_list|)
decl_stmt|;
name|String
name|scope
init|=
name|moduleScope
operator|.
name|toString
argument_list|(
name|ToolCorbaConstants
operator|.
name|MODULE_SEPARATOR
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|map
operator|.
name|containsKey
argument_list|(
name|scope
argument_list|)
condition|)
block|{
name|map
operator|.
name|put
argument_list|(
name|scope
argument_list|,
name|mapper
operator|.
name|map
argument_list|(
name|moduleScope
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|buildModuleNSMap
argument_list|(
name|map
argument_list|,
name|moduleScope
argument_list|,
name|definitionNode
argument_list|)
expr_stmt|;
block|}
name|node
operator|=
name|node
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

