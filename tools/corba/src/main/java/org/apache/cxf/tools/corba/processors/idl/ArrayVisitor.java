begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|corba
operator|.
name|processors
operator|.
name|idl
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|Definition
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|collections
operator|.
name|AST
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|Anonarray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|Array
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|CorbaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|corba
operator|.
name|common
operator|.
name|ReferenceConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaComplexType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaElement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaSequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaType
import|;
end_import

begin_class
specifier|public
class|class
name|ArrayVisitor
extends|extends
name|VisitorBase
block|{
specifier|private
specifier|static
specifier|final
name|String
name|ELEMENT_NAME
init|=
literal|"item"
decl_stmt|;
specifier|private
name|AST
name|identifierNode
decl_stmt|;
specifier|public
name|ArrayVisitor
parameter_list|(
name|Scope
name|scope
parameter_list|,
name|Definition
name|defn
parameter_list|,
name|XmlSchema
name|schemaRef
parameter_list|,
name|WSDLASTVisitor
name|wsdlVisitor
parameter_list|,
name|AST
name|identifierNodeRef
parameter_list|,
name|Scope
name|fqName
parameter_list|)
block|{
name|super
argument_list|(
name|scope
argument_list|,
name|defn
argument_list|,
name|schemaRef
argument_list|,
name|wsdlVisitor
argument_list|)
expr_stmt|;
name|setFullyQualifiedName
argument_list|(
name|fqName
argument_list|)
expr_stmt|;
name|identifierNode
operator|=
name|identifierNodeRef
expr_stmt|;
block|}
specifier|public
specifier|static
name|boolean
name|accept
parameter_list|(
name|AST
name|node
parameter_list|)
block|{
name|boolean
name|result
init|=
literal|false
decl_stmt|;
name|AST
name|sizeNode
init|=
name|node
operator|.
name|getFirstChild
argument_list|()
decl_stmt|;
if|if
condition|(
name|sizeNode
operator|!=
literal|null
condition|)
block|{
comment|// check that node has a fixed_array_size child node
name|result
operator|=
literal|true
expr_stmt|;
while|while
condition|(
name|sizeNode
operator|!=
literal|null
operator|&&
name|result
condition|)
block|{
comment|// check that all fixed_array_size nodes encode
comment|// positive integers
name|String
name|s
init|=
name|sizeNode
operator|.
name|toString
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|s
operator|.
name|length
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|Character
operator|.
name|isDigit
argument_list|(
name|s
operator|.
name|charAt
argument_list|(
name|j
argument_list|)
argument_list|)
condition|)
block|{
name|result
operator|=
literal|false
expr_stmt|;
block|}
block|}
name|sizeNode
operator|=
name|sizeNode
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
specifier|public
name|void
name|visit
parameter_list|(
name|AST
name|node
parameter_list|)
block|{
comment|//<array_declarator> ::=<identifier><fixed_array_size>+
comment|//<fixed_array_size> ::= "["<positive_int_const> "]"
name|AST
name|firstSizeNode
init|=
name|node
operator|.
name|getFirstChild
argument_list|()
decl_stmt|;
name|AST
name|nextSizeNode
init|=
name|firstSizeNode
operator|.
name|getNextSibling
argument_list|()
decl_stmt|;
name|Types
name|result
init|=
literal|null
decl_stmt|;
comment|// process all anonarrays, skip first array as it might not be anonymous
if|if
condition|(
name|nextSizeNode
operator|!=
literal|null
condition|)
block|{
name|result
operator|=
name|doAnonarray
argument_list|(
name|nextSizeNode
argument_list|,
name|getSchemaType
argument_list|()
argument_list|,
name|getCorbaType
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
operator|new
name|Types
argument_list|()
expr_stmt|;
name|result
operator|.
name|setSchemaType
argument_list|(
name|getSchemaType
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|.
name|setCorbaType
argument_list|(
name|getCorbaType
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|.
name|setFullyQualifiedName
argument_list|(
name|getFullyQualifiedName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// process first array
name|Long
name|size
init|=
name|Long
operator|.
name|valueOf
argument_list|(
name|firstSizeNode
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|XmlSchemaType
name|stype
init|=
literal|null
decl_stmt|;
name|CorbaType
name|ctype
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|identifierNode
operator|!=
literal|null
condition|)
block|{
name|Scope
name|scopedName
init|=
name|getScope
argument_list|()
decl_stmt|;
if|if
condition|(
name|result
operator|.
name|getSchemaType
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|stype
operator|=
name|generateSchemaArray
argument_list|(
name|scopedName
argument_list|,
name|size
argument_list|,
name|result
operator|.
name|getSchemaType
argument_list|()
argument_list|,
name|result
operator|.
name|getFullyQualifiedName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|stype
operator|=
name|generateSchemaArray
argument_list|(
name|scopedName
argument_list|,
name|size
argument_list|,
literal|null
argument_list|,
name|result
operator|.
name|getFullyQualifiedName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|result
operator|.
name|getCorbaType
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|ctype
operator|=
name|generateCorbaArray
argument_list|(
name|scopedName
argument_list|,
name|size
argument_list|,
name|result
operator|.
name|getCorbaType
argument_list|()
argument_list|,
name|stype
argument_list|,
name|getFullyQualifiedName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ctype
operator|=
name|generateCorbaArray
argument_list|(
name|scopedName
argument_list|,
name|size
argument_list|,
literal|null
argument_list|,
name|stype
argument_list|,
name|getFullyQualifiedName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// anonymous array
name|Scope
name|scopedName
init|=
name|TypesUtils
operator|.
name|generateAnonymousScopedName
argument_list|(
name|getScope
argument_list|()
argument_list|,
name|schema
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|.
name|getSchemaType
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|stype
operator|=
name|generateSchemaArray
argument_list|(
name|scopedName
argument_list|,
name|size
argument_list|,
name|result
operator|.
name|getSchemaType
argument_list|()
argument_list|,
name|getFullyQualifiedName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|stype
operator|=
name|generateSchemaArray
argument_list|(
name|scopedName
argument_list|,
name|size
argument_list|,
literal|null
argument_list|,
name|getFullyQualifiedName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|result
operator|.
name|getCorbaType
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|ctype
operator|=
name|generateCorbaAnonarray
argument_list|(
name|scopedName
operator|.
name|toString
argument_list|()
argument_list|,
name|size
argument_list|,
name|result
operator|.
name|getCorbaType
argument_list|()
argument_list|,
name|stype
argument_list|,
name|getFullyQualifiedName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ctype
operator|=
name|generateCorbaAnonarray
argument_list|(
name|scopedName
operator|.
name|toString
argument_list|()
argument_list|,
name|size
argument_list|,
literal|null
argument_list|,
name|stype
argument_list|,
name|getFullyQualifiedName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// add corbaType
name|typeMap
operator|.
name|getStructOrExceptionOrUnion
argument_list|()
operator|.
name|add
argument_list|(
name|ctype
argument_list|)
expr_stmt|;
name|setSchemaType
argument_list|(
name|stype
argument_list|)
expr_stmt|;
name|setCorbaType
argument_list|(
name|ctype
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Types
name|doAnonarray
parameter_list|(
name|AST
name|node
parameter_list|,
name|XmlSchemaType
name|stype
parameter_list|,
name|CorbaType
name|ctype
parameter_list|)
block|{
name|Types
name|result
init|=
operator|new
name|Types
argument_list|()
decl_stmt|;
if|if
condition|(
name|node
operator|!=
literal|null
condition|)
block|{
name|AST
name|next
init|=
name|node
operator|.
name|getNextSibling
argument_list|()
decl_stmt|;
name|result
operator|=
name|doAnonarray
argument_list|(
name|next
argument_list|,
name|stype
argument_list|,
name|ctype
argument_list|)
expr_stmt|;
name|Scope
name|scopedName
init|=
name|TypesUtils
operator|.
name|generateAnonymousScopedName
argument_list|(
name|getScope
argument_list|()
argument_list|,
name|schema
argument_list|)
decl_stmt|;
name|Long
name|size
init|=
name|Long
operator|.
name|valueOf
argument_list|(
name|node
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|.
name|getSchemaType
argument_list|()
operator|==
literal|null
condition|)
block|{
name|result
operator|.
name|setSchemaType
argument_list|(
name|generateSchemaArray
argument_list|(
name|scopedName
argument_list|,
name|size
argument_list|,
name|stype
argument_list|,
name|getFullyQualifiedName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|.
name|setSchemaType
argument_list|(
name|generateSchemaArray
argument_list|(
name|scopedName
argument_list|,
name|size
argument_list|,
name|result
operator|.
name|getSchemaType
argument_list|()
argument_list|,
name|getFullyQualifiedName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|result
operator|.
name|getCorbaType
argument_list|()
operator|==
literal|null
condition|)
block|{
name|result
operator|.
name|setCorbaType
argument_list|(
name|generateCorbaAnonarray
argument_list|(
name|scopedName
operator|.
name|toString
argument_list|()
argument_list|,
name|size
argument_list|,
name|ctype
argument_list|,
name|result
operator|.
name|getSchemaType
argument_list|()
argument_list|,
name|getFullyQualifiedName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|.
name|setCorbaType
argument_list|(
name|generateCorbaAnonarray
argument_list|(
name|scopedName
operator|.
name|toString
argument_list|()
argument_list|,
name|size
argument_list|,
name|result
operator|.
name|getCorbaType
argument_list|()
argument_list|,
name|result
operator|.
name|getSchemaType
argument_list|()
argument_list|,
name|getFullyQualifiedName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// add corbaType
name|typeMap
operator|.
name|getStructOrExceptionOrUnion
argument_list|()
operator|.
name|add
argument_list|(
name|result
operator|.
name|getCorbaType
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|private
name|XmlSchemaComplexType
name|generateSchemaArray
parameter_list|(
name|Scope
name|scopedName
parameter_list|,
name|Long
name|size
parameter_list|,
name|XmlSchemaType
name|type
parameter_list|,
name|Scope
name|fQName
parameter_list|)
block|{
name|XmlSchemaComplexType
name|complexType
init|=
operator|new
name|XmlSchemaComplexType
argument_list|(
name|schema
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|complexType
operator|.
name|setName
argument_list|(
name|mapper
operator|.
name|mapToQName
argument_list|(
name|scopedName
argument_list|)
argument_list|)
expr_stmt|;
name|XmlSchemaSequence
name|sequence
init|=
operator|new
name|XmlSchemaSequence
argument_list|()
decl_stmt|;
name|XmlSchemaElement
name|element
init|=
operator|new
name|XmlSchemaElement
argument_list|(
name|schema
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|element
operator|.
name|setMinOccurs
argument_list|(
name|size
argument_list|)
expr_stmt|;
name|element
operator|.
name|setMaxOccurs
argument_list|(
name|size
argument_list|)
expr_stmt|;
name|element
operator|.
name|setName
argument_list|(
name|ELEMENT_NAME
argument_list|)
expr_stmt|;
if|if
condition|(
name|type
operator|!=
literal|null
condition|)
block|{
name|element
operator|.
name|setSchemaTypeName
argument_list|(
name|type
operator|.
name|getQName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|type
operator|.
name|getQName
argument_list|()
operator|.
name|equals
argument_list|(
name|ReferenceConstants
operator|.
name|WSADDRESSING_TYPE
argument_list|)
condition|)
block|{
name|element
operator|.
name|setNillable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|ArrayDeferredAction
name|arrayAction
init|=
operator|new
name|ArrayDeferredAction
argument_list|(
name|element
argument_list|)
decl_stmt|;
name|wsdlVisitor
operator|.
name|getDeferredActions
argument_list|()
operator|.
name|add
argument_list|(
name|fQName
argument_list|,
name|arrayAction
argument_list|)
expr_stmt|;
block|}
name|sequence
operator|.
name|getItems
argument_list|()
operator|.
name|add
argument_list|(
name|element
argument_list|)
expr_stmt|;
name|complexType
operator|.
name|setParticle
argument_list|(
name|sequence
argument_list|)
expr_stmt|;
return|return
name|complexType
return|;
block|}
specifier|private
name|Array
name|generateCorbaArray
parameter_list|(
name|Scope
name|scopedName
parameter_list|,
name|Long
name|size
parameter_list|,
name|CorbaType
name|type
parameter_list|,
name|XmlSchemaType
name|stype
parameter_list|,
name|Scope
name|fQName
parameter_list|)
block|{
name|Array
name|array
init|=
operator|new
name|Array
argument_list|()
decl_stmt|;
name|array
operator|.
name|setQName
argument_list|(
operator|new
name|QName
argument_list|(
name|typeMap
operator|.
name|getTargetNamespace
argument_list|()
argument_list|,
name|scopedName
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|array
operator|.
name|setBound
argument_list|(
name|size
argument_list|)
expr_stmt|;
name|array
operator|.
name|setRepositoryID
argument_list|(
name|scopedName
operator|.
name|toIDLRepositoryID
argument_list|()
argument_list|)
expr_stmt|;
name|array
operator|.
name|setType
argument_list|(
name|stype
operator|.
name|getQName
argument_list|()
argument_list|)
expr_stmt|;
comment|//REVISIT, if we add qualification option, then change below.
name|array
operator|.
name|setElemname
argument_list|(
operator|new
name|QName
argument_list|(
literal|""
argument_list|,
name|ELEMENT_NAME
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|type
operator|!=
literal|null
condition|)
block|{
name|array
operator|.
name|setElemtype
argument_list|(
name|type
operator|.
name|getQName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ArrayDeferredAction
name|arrayAction
init|=
operator|new
name|ArrayDeferredAction
argument_list|(
name|array
argument_list|)
decl_stmt|;
name|wsdlVisitor
operator|.
name|getDeferredActions
argument_list|()
operator|.
name|add
argument_list|(
name|fQName
argument_list|,
name|arrayAction
argument_list|)
expr_stmt|;
block|}
return|return
name|array
return|;
block|}
specifier|private
name|Anonarray
name|generateCorbaAnonarray
parameter_list|(
name|String
name|name
parameter_list|,
name|Long
name|size
parameter_list|,
name|CorbaType
name|type
parameter_list|,
name|XmlSchemaType
name|stype
parameter_list|,
name|Scope
name|fQName
parameter_list|)
block|{
name|Anonarray
name|anonarray
init|=
operator|new
name|Anonarray
argument_list|()
decl_stmt|;
name|anonarray
operator|.
name|setQName
argument_list|(
operator|new
name|QName
argument_list|(
name|typeMap
operator|.
name|getTargetNamespace
argument_list|()
argument_list|,
name|name
argument_list|)
argument_list|)
expr_stmt|;
name|anonarray
operator|.
name|setBound
argument_list|(
name|size
argument_list|)
expr_stmt|;
name|anonarray
operator|.
name|setType
argument_list|(
name|stype
operator|.
name|getQName
argument_list|()
argument_list|)
expr_stmt|;
comment|//REVISIT, if we add qualification option, then change below.
name|anonarray
operator|.
name|setElemname
argument_list|(
operator|new
name|QName
argument_list|(
literal|""
argument_list|,
name|ELEMENT_NAME
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|type
operator|!=
literal|null
condition|)
block|{
name|anonarray
operator|.
name|setElemtype
argument_list|(
name|type
operator|.
name|getQName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ArrayDeferredAction
name|anonarrayAction
init|=
operator|new
name|ArrayDeferredAction
argument_list|(
name|anonarray
argument_list|)
decl_stmt|;
name|wsdlVisitor
operator|.
name|getDeferredActions
argument_list|()
operator|.
name|add
argument_list|(
name|fQName
argument_list|,
name|anonarrayAction
argument_list|)
expr_stmt|;
block|}
return|return
name|anonarray
return|;
block|}
class|class
name|Types
block|{
specifier|private
name|XmlSchemaType
name|schemaType
decl_stmt|;
specifier|private
name|CorbaType
name|corbaType
decl_stmt|;
specifier|private
name|Scope
name|fullyQualifiedName
decl_stmt|;
name|Types
parameter_list|()
block|{
name|schemaType
operator|=
literal|null
expr_stmt|;
name|corbaType
operator|=
literal|null
expr_stmt|;
block|}
name|Types
parameter_list|(
name|XmlSchemaType
name|stype
parameter_list|,
name|CorbaType
name|ctype
parameter_list|,
name|Scope
name|fqName
parameter_list|)
block|{
name|schemaType
operator|=
name|stype
expr_stmt|;
name|corbaType
operator|=
name|ctype
expr_stmt|;
name|fullyQualifiedName
operator|=
name|fqName
expr_stmt|;
block|}
specifier|public
name|void
name|setSchemaType
parameter_list|(
name|XmlSchemaType
name|stype
parameter_list|)
block|{
name|schemaType
operator|=
name|stype
expr_stmt|;
block|}
specifier|public
name|void
name|setCorbaType
parameter_list|(
name|CorbaType
name|ctype
parameter_list|)
block|{
name|corbaType
operator|=
name|ctype
expr_stmt|;
block|}
specifier|public
name|XmlSchemaType
name|getSchemaType
parameter_list|()
block|{
return|return
name|schemaType
return|;
block|}
specifier|public
name|CorbaType
name|getCorbaType
parameter_list|()
block|{
return|return
name|corbaType
return|;
block|}
specifier|public
name|void
name|setFullyQualifiedName
parameter_list|(
name|Scope
name|fqName
parameter_list|)
block|{
name|fullyQualifiedName
operator|=
name|fqName
expr_stmt|;
block|}
specifier|public
name|Scope
name|getFullyQualifiedName
parameter_list|()
block|{
return|return
name|fullyQualifiedName
return|;
block|}
block|}
block|}
end_class

end_unit

