begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|corba
operator|.
name|processors
operator|.
name|wsdl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|Binding
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|BindingOperation
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|Definition
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|Alias
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|Anonarray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|Anonfixed
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|Anonsequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|Anonstring
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|ArgType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|Array
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|BindingType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|CaseType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|Const
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|CorbaConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|CorbaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|Enum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|Enumerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|Fixed
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|MemberType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|ParamType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|RaisesType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|Sequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|Struct
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|TypeMappingType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|Union
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|Unionbranch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|CastUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|corba
operator|.
name|common
operator|.
name|idltypes
operator|.
name|CorbaUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|corba
operator|.
name|common
operator|.
name|idltypes
operator|.
name|IdlAnonArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|corba
operator|.
name|common
operator|.
name|idltypes
operator|.
name|IdlAnonFixed
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|corba
operator|.
name|common
operator|.
name|idltypes
operator|.
name|IdlAnonSequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|corba
operator|.
name|common
operator|.
name|idltypes
operator|.
name|IdlArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|corba
operator|.
name|common
operator|.
name|idltypes
operator|.
name|IdlAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|corba
operator|.
name|common
operator|.
name|idltypes
operator|.
name|IdlConst
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|corba
operator|.
name|common
operator|.
name|idltypes
operator|.
name|IdlDefn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|corba
operator|.
name|common
operator|.
name|idltypes
operator|.
name|IdlEnum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|corba
operator|.
name|common
operator|.
name|idltypes
operator|.
name|IdlEnumerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|corba
operator|.
name|common
operator|.
name|idltypes
operator|.
name|IdlException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|corba
operator|.
name|common
operator|.
name|idltypes
operator|.
name|IdlField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|corba
operator|.
name|common
operator|.
name|idltypes
operator|.
name|IdlFixed
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|corba
operator|.
name|common
operator|.
name|idltypes
operator|.
name|IdlInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|corba
operator|.
name|common
operator|.
name|idltypes
operator|.
name|IdlModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|corba
operator|.
name|common
operator|.
name|idltypes
operator|.
name|IdlOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|corba
operator|.
name|common
operator|.
name|idltypes
operator|.
name|IdlParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|corba
operator|.
name|common
operator|.
name|idltypes
operator|.
name|IdlRoot
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|corba
operator|.
name|common
operator|.
name|idltypes
operator|.
name|IdlScopeBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|corba
operator|.
name|common
operator|.
name|idltypes
operator|.
name|IdlSequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|corba
operator|.
name|common
operator|.
name|idltypes
operator|.
name|IdlString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|corba
operator|.
name|common
operator|.
name|idltypes
operator|.
name|IdlStruct
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|corba
operator|.
name|common
operator|.
name|idltypes
operator|.
name|IdlType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|corba
operator|.
name|common
operator|.
name|idltypes
operator|.
name|IdlTypedef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|corba
operator|.
name|common
operator|.
name|idltypes
operator|.
name|IdlUnion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|corba
operator|.
name|common
operator|.
name|idltypes
operator|.
name|IdlUnionBranch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|corba
operator|.
name|utils
operator|.
name|FileOutputStreamFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|corba
operator|.
name|utils
operator|.
name|OutputStreamFactory
import|;
end_import

begin_class
specifier|public
class|class
name|WSDLToIDLAction
block|{
specifier|protected
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|WSDLToIDLAction
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|String
name|bindingName
decl_stmt|;
specifier|private
specifier|static
name|String
name|wsdlFileName
decl_stmt|;
specifier|private
specifier|static
name|String
name|namespace
decl_stmt|;
specifier|private
name|String
name|outputFile
decl_stmt|;
specifier|private
name|boolean
name|verboseOn
decl_stmt|;
specifier|private
name|PrintWriter
name|printWriter
decl_stmt|;
specifier|private
name|OutputStreamFactory
name|factory
init|=
operator|new
name|FileOutputStreamFactory
argument_list|()
decl_stmt|;
specifier|private
name|Definition
name|def
decl_stmt|;
specifier|private
name|IdlRoot
name|root
init|=
name|IdlRoot
operator|.
name|create
argument_list|()
decl_stmt|;
specifier|private
name|IdlInterface
name|intf
decl_stmt|;
specifier|private
name|WSDLToTypeProcessor
name|typeProcessor
init|=
operator|new
name|WSDLToTypeProcessor
argument_list|()
decl_stmt|;
specifier|private
name|boolean
name|generateAllBindings
decl_stmt|;
specifier|public
name|WSDLToIDLAction
parameter_list|()
block|{     }
specifier|public
name|void
name|generateIDL
parameter_list|(
name|Definition
name|definition
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|definition
operator|==
literal|null
condition|)
block|{
name|typeProcessor
operator|.
name|parseWSDL
argument_list|(
name|wsdlFileName
argument_list|)
expr_stmt|;
name|def
operator|=
name|typeProcessor
operator|.
name|getWSDLDefinition
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|def
operator|=
name|definition
expr_stmt|;
block|}
if|if
condition|(
name|printWriter
operator|==
literal|null
condition|)
block|{
name|printWriter
operator|=
name|createPrintWriter
argument_list|(
name|outputFile
argument_list|)
expr_stmt|;
block|}
try|try
init|(
name|PrintWriter
name|pw
init|=
name|printWriter
operator|!=
literal|null
condition|?
name|printWriter
else|:
name|createPrintWriter
argument_list|(
name|outputFile
argument_list|)
init|)
block|{
if|if
condition|(
operator|!
name|isGenerateAllBindings
argument_list|()
condition|)
block|{
name|Binding
name|binding
init|=
name|findBinding
argument_list|(
name|def
argument_list|)
decl_stmt|;
if|if
condition|(
name|binding
operator|==
literal|null
condition|)
block|{
name|String
name|msgStr
init|=
literal|"Binding "
operator|+
name|bindingName
operator|+
literal|" doesn't exists in WSDL."
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
name|msg
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
argument_list|(
name|msgStr
argument_list|,
name|LOG
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|Exception
argument_list|(
name|msg
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
name|generateIDL
argument_list|(
name|def
argument_list|,
name|binding
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// generate idl for all bindings in the file.
comment|// each idl file will have the name of the binding.
name|Collection
argument_list|<
name|Binding
argument_list|>
name|bindings
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
name|def
operator|.
name|getAllBindings
argument_list|()
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|bindings
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|String
name|msgStr
init|=
literal|"No bindings exists within this WSDL."
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
name|msg
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
argument_list|(
name|msgStr
argument_list|,
name|LOG
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|Exception
argument_list|(
name|msg
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|QName
argument_list|>
name|portTypes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Binding
name|binding
range|:
name|bindings
control|)
block|{
name|List
argument_list|<
name|?
argument_list|>
name|ext
init|=
name|binding
operator|.
name|getExtensibilityElements
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|ext
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|BindingType
operator|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|portTypes
operator|.
name|contains
argument_list|(
name|binding
operator|.
name|getPortType
argument_list|()
operator|.
name|getQName
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|portTypes
operator|.
name|add
argument_list|(
name|binding
operator|.
name|getPortType
argument_list|()
operator|.
name|getQName
argument_list|()
argument_list|)
expr_stmt|;
name|generateIDL
argument_list|(
name|def
argument_list|,
name|binding
argument_list|)
expr_stmt|;
name|root
operator|=
name|IdlRoot
operator|.
name|create
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|void
name|generateIDL
parameter_list|(
name|Definition
name|definition
parameter_list|,
name|Binding
name|binding
parameter_list|)
block|{
name|List
argument_list|<
name|?
argument_list|>
name|ext
init|=
name|binding
operator|.
name|getExtensibilityElements
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|ext
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|BindingType
operator|)
condition|)
block|{
comment|// throw an error not a corba binding
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|binding
operator|.
name|getQName
argument_list|()
operator|+
literal|" is not a corba binding, "
operator|+
literal|"please pass a corba binding/porttype to use"
argument_list|)
throw|;
block|}
name|String
index|[]
name|nm
init|=
name|unscopeName
argument_list|(
name|binding
operator|.
name|getPortType
argument_list|()
operator|.
name|getQName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|pos
init|=
name|nm
index|[
name|nm
operator|.
name|length
operator|-
literal|1
index|]
operator|.
name|lastIndexOf
argument_list|(
literal|"Binding"
argument_list|)
decl_stmt|;
if|if
condition|(
name|pos
operator|!=
operator|-
literal|1
condition|)
block|{
name|nm
index|[
name|nm
operator|.
name|length
operator|-
literal|1
index|]
operator|=
name|nm
index|[
name|nm
operator|.
name|length
operator|-
literal|1
index|]
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|pos
argument_list|)
expr_stmt|;
block|}
name|IdlScopeBase
name|parent
init|=
name|root
decl_stmt|;
if|if
condition|(
name|nm
operator|.
name|length
operator|>
literal|1
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nm
operator|.
name|length
operator|-
literal|1
condition|;
operator|++
name|i
control|)
block|{
name|IdlModule
name|mod
init|=
name|IdlModule
operator|.
name|create
argument_list|(
name|parent
argument_list|,
name|nm
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|parent
operator|.
name|addToScope
argument_list|(
name|mod
argument_list|)
expr_stmt|;
name|parent
operator|=
name|mod
expr_stmt|;
block|}
block|}
name|intf
operator|=
name|IdlInterface
operator|.
name|create
argument_list|(
name|parent
argument_list|,
name|nm
index|[
name|nm
operator|.
name|length
operator|-
literal|1
index|]
argument_list|)
expr_stmt|;
name|parent
operator|.
name|holdForScope
argument_list|(
name|intf
argument_list|)
expr_stmt|;
try|try
block|{
name|getAllIdlTypes
argument_list|()
expr_stmt|;
name|collectIdlDefns
argument_list|(
name|binding
argument_list|)
expr_stmt|;
name|root
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
name|parent
operator|.
name|promoteHeldToScope
argument_list|()
expr_stmt|;
name|root
operator|.
name|write
argument_list|(
name|printWriter
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|collectIdlDefns
parameter_list|(
name|Binding
name|binding
parameter_list|)
throws|throws
name|Exception
block|{
name|boolean
name|isOneway
init|=
literal|false
decl_stmt|;
name|Iterator
argument_list|<
name|?
argument_list|>
name|iterator
init|=
name|binding
operator|.
name|getBindingOperations
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|BindingOperation
name|bindingOperation
init|=
operator|(
name|BindingOperation
operator|)
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|bindingOperation
operator|.
name|getBindingOutput
argument_list|()
operator|==
literal|null
condition|)
block|{
name|isOneway
operator|=
literal|true
expr_stmt|;
block|}
name|addOperation
argument_list|(
name|bindingOperation
argument_list|,
name|isOneway
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|addOperation
parameter_list|(
name|BindingOperation
name|bindingOperation
parameter_list|,
name|boolean
name|isOneway
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|name
init|=
literal|null
decl_stmt|;
name|Iterator
argument_list|<
name|?
argument_list|>
name|i
init|=
name|bindingOperation
operator|.
name|getExtensibilityElements
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|OperationType
name|opType
init|=
operator|(
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|OperationType
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|name
operator|=
name|opType
operator|.
name|getName
argument_list|()
expr_stmt|;
if|if
condition|(
name|name
operator|.
name|startsWith
argument_list|(
literal|"_get_"
argument_list|)
operator|||
name|name
operator|.
name|startsWith
argument_list|(
literal|"_set_"
argument_list|)
condition|)
block|{
name|createIdlAttribute
argument_list|(
name|opType
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|createIdlOperation
argument_list|(
name|opType
argument_list|,
name|name
argument_list|,
name|isOneway
argument_list|)
expr_stmt|;
block|}
name|root
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|createIdlAttribute
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|OperationType
name|opType
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|attrNm
init|=
name|name
operator|.
name|substring
argument_list|(
literal|5
argument_list|,
name|name
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|IdlAttribute
name|attr
decl_stmt|;
name|IdlDefn
name|idlDef
init|=
name|intf
operator|.
name|lookup
argument_list|(
name|attrNm
argument_list|)
decl_stmt|;
if|if
condition|(
name|idlDef
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|name
operator|.
name|startsWith
argument_list|(
literal|"_get_"
argument_list|)
condition|)
block|{
name|ArgType
name|t
init|=
name|opType
operator|.
name|getReturn
argument_list|()
decl_stmt|;
name|attr
operator|=
name|IdlAttribute
operator|.
name|create
argument_list|(
name|intf
argument_list|,
name|attrNm
argument_list|,
name|findType
argument_list|(
name|t
operator|.
name|getIdltype
argument_list|()
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ParamType
name|arg
init|=
name|opType
operator|.
name|getParam
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|attr
operator|=
name|IdlAttribute
operator|.
name|create
argument_list|(
name|intf
argument_list|,
name|attrNm
argument_list|,
name|findType
argument_list|(
name|arg
operator|.
name|getIdltype
argument_list|()
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|intf
operator|.
name|addAttribute
argument_list|(
name|attr
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|attr
operator|=
operator|(
name|IdlAttribute
operator|)
name|idlDef
expr_stmt|;
if|if
condition|(
name|attr
operator|.
name|readonly
argument_list|()
operator|&&
name|name
operator|.
name|startsWith
argument_list|(
literal|"_set_"
argument_list|)
condition|)
block|{
name|attr
operator|.
name|setReadonly
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|createIdlOperation
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|OperationType
name|opType
parameter_list|,
name|String
name|name
parameter_list|,
name|boolean
name|isOneway
parameter_list|)
throws|throws
name|Exception
block|{
name|IdlOperation
name|idlOp
init|=
name|IdlOperation
operator|.
name|create
argument_list|(
name|intf
argument_list|,
name|opType
operator|.
name|getName
argument_list|()
argument_list|,
name|isOneway
argument_list|)
decl_stmt|;
name|intf
operator|.
name|holdForScope
argument_list|(
name|idlOp
argument_list|)
expr_stmt|;
name|ArgType
name|crt
init|=
name|opType
operator|.
name|getReturn
argument_list|()
decl_stmt|;
if|if
condition|(
name|crt
operator|!=
literal|null
condition|)
block|{
name|IdlType
name|rt
init|=
name|findType
argument_list|(
name|crt
operator|.
name|getIdltype
argument_list|()
argument_list|)
decl_stmt|;
name|idlOp
operator|.
name|addReturnType
argument_list|(
name|rt
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|ParamType
name|arg
range|:
name|opType
operator|.
name|getParam
argument_list|()
control|)
block|{
name|IdlType
name|type
init|=
name|findType
argument_list|(
name|arg
operator|.
name|getIdltype
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|mode
init|=
name|arg
operator|.
name|getMode
argument_list|()
operator|.
name|value
argument_list|()
decl_stmt|;
name|IdlParam
name|param
init|=
name|IdlParam
operator|.
name|create
argument_list|(
name|idlOp
argument_list|,
name|arg
operator|.
name|getName
argument_list|()
argument_list|,
name|type
argument_list|,
name|mode
argument_list|)
decl_stmt|;
name|idlOp
operator|.
name|addParameter
argument_list|(
name|param
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|RaisesType
name|rs
range|:
name|opType
operator|.
name|getRaises
argument_list|()
control|)
block|{
name|IdlType
name|type
init|=
name|findType
argument_list|(
name|rs
operator|.
name|getException
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|instanceof
name|IdlException
condition|)
block|{
name|idlOp
operator|.
name|addException
argument_list|(
operator|(
name|IdlException
operator|)
name|type
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|msgStr
init|=
name|type
operator|.
name|fullName
argument_list|()
operator|+
literal|" is not a type."
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
name|msg
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
argument_list|(
name|msgStr
argument_list|,
name|LOG
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|Exception
argument_list|(
name|msg
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|root
operator|.
name|flush
argument_list|()
expr_stmt|;
name|intf
operator|.
name|promoteHeldToScope
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|getAllIdlTypes
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|TypeMappingType
name|typeMappingType
init|=
name|getTypeMappingType
argument_list|()
decl_stmt|;
if|if
condition|(
name|typeMappingType
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|CorbaType
name|corbaTypeImpl
range|:
name|typeMappingType
operator|.
name|getStructOrExceptionOrUnion
argument_list|()
control|)
block|{
name|findCorbaIdlType
argument_list|(
name|corbaTypeImpl
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|CorbaType
name|getCorbaType
parameter_list|(
name|QName
name|qname
parameter_list|)
throws|throws
name|Exception
block|{
name|CorbaType
name|corbaTypeImpl
init|=
literal|null
decl_stmt|;
try|try
block|{
name|TypeMappingType
name|typeMappingType
init|=
name|getTypeMappingType
argument_list|()
decl_stmt|;
if|if
condition|(
name|typeMappingType
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|CorbaType
name|corbaType
range|:
name|typeMappingType
operator|.
name|getStructOrExceptionOrUnion
argument_list|()
control|)
block|{
if|if
condition|(
name|corbaType
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|qname
operator|.
name|getLocalPart
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|corbaType
return|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
return|return
name|corbaTypeImpl
return|;
block|}
specifier|private
name|TypeMappingType
name|getTypeMappingType
parameter_list|()
block|{
name|Iterator
argument_list|<
name|?
argument_list|>
name|types
init|=
name|def
operator|.
name|getExtensibilityElements
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
if|if
condition|(
name|types
operator|!=
literal|null
condition|)
block|{
while|while
condition|(
name|types
operator|.
name|hasNext
argument_list|()
condition|)
block|{
return|return
operator|(
name|TypeMappingType
operator|)
name|types
operator|.
name|next
argument_list|()
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|IdlType
name|findType
parameter_list|(
name|QName
name|qname
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|local
init|=
name|qname
operator|.
name|getLocalPart
argument_list|()
decl_stmt|;
return|return
name|findIdlType
argument_list|(
name|local
argument_list|,
name|qname
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|private
name|IdlType
name|findCorbaIdlType
parameter_list|(
name|CorbaType
name|corbaTypeImpl
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|local
init|=
name|corbaTypeImpl
operator|.
name|getName
argument_list|()
decl_stmt|;
return|return
name|findIdlType
argument_list|(
name|local
argument_list|,
name|corbaTypeImpl
operator|.
name|getType
argument_list|()
argument_list|,
name|corbaTypeImpl
argument_list|)
return|;
block|}
specifier|private
name|IdlType
name|findIdlType
parameter_list|(
name|String
name|local
parameter_list|,
name|QName
name|ntype
parameter_list|,
name|CorbaType
name|corbatypeImpl
parameter_list|)
throws|throws
name|Exception
block|{
name|IdlType
name|idlType
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|ntype
operator|.
name|getNamespaceURI
argument_list|()
operator|.
name|equals
argument_list|(
name|CorbaConstants
operator|.
name|NU_WSDL_CORBA
argument_list|)
condition|)
block|{
try|try
block|{
name|idlType
operator|=
name|createPrimitiveType
argument_list|(
name|ntype
argument_list|,
name|local
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|CorbaUtils
operator|.
name|isTimeBaseDef
argument_list|(
name|local
argument_list|)
condition|)
block|{
name|root
operator|.
name|addInclude
argument_list|(
literal|"<omg/TimeBase.idl>"
argument_list|)
expr_stmt|;
block|}
name|String
index|[]
name|name
init|=
name|unscopeName
argument_list|(
name|local
argument_list|)
decl_stmt|;
name|IdlDefn
name|defn
init|=
name|root
operator|.
name|lookup
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|defn
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|defn
operator|instanceof
name|IdlType
condition|)
block|{
return|return
operator|(
name|IdlType
operator|)
name|defn
return|;
block|}
name|String
name|msgStr
init|=
name|local
operator|+
literal|" is an incorrect idltype."
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
name|msg
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
argument_list|(
name|msgStr
argument_list|,
name|LOG
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|Exception
argument_list|(
name|msg
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
try|try
block|{
name|idlType
operator|=
name|createType
argument_list|(
name|ntype
argument_list|,
name|name
argument_list|,
name|corbatypeImpl
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|idlType
return|;
block|}
specifier|protected
name|IdlType
name|createPrimitiveType
parameter_list|(
name|QName
name|idlType
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|Exception
block|{
name|IdlDefn
name|result
init|=
name|root
operator|.
name|lookup
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|!=
literal|null
operator|&&
operator|(
operator|!
operator|(
name|result
operator|instanceof
name|IdlType
operator|)
operator|)
condition|)
block|{
name|String
name|msgStr
init|=
name|idlType
operator|.
name|getLocalPart
argument_list|()
operator|+
literal|" is an incorrect idltype."
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
name|msg
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
argument_list|(
name|msgStr
argument_list|,
name|LOG
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|Exception
argument_list|(
name|msg
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
comment|/**          * If we find a corba:dateTime then add the TimeBase.idl to the include          * list for the root.          */
if|if
condition|(
name|idlType
operator|.
name|equals
argument_list|(
name|CorbaConstants
operator|.
name|NT_CORBA_DATETIME
argument_list|)
condition|)
block|{
name|root
operator|.
name|addInclude
argument_list|(
literal|"<omg/TimeBase.idl>"
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|IdlType
operator|)
name|result
return|;
block|}
specifier|protected
name|IdlType
name|createType
parameter_list|(
name|QName
name|idlType
parameter_list|,
name|String
index|[]
name|name
parameter_list|,
name|CorbaType
name|corbaType
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
literal|"CORBA.Object"
operator|.
name|equals
argument_list|(
name|idlType
operator|.
name|getLocalPart
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|IdlInterface
operator|.
name|create
argument_list|(
literal|null
argument_list|,
literal|"Object"
argument_list|)
return|;
block|}
name|CorbaType
name|corbaTypeImpl
init|=
name|corbaType
decl_stmt|;
if|if
condition|(
name|corbaTypeImpl
operator|==
literal|null
condition|)
block|{
name|corbaTypeImpl
operator|=
name|getCorbaType
argument_list|(
name|idlType
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|corbaTypeImpl
operator|==
literal|null
condition|)
block|{
name|String
name|msgStr
init|=
literal|"Type "
operator|+
name|idlType
operator|.
name|getLocalPart
argument_list|()
operator|+
literal|" not found."
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
name|msg
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
argument_list|(
name|msgStr
argument_list|,
name|LOG
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|Exception
argument_list|(
name|msg
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
name|IdlScopeBase
name|scope
init|=
name|root
decl_stmt|;
name|StringBuilder
name|dotScopedName
init|=
operator|new
name|StringBuilder
argument_list|(
literal|""
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|name
operator|.
name|length
operator|-
literal|1
condition|;
operator|++
name|i
control|)
block|{
name|dotScopedName
operator|.
name|append
argument_list|(
name|name
index|[
name|i
index|]
argument_list|)
expr_stmt|;
comment|// If we have the name CORBA, we need to make sure we are not handling the CORBA.Object
comment|// name which is used for object references.  If so, we don't want to generate a module
comment|// since it is not a type we need to define in our IDL.  This only happens when the
comment|// name is "CORBA", we have a name array of length 2 and we are at the beginning of the
comment|// name array.
if|if
condition|(
literal|"CORBA"
operator|.
name|equals
argument_list|(
name|dotScopedName
operator|.
name|toString
argument_list|()
argument_list|)
operator|&&
name|name
operator|.
name|length
operator|==
literal|2
operator|&&
name|i
operator|==
literal|0
operator|&&
literal|"Object"
operator|.
name|equals
argument_list|(
name|name
index|[
literal|1
index|]
argument_list|)
condition|)
block|{
break|break;
block|}
name|IdlDefn
name|idlDef
init|=
name|scope
operator|.
name|lookup
argument_list|(
name|name
index|[
name|i
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|idlDef
operator|==
literal|null
condition|)
block|{
comment|// Before creating module, check to see if a Corba type
comment|// represent this name aleady exists.
comment|// For example if type is a.b.c and we are about to create
comment|// module b, look to see if a.b
comment|// is an interface that needs to be processed
name|QName
name|qname
init|=
operator|new
name|QName
argument_list|(
name|corbaTypeImpl
operator|.
name|getType
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
name|dotScopedName
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
comment|// Check to see if CORBAType exists. If so, create type for it
comment|// otherwise
comment|// create module for this scope
name|CorbaType
name|possibleCorbaType
init|=
name|getCorbaType
argument_list|(
name|qname
argument_list|)
decl_stmt|;
if|if
condition|(
name|possibleCorbaType
operator|!=
literal|null
condition|)
block|{
name|idlDef
operator|=
name|findType
argument_list|(
name|qname
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|idlDef
operator|==
literal|null
condition|)
block|{
name|idlDef
operator|=
name|IdlModule
operator|.
name|create
argument_list|(
name|scope
argument_list|,
name|name
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|scope
operator|.
name|addToScope
argument_list|(
name|idlDef
argument_list|)
expr_stmt|;
block|}
block|}
name|dotScopedName
operator|.
name|append
argument_list|(
literal|"."
argument_list|)
expr_stmt|;
name|scope
operator|=
operator|(
name|IdlScopeBase
operator|)
name|idlDef
expr_stmt|;
block|}
name|IdlType
name|result
init|=
literal|null
decl_stmt|;
name|String
name|local
init|=
name|name
index|[
name|name
operator|.
name|length
operator|-
literal|1
index|]
decl_stmt|;
if|if
condition|(
name|corbaTypeImpl
operator|instanceof
name|Enum
condition|)
block|{
name|result
operator|=
name|createEnum
argument_list|(
operator|(
name|Enum
operator|)
name|corbaTypeImpl
argument_list|,
name|scope
argument_list|,
name|local
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|corbaTypeImpl
operator|instanceof
name|Sequence
condition|)
block|{
name|result
operator|=
name|createSequence
argument_list|(
operator|(
name|Sequence
operator|)
name|corbaTypeImpl
argument_list|,
name|scope
argument_list|,
name|local
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|corbaTypeImpl
operator|instanceof
name|Anonsequence
condition|)
block|{
name|result
operator|=
name|createAnonSequence
argument_list|(
operator|(
name|Anonsequence
operator|)
name|corbaTypeImpl
argument_list|,
name|scope
argument_list|,
name|local
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|corbaTypeImpl
operator|instanceof
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|Exception
condition|)
block|{
name|result
operator|=
name|createIdlException
argument_list|(
operator|(
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|Exception
operator|)
name|corbaTypeImpl
argument_list|,
name|scope
argument_list|,
name|local
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|corbaTypeImpl
operator|instanceof
name|Struct
condition|)
block|{
name|result
operator|=
name|createStruct
argument_list|(
operator|(
name|Struct
operator|)
name|corbaTypeImpl
argument_list|,
name|scope
argument_list|,
name|local
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|corbaTypeImpl
operator|instanceof
name|Union
condition|)
block|{
name|result
operator|=
name|createUnion
argument_list|(
operator|(
name|Union
operator|)
name|corbaTypeImpl
argument_list|,
name|scope
argument_list|,
name|local
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|corbaTypeImpl
operator|instanceof
name|Alias
condition|)
block|{
name|result
operator|=
name|createTypedef
argument_list|(
operator|(
name|Alias
operator|)
name|corbaTypeImpl
argument_list|,
name|scope
argument_list|,
name|local
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|corbaTypeImpl
operator|instanceof
name|Array
condition|)
block|{
name|result
operator|=
name|createArray
argument_list|(
operator|(
name|Array
operator|)
name|corbaTypeImpl
argument_list|,
name|scope
argument_list|,
name|local
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|corbaTypeImpl
operator|instanceof
name|Anonarray
condition|)
block|{
name|result
operator|=
name|createAnonArray
argument_list|(
operator|(
name|Anonarray
operator|)
name|corbaTypeImpl
argument_list|,
name|scope
argument_list|,
name|local
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|corbaTypeImpl
operator|instanceof
name|Fixed
condition|)
block|{
name|result
operator|=
name|createFixed
argument_list|(
operator|(
name|Fixed
operator|)
name|corbaTypeImpl
argument_list|,
name|scope
argument_list|,
name|local
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|corbaTypeImpl
operator|instanceof
name|Anonfixed
condition|)
block|{
name|result
operator|=
name|createAnonFixed
argument_list|(
operator|(
name|Anonfixed
operator|)
name|corbaTypeImpl
argument_list|,
name|scope
argument_list|,
name|local
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|corbaTypeImpl
operator|instanceof
name|Const
condition|)
block|{
name|result
operator|=
name|createConst
argument_list|(
operator|(
name|Const
operator|)
name|corbaTypeImpl
argument_list|,
name|scope
argument_list|,
name|local
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
name|checkAnon
argument_list|(
name|corbaTypeImpl
argument_list|,
name|scope
argument_list|,
name|local
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|result
operator|==
literal|null
operator|&&
name|corbaTypeImpl
operator|instanceof
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|Object
condition|)
block|{
name|result
operator|=
name|createInterface
argument_list|(
operator|(
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|Object
operator|)
name|corbaTypeImpl
argument_list|,
name|scope
argument_list|,
name|local
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|private
name|IdlType
name|checkAnon
parameter_list|(
name|CorbaType
name|corbaTypeImpl
parameter_list|,
name|IdlScopeBase
name|scope
parameter_list|,
name|String
name|local
parameter_list|)
throws|throws
name|Exception
block|{
name|IdlType
name|result
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|corbaTypeImpl
operator|instanceof
name|Anonstring
condition|)
block|{
name|Anonstring
name|as
init|=
operator|(
name|Anonstring
operator|)
name|corbaTypeImpl
decl_stmt|;
name|Long
name|lbound
init|=
name|as
operator|.
name|getBound
argument_list|()
decl_stmt|;
name|int
name|bound
init|=
name|lbound
operator|.
name|intValue
argument_list|()
decl_stmt|;
name|result
operator|=
name|IdlString
operator|.
name|create
argument_list|(
name|bound
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|private
name|IdlType
name|createInterface
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|Object
name|obj
parameter_list|,
name|IdlScopeBase
name|scope
parameter_list|,
name|String
name|local
parameter_list|)
throws|throws
name|Exception
block|{
name|IdlType
name|result
init|=
literal|null
decl_stmt|;
name|QName
name|bqname
init|=
name|obj
operator|.
name|getBinding
argument_list|()
decl_stmt|;
name|Binding
name|binding
init|=
name|def
operator|.
name|getBinding
argument_list|(
name|bqname
argument_list|)
decl_stmt|;
if|if
condition|(
name|binding
operator|!=
literal|null
condition|)
block|{
name|IdlDefn
name|defn
init|=
name|scope
operator|.
name|lookup
argument_list|(
name|local
argument_list|)
decl_stmt|;
if|if
condition|(
name|defn
operator|instanceof
name|IdlInterface
condition|)
block|{
return|return
operator|(
name|IdlInterface
operator|)
name|defn
return|;
block|}
elseif|else
if|if
condition|(
name|defn
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|IdlInterface
name|storedIntf
init|=
name|intf
decl_stmt|;
name|intf
operator|=
name|IdlInterface
operator|.
name|create
argument_list|(
name|scope
argument_list|,
name|local
argument_list|)
expr_stmt|;
name|scope
operator|.
name|holdForScope
argument_list|(
name|intf
argument_list|)
expr_stmt|;
name|collectIdlDefns
argument_list|(
name|binding
argument_list|)
expr_stmt|;
name|scope
operator|.
name|promoteHeldToScope
argument_list|()
expr_stmt|;
name|result
operator|=
name|intf
expr_stmt|;
name|intf
operator|=
name|storedIntf
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|String
name|msgStr
init|=
literal|"Interface type "
operator|+
name|intf
operator|.
name|fullName
argument_list|()
operator|+
literal|" not found."
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
name|msg
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
argument_list|(
name|msgStr
argument_list|,
name|LOG
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|Exception
argument_list|(
name|msg
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
return|return
name|result
return|;
block|}
specifier|private
name|IdlType
name|createIdlException
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|Exception
name|e
parameter_list|,
name|IdlScopeBase
name|scope
parameter_list|,
name|String
name|local
parameter_list|)
throws|throws
name|Exception
block|{
name|IdlType
name|result
init|=
literal|null
decl_stmt|;
name|Object
name|obj
init|=
name|scope
operator|.
name|lookup
argument_list|(
name|local
argument_list|)
decl_stmt|;
if|if
condition|(
name|obj
operator|!=
literal|null
operator|&&
operator|(
name|obj
operator|instanceof
name|IdlException
operator|)
condition|)
block|{
name|result
operator|=
operator|(
name|IdlType
operator|)
name|obj
expr_stmt|;
block|}
else|else
block|{
name|IdlException
name|exc
init|=
name|IdlException
operator|.
name|create
argument_list|(
name|scope
argument_list|,
name|local
argument_list|)
decl_stmt|;
name|scope
operator|.
name|holdForScope
argument_list|(
name|exc
argument_list|)
expr_stmt|;
for|for
control|(
name|MemberType
name|m
range|:
name|e
operator|.
name|getMember
argument_list|()
control|)
block|{
name|QName
name|qname
init|=
name|m
operator|.
name|getIdltype
argument_list|()
decl_stmt|;
name|IdlType
name|type
init|=
name|findType
argument_list|(
name|qname
argument_list|)
decl_stmt|;
name|exc
operator|.
name|addToScope
argument_list|(
name|IdlField
operator|.
name|create
argument_list|(
name|exc
argument_list|,
name|m
operator|.
name|getName
argument_list|()
argument_list|,
name|type
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|result
operator|=
name|exc
expr_stmt|;
name|scope
operator|.
name|promoteHeldToScope
argument_list|()
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|private
name|IdlType
name|createUnion
parameter_list|(
name|Union
name|u
parameter_list|,
name|IdlScopeBase
name|scope
parameter_list|,
name|String
name|local
parameter_list|)
throws|throws
name|Exception
block|{
name|boolean
name|undefinedCircular
init|=
literal|false
decl_stmt|;
name|IdlType
name|disc
init|=
name|findType
argument_list|(
name|u
operator|.
name|getDiscriminator
argument_list|()
argument_list|)
decl_stmt|;
name|IdlUnion
name|union
init|=
name|IdlUnion
operator|.
name|create
argument_list|(
name|scope
argument_list|,
name|local
argument_list|,
name|disc
argument_list|)
decl_stmt|;
name|scope
operator|.
name|holdForScope
argument_list|(
name|union
argument_list|)
expr_stmt|;
for|for
control|(
name|Unionbranch
name|ub
range|:
name|u
operator|.
name|getUnionbranch
argument_list|()
control|)
block|{
name|QName
name|qname
init|=
name|ub
operator|.
name|getIdltype
argument_list|()
decl_stmt|;
name|IdlType
name|bt
init|=
name|findType
argument_list|(
name|qname
argument_list|)
decl_stmt|;
name|boolean
name|isDefault
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|ub
operator|.
name|isSetDefault
argument_list|()
condition|)
block|{
name|isDefault
operator|=
name|ub
operator|.
name|isDefault
argument_list|()
expr_stmt|;
block|}
name|IdlUnionBranch
name|b
init|=
name|IdlUnionBranch
operator|.
name|create
argument_list|(
name|union
argument_list|,
name|ub
operator|.
name|getName
argument_list|()
argument_list|,
name|bt
argument_list|,
name|isDefault
argument_list|)
decl_stmt|;
for|for
control|(
name|CaseType
name|cs
range|:
name|ub
operator|.
name|getCase
argument_list|()
control|)
block|{
name|b
operator|.
name|addCase
argument_list|(
name|cs
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Ensure that this union will not  be written until all of its circular members are
comment|// defined, unless the undefined circular members are of sequence type.
if|if
condition|(
operator|!
name|undefinedCircular
operator|&&
operator|!
operator|(
name|bt
operator|instanceof
name|IdlSequence
operator|)
condition|)
block|{
name|String
name|mlocal
init|=
name|qname
operator|.
name|getLocalPart
argument_list|()
decl_stmt|;
name|String
index|[]
name|mname
init|=
name|unscopeName
argument_list|(
name|mlocal
argument_list|)
decl_stmt|;
name|undefinedCircular
operator|=
literal|null
operator|!=
name|root
operator|.
name|lookup
argument_list|(
name|mname
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|union
operator|.
name|addBranch
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|undefinedCircular
condition|)
block|{
name|scope
operator|.
name|parkHeld
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|scope
operator|.
name|promoteHeldToScope
argument_list|()
expr_stmt|;
if|if
condition|(
name|union
operator|.
name|isCircular
argument_list|()
condition|)
block|{
comment|// resolving this union closed a recursion
name|scope
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|union
return|;
block|}
specifier|private
name|IdlType
name|createStruct
parameter_list|(
name|Struct
name|s
parameter_list|,
name|IdlScopeBase
name|scope
parameter_list|,
name|String
name|local
parameter_list|)
throws|throws
name|Exception
block|{
name|boolean
name|undefinedCircular
init|=
literal|false
decl_stmt|;
name|IdlStruct
name|struct
init|=
name|IdlStruct
operator|.
name|create
argument_list|(
name|scope
argument_list|,
name|local
argument_list|)
decl_stmt|;
name|scope
operator|.
name|holdForScope
argument_list|(
name|struct
argument_list|)
expr_stmt|;
for|for
control|(
name|MemberType
name|m
range|:
name|s
operator|.
name|getMember
argument_list|()
control|)
block|{
name|QName
name|qname
init|=
name|m
operator|.
name|getIdltype
argument_list|()
decl_stmt|;
name|IdlType
name|type
init|=
name|findType
argument_list|(
name|qname
argument_list|)
decl_stmt|;
comment|// Ensure that this struct will not be written until
comment|// all of its circular members are defined, unless
comment|// the undefined circular members are of sequence type.
if|if
condition|(
operator|!
name|undefinedCircular
operator|&&
operator|!
operator|(
name|type
operator|instanceof
name|IdlSequence
operator|)
condition|)
block|{
name|String
name|mlocal
init|=
name|qname
operator|.
name|getLocalPart
argument_list|()
decl_stmt|;
name|String
index|[]
name|mname
init|=
name|unscopeName
argument_list|(
name|mlocal
argument_list|)
decl_stmt|;
name|undefinedCircular
operator|=
literal|null
operator|!=
name|root
operator|.
name|lookup
argument_list|(
name|mname
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|struct
operator|.
name|addToScope
argument_list|(
name|IdlField
operator|.
name|create
argument_list|(
name|struct
argument_list|,
name|m
operator|.
name|getName
argument_list|()
argument_list|,
name|type
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|undefinedCircular
condition|)
block|{
name|scope
operator|.
name|parkHeld
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|scope
operator|.
name|promoteHeldToScope
argument_list|()
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|isCircular
argument_list|()
condition|)
block|{
comment|// resolving this struct closed a recursion
name|scope
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|struct
return|;
block|}
specifier|private
name|IdlType
name|createTypedef
parameter_list|(
name|Alias
name|a
parameter_list|,
name|IdlScopeBase
name|scope
parameter_list|,
name|String
name|local
parameter_list|)
throws|throws
name|Exception
block|{
name|IdlType
name|idlType
init|=
literal|null
decl_stmt|;
name|IdlType
name|base
init|=
name|findType
argument_list|(
name|a
operator|.
name|getBasetype
argument_list|()
argument_list|)
decl_stmt|;
name|idlType
operator|=
name|IdlTypedef
operator|.
name|create
argument_list|(
name|scope
argument_list|,
name|local
argument_list|,
name|base
argument_list|)
expr_stmt|;
name|scope
operator|.
name|addToScope
argument_list|(
name|idlType
argument_list|)
expr_stmt|;
return|return
name|idlType
return|;
block|}
specifier|private
name|IdlType
name|createConst
parameter_list|(
name|Const
name|c
parameter_list|,
name|IdlScopeBase
name|scope
parameter_list|,
name|String
name|local
parameter_list|)
throws|throws
name|Exception
block|{
name|IdlType
name|idlType
init|=
literal|null
decl_stmt|;
name|IdlType
name|base
init|=
name|findType
argument_list|(
name|c
operator|.
name|getIdltype
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|value
init|=
name|c
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|idlType
operator|=
name|IdlConst
operator|.
name|create
argument_list|(
name|scope
argument_list|,
name|local
argument_list|,
name|base
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|scope
operator|.
name|addToScope
argument_list|(
name|idlType
argument_list|)
expr_stmt|;
return|return
name|idlType
return|;
block|}
specifier|private
name|IdlType
name|createSequence
parameter_list|(
name|Sequence
name|s
parameter_list|,
name|IdlScopeBase
name|scope
parameter_list|,
name|String
name|local
parameter_list|)
throws|throws
name|Exception
block|{
name|IdlType
name|idlType
init|=
literal|null
decl_stmt|;
name|IdlType
name|base
init|=
name|findType
argument_list|(
name|s
operator|.
name|getElemtype
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|bound
init|=
operator|(
name|int
operator|)
name|s
operator|.
name|getBound
argument_list|()
decl_stmt|;
name|idlType
operator|=
name|IdlSequence
operator|.
name|create
argument_list|(
name|scope
argument_list|,
name|local
argument_list|,
name|base
argument_list|,
name|bound
argument_list|)
expr_stmt|;
name|scope
operator|.
name|addToScope
argument_list|(
name|idlType
argument_list|)
expr_stmt|;
return|return
name|idlType
return|;
block|}
specifier|private
name|IdlType
name|createAnonSequence
parameter_list|(
name|Anonsequence
name|s
parameter_list|,
name|IdlScopeBase
name|scope
parameter_list|,
name|String
name|local
parameter_list|)
throws|throws
name|Exception
block|{
name|IdlType
name|idlType
init|=
literal|null
decl_stmt|;
name|IdlType
name|base
init|=
name|findType
argument_list|(
name|s
operator|.
name|getElemtype
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|bound
init|=
operator|(
name|int
operator|)
name|s
operator|.
name|getBound
argument_list|()
decl_stmt|;
name|idlType
operator|=
name|IdlAnonSequence
operator|.
name|create
argument_list|(
name|scope
argument_list|,
name|base
argument_list|,
name|bound
argument_list|)
expr_stmt|;
name|scope
operator|.
name|addToScope
argument_list|(
name|idlType
argument_list|)
expr_stmt|;
return|return
name|idlType
return|;
block|}
specifier|private
name|IdlType
name|createArray
parameter_list|(
name|Array
name|s
parameter_list|,
name|IdlScopeBase
name|scope
parameter_list|,
name|String
name|local
parameter_list|)
throws|throws
name|Exception
block|{
name|IdlType
name|idlType
init|=
literal|null
decl_stmt|;
name|IdlType
name|base
init|=
name|findType
argument_list|(
name|s
operator|.
name|getElemtype
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|bound
init|=
operator|(
name|int
operator|)
name|s
operator|.
name|getBound
argument_list|()
decl_stmt|;
name|idlType
operator|=
name|IdlArray
operator|.
name|create
argument_list|(
name|scope
argument_list|,
name|local
argument_list|,
name|base
argument_list|,
name|bound
argument_list|)
expr_stmt|;
name|scope
operator|.
name|addToScope
argument_list|(
name|idlType
argument_list|)
expr_stmt|;
return|return
name|idlType
return|;
block|}
specifier|private
name|IdlType
name|createAnonArray
parameter_list|(
name|Anonarray
name|s
parameter_list|,
name|IdlScopeBase
name|scope
parameter_list|,
name|String
name|local
parameter_list|)
throws|throws
name|Exception
block|{
name|IdlType
name|idlType
init|=
literal|null
decl_stmt|;
name|IdlType
name|base
init|=
name|findType
argument_list|(
name|s
operator|.
name|getElemtype
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|bound
init|=
operator|(
name|int
operator|)
name|s
operator|.
name|getBound
argument_list|()
decl_stmt|;
name|idlType
operator|=
name|IdlAnonArray
operator|.
name|create
argument_list|(
name|scope
argument_list|,
name|base
argument_list|,
name|bound
argument_list|)
expr_stmt|;
name|scope
operator|.
name|addToScope
argument_list|(
name|idlType
argument_list|)
expr_stmt|;
return|return
name|idlType
return|;
block|}
specifier|private
name|IdlType
name|createFixed
parameter_list|(
name|Fixed
name|f
parameter_list|,
name|IdlScopeBase
name|scope
parameter_list|,
name|String
name|local
parameter_list|)
block|{
name|IdlType
name|idlType
init|=
literal|null
decl_stmt|;
name|Long
name|digits
init|=
name|f
operator|.
name|getDigits
argument_list|()
decl_stmt|;
name|Long
name|scale
init|=
name|f
operator|.
name|getScale
argument_list|()
decl_stmt|;
name|idlType
operator|=
name|IdlFixed
operator|.
name|create
argument_list|(
name|scope
argument_list|,
name|local
argument_list|,
name|digits
operator|.
name|intValue
argument_list|()
argument_list|,
name|scale
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|scope
operator|.
name|addToScope
argument_list|(
name|idlType
argument_list|)
expr_stmt|;
return|return
name|idlType
return|;
block|}
specifier|private
name|IdlType
name|createAnonFixed
parameter_list|(
name|Anonfixed
name|f
parameter_list|,
name|IdlScopeBase
name|scope
parameter_list|,
name|String
name|local
parameter_list|)
block|{
name|IdlType
name|idlType
init|=
literal|null
decl_stmt|;
name|Long
name|digits
init|=
name|f
operator|.
name|getDigits
argument_list|()
decl_stmt|;
name|Long
name|scale
init|=
name|f
operator|.
name|getScale
argument_list|()
decl_stmt|;
name|idlType
operator|=
name|IdlAnonFixed
operator|.
name|create
argument_list|(
name|scope
argument_list|,
name|digits
operator|.
name|intValue
argument_list|()
argument_list|,
name|scale
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|scope
operator|.
name|addToScope
argument_list|(
name|idlType
argument_list|)
expr_stmt|;
return|return
name|idlType
return|;
block|}
specifier|private
name|IdlType
name|createEnum
parameter_list|(
name|Enum
name|e
parameter_list|,
name|IdlScopeBase
name|scope
parameter_list|,
name|String
name|local
parameter_list|)
block|{
name|IdlEnum
name|enum1
init|=
name|IdlEnum
operator|.
name|create
argument_list|(
name|scope
argument_list|,
name|local
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|Enumerator
argument_list|>
name|it
init|=
name|e
operator|.
name|getEnumerator
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
comment|// Enumerators are created in the same scope
comment|// as the enum, according to IDL grammar rules.
name|String
name|n
init|=
name|it
operator|.
name|next
argument_list|()
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|IdlEnumerator
name|enumerator
init|=
name|IdlEnumerator
operator|.
name|create
argument_list|(
name|scope
argument_list|,
name|n
argument_list|)
decl_stmt|;
name|scope
operator|.
name|addToScope
argument_list|(
name|enumerator
argument_list|)
expr_stmt|;
name|enum1
operator|.
name|addEnumerator
argument_list|(
name|enumerator
argument_list|)
expr_stmt|;
block|}
name|scope
operator|.
name|addToScope
argument_list|(
name|enum1
argument_list|)
expr_stmt|;
return|return
name|enum1
return|;
block|}
specifier|private
name|PrintWriter
name|createPrintWriter
parameter_list|(
name|String
name|filename
parameter_list|)
throws|throws
name|Exception
block|{
name|OutputStream
name|out
init|=
name|factory
operator|.
name|createOutputStream
argument_list|(
name|filename
argument_list|)
decl_stmt|;
return|return
operator|new
name|PrintWriter
argument_list|(
name|out
argument_list|)
return|;
block|}
specifier|public
name|void
name|setOutputDirectory
parameter_list|(
name|String
name|dir
parameter_list|)
block|{
comment|// Force directory creation
comment|// before setting output directory
if|if
condition|(
name|dir
operator|!=
literal|null
condition|)
block|{
name|File
name|fileOutputDir
init|=
operator|new
name|File
argument_list|(
name|dir
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fileOutputDir
operator|.
name|exists
argument_list|()
condition|)
block|{
name|fileOutputDir
operator|.
name|mkdir
argument_list|()
expr_stmt|;
block|}
block|}
name|factory
operator|=
operator|new
name|FileOutputStreamFactory
argument_list|(
name|dir
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Binding
name|findBinding
parameter_list|(
name|Definition
name|definition
parameter_list|)
block|{
name|Binding
name|binding
init|=
literal|null
decl_stmt|;
name|Collection
argument_list|<
name|Binding
argument_list|>
name|bindings
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
name|definition
operator|.
name|getBindings
argument_list|()
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|bindingName
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Binding
name|b
range|:
name|bindings
control|)
block|{
name|binding
operator|=
name|b
expr_stmt|;
if|if
condition|(
name|binding
operator|.
name|getQName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
operator|.
name|equals
argument_list|(
name|bindingName
argument_list|)
condition|)
block|{
return|return
name|binding
return|;
block|}
block|}
block|}
else|else
block|{
if|if
condition|(
name|bindings
operator|.
name|size
argument_list|()
operator|>=
literal|1
condition|)
block|{
name|binding
operator|=
name|bindings
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|binding
return|;
block|}
specifier|private
name|String
index|[]
name|unscopeName
parameter_list|(
name|String
name|nm
parameter_list|)
block|{
name|StringTokenizer
name|strtok
init|=
operator|new
name|StringTokenizer
argument_list|(
name|nm
argument_list|,
literal|"."
argument_list|)
decl_stmt|;
name|String
index|[]
name|result
init|=
operator|new
name|String
index|[
name|strtok
operator|.
name|countTokens
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|strtok
operator|.
name|hasMoreTokens
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|result
index|[
name|i
index|]
operator|=
name|strtok
operator|.
name|nextToken
argument_list|()
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|public
name|void
name|setOutputFile
parameter_list|(
name|String
name|file
parameter_list|)
block|{
name|outputFile
operator|=
name|file
expr_stmt|;
block|}
specifier|public
name|void
name|setPrintWriter
parameter_list|(
name|PrintWriter
name|pw
parameter_list|)
block|{
name|printWriter
operator|=
name|pw
expr_stmt|;
block|}
specifier|public
name|void
name|setWsdlFile
parameter_list|(
name|String
name|file
parameter_list|)
block|{
name|wsdlFileName
operator|=
name|file
expr_stmt|;
block|}
specifier|public
name|void
name|setVerboseOn
parameter_list|(
name|boolean
name|verbose
parameter_list|)
block|{
name|verboseOn
operator|=
name|verbose
expr_stmt|;
block|}
specifier|public
name|boolean
name|isVerboseOn
parameter_list|()
block|{
return|return
name|verboseOn
return|;
block|}
specifier|public
name|void
name|setBindingName
parameter_list|(
name|String
name|bindName
parameter_list|)
block|{
name|bindingName
operator|=
name|bindName
expr_stmt|;
block|}
specifier|public
name|String
name|getBindingName
parameter_list|()
block|{
return|return
name|bindingName
return|;
block|}
specifier|public
name|void
name|setNamespace
parameter_list|(
name|String
name|namespaceName
parameter_list|)
block|{
name|namespace
operator|=
name|namespaceName
expr_stmt|;
block|}
specifier|public
name|String
name|getNamespace
parameter_list|()
block|{
return|return
name|namespace
return|;
block|}
specifier|public
name|void
name|setGenerateAllBindings
parameter_list|(
name|boolean
name|all
parameter_list|)
block|{
name|generateAllBindings
operator|=
name|all
expr_stmt|;
block|}
specifier|public
name|boolean
name|isGenerateAllBindings
parameter_list|()
block|{
return|return
name|generateAllBindings
return|;
block|}
block|}
end_class

end_unit

