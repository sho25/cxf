begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|corba
operator|.
name|processors
operator|.
name|wsdl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ListIterator
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|Definition
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|Input
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|Operation
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|Output
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|Part
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|ArgType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|CorbaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|ModeType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|ParamType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|xmlschema
operator|.
name|SchemaCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|CastUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaAnnotation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaAnnotationItem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaAppInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaComplexType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaElement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaExternal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaImport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaSequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaSequenceMember
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaType
import|;
end_import

begin_class
specifier|public
specifier|final
class|class
name|WSDLParameter
block|{
specifier|static
name|Definition
name|definition
decl_stmt|;
specifier|public
name|void
name|processParameters
parameter_list|(
name|WSDLToCorbaBinding
name|wsdlToCorbaBinding
parameter_list|,
name|Operation
name|operation
parameter_list|,
name|Definition
name|def
parameter_list|,
name|SchemaCollection
name|xmlSchemaList
parameter_list|,
name|List
argument_list|<
name|ParamType
argument_list|>
name|params
parameter_list|,
name|List
argument_list|<
name|ArgType
argument_list|>
name|returns
parameter_list|,
name|boolean
name|simpleOrdering
parameter_list|)
throws|throws
name|Exception
block|{
name|definition
operator|=
name|def
expr_stmt|;
name|List
argument_list|<
name|ParamType
argument_list|>
name|inputs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ParamType
argument_list|>
name|outputs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ArgType
argument_list|>
name|returnOutputs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|boolean
name|isWrapped
init|=
name|isWrappedOperation
argument_list|(
name|operation
argument_list|,
name|xmlSchemaList
argument_list|)
decl_stmt|;
if|if
condition|(
name|isWrapped
condition|)
block|{
name|processWrappedInputParams
argument_list|(
name|wsdlToCorbaBinding
argument_list|,
name|operation
argument_list|,
name|xmlSchemaList
argument_list|,
name|inputs
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|processInputParams
argument_list|(
name|wsdlToCorbaBinding
argument_list|,
name|operation
argument_list|,
name|xmlSchemaList
argument_list|,
name|inputs
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isWrapped
condition|)
block|{
name|processWrappedOutputParams
argument_list|(
name|wsdlToCorbaBinding
argument_list|,
name|operation
argument_list|,
name|xmlSchemaList
argument_list|,
name|inputs
argument_list|,
name|outputs
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|processOutputParams
argument_list|(
name|wsdlToCorbaBinding
argument_list|,
name|operation
argument_list|,
name|xmlSchemaList
argument_list|,
name|inputs
argument_list|,
name|outputs
argument_list|)
expr_stmt|;
block|}
name|processReturnParams
argument_list|(
name|outputs
argument_list|,
name|returnOutputs
argument_list|)
expr_stmt|;
name|orderParameters
argument_list|(
name|inputs
argument_list|,
name|outputs
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|returns
operator|.
name|addAll
argument_list|(
name|returnOutputs
argument_list|)
expr_stmt|;
name|params
operator|.
name|addAll
argument_list|(
name|inputs
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|processWrappedInputParams
parameter_list|(
name|WSDLToCorbaBinding
name|wsdlToCorbaBinding
parameter_list|,
name|Operation
name|operation
parameter_list|,
name|SchemaCollection
name|xmlSchemaList
parameter_list|,
name|List
argument_list|<
name|ParamType
argument_list|>
name|inputs
parameter_list|)
throws|throws
name|Exception
block|{
name|Input
name|input
init|=
name|operation
operator|.
name|getInput
argument_list|()
decl_stmt|;
if|if
condition|(
name|input
operator|!=
literal|null
condition|)
block|{
name|Message
name|msg
init|=
name|input
operator|.
name|getMessage
argument_list|()
decl_stmt|;
name|Part
name|part
init|=
operator|(
name|Part
operator|)
name|msg
operator|.
name|getOrderedParts
argument_list|(
literal|null
argument_list|)
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|XmlSchemaElement
name|el
init|=
name|getElement
argument_list|(
name|part
argument_list|,
name|xmlSchemaList
argument_list|)
decl_stmt|;
if|if
condition|(
name|el
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|XmlSchemaComplexType
name|schemaType
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|el
operator|.
name|getSchemaType
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|schemaType
operator|=
operator|(
name|XmlSchemaComplexType
operator|)
name|el
operator|.
name|getSchemaType
argument_list|()
expr_stmt|;
block|}
name|XmlSchemaSequence
name|seq
init|=
operator|(
name|XmlSchemaSequence
operator|)
name|schemaType
operator|.
name|getParticle
argument_list|()
decl_stmt|;
if|if
condition|(
name|seq
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|XmlSchemaSequenceMember
name|seqItem
range|:
name|seq
operator|.
name|getItems
argument_list|()
control|)
block|{
if|if
condition|(
name|seqItem
operator|instanceof
name|XmlSchemaElement
condition|)
block|{
name|el
operator|=
operator|(
name|XmlSchemaElement
operator|)
name|seqItem
expr_stmt|;
comment|// REVISIT, handle element ref's?
name|QName
name|typeName
init|=
name|el
operator|.
name|getSchemaTypeName
argument_list|()
decl_stmt|;
if|if
condition|(
name|typeName
operator|==
literal|null
condition|)
block|{
name|typeName
operator|=
name|el
operator|.
name|getQName
argument_list|()
expr_stmt|;
block|}
name|QName
name|idltype
init|=
name|getIdlType
argument_list|(
name|wsdlToCorbaBinding
argument_list|,
name|el
operator|.
name|getSchemaType
argument_list|()
argument_list|,
name|typeName
argument_list|,
name|el
operator|.
name|isNillable
argument_list|()
argument_list|)
decl_stmt|;
name|ParamType
name|paramtype
init|=
name|createParam
argument_list|(
name|wsdlToCorbaBinding
argument_list|,
literal|"in"
argument_list|,
name|el
operator|.
name|getQName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|,
name|idltype
argument_list|)
decl_stmt|;
if|if
condition|(
name|paramtype
operator|!=
literal|null
condition|)
block|{
name|inputs
operator|.
name|add
argument_list|(
name|paramtype
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
specifier|private
name|void
name|processInputParams
parameter_list|(
name|WSDLToCorbaBinding
name|wsdlToCorbaBinding
parameter_list|,
name|Operation
name|operation
parameter_list|,
name|SchemaCollection
name|xmlSchemaList
parameter_list|,
name|List
argument_list|<
name|ParamType
argument_list|>
name|inputs
parameter_list|)
throws|throws
name|Exception
block|{
name|Input
name|input
init|=
name|operation
operator|.
name|getInput
argument_list|()
decl_stmt|;
if|if
condition|(
name|input
operator|!=
literal|null
condition|)
block|{
name|Message
name|msg
init|=
name|input
operator|.
name|getMessage
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Part
argument_list|>
name|parts
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
name|msg
operator|.
name|getOrderedParts
argument_list|(
literal|null
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|Part
name|part
range|:
name|parts
control|)
block|{
name|XmlSchemaType
name|schemaType
init|=
literal|null
decl_stmt|;
name|boolean
name|isObjectRef
init|=
name|isObjectReference
argument_list|(
name|xmlSchemaList
argument_list|,
name|part
operator|.
name|getElementName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|part
operator|.
name|getElementName
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|isObjectRef
condition|)
block|{
name|XmlSchemaElement
name|el
init|=
name|getElement
argument_list|(
name|part
argument_list|,
name|xmlSchemaList
argument_list|)
decl_stmt|;
if|if
condition|(
name|el
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|el
operator|.
name|getSchemaType
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|schemaType
operator|=
name|el
operator|.
name|getSchemaType
argument_list|()
expr_stmt|;
block|}
name|QName
name|typeName
init|=
name|el
operator|.
name|getSchemaTypeName
argument_list|()
decl_stmt|;
if|if
condition|(
name|typeName
operator|==
literal|null
condition|)
block|{
name|typeName
operator|=
name|el
operator|.
name|getQName
argument_list|()
expr_stmt|;
block|}
name|QName
name|idltype
init|=
name|getIdlType
argument_list|(
name|wsdlToCorbaBinding
argument_list|,
name|schemaType
argument_list|,
name|typeName
argument_list|,
name|el
operator|.
name|isNillable
argument_list|()
argument_list|)
decl_stmt|;
name|ParamType
name|paramtype
init|=
name|createParam
argument_list|(
name|wsdlToCorbaBinding
argument_list|,
literal|"in"
argument_list|,
name|part
operator|.
name|getName
argument_list|()
argument_list|,
name|idltype
argument_list|)
decl_stmt|;
if|if
condition|(
name|paramtype
operator|!=
literal|null
condition|)
block|{
name|inputs
operator|.
name|add
argument_list|(
name|paramtype
argument_list|)
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|part
operator|.
name|getTypeName
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|schemaType
operator|=
name|getType
argument_list|(
name|part
argument_list|,
name|xmlSchemaList
argument_list|)
expr_stmt|;
name|QName
name|typeName
init|=
name|part
operator|.
name|getTypeName
argument_list|()
decl_stmt|;
if|if
condition|(
name|isObjectRef
condition|)
block|{
name|typeName
operator|=
name|part
operator|.
name|getElementName
argument_list|()
expr_stmt|;
block|}
name|QName
name|idltype
init|=
name|getIdlType
argument_list|(
name|wsdlToCorbaBinding
argument_list|,
name|schemaType
argument_list|,
name|typeName
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ParamType
name|paramtype
init|=
name|createParam
argument_list|(
name|wsdlToCorbaBinding
argument_list|,
literal|"in"
argument_list|,
name|part
operator|.
name|getName
argument_list|()
argument_list|,
name|idltype
argument_list|)
decl_stmt|;
if|if
condition|(
name|paramtype
operator|!=
literal|null
condition|)
block|{
name|inputs
operator|.
name|add
argument_list|(
name|paramtype
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
specifier|private
name|void
name|processWrappedOutputParams
parameter_list|(
name|WSDLToCorbaBinding
name|wsdlToCorbaBinding
parameter_list|,
name|Operation
name|operation
parameter_list|,
name|SchemaCollection
name|xmlSchemaList
parameter_list|,
name|List
argument_list|<
name|ParamType
argument_list|>
name|inputs
parameter_list|,
name|List
argument_list|<
name|ParamType
argument_list|>
name|outputs
parameter_list|)
throws|throws
name|Exception
block|{
name|Output
name|output
init|=
name|operation
operator|.
name|getOutput
argument_list|()
decl_stmt|;
if|if
condition|(
name|output
operator|!=
literal|null
condition|)
block|{
name|Message
name|msg
init|=
name|output
operator|.
name|getMessage
argument_list|()
decl_stmt|;
name|Part
name|part
init|=
operator|(
name|Part
operator|)
name|msg
operator|.
name|getOrderedParts
argument_list|(
literal|null
argument_list|)
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|XmlSchemaComplexType
name|schemaType
init|=
literal|null
decl_stmt|;
name|XmlSchemaElement
name|el
init|=
name|getElement
argument_list|(
name|part
argument_list|,
name|xmlSchemaList
argument_list|)
decl_stmt|;
if|if
condition|(
name|el
operator|==
literal|null
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|el
operator|.
name|getSchemaType
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|schemaType
operator|=
operator|(
name|XmlSchemaComplexType
operator|)
name|el
operator|.
name|getSchemaType
argument_list|()
expr_stmt|;
block|}
name|XmlSchemaSequence
name|seq
init|=
operator|(
name|XmlSchemaSequence
operator|)
name|schemaType
operator|.
name|getParticle
argument_list|()
decl_stmt|;
if|if
condition|(
name|seq
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|XmlSchemaSequenceMember
name|seqMember
range|:
name|seq
operator|.
name|getItems
argument_list|()
control|)
block|{
if|if
condition|(
name|seqMember
operator|instanceof
name|XmlSchemaElement
condition|)
block|{
name|el
operator|=
operator|(
name|XmlSchemaElement
operator|)
name|seqMember
expr_stmt|;
name|processWrappedOutputParam
argument_list|(
name|wsdlToCorbaBinding
argument_list|,
name|el
argument_list|,
name|inputs
argument_list|,
name|outputs
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
specifier|private
name|void
name|processWrappedOutputParam
parameter_list|(
name|WSDLToCorbaBinding
name|wsdlToCorbaBinding
parameter_list|,
name|XmlSchemaElement
name|el
parameter_list|,
name|List
argument_list|<
name|ParamType
argument_list|>
name|inputs
parameter_list|,
name|List
argument_list|<
name|ParamType
argument_list|>
name|outputs
parameter_list|)
throws|throws
name|Exception
block|{
name|ParamType
name|paramtype
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|inputs
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|inputs
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|el
operator|.
name|getQName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
condition|)
block|{
name|inputs
operator|.
name|remove
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|QName
name|typeName
init|=
name|el
operator|.
name|getSchemaTypeName
argument_list|()
decl_stmt|;
if|if
condition|(
name|typeName
operator|==
literal|null
condition|)
block|{
name|typeName
operator|=
name|el
operator|.
name|getQName
argument_list|()
expr_stmt|;
block|}
name|QName
name|idltype
init|=
name|getIdlType
argument_list|(
name|wsdlToCorbaBinding
argument_list|,
name|el
operator|.
name|getSchemaType
argument_list|()
argument_list|,
name|typeName
argument_list|,
name|el
operator|.
name|isNillable
argument_list|()
argument_list|)
decl_stmt|;
name|paramtype
operator|=
name|createParam
argument_list|(
name|wsdlToCorbaBinding
argument_list|,
literal|"inout"
argument_list|,
name|el
operator|.
name|getQName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|,
name|idltype
argument_list|)
expr_stmt|;
if|if
condition|(
name|paramtype
operator|!=
literal|null
condition|)
block|{
name|inputs
operator|.
name|add
argument_list|(
name|paramtype
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|paramtype
operator|==
literal|null
condition|)
block|{
name|QName
name|typeName
init|=
name|el
operator|.
name|getSchemaTypeName
argument_list|()
decl_stmt|;
if|if
condition|(
name|typeName
operator|==
literal|null
condition|)
block|{
name|typeName
operator|=
name|el
operator|.
name|getQName
argument_list|()
expr_stmt|;
block|}
name|QName
name|idltype
init|=
name|getIdlType
argument_list|(
name|wsdlToCorbaBinding
argument_list|,
name|el
operator|.
name|getSchemaType
argument_list|()
argument_list|,
name|typeName
argument_list|,
name|el
operator|.
name|isNillable
argument_list|()
argument_list|)
decl_stmt|;
name|paramtype
operator|=
name|createParam
argument_list|(
name|wsdlToCorbaBinding
argument_list|,
literal|"out"
argument_list|,
name|el
operator|.
name|getQName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|,
name|idltype
argument_list|)
expr_stmt|;
if|if
condition|(
name|paramtype
operator|!=
literal|null
condition|)
block|{
name|outputs
operator|.
name|add
argument_list|(
name|paramtype
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|processOutputParams
parameter_list|(
name|WSDLToCorbaBinding
name|wsdlToCorbaBinding
parameter_list|,
name|Operation
name|operation
parameter_list|,
name|SchemaCollection
name|xmlSchemaList
parameter_list|,
name|List
argument_list|<
name|ParamType
argument_list|>
name|inputs
parameter_list|,
name|List
argument_list|<
name|ParamType
argument_list|>
name|outputs
parameter_list|)
throws|throws
name|Exception
block|{
name|Output
name|output
init|=
name|operation
operator|.
name|getOutput
argument_list|()
decl_stmt|;
if|if
condition|(
name|output
operator|!=
literal|null
condition|)
block|{
name|Message
name|msg
init|=
name|output
operator|.
name|getMessage
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Part
argument_list|>
name|parts
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
name|msg
operator|.
name|getOrderedParts
argument_list|(
literal|null
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|Part
name|part
range|:
name|parts
control|)
block|{
name|XmlSchemaType
name|schemaType
init|=
literal|null
decl_stmt|;
comment|// check if in input list
name|String
name|mode
init|=
literal|"out"
decl_stmt|;
name|ParamType
name|paramtype
init|=
literal|null
decl_stmt|;
name|boolean
name|isObjectRef
init|=
name|isObjectReference
argument_list|(
name|xmlSchemaList
argument_list|,
name|part
operator|.
name|getElementName
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|inputs
operator|.
name|size
argument_list|()
condition|;
name|x
operator|++
control|)
block|{
name|paramtype
operator|=
literal|null
expr_stmt|;
name|ParamType
name|d2
init|=
name|inputs
operator|.
name|get
argument_list|(
name|x
argument_list|)
decl_stmt|;
if|if
condition|(
name|part
operator|.
name|getElementName
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|isObjectRef
condition|)
block|{
name|XmlSchemaElement
name|el
init|=
name|getElement
argument_list|(
name|part
argument_list|,
name|xmlSchemaList
argument_list|)
decl_stmt|;
if|if
condition|(
name|el
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|el
operator|.
name|getSchemaType
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|schemaType
operator|=
name|el
operator|.
name|getSchemaType
argument_list|()
expr_stmt|;
block|}
name|QName
name|typeName
init|=
name|el
operator|.
name|getSchemaTypeName
argument_list|()
decl_stmt|;
if|if
condition|(
name|typeName
operator|==
literal|null
condition|)
block|{
name|typeName
operator|=
name|el
operator|.
name|getQName
argument_list|()
expr_stmt|;
block|}
name|QName
name|idltype
init|=
name|getIdlType
argument_list|(
name|wsdlToCorbaBinding
argument_list|,
name|schemaType
argument_list|,
name|typeName
argument_list|,
name|el
operator|.
name|isNillable
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|d2
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|part
operator|.
name|getName
argument_list|()
argument_list|)
operator|)
operator|&&
operator|(
name|d2
operator|.
name|getIdltype
argument_list|()
operator|.
name|equals
argument_list|(
name|idltype
argument_list|)
operator|)
condition|)
block|{
name|inputs
operator|.
name|remove
argument_list|(
name|x
argument_list|)
expr_stmt|;
name|paramtype
operator|=
name|createParam
argument_list|(
name|wsdlToCorbaBinding
argument_list|,
literal|"inout"
argument_list|,
name|part
operator|.
name|getName
argument_list|()
argument_list|,
name|idltype
argument_list|)
expr_stmt|;
name|inputs
operator|.
name|add
argument_list|(
name|paramtype
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|schemaType
operator|=
name|getType
argument_list|(
name|part
argument_list|,
name|xmlSchemaList
argument_list|)
expr_stmt|;
name|QName
name|typeName
init|=
name|part
operator|.
name|getTypeName
argument_list|()
decl_stmt|;
if|if
condition|(
name|isObjectRef
condition|)
block|{
name|typeName
operator|=
name|part
operator|.
name|getElementName
argument_list|()
expr_stmt|;
block|}
name|QName
name|idltype
init|=
name|getIdlType
argument_list|(
name|wsdlToCorbaBinding
argument_list|,
name|schemaType
argument_list|,
name|typeName
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|d2
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|part
operator|.
name|getName
argument_list|()
argument_list|)
operator|)
operator|&&
operator|(
name|d2
operator|.
name|getIdltype
argument_list|()
operator|.
name|equals
argument_list|(
name|idltype
argument_list|)
operator|)
condition|)
block|{
name|inputs
operator|.
name|remove
argument_list|(
name|x
argument_list|)
expr_stmt|;
name|paramtype
operator|=
name|createParam
argument_list|(
name|wsdlToCorbaBinding
argument_list|,
literal|"inout"
argument_list|,
name|part
operator|.
name|getName
argument_list|()
argument_list|,
name|idltype
argument_list|)
expr_stmt|;
name|inputs
operator|.
name|add
argument_list|(
name|paramtype
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|paramtype
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|part
operator|.
name|getElementName
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|isObjectRef
condition|)
block|{
name|XmlSchemaElement
name|el
init|=
name|getElement
argument_list|(
name|part
argument_list|,
name|xmlSchemaList
argument_list|)
decl_stmt|;
name|QName
name|typeName
init|=
name|el
operator|.
name|getSchemaTypeName
argument_list|()
decl_stmt|;
if|if
condition|(
name|typeName
operator|==
literal|null
condition|)
block|{
name|typeName
operator|=
name|el
operator|.
name|getQName
argument_list|()
expr_stmt|;
block|}
name|QName
name|idltype
init|=
name|getIdlType
argument_list|(
name|wsdlToCorbaBinding
argument_list|,
name|schemaType
argument_list|,
name|typeName
argument_list|,
name|el
operator|.
name|isNillable
argument_list|()
argument_list|)
decl_stmt|;
name|paramtype
operator|=
name|createParam
argument_list|(
name|wsdlToCorbaBinding
argument_list|,
name|mode
argument_list|,
name|part
operator|.
name|getName
argument_list|()
argument_list|,
name|idltype
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QName
name|typeName
init|=
name|part
operator|.
name|getTypeName
argument_list|()
decl_stmt|;
if|if
condition|(
name|isObjectRef
condition|)
block|{
name|typeName
operator|=
name|part
operator|.
name|getElementName
argument_list|()
expr_stmt|;
block|}
name|QName
name|idltype
init|=
name|getIdlType
argument_list|(
name|wsdlToCorbaBinding
argument_list|,
name|schemaType
argument_list|,
name|typeName
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|paramtype
operator|=
name|createParam
argument_list|(
name|wsdlToCorbaBinding
argument_list|,
name|mode
argument_list|,
name|part
operator|.
name|getName
argument_list|()
argument_list|,
name|idltype
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|paramtype
operator|!=
literal|null
condition|)
block|{
name|outputs
operator|.
name|add
argument_list|(
name|paramtype
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
specifier|private
name|void
name|processReturnParams
parameter_list|(
name|List
argument_list|<
name|ParamType
argument_list|>
name|outputs
parameter_list|,
name|List
argument_list|<
name|ArgType
argument_list|>
name|returns
parameter_list|)
block|{
if|if
condition|(
operator|!
name|outputs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|ParamType
name|d2
init|=
name|outputs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|d2
operator|.
name|getMode
argument_list|()
operator|.
name|value
argument_list|()
operator|.
name|equals
argument_list|(
literal|"out"
argument_list|)
condition|)
block|{
name|ArgType
name|argType
init|=
operator|new
name|ArgType
argument_list|()
decl_stmt|;
name|argType
operator|.
name|setName
argument_list|(
name|d2
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|argType
operator|.
name|setIdltype
argument_list|(
name|d2
operator|.
name|getIdltype
argument_list|()
argument_list|)
expr_stmt|;
name|returns
operator|.
name|add
argument_list|(
name|argType
argument_list|)
expr_stmt|;
name|outputs
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|orderParameters
parameter_list|(
name|List
argument_list|<
name|ParamType
argument_list|>
name|inputs
parameter_list|,
name|List
argument_list|<
name|ParamType
argument_list|>
name|outputs
parameter_list|,
name|boolean
name|simpleOrdering
parameter_list|)
block|{
name|ListIterator
argument_list|<
name|ParamType
argument_list|>
name|inputit
init|=
name|inputs
operator|.
name|listIterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|inputit
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|ParamType
name|d2
init|=
name|inputit
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|d2
operator|.
name|getMode
argument_list|()
operator|.
name|value
argument_list|()
operator|.
name|equals
argument_list|(
literal|"inout"
argument_list|)
condition|)
block|{
name|ListIterator
argument_list|<
name|ParamType
argument_list|>
name|it
init|=
name|outputs
operator|.
name|listIterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|ParamType
name|d3
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|d3
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|d2
operator|.
name|getName
argument_list|()
argument_list|)
operator|&&
operator|(
operator|!
name|simpleOrdering
operator|)
operator|&&
operator|(
operator|!
name|d3
operator|.
name|getMode
argument_list|()
operator|.
name|value
argument_list|()
operator|.
name|equals
argument_list|(
literal|"inout"
argument_list|)
operator|)
condition|)
block|{
comment|// the in/outs are in a different order in the
comment|// output than the input
comment|// we'll try and use the input oder for the INOUT's,
comment|// but also try and
comment|// maintain some sort of ordering for the OUT's
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
name|inputit
operator|.
name|previous
argument_list|()
expr_stmt|;
name|inputit
operator|.
name|add
argument_list|(
name|d3
argument_list|)
expr_stmt|;
name|inputit
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
for|for
control|(
name|ParamType
name|d3
range|:
name|outputs
control|)
block|{
name|inputs
operator|.
name|add
argument_list|(
name|d3
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|XmlSchemaType
name|getType
parameter_list|(
name|Part
name|part
parameter_list|,
name|SchemaCollection
name|xmlSchemaList
parameter_list|)
throws|throws
name|Exception
block|{
name|XmlSchemaType
name|schemaType
init|=
literal|null
decl_stmt|;
for|for
control|(
name|XmlSchema
name|xmlSchema
range|:
name|xmlSchemaList
operator|.
name|getXmlSchemas
argument_list|()
control|)
block|{
if|if
condition|(
name|part
operator|.
name|getTypeName
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|schemaType
operator|=
name|findSchemaType
argument_list|(
name|xmlSchema
argument_list|,
name|part
operator|.
name|getTypeName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|schemaType
operator|!=
literal|null
condition|)
block|{
return|return
name|schemaType
return|;
block|}
block|}
block|}
return|return
name|schemaType
return|;
block|}
comment|// This willl search the current schemas and any included
comment|// schemas for the schema type.
specifier|private
specifier|static
name|XmlSchemaType
name|findSchemaType
parameter_list|(
name|XmlSchema
name|xmlSchema
parameter_list|,
name|QName
name|typeName
parameter_list|)
block|{
name|XmlSchemaType
name|schemaType
init|=
name|xmlSchema
operator|.
name|getTypeByName
argument_list|(
name|typeName
argument_list|)
decl_stmt|;
comment|// Endpoint reference types will give a null schemaType
comment|// here, so we need to
comment|// go through the list of imports to find the definition for
comment|// an Endpoint
comment|// reference type.
if|if
condition|(
name|schemaType
operator|==
literal|null
condition|)
block|{
for|for
control|(
name|XmlSchemaExternal
name|ext
range|:
name|xmlSchema
operator|.
name|getExternals
argument_list|()
control|)
block|{
if|if
condition|(
name|ext
operator|instanceof
name|XmlSchemaImport
condition|)
block|{
name|XmlSchemaImport
name|xmlImport
init|=
operator|(
name|XmlSchemaImport
operator|)
name|ext
decl_stmt|;
if|if
condition|(
name|xmlImport
operator|.
name|getNamespace
argument_list|()
operator|.
name|equals
argument_list|(
name|typeName
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
condition|)
block|{
name|XmlSchema
name|importSchema
init|=
name|xmlImport
operator|.
name|getSchema
argument_list|()
decl_stmt|;
name|schemaType
operator|=
name|importSchema
operator|.
name|getTypeByName
argument_list|(
name|typeName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|schemaType
operator|=
name|findSchemaType
argument_list|(
name|ext
operator|.
name|getSchema
argument_list|()
argument_list|,
name|typeName
argument_list|)
expr_stmt|;
if|if
condition|(
name|schemaType
operator|!=
literal|null
condition|)
block|{
return|return
name|schemaType
return|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|schemaType
operator|!=
literal|null
condition|)
block|{
return|return
name|schemaType
return|;
block|}
block|}
return|return
name|schemaType
return|;
block|}
specifier|private
specifier|static
name|XmlSchemaElement
name|getElement
parameter_list|(
name|Part
name|part
parameter_list|,
name|SchemaCollection
name|xmlSchemaList
parameter_list|)
throws|throws
name|Exception
block|{
name|XmlSchemaElement
name|schemaElement
init|=
literal|null
decl_stmt|;
for|for
control|(
name|XmlSchema
name|xmlSchema
range|:
name|xmlSchemaList
operator|.
name|getXmlSchemas
argument_list|()
control|)
block|{
if|if
condition|(
name|part
operator|.
name|getElementName
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|schemaElement
operator|=
name|findElement
argument_list|(
name|xmlSchema
argument_list|,
name|part
operator|.
name|getElementName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|schemaElement
operator|!=
literal|null
condition|)
block|{
return|return
name|schemaElement
return|;
block|}
block|}
block|}
return|return
name|schemaElement
return|;
block|}
comment|// Will check if the schema includes other schemas.
specifier|private
specifier|static
name|XmlSchemaElement
name|findElement
parameter_list|(
name|XmlSchema
name|xmlSchema
parameter_list|,
name|QName
name|elName
parameter_list|)
block|{
name|XmlSchemaElement
name|schemaElement
init|=
literal|null
decl_stmt|;
name|schemaElement
operator|=
name|xmlSchema
operator|.
name|getElementByName
argument_list|(
name|elName
argument_list|)
expr_stmt|;
if|if
condition|(
name|schemaElement
operator|==
literal|null
condition|)
block|{
name|String
name|prefix
init|=
name|definition
operator|.
name|getPrefix
argument_list|(
name|elName
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
decl_stmt|;
name|QName
name|name
init|=
operator|new
name|QName
argument_list|(
name|elName
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
name|prefix
operator|+
literal|":"
operator|+
name|elName
operator|.
name|getLocalPart
argument_list|()
argument_list|,
name|prefix
argument_list|)
decl_stmt|;
name|schemaElement
operator|=
name|xmlSchema
operator|.
name|getElementByName
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|schemaElement
operator|!=
literal|null
condition|)
block|{
return|return
name|schemaElement
return|;
block|}
else|else
block|{
for|for
control|(
name|XmlSchemaExternal
name|ext
range|:
name|xmlSchema
operator|.
name|getExternals
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
operator|(
name|ext
operator|instanceof
name|XmlSchemaImport
operator|)
condition|)
block|{
name|schemaElement
operator|=
name|findElement
argument_list|(
name|ext
operator|.
name|getSchema
argument_list|()
argument_list|,
name|elName
argument_list|)
expr_stmt|;
if|if
condition|(
name|schemaElement
operator|!=
literal|null
condition|)
block|{
return|return
name|schemaElement
return|;
block|}
block|}
block|}
block|}
return|return
name|schemaElement
return|;
block|}
specifier|private
specifier|static
name|QName
name|getIdlType
parameter_list|(
name|WSDLToCorbaBinding
name|wsdlToCorbaBinding
parameter_list|,
name|XmlSchemaType
name|schemaType
parameter_list|,
name|QName
name|typeName
parameter_list|,
name|boolean
name|nill
parameter_list|)
throws|throws
name|Exception
block|{
name|QName
name|idltype
init|=
literal|null
decl_stmt|;
name|CorbaType
name|corbaTypeImpl
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|schemaType
operator|==
literal|null
condition|)
block|{
name|corbaTypeImpl
operator|=
operator|(
name|CorbaType
operator|)
name|WSDLToCorbaHelper
operator|.
name|CORBAPRIMITIVEMAP
operator|.
name|get
argument_list|(
name|typeName
argument_list|)
expr_stmt|;
if|if
condition|(
name|nill
condition|)
block|{
name|QName
name|qname
init|=
name|corbaTypeImpl
operator|.
name|getQName
argument_list|()
decl_stmt|;
name|idltype
operator|=
name|wsdlToCorbaBinding
operator|.
name|getHelper
argument_list|()
operator|.
name|createQNameCorbaNamespace
argument_list|(
name|qname
operator|.
name|getLocalPart
argument_list|()
operator|+
literal|"_nil"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|corbaTypeImpl
operator|==
literal|null
condition|)
block|{
name|XmlSchemaObject
name|schemaObj
init|=
name|getSchemaObject
argument_list|(
name|wsdlToCorbaBinding
argument_list|,
name|typeName
argument_list|)
decl_stmt|;
name|XmlSchemaAnnotation
name|annotation
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|schemaObj
operator|instanceof
name|XmlSchemaElement
condition|)
block|{
name|XmlSchemaElement
name|el
init|=
operator|(
name|XmlSchemaElement
operator|)
name|schemaObj
decl_stmt|;
name|schemaType
operator|=
name|el
operator|.
name|getSchemaType
argument_list|()
expr_stmt|;
name|annotation
operator|=
operator|(
operator|(
name|XmlSchemaElement
operator|)
name|schemaObj
operator|)
operator|.
name|getAnnotation
argument_list|()
expr_stmt|;
block|}
name|idltype
operator|=
name|getSchemaTypeName
argument_list|(
name|wsdlToCorbaBinding
argument_list|,
name|schemaType
argument_list|,
name|annotation
argument_list|,
name|typeName
argument_list|,
name|nill
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|idltype
operator|=
name|corbaTypeImpl
operator|.
name|getQName
argument_list|()
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
comment|// We need to get annotation information for the schema type we are
comment|// about to pass in.
comment|// This is used to produce the correct object reference type.
name|XmlSchemaElement
name|schemaObj
init|=
name|getSchemaObject
argument_list|(
name|wsdlToCorbaBinding
argument_list|,
name|typeName
argument_list|)
decl_stmt|;
name|XmlSchemaAnnotation
name|annotation
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|schemaObj
operator|!=
literal|null
condition|)
block|{
name|annotation
operator|=
name|schemaObj
operator|.
name|getAnnotation
argument_list|()
expr_stmt|;
block|}
name|idltype
operator|=
name|getSchemaTypeName
argument_list|(
name|wsdlToCorbaBinding
argument_list|,
name|schemaType
argument_list|,
name|annotation
argument_list|,
name|typeName
argument_list|,
name|nill
argument_list|)
expr_stmt|;
block|}
return|return
name|idltype
return|;
block|}
specifier|private
specifier|static
name|XmlSchemaElement
name|getSchemaObject
parameter_list|(
name|WSDLToCorbaBinding
name|wsdlToCorbaBinding
parameter_list|,
name|QName
name|typeName
parameter_list|)
block|{
name|SchemaCollection
name|schemaList
init|=
name|wsdlToCorbaBinding
operator|.
name|getHelper
argument_list|()
operator|.
name|getXMLSchemaList
argument_list|()
decl_stmt|;
for|for
control|(
name|XmlSchema
name|s
range|:
name|schemaList
operator|.
name|getXmlSchemas
argument_list|()
control|)
block|{
name|XmlSchemaElement
name|e
init|=
name|s
operator|.
name|getElementByName
argument_list|(
name|typeName
argument_list|)
decl_stmt|;
if|if
condition|(
name|e
operator|!=
literal|null
condition|)
block|{
return|return
name|e
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|private
specifier|static
name|QName
name|getSchemaTypeName
parameter_list|(
name|WSDLToCorbaBinding
name|wsdlToCorbaBinding
parameter_list|,
name|XmlSchemaType
name|schemaType
parameter_list|,
name|XmlSchemaAnnotation
name|annotation
parameter_list|,
name|QName
name|typeName
parameter_list|,
name|boolean
name|nill
parameter_list|)
throws|throws
name|Exception
block|{
name|QName
name|idltype
init|=
literal|null
decl_stmt|;
name|CorbaType
name|corbaTypeImpl
init|=
literal|null
decl_stmt|;
name|corbaTypeImpl
operator|=
name|wsdlToCorbaBinding
operator|.
name|getHelper
argument_list|()
operator|.
name|convertSchemaToCorbaType
argument_list|(
name|schemaType
argument_list|,
name|typeName
argument_list|,
literal|null
argument_list|,
name|annotation
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|corbaTypeImpl
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Couldn't convert schema type to corba type : "
operator|+
name|typeName
argument_list|)
throw|;
block|}
else|else
block|{
if|if
condition|(
name|nill
condition|)
block|{
name|QName
name|qname
init|=
name|corbaTypeImpl
operator|.
name|getQName
argument_list|()
decl_stmt|;
name|idltype
operator|=
name|wsdlToCorbaBinding
operator|.
name|getHelper
argument_list|()
operator|.
name|createQNameCorbaNamespace
argument_list|(
name|qname
operator|.
name|getLocalPart
argument_list|()
operator|+
literal|"_nil"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|idltype
operator|=
name|corbaTypeImpl
operator|.
name|getQName
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|idltype
return|;
block|}
specifier|private
specifier|static
name|ParamType
name|createParam
parameter_list|(
name|WSDLToCorbaBinding
name|wsdlToCorbaBinding
parameter_list|,
name|String
name|mode
parameter_list|,
name|String
name|name
parameter_list|,
name|QName
name|idltype
parameter_list|)
throws|throws
name|Exception
block|{
name|ParamType
name|paramtype
init|=
operator|new
name|ParamType
argument_list|()
decl_stmt|;
name|ModeType
name|modeType
init|=
name|ModeType
operator|.
name|fromValue
argument_list|(
name|mode
argument_list|)
decl_stmt|;
name|paramtype
operator|.
name|setName
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|paramtype
operator|.
name|setMode
argument_list|(
name|modeType
argument_list|)
expr_stmt|;
name|paramtype
operator|.
name|setIdltype
argument_list|(
name|idltype
argument_list|)
expr_stmt|;
return|return
name|paramtype
return|;
block|}
specifier|private
name|boolean
name|isWrappedOperation
parameter_list|(
name|Operation
name|op
parameter_list|,
name|SchemaCollection
name|xmlSchemaList
parameter_list|)
throws|throws
name|Exception
block|{
name|Message
name|inputMessage
init|=
name|op
operator|.
name|getInput
argument_list|()
operator|.
name|getMessage
argument_list|()
decl_stmt|;
name|Message
name|outputMessage
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|op
operator|.
name|getOutput
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|outputMessage
operator|=
name|op
operator|.
name|getOutput
argument_list|()
operator|.
name|getMessage
argument_list|()
expr_stmt|;
block|}
name|boolean
name|passedRule
init|=
literal|true
decl_stmt|;
comment|// RULE No.1:
comment|// The operation's input and output message (if present) each contain
comment|// only a single part
comment|// input message must exist
if|if
condition|(
name|inputMessage
operator|==
literal|null
operator|||
name|inputMessage
operator|.
name|getParts
argument_list|()
operator|.
name|size
argument_list|()
operator|!=
literal|1
operator|||
operator|(
name|outputMessage
operator|!=
literal|null
operator|&&
name|outputMessage
operator|.
name|getParts
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|1
operator|)
condition|)
block|{
name|passedRule
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|passedRule
condition|)
block|{
return|return
literal|false
return|;
block|}
name|XmlSchemaElement
name|inputEl
init|=
literal|null
decl_stmt|;
name|XmlSchemaElement
name|outputEl
init|=
literal|null
decl_stmt|;
comment|// RULE No.2:
comment|// The input message part refers to a global element decalration whose
comment|// localname
comment|// is equal to the operation name
name|Part
name|inputPart
init|=
operator|(
name|Part
operator|)
name|inputMessage
operator|.
name|getParts
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|inputPart
operator|.
name|getElementName
argument_list|()
operator|==
literal|null
condition|)
block|{
name|passedRule
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|QName
name|inputElementName
init|=
name|inputPart
operator|.
name|getElementName
argument_list|()
decl_stmt|;
name|inputEl
operator|=
name|getElement
argument_list|(
name|inputPart
argument_list|,
name|xmlSchemaList
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputEl
operator|==
literal|null
operator|||
operator|!
name|op
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|inputElementName
operator|.
name|getLocalPart
argument_list|()
argument_list|)
condition|)
block|{
name|passedRule
operator|=
literal|false
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|passedRule
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// RULE No.3:
comment|// The output message part refers to a global element declaration
name|Part
name|outputPart
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|outputMessage
operator|!=
literal|null
operator|&&
name|outputMessage
operator|.
name|getParts
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|outputPart
operator|=
operator|(
name|Part
operator|)
name|outputMessage
operator|.
name|getParts
argument_list|()
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|outputPart
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|(
name|outputPart
operator|.
name|getElementName
argument_list|()
operator|==
literal|null
operator|)
operator|||
name|getElement
argument_list|(
name|outputPart
argument_list|,
name|xmlSchemaList
argument_list|)
operator|==
literal|null
condition|)
block|{
name|passedRule
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|outputEl
operator|=
name|getElement
argument_list|(
name|outputPart
argument_list|,
name|xmlSchemaList
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|passedRule
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// RULE No.4 and No5:
comment|// wrapper element should be pure complex type
comment|// Now lets see if we have any attributes...
comment|// This should probably look at the restricted and substitute types too.
name|XmlSchemaComplexType
name|xsct
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|inputEl
operator|.
name|getSchemaType
argument_list|()
operator|instanceof
name|XmlSchemaComplexType
condition|)
block|{
name|xsct
operator|=
operator|(
name|XmlSchemaComplexType
operator|)
name|inputEl
operator|.
name|getSchemaType
argument_list|()
expr_stmt|;
if|if
condition|(
name|hasAttributes
argument_list|(
name|xsct
argument_list|)
operator|||
operator|!
name|isWrappableSequence
argument_list|(
name|xsct
argument_list|)
condition|)
block|{
name|passedRule
operator|=
literal|false
expr_stmt|;
block|}
block|}
else|else
block|{
name|passedRule
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|passedRule
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|outputMessage
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|outputEl
operator|!=
literal|null
operator|&&
name|outputEl
operator|.
name|getSchemaType
argument_list|()
operator|instanceof
name|XmlSchemaComplexType
condition|)
block|{
name|xsct
operator|=
operator|(
name|XmlSchemaComplexType
operator|)
name|outputEl
operator|.
name|getSchemaType
argument_list|()
expr_stmt|;
if|if
condition|(
name|hasAttributes
argument_list|(
name|xsct
argument_list|)
operator|||
operator|!
name|isWrappableSequence
argument_list|(
name|xsct
argument_list|)
condition|)
block|{
name|passedRule
operator|=
literal|false
expr_stmt|;
block|}
block|}
else|else
block|{
name|passedRule
operator|=
literal|false
expr_stmt|;
block|}
block|}
return|return
name|passedRule
return|;
block|}
specifier|private
name|boolean
name|hasAttributes
parameter_list|(
name|XmlSchemaComplexType
name|complexType
parameter_list|)
block|{
comment|// Now lets see if we have any attributes...
comment|// This should probably look at the restricted and substitute types too.
return|return
name|complexType
operator|.
name|getAnyAttribute
argument_list|()
operator|!=
literal|null
operator|||
name|complexType
operator|.
name|getAttributes
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
return|;
block|}
specifier|private
name|boolean
name|isWrappableSequence
parameter_list|(
name|XmlSchemaComplexType
name|type
parameter_list|)
block|{
if|if
condition|(
name|type
operator|.
name|getParticle
argument_list|()
operator|instanceof
name|XmlSchemaSequence
condition|)
block|{
name|XmlSchemaSequence
name|seq
init|=
operator|(
name|XmlSchemaSequence
operator|)
name|type
operator|.
name|getParticle
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|XmlSchemaSequenceMember
argument_list|>
name|items
init|=
name|seq
operator|.
name|getItems
argument_list|()
decl_stmt|;
for|for
control|(
name|XmlSchemaSequenceMember
name|member
range|:
name|items
control|)
block|{
if|if
condition|(
operator|!
operator|(
name|member
operator|instanceof
name|XmlSchemaElement
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|getParticle
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|isObjectReference
parameter_list|(
name|SchemaCollection
name|schemaList
parameter_list|,
name|QName
name|name
parameter_list|)
block|{
for|for
control|(
name|XmlSchema
name|schema
range|:
name|schemaList
operator|.
name|getXmlSchemas
argument_list|()
control|)
block|{
name|XmlSchemaElement
name|element
init|=
name|schema
operator|.
name|getElementByName
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|element
operator|!=
literal|null
condition|)
block|{
name|XmlSchemaAnnotation
name|annotation
init|=
name|element
operator|.
name|getAnnotation
argument_list|()
decl_stmt|;
if|if
condition|(
name|annotation
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|XmlSchemaAnnotationItem
argument_list|>
name|annotationColl
init|=
name|annotation
operator|.
name|getItems
argument_list|()
decl_stmt|;
for|for
control|(
name|XmlSchemaAnnotationItem
name|item
range|:
name|annotationColl
control|)
block|{
if|if
condition|(
name|item
operator|instanceof
name|XmlSchemaAppInfo
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

