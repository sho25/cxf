begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|corba
operator|.
name|common
operator|.
name|idltypes
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ListIterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Stack
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_class
specifier|public
specifier|abstract
class|class
name|IdlScopeBase
extends|extends
name|IdlDefnImplBase
block|{
specifier|private
name|List
argument_list|<
name|Object
argument_list|>
name|defns
decl_stmt|;
specifier|private
name|Stack
argument_list|<
name|Object
argument_list|>
name|hold
decl_stmt|;
specifier|private
name|List
argument_list|<
name|Object
argument_list|>
name|park
decl_stmt|;
specifier|protected
name|IdlScopeBase
parameter_list|(
name|IdlScopeBase
name|parent
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|super
argument_list|(
name|parent
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|defns
operator|=
operator|new
name|Vector
argument_list|<
name|Object
argument_list|>
argument_list|()
expr_stmt|;
name|hold
operator|=
operator|new
name|Stack
argument_list|<
name|Object
argument_list|>
argument_list|()
expr_stmt|;
name|park
operator|=
operator|new
name|Vector
argument_list|<
name|Object
argument_list|>
argument_list|()
expr_stmt|;
block|}
specifier|public
name|IdlDefn
name|addToScope
parameter_list|(
name|IdlDefn
name|def
parameter_list|)
block|{
name|String
name|nm
init|=
name|def
operator|.
name|localName
argument_list|()
decl_stmt|;
name|IdlDefn
name|result
init|=
name|lookup
argument_list|(
name|nm
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
name|defns
operator|.
name|add
argument_list|(
name|def
argument_list|)
expr_stmt|;
name|result
operator|=
name|def
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|public
name|IdlDefn
name|holdForScope
parameter_list|(
name|IdlDefn
name|def
parameter_list|)
block|{
name|hold
operator|.
name|push
argument_list|(
name|def
argument_list|)
expr_stmt|;
return|return
name|def
return|;
block|}
specifier|public
name|IdlDefn
name|promoteHeldToScope
parameter_list|()
block|{
name|IdlDefn
name|result
init|=
operator|(
name|IdlDefn
operator|)
name|hold
operator|.
name|pop
argument_list|()
decl_stmt|;
name|defns
operator|.
name|add
argument_list|(
name|result
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
specifier|public
name|IdlDefn
name|parkHeld
parameter_list|()
block|{
name|IdlDefn
name|result
init|=
operator|(
name|IdlDefn
operator|)
name|hold
operator|.
name|pop
argument_list|()
decl_stmt|;
name|park
operator|.
name|add
argument_list|(
name|result
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
specifier|public
name|IdlDefn
name|lookup
parameter_list|(
name|String
name|nm
parameter_list|)
block|{
return|return
name|lookup
argument_list|(
name|nm
argument_list|,
literal|false
argument_list|)
return|;
block|}
specifier|public
name|IdlDefn
name|lookup
parameter_list|(
name|String
name|nm
parameter_list|,
name|boolean
name|undefined
parameter_list|)
block|{
name|IdlDefn
name|result
init|=
literal|null
decl_stmt|;
name|Iterator
name|it
init|=
name|park
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|IdlDefn
name|nextDef
init|=
operator|(
name|IdlDefn
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|nextDef
operator|.
name|localName
argument_list|()
operator|.
name|equals
argument_list|(
name|nm
argument_list|)
condition|)
block|{
name|result
operator|=
name|nextDef
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
name|it
operator|=
name|hold
operator|.
name|iterator
argument_list|()
expr_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|IdlDefn
name|nextDef
init|=
operator|(
name|IdlDefn
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|nextDef
operator|.
name|localName
argument_list|()
operator|.
name|equals
argument_list|(
name|nm
argument_list|)
condition|)
block|{
name|result
operator|=
name|nextDef
expr_stmt|;
break|break;
block|}
block|}
block|}
if|if
condition|(
name|undefined
condition|)
block|{
return|return
name|result
return|;
block|}
name|it
operator|=
name|defns
operator|.
name|iterator
argument_list|()
expr_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|IdlDefn
name|nextDef
init|=
operator|(
name|IdlDefn
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|nextDef
operator|.
name|localName
argument_list|()
operator|.
name|equals
argument_list|(
name|nm
argument_list|)
condition|)
block|{
name|result
operator|=
name|nextDef
expr_stmt|;
break|break;
block|}
block|}
return|return
name|result
return|;
block|}
specifier|public
name|IdlDefn
name|lookup
parameter_list|(
name|IdlScopedName
name|name
parameter_list|)
block|{
return|return
name|lookup
argument_list|(
name|name
argument_list|,
literal|false
argument_list|)
return|;
block|}
specifier|public
name|IdlDefn
name|lookup
parameter_list|(
name|IdlScopedName
name|name
parameter_list|,
name|boolean
name|undefined
parameter_list|)
block|{
name|IdlScopeBase
name|scope
init|=
name|this
decl_stmt|;
name|String
name|parents
index|[]
init|=
name|name
operator|.
name|parentNames
argument_list|()
decl_stmt|;
if|if
condition|(
name|parents
operator|!=
literal|null
condition|)
block|{
name|IdlDefn
name|defn
init|=
name|lookup
argument_list|(
name|parents
argument_list|,
name|undefined
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|defn
operator|instanceof
name|IdlScopeBase
operator|)
condition|)
block|{
comment|//|| defn == null) {
return|return
literal|null
return|;
block|}
name|scope
operator|=
operator|(
name|IdlScopeBase
operator|)
name|defn
expr_stmt|;
block|}
return|return
name|scope
operator|.
name|lookup
argument_list|(
name|name
operator|.
name|localName
argument_list|()
argument_list|,
name|undefined
argument_list|)
return|;
block|}
specifier|public
name|IdlDefn
name|lookup
parameter_list|(
name|String
name|scopedName
index|[]
parameter_list|)
block|{
return|return
name|lookup
argument_list|(
name|scopedName
argument_list|,
literal|false
argument_list|)
return|;
block|}
specifier|public
name|IdlDefn
name|lookup
parameter_list|(
name|String
name|scopedName
index|[]
parameter_list|,
name|boolean
name|undefined
parameter_list|)
block|{
name|IdlScopeBase
name|scope
init|=
name|this
decl_stmt|;
for|for
control|(
init|;
condition|;
control|)
block|{
name|IdlScopeBase
name|parent
init|=
name|scope
operator|.
name|definedIn
argument_list|()
decl_stmt|;
if|if
condition|(
name|parent
operator|==
literal|null
condition|)
block|{
break|break;
block|}
name|scope
operator|=
name|parent
expr_stmt|;
block|}
name|IdlDefn
name|result
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|scopedName
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|boolean
name|inParentScope
init|=
name|scopedName
operator|.
name|length
operator|>
literal|1
operator|&&
name|i
operator|<
name|scopedName
operator|.
name|length
operator|-
literal|1
decl_stmt|;
name|result
operator|=
name|scope
operator|.
name|lookup
argument_list|(
name|scopedName
index|[
name|i
index|]
argument_list|,
name|undefined
operator|&&
operator|!
name|inParentScope
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|i
operator|!=
operator|(
name|scopedName
operator|.
name|length
operator|-
literal|1
operator|)
condition|)
block|{
if|if
condition|(
name|result
operator|instanceof
name|IdlScopeBase
condition|)
block|{
name|scope
operator|=
operator|(
name|IdlScopeBase
operator|)
name|result
expr_stmt|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
return|return
name|result
return|;
block|}
specifier|public
name|IdlScopeBase
name|getCircularScope
parameter_list|(
name|IdlScopeBase
name|startScope
parameter_list|,
name|List
argument_list|<
name|Object
argument_list|>
name|doneDefn
parameter_list|)
block|{
if|if
condition|(
name|doneDefn
operator|.
name|contains
argument_list|(
name|this
argument_list|)
condition|)
block|{
return|return
operator|(
name|this
operator|==
name|startScope
operator|)
condition|?
name|this
else|:
literal|null
return|;
block|}
name|doneDefn
operator|.
name|add
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|Iterator
name|it
init|=
name|definitions
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|IdlDefn
name|defn
init|=
operator|(
name|IdlDefn
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|IdlScopeBase
name|circularScope
init|=
name|defn
operator|.
name|getCircularScope
argument_list|(
name|startScope
argument_list|,
name|doneDefn
argument_list|)
decl_stmt|;
if|if
condition|(
name|circularScope
operator|!=
literal|null
condition|)
block|{
return|return
name|circularScope
return|;
block|}
block|}
name|doneDefn
operator|.
name|remove
argument_list|(
name|this
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|PrintWriter
name|pw
parameter_list|)
block|{
name|Iterator
name|it
init|=
name|defns
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|IdlDefn
name|defn
init|=
operator|(
name|IdlDefn
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|defn
operator|.
name|write
argument_list|(
name|pw
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|writeFwd
parameter_list|(
name|PrintWriter
name|pw
parameter_list|)
block|{
name|ListIterator
name|it
init|=
name|defns
operator|.
name|listIterator
argument_list|(
name|defns
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasPrevious
argument_list|()
condition|)
block|{
name|IdlDefn
name|defn
init|=
operator|(
name|IdlDefn
operator|)
name|it
operator|.
name|previous
argument_list|()
decl_stmt|;
name|defn
operator|.
name|writeFwd
argument_list|(
name|pw
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|flush
parameter_list|()
block|{
name|promoteParkedToScope
argument_list|()
expr_stmt|;
name|Iterator
name|it
init|=
name|definitions
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|IdlDefn
name|defn
init|=
operator|(
name|IdlDefn
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|defn
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
name|Collection
name|definitions
parameter_list|()
block|{
return|return
name|defns
return|;
block|}
specifier|private
name|void
name|promoteParkedToScope
parameter_list|()
block|{
name|Iterator
name|it
init|=
name|park
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|IdlDefn
name|nextDef
init|=
operator|(
name|IdlDefn
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|defns
operator|.
name|add
argument_list|(
name|nextDef
argument_list|)
expr_stmt|;
block|}
name|park
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

