begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|corba
operator|.
name|common
operator|.
name|idltypes
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_class
specifier|public
class|class
name|CorbaUtils
block|{
specifier|protected
specifier|static
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|IDL_RESERVED_WORDS
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|()
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|IGNORED_MODULES
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|()
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|TIMEBASE_IDL_DEFS
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|()
decl_stmt|;
static|static
block|{
comment|/* IDL Key Words */
name|IDL_RESERVED_WORDS
operator|.
name|add
argument_list|(
literal|"abstract"
argument_list|)
expr_stmt|;
name|IDL_RESERVED_WORDS
operator|.
name|add
argument_list|(
literal|"double"
argument_list|)
expr_stmt|;
name|IDL_RESERVED_WORDS
operator|.
name|add
argument_list|(
literal|"local"
argument_list|)
expr_stmt|;
name|IDL_RESERVED_WORDS
operator|.
name|add
argument_list|(
literal|"raises"
argument_list|)
expr_stmt|;
name|IDL_RESERVED_WORDS
operator|.
name|add
argument_list|(
literal|"typedef"
argument_list|)
expr_stmt|;
name|IDL_RESERVED_WORDS
operator|.
name|add
argument_list|(
literal|"any"
argument_list|)
expr_stmt|;
name|IDL_RESERVED_WORDS
operator|.
name|add
argument_list|(
literal|"exception"
argument_list|)
expr_stmt|;
name|IDL_RESERVED_WORDS
operator|.
name|add
argument_list|(
literal|"long"
argument_list|)
expr_stmt|;
name|IDL_RESERVED_WORDS
operator|.
name|add
argument_list|(
literal|"readonly"
argument_list|)
expr_stmt|;
name|IDL_RESERVED_WORDS
operator|.
name|add
argument_list|(
literal|"unsigned"
argument_list|)
expr_stmt|;
name|IDL_RESERVED_WORDS
operator|.
name|add
argument_list|(
literal|"attribute"
argument_list|)
expr_stmt|;
name|IDL_RESERVED_WORDS
operator|.
name|add
argument_list|(
literal|"enum"
argument_list|)
expr_stmt|;
name|IDL_RESERVED_WORDS
operator|.
name|add
argument_list|(
literal|"module"
argument_list|)
expr_stmt|;
name|IDL_RESERVED_WORDS
operator|.
name|add
argument_list|(
literal|"sequence"
argument_list|)
expr_stmt|;
name|IDL_RESERVED_WORDS
operator|.
name|add
argument_list|(
literal|"union"
argument_list|)
expr_stmt|;
name|IDL_RESERVED_WORDS
operator|.
name|add
argument_list|(
literal|"boolean"
argument_list|)
expr_stmt|;
name|IDL_RESERVED_WORDS
operator|.
name|add
argument_list|(
literal|"factory"
argument_list|)
expr_stmt|;
name|IDL_RESERVED_WORDS
operator|.
name|add
argument_list|(
literal|"native"
argument_list|)
expr_stmt|;
name|IDL_RESERVED_WORDS
operator|.
name|add
argument_list|(
literal|"short"
argument_list|)
expr_stmt|;
name|IDL_RESERVED_WORDS
operator|.
name|add
argument_list|(
literal|"ValueBase"
argument_list|)
expr_stmt|;
name|IDL_RESERVED_WORDS
operator|.
name|add
argument_list|(
literal|"case"
argument_list|)
expr_stmt|;
name|IDL_RESERVED_WORDS
operator|.
name|add
argument_list|(
literal|"FALSE"
argument_list|)
expr_stmt|;
name|IDL_RESERVED_WORDS
operator|.
name|add
argument_list|(
literal|"Object"
argument_list|)
expr_stmt|;
name|IDL_RESERVED_WORDS
operator|.
name|add
argument_list|(
literal|"string"
argument_list|)
expr_stmt|;
name|IDL_RESERVED_WORDS
operator|.
name|add
argument_list|(
literal|"valuetype"
argument_list|)
expr_stmt|;
name|IDL_RESERVED_WORDS
operator|.
name|add
argument_list|(
literal|"char"
argument_list|)
expr_stmt|;
name|IDL_RESERVED_WORDS
operator|.
name|add
argument_list|(
literal|"fixed"
argument_list|)
expr_stmt|;
name|IDL_RESERVED_WORDS
operator|.
name|add
argument_list|(
literal|"octet"
argument_list|)
expr_stmt|;
name|IDL_RESERVED_WORDS
operator|.
name|add
argument_list|(
literal|"struct"
argument_list|)
expr_stmt|;
name|IDL_RESERVED_WORDS
operator|.
name|add
argument_list|(
literal|"void"
argument_list|)
expr_stmt|;
name|IDL_RESERVED_WORDS
operator|.
name|add
argument_list|(
literal|"const"
argument_list|)
expr_stmt|;
name|IDL_RESERVED_WORDS
operator|.
name|add
argument_list|(
literal|"float"
argument_list|)
expr_stmt|;
name|IDL_RESERVED_WORDS
operator|.
name|add
argument_list|(
literal|"oneway"
argument_list|)
expr_stmt|;
name|IDL_RESERVED_WORDS
operator|.
name|add
argument_list|(
literal|"supports"
argument_list|)
expr_stmt|;
name|IDL_RESERVED_WORDS
operator|.
name|add
argument_list|(
literal|"wchar"
argument_list|)
expr_stmt|;
name|IDL_RESERVED_WORDS
operator|.
name|add
argument_list|(
literal|"context"
argument_list|)
expr_stmt|;
name|IDL_RESERVED_WORDS
operator|.
name|add
argument_list|(
literal|"in"
argument_list|)
expr_stmt|;
name|IDL_RESERVED_WORDS
operator|.
name|add
argument_list|(
literal|"out"
argument_list|)
expr_stmt|;
name|IDL_RESERVED_WORDS
operator|.
name|add
argument_list|(
literal|"switch"
argument_list|)
expr_stmt|;
name|IDL_RESERVED_WORDS
operator|.
name|add
argument_list|(
literal|"wstring"
argument_list|)
expr_stmt|;
name|IDL_RESERVED_WORDS
operator|.
name|add
argument_list|(
literal|"custom"
argument_list|)
expr_stmt|;
name|IDL_RESERVED_WORDS
operator|.
name|add
argument_list|(
literal|"inout"
argument_list|)
expr_stmt|;
name|IDL_RESERVED_WORDS
operator|.
name|add
argument_list|(
literal|"private"
argument_list|)
expr_stmt|;
name|IDL_RESERVED_WORDS
operator|.
name|add
argument_list|(
literal|"TRUE"
argument_list|)
expr_stmt|;
name|IDL_RESERVED_WORDS
operator|.
name|add
argument_list|(
literal|"default"
argument_list|)
expr_stmt|;
name|IDL_RESERVED_WORDS
operator|.
name|add
argument_list|(
literal|"interface"
argument_list|)
expr_stmt|;
name|IDL_RESERVED_WORDS
operator|.
name|add
argument_list|(
literal|"public"
argument_list|)
expr_stmt|;
name|IDL_RESERVED_WORDS
operator|.
name|add
argument_list|(
literal|"truncatable"
argument_list|)
expr_stmt|;
comment|/**          * Well known IDL Definitions          */
name|IGNORED_MODULES
operator|.
name|add
argument_list|(
literal|"TimeBase"
argument_list|)
expr_stmt|;
comment|//Time Base Definitions as defined in<omg/TimeBase.idl>
comment|/*TIMEBASE_IDL_DEFS.add("TimeBase.TimeT");         TIMEBASE_IDL_DEFS.add("TimeBase.InaccuracyT");         TIMEBASE_IDL_DEFS.add("TimeBase.TdfT");         TIMEBASE_IDL_DEFS.add("TimeBase.IntervalT");         TIMEBASE_IDL_DEFS.add("TimeBase.UtcT");*/
block|}
specifier|protected
name|CorbaUtils
parameter_list|()
block|{     }
specifier|public
specifier|static
name|String
name|mangleName
parameter_list|(
name|String
name|cname
parameter_list|)
block|{
while|while
condition|(
name|isCollideWithKeyWord
argument_list|(
name|cname
argument_list|)
condition|)
block|{
name|cname
operator|=
literal|"_"
operator|+
name|cname
expr_stmt|;
block|}
if|if
condition|(
name|cname
operator|.
name|indexOf
argument_list|(
literal|".."
argument_list|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|cname
operator|=
name|cname
operator|.
name|replace
argument_list|(
literal|'.'
argument_list|,
literal|'_'
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cname
operator|.
name|indexOf
argument_list|(
literal|'$'
argument_list|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|cname
operator|=
name|cname
operator|.
name|replace
argument_list|(
literal|'$'
argument_list|,
literal|'_'
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cname
operator|.
name|indexOf
argument_list|(
literal|'?'
argument_list|)
operator|!=
operator|-
literal|1
condition|)
block|{
if|if
condition|(
name|cname
operator|.
name|length
argument_list|()
operator|==
literal|1
condition|)
block|{
name|cname
operator|=
literal|"u0063"
expr_stmt|;
block|}
else|else
block|{
name|StringTokenizer
name|tokenizer
init|=
operator|new
name|StringTokenizer
argument_list|(
name|cname
argument_list|,
literal|"?"
argument_list|)
decl_stmt|;
name|String
name|str
init|=
literal|""
decl_stmt|;
while|while
condition|(
name|tokenizer
operator|.
name|hasMoreTokens
argument_list|()
condition|)
block|{
name|String
name|s
init|=
name|tokenizer
operator|.
name|nextToken
argument_list|()
decl_stmt|;
name|str
operator|=
name|s
operator|+
literal|"u0063"
expr_stmt|;
block|}
name|cname
operator|=
name|str
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|cname
operator|.
name|indexOf
argument_list|(
literal|'-'
argument_list|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|cname
operator|=
name|cname
operator|.
name|replace
argument_list|(
literal|'-'
argument_list|,
literal|'_'
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cname
operator|.
name|indexOf
argument_list|(
literal|'/'
argument_list|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|cname
operator|=
name|cname
operator|.
name|replace
argument_list|(
literal|'/'
argument_list|,
literal|'_'
argument_list|)
expr_stmt|;
block|}
return|return
name|cname
return|;
block|}
specifier|public
specifier|static
name|String
name|mangleEnumIdentifier
parameter_list|(
name|String
name|identifier
parameter_list|)
block|{
name|String
name|value
init|=
name|mangleName
argument_list|(
name|identifier
argument_list|)
decl_stmt|;
name|value
operator|=
name|value
operator|.
name|replace
argument_list|(
literal|' '
argument_list|,
literal|'_'
argument_list|)
expr_stmt|;
name|value
operator|=
name|value
operator|.
name|replace
argument_list|(
literal|'.'
argument_list|,
literal|'_'
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|.
name|indexOf
argument_list|(
literal|':'
argument_list|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|value
operator|=
name|value
operator|.
name|substring
argument_list|(
name|value
operator|.
name|lastIndexOf
argument_list|(
literal|':'
argument_list|)
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
name|String
name|fletter
init|=
name|value
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
try|try
block|{
name|Integer
operator|.
name|parseInt
argument_list|(
name|fletter
argument_list|)
expr_stmt|;
name|value
operator|=
literal|"e_"
operator|+
name|value
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
comment|//
block|}
if|if
condition|(
name|value
operator|.
name|startsWith
argument_list|(
literal|"__"
argument_list|)
condition|)
block|{
name|value
operator|=
name|value
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
name|value
return|;
block|}
specifier|public
specifier|static
name|boolean
name|isReservedWord
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|IDL_RESERVED_WORDS
operator|.
name|contains
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|boolean
name|isCollideWithKeyWord
parameter_list|(
name|String
name|name
parameter_list|)
block|{
for|for
control|(
name|String
name|key
range|:
name|IDL_RESERVED_WORDS
control|)
block|{
if|if
condition|(
name|key
operator|.
name|equalsIgnoreCase
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|public
specifier|static
name|boolean
name|isTimeBaseDef
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|TIMEBASE_IDL_DEFS
operator|.
name|contains
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|boolean
name|ignoreModule
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|IGNORED_MODULES
operator|.
name|contains
argument_list|(
name|name
argument_list|)
return|;
block|}
block|}
end_class

end_unit

