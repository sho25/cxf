begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|corba
operator|.
name|processors
operator|.
name|wsdl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|Binding
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|Definition
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|Part
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|Abstractanonsequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|Abstractsequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|CaseType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|CorbaConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|CorbaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|Enum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|Enumerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|MemberType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|Struct
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|TypeMappingType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|Union
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|Unionbranch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|W3CConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|xmlschema
operator|.
name|SchemaCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|CastUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|corba
operator|.
name|common
operator|.
name|CorbaPrimitiveMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|corba
operator|.
name|common
operator|.
name|ReferenceConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|corba
operator|.
name|common
operator|.
name|WSDLUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaAll
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaAnnotation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaAttributeOrGroupRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaChoice
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaComplexContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaComplexContentExtension
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaComplexContentRestriction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaComplexType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaElement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaEnumerationFacet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaExternal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaFacet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaImport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaLengthFacet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaMaxLengthFacet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaParticle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaSequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaSequenceMember
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaSimpleContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaSimpleContentExtension
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaSimpleContentRestriction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaSimpleType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaSimpleTypeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaSimpleTypeRestriction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaUse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|utils
operator|.
name|XmlSchemaObjectBase
import|;
end_import

begin_class
specifier|public
class|class
name|WSDLToCorbaHelper
block|{
specifier|public
specifier|static
specifier|final
name|String
name|REPO_STRING
init|=
literal|"IDL:"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|IDL_VERSION
init|=
literal|":1.0"
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|WSDLToCorbaHelper
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|DISCRIMINATORTYPES
index|[]
init|=
operator|new
name|String
index|[]
block|{
literal|"long"
block|,
literal|"short"
block|,
literal|"boolean"
block|,
literal|"char"
block|}
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|SUPPORTEDDISTYPES
init|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|DISCRIMINATORTYPES
argument_list|)
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|CorbaPrimitiveMap
name|CORBAPRIMITIVEMAP
init|=
operator|new
name|CorbaPrimitiveMap
argument_list|()
decl_stmt|;
name|String
name|idlNamespace
decl_stmt|;
name|SchemaCollection
name|xmlSchemaList
decl_stmt|;
name|TypeMappingType
name|typeMappingType
decl_stmt|;
name|Definition
name|def
decl_stmt|;
name|Map
argument_list|<
name|QName
argument_list|,
name|CorbaType
argument_list|>
name|recursionMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|public
name|void
name|setTypeMap
parameter_list|(
name|TypeMappingType
name|map
parameter_list|)
block|{
name|typeMappingType
operator|=
name|map
expr_stmt|;
block|}
specifier|public
name|void
name|setIdlNamespace
parameter_list|(
name|String
name|ns
parameter_list|)
block|{
name|idlNamespace
operator|=
name|ns
expr_stmt|;
block|}
specifier|public
name|String
name|getIdlNamespace
parameter_list|()
block|{
return|return
name|idlNamespace
return|;
block|}
specifier|public
name|void
name|setXMLSchemaList
parameter_list|(
name|SchemaCollection
name|list
parameter_list|)
block|{
name|xmlSchemaList
operator|=
name|list
expr_stmt|;
block|}
specifier|public
name|SchemaCollection
name|getXMLSchemaList
parameter_list|()
block|{
return|return
name|xmlSchemaList
return|;
block|}
specifier|public
name|void
name|setWsdlDefinition
parameter_list|(
name|Definition
name|defn
parameter_list|)
block|{
name|def
operator|=
name|defn
expr_stmt|;
block|}
specifier|public
name|CorbaType
name|convertSchemaToCorbaType
parameter_list|(
name|XmlSchemaType
name|stype
parameter_list|,
name|QName
name|defaultName
parameter_list|,
name|XmlSchemaType
name|parent
parameter_list|,
name|XmlSchemaAnnotation
name|annotation
parameter_list|,
name|boolean
name|anonymous
parameter_list|)
throws|throws
name|Exception
block|{
name|CorbaType
name|corbaTypeImpl
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|isAddressingNamespace
argument_list|(
name|stype
operator|.
name|getQName
argument_list|()
argument_list|)
condition|)
block|{
comment|// need to determine if its a primitive type.
if|if
condition|(
name|stype
operator|instanceof
name|XmlSchemaComplexType
condition|)
block|{
name|corbaTypeImpl
operator|=
name|processComplexType
argument_list|(
operator|(
name|XmlSchemaComplexType
operator|)
name|stype
argument_list|,
name|defaultName
argument_list|,
name|annotation
argument_list|,
name|anonymous
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|stype
operator|instanceof
name|XmlSchemaSimpleType
condition|)
block|{
name|corbaTypeImpl
operator|=
name|processSimpleType
argument_list|(
operator|(
name|XmlSchemaSimpleType
operator|)
name|stype
argument_list|,
name|defaultName
argument_list|,
name|anonymous
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|xmlSchemaList
operator|.
name|getElementByQName
argument_list|(
name|stype
operator|.
name|getQName
argument_list|()
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|XmlSchemaElement
name|el
init|=
name|xmlSchemaList
operator|.
name|getElementByQName
argument_list|(
name|stype
operator|.
name|getQName
argument_list|()
argument_list|)
decl_stmt|;
comment|//REVISIT, passing ns uri because of a bug in XmlSchema (Bug: WSCOMMONS-69)
name|corbaTypeImpl
operator|=
name|processElementType
argument_list|(
name|el
argument_list|,
name|defaultName
argument_list|,
name|stype
operator|.
name|getQName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Couldn't convert schema "
operator|+
name|stype
operator|.
name|getQName
argument_list|()
operator|+
literal|" to corba type"
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|corbaTypeImpl
operator|!=
literal|null
operator|&&
operator|!
name|isDuplicate
argument_list|(
name|corbaTypeImpl
argument_list|)
condition|)
block|{
name|typeMappingType
operator|.
name|getStructOrExceptionOrUnion
argument_list|()
operator|.
name|add
argument_list|(
name|corbaTypeImpl
argument_list|)
expr_stmt|;
block|}
return|return
name|corbaTypeImpl
return|;
block|}
specifier|protected
name|List
argument_list|<
name|MemberType
argument_list|>
name|processContainerAsMembers
parameter_list|(
name|XmlSchemaParticle
name|particle
parameter_list|,
name|QName
name|defaultName
parameter_list|,
name|QName
name|schemaTypeName
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|MemberType
argument_list|>
name|members
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|?
extends|extends
name|XmlSchemaObjectBase
argument_list|>
name|iterL
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|particle
operator|instanceof
name|XmlSchemaSequence
condition|)
block|{
name|XmlSchemaSequence
name|scontainer
init|=
operator|(
name|XmlSchemaSequence
operator|)
name|particle
decl_stmt|;
name|iterL
operator|=
name|scontainer
operator|.
name|getItems
argument_list|()
operator|.
name|iterator
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|particle
operator|instanceof
name|XmlSchemaChoice
condition|)
block|{
name|XmlSchemaChoice
name|scontainer
init|=
operator|(
name|XmlSchemaChoice
operator|)
name|particle
decl_stmt|;
name|iterL
operator|=
name|scontainer
operator|.
name|getItems
argument_list|()
operator|.
name|iterator
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|particle
operator|instanceof
name|XmlSchemaAll
condition|)
block|{
name|XmlSchemaAll
name|acontainer
init|=
operator|(
name|XmlSchemaAll
operator|)
name|particle
decl_stmt|;
name|iterL
operator|=
name|acontainer
operator|.
name|getItems
argument_list|()
operator|.
name|iterator
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warning
argument_list|(
literal|"Unknown particle type "
operator|+
name|particle
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|iterL
operator|=
operator|new
name|ArrayList
argument_list|<
name|XmlSchemaObjectBase
argument_list|>
argument_list|()
operator|.
name|iterator
argument_list|()
expr_stmt|;
block|}
while|while
condition|(
name|iterL
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|XmlSchemaParticle
name|container
init|=
operator|(
name|XmlSchemaParticle
operator|)
name|iterL
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|container
operator|instanceof
name|XmlSchemaSequence
condition|)
block|{
name|XmlSchemaSequence
name|sequence
init|=
operator|(
name|XmlSchemaSequence
operator|)
name|container
decl_stmt|;
name|CorbaType
name|memberType
init|=
name|processSequenceType
argument_list|(
name|sequence
argument_list|,
name|defaultName
argument_list|,
name|schemaTypeName
argument_list|)
decl_stmt|;
name|QName
name|typeName
init|=
name|memberType
operator|.
name|getQName
argument_list|()
decl_stmt|;
if|if
condition|(
name|memberType
operator|instanceof
name|Struct
operator|&&
operator|!
name|isDuplicate
argument_list|(
name|memberType
argument_list|)
condition|)
block|{
name|typeMappingType
operator|.
name|getStructOrExceptionOrUnion
argument_list|()
operator|.
name|add
argument_list|(
name|memberType
argument_list|)
expr_stmt|;
block|}
name|MemberType
name|member
init|=
operator|new
name|MemberType
argument_list|()
decl_stmt|;
name|member
operator|.
name|setName
argument_list|(
name|memberType
operator|.
name|getName
argument_list|()
operator|+
literal|"_f"
argument_list|)
expr_stmt|;
name|member
operator|.
name|setIdltype
argument_list|(
name|typeName
argument_list|)
expr_stmt|;
name|member
operator|.
name|setAnonschematype
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|memberType
operator|.
name|isSetQualified
argument_list|()
operator|&&
name|memberType
operator|.
name|isQualified
argument_list|()
condition|)
block|{
name|member
operator|.
name|setQualified
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|members
operator|.
name|add
argument_list|(
name|member
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|container
operator|instanceof
name|XmlSchemaChoice
condition|)
block|{
name|XmlSchemaChoice
name|choice
init|=
operator|(
name|XmlSchemaChoice
operator|)
name|container
decl_stmt|;
name|MemberType
name|member
init|=
name|processChoiceMember
argument_list|(
name|choice
argument_list|,
name|defaultName
argument_list|,
name|schemaTypeName
argument_list|)
decl_stmt|;
name|member
operator|.
name|setAnonschematype
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|members
operator|.
name|add
argument_list|(
name|member
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|container
operator|instanceof
name|XmlSchemaAll
condition|)
block|{
name|XmlSchemaAll
name|all
init|=
operator|(
name|XmlSchemaAll
operator|)
name|container
decl_stmt|;
name|MemberType
name|member
init|=
name|processAllMember
argument_list|(
name|all
argument_list|,
name|defaultName
argument_list|,
name|schemaTypeName
argument_list|)
decl_stmt|;
name|member
operator|.
name|setAnonschematype
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|members
operator|.
name|add
argument_list|(
name|member
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|container
operator|instanceof
name|XmlSchemaElement
condition|)
block|{
name|XmlSchemaElement
name|element
init|=
operator|(
name|XmlSchemaElement
operator|)
name|container
decl_stmt|;
name|CorbaType
name|corbatype
init|=
name|processLocalElement
argument_list|(
name|defaultName
argument_list|,
name|element
argument_list|,
name|schemaTypeName
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
decl_stmt|;
name|QName
name|elName
init|=
name|element
operator|.
name|getQName
argument_list|()
decl_stmt|;
if|if
condition|(
name|elName
operator|==
literal|null
condition|)
block|{
name|elName
operator|=
name|element
operator|.
name|getRef
argument_list|()
operator|.
name|getTargetQName
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|corbatype
operator|!=
literal|null
condition|)
block|{
name|MemberType
name|member
decl_stmt|;
name|String
name|memberName
init|=
name|elName
operator|.
name|getLocalPart
argument_list|()
decl_stmt|;
name|member
operator|=
operator|new
name|MemberType
argument_list|()
expr_stmt|;
name|member
operator|.
name|setName
argument_list|(
name|memberName
argument_list|)
expr_stmt|;
name|member
operator|.
name|setIdltype
argument_list|(
name|corbatype
operator|.
name|getQName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|corbatype
operator|.
name|isSetQualified
argument_list|()
operator|&&
name|corbatype
operator|.
name|isQualified
argument_list|()
condition|)
block|{
name|member
operator|.
name|setQualified
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|members
operator|.
name|add
argument_list|(
name|member
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
literal|"Unsupported Element Found in CORBA Binding Generation:"
operator|+
name|elName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|members
return|;
block|}
specifier|private
name|MemberType
name|processChoiceMember
parameter_list|(
name|XmlSchemaChoice
name|choice
parameter_list|,
name|QName
name|defaultName
parameter_list|,
name|QName
name|schemaTypeName
parameter_list|)
throws|throws
name|Exception
block|{
name|CorbaType
name|corbatype
init|=
name|processChoice
argument_list|(
name|choice
argument_list|,
name|defaultName
argument_list|,
name|schemaTypeName
argument_list|)
decl_stmt|;
name|MemberType
name|member
init|=
operator|new
name|MemberType
argument_list|()
decl_stmt|;
name|member
operator|.
name|setName
argument_list|(
name|corbatype
operator|.
name|getQName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
name|member
operator|.
name|setIdltype
argument_list|(
name|corbatype
operator|.
name|getQName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|corbatype
operator|.
name|isSetQualified
argument_list|()
operator|&&
name|corbatype
operator|.
name|isQualified
argument_list|()
condition|)
block|{
name|member
operator|.
name|setQualified
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
return|return
name|member
return|;
block|}
specifier|private
name|MemberType
name|processAllMember
parameter_list|(
name|XmlSchemaAll
name|all
parameter_list|,
name|QName
name|defaultName
parameter_list|,
name|QName
name|schemaTypeName
parameter_list|)
throws|throws
name|Exception
block|{
name|CorbaType
name|corbatype
init|=
name|processAllType
argument_list|(
name|all
argument_list|,
name|defaultName
argument_list|,
name|schemaTypeName
argument_list|)
decl_stmt|;
name|MemberType
name|member
init|=
operator|new
name|MemberType
argument_list|()
decl_stmt|;
name|member
operator|.
name|setName
argument_list|(
name|corbatype
operator|.
name|getQName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
name|member
operator|.
name|setIdltype
argument_list|(
name|corbatype
operator|.
name|getQName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|corbatype
operator|.
name|isSetQualified
argument_list|()
operator|&&
name|corbatype
operator|.
name|isQualified
argument_list|()
condition|)
block|{
name|member
operator|.
name|setQualified
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
return|return
name|member
return|;
block|}
specifier|private
name|CorbaType
name|processChoice
parameter_list|(
name|XmlSchemaChoice
name|choice
parameter_list|,
name|QName
name|defaultName
parameter_list|,
name|QName
name|schemaTypeName
parameter_list|)
throws|throws
name|Exception
block|{
name|QName
name|choicename
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|schemaTypeName
operator|==
literal|null
condition|)
block|{
name|choicename
operator|=
name|createQNameCorbaNamespace
argument_list|(
name|defaultName
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|choicename
operator|=
name|createQNameCorbaNamespace
argument_list|(
name|schemaTypeName
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|choicename
operator|=
name|checkPrefix
argument_list|(
name|choicename
argument_list|)
expr_stmt|;
name|CorbaType
name|corbatype
init|=
name|createUnion
argument_list|(
name|choicename
argument_list|,
name|choice
argument_list|,
name|defaultName
argument_list|,
name|schemaTypeName
argument_list|)
decl_stmt|;
name|String
name|repoId
init|=
name|REPO_STRING
operator|+
name|corbatype
operator|.
name|getQName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
operator|.
name|replace
argument_list|(
literal|'.'
argument_list|,
literal|'/'
argument_list|)
operator|+
name|IDL_VERSION
decl_stmt|;
operator|(
operator|(
name|Union
operator|)
name|corbatype
operator|)
operator|.
name|setRepositoryID
argument_list|(
name|repoId
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|choice
operator|.
name|getMaxOccurs
argument_list|()
operator|==
literal|1
operator|)
operator|||
operator|!
operator|(
name|choice
operator|.
name|getMinOccurs
argument_list|()
operator|==
literal|1
operator|)
condition|)
block|{
name|QName
name|name
init|=
name|createQNameTargetNamespace
argument_list|(
name|corbatype
operator|.
name|getQName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
operator|+
literal|"Array"
argument_list|)
decl_stmt|;
name|CorbaType
name|arrayType
init|=
name|createArray
argument_list|(
name|name
argument_list|,
name|corbatype
operator|.
name|getQName
argument_list|()
argument_list|,
name|corbatype
operator|.
name|getQName
argument_list|()
argument_list|,
name|choice
operator|.
name|getMaxOccurs
argument_list|()
argument_list|,
name|choice
operator|.
name|getMinOccurs
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|arrayType
operator|!=
literal|null
operator|&&
operator|!
name|isDuplicate
argument_list|(
name|arrayType
argument_list|)
condition|)
block|{
name|typeMappingType
operator|.
name|getStructOrExceptionOrUnion
argument_list|()
operator|.
name|add
argument_list|(
name|arrayType
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|corbatype
return|;
block|}
specifier|private
name|CorbaType
name|processLocalElement
parameter_list|(
name|QName
name|containingTypeName
parameter_list|,
name|XmlSchemaElement
name|element
parameter_list|,
name|String
name|uri
parameter_list|)
throws|throws
name|Exception
block|{
name|CorbaType
name|membertype
init|=
operator|new
name|CorbaType
argument_list|()
decl_stmt|;
name|XmlSchemaType
name|schemaType
init|=
name|element
operator|.
name|getSchemaType
argument_list|()
decl_stmt|;
name|QName
name|schemaName
init|=
name|element
operator|.
name|getQName
argument_list|()
decl_stmt|;
if|if
condition|(
name|schemaType
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|element
operator|.
name|getRef
argument_list|()
operator|.
name|getTarget
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|schemaType
operator|=
name|findSchemaType
argument_list|(
name|element
operator|.
name|getRef
argument_list|()
operator|.
name|getTarget
argument_list|()
operator|.
name|getSchemaTypeName
argument_list|()
argument_list|)
expr_stmt|;
name|schemaName
operator|=
name|element
operator|.
name|getRef
argument_list|()
operator|.
name|getTargetQName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|schemaType
operator|=
name|findSchemaType
argument_list|(
name|element
operator|.
name|getSchemaTypeName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|schemaName
operator|.
name|getNamespaceURI
argument_list|()
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|schemaName
operator|=
operator|new
name|QName
argument_list|(
name|uri
argument_list|,
name|schemaName
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|QName
name|elemName
init|=
name|schemaName
decl_stmt|;
name|boolean
name|elementQualified
init|=
name|getElementQualification
argument_list|(
name|element
argument_list|,
name|uri
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|elementQualified
condition|)
block|{
name|elemName
operator|=
operator|new
name|QName
argument_list|(
literal|""
argument_list|,
name|elemName
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|QName
name|memName
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|element
operator|.
name|isNillable
argument_list|()
condition|)
block|{
name|CorbaType
name|elemtype
init|=
name|convertSchemaToCorbaType
argument_list|(
name|schemaType
argument_list|,
name|elemName
argument_list|,
name|schemaType
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|QName
name|name
init|=
name|createQNameTargetNamespace
argument_list|(
name|elemtype
operator|.
name|getQName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
operator|+
literal|"_nil"
argument_list|)
decl_stmt|;
name|QName
name|elName
init|=
name|checkPrefix
argument_list|(
name|elemName
argument_list|)
decl_stmt|;
if|if
condition|(
name|elName
operator|==
literal|null
condition|)
block|{
name|elName
operator|=
name|createQNameTargetNamespace
argument_list|(
name|elemName
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|CorbaType
name|memtype
init|=
name|createNillableUnion
argument_list|(
name|elName
argument_list|,
name|name
argument_list|,
name|elemtype
operator|.
name|getQName
argument_list|()
argument_list|,
name|elementQualified
argument_list|)
decl_stmt|;
name|memName
operator|=
name|createQNameCorbaNamespace
argument_list|(
name|memtype
operator|.
name|getQName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isDuplicate
argument_list|(
name|memtype
argument_list|)
condition|)
block|{
name|typeMappingType
operator|.
name|getStructOrExceptionOrUnion
argument_list|()
operator|.
name|add
argument_list|(
name|memtype
argument_list|)
expr_stmt|;
block|}
name|membertype
operator|.
name|setQName
argument_list|(
name|memName
argument_list|)
expr_stmt|;
name|membertype
operator|.
name|setName
argument_list|(
name|memtype
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|membertype
operator|.
name|setType
argument_list|(
name|memtype
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|schemaType
operator|!=
literal|null
condition|)
block|{
name|XmlSchemaType
name|st
init|=
name|schemaType
decl_stmt|;
name|boolean
name|anonymous
init|=
name|WSDLTypes
operator|.
name|isAnonymous
argument_list|(
name|st
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|QName
name|typeName
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|anonymous
condition|)
block|{
name|typeName
operator|=
operator|new
name|QName
argument_list|(
name|elemName
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
name|containingTypeName
operator|.
name|getLocalPart
argument_list|()
operator|+
literal|"."
operator|+
name|elemName
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|typeName
operator|=
name|st
operator|.
name|getQName
argument_list|()
expr_stmt|;
block|}
name|membertype
operator|=
name|convertSchemaToCorbaType
argument_list|(
name|st
argument_list|,
name|typeName
argument_list|,
name|st
argument_list|,
literal|null
argument_list|,
name|anonymous
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|element
operator|.
name|getSchemaTypeName
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|QName
name|name
init|=
name|checkPrefix
argument_list|(
name|element
operator|.
name|getSchemaTypeName
argument_list|()
argument_list|)
decl_stmt|;
name|membertype
operator|=
name|getLocalType
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|membertype
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
operator|!
operator|(
name|element
operator|.
name|getMaxOccurs
argument_list|()
operator|==
literal|1
operator|)
operator|||
operator|!
operator|(
name|element
operator|.
name|getMinOccurs
argument_list|()
operator|==
literal|1
operator|)
condition|)
block|{
name|QName
name|name
init|=
name|createQNameCorbaNamespace
argument_list|(
name|getModulePrefix
argument_list|(
name|membertype
argument_list|)
operator|+
name|elemName
operator|.
name|getLocalPart
argument_list|()
operator|+
literal|"Array"
argument_list|)
decl_stmt|;
name|CorbaType
name|arraytype
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|memName
operator|!=
literal|null
condition|)
block|{
name|arraytype
operator|=
name|createArray
argument_list|(
name|name
argument_list|,
comment|/*schemaName*/
name|name
argument_list|,
name|memName
argument_list|,
name|elemName
argument_list|,
name|element
operator|.
name|getMaxOccurs
argument_list|()
argument_list|,
name|element
operator|.
name|getMinOccurs
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|arraytype
operator|=
name|createArray
argument_list|(
name|name
argument_list|,
comment|/*schemaName*/
name|name
argument_list|,
name|membertype
operator|.
name|getQName
argument_list|()
argument_list|,
name|elemName
argument_list|,
name|element
operator|.
name|getMaxOccurs
argument_list|()
argument_list|,
name|element
operator|.
name|getMinOccurs
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|arraytype
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|arraytype
operator|instanceof
name|Abstractsequence
condition|)
block|{
operator|(
operator|(
name|Abstractsequence
operator|)
name|arraytype
operator|)
operator|.
name|setWrapped
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|arraytype
operator|instanceof
name|Abstractanonsequence
condition|)
block|{
operator|(
operator|(
name|Abstractanonsequence
operator|)
name|arraytype
operator|)
operator|.
name|setWrapped
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
comment|// we don't change a type which is already added to typeMappingType.getStructOrExceptionOrUnion()!
comment|//                membertype.setName(arraytype.getName());
comment|//                membertype.setQName(arraytype.getQName());
comment|//                membertype.setType(arraytype.getType());
if|if
condition|(
operator|!
name|isDuplicate
argument_list|(
name|arraytype
argument_list|)
condition|)
block|{
name|typeMappingType
operator|.
name|getStructOrExceptionOrUnion
argument_list|()
operator|.
name|add
argument_list|(
name|arraytype
argument_list|)
expr_stmt|;
block|}
comment|// the local element with maxOccurs != 1 or minOccurs != 1 becomes the just created array
name|membertype
operator|=
name|arraytype
expr_stmt|;
block|}
block|}
name|membertype
operator|.
name|setQualified
argument_list|(
name|elementQualified
argument_list|)
expr_stmt|;
return|return
name|membertype
return|;
block|}
specifier|public
name|XmlSchemaType
name|getSchemaType
parameter_list|(
name|QName
name|name
parameter_list|)
throws|throws
name|Exception
block|{
name|XmlSchemaType
name|type
init|=
literal|null
decl_stmt|;
for|for
control|(
name|XmlSchema
name|xmlSchema
range|:
name|xmlSchemaList
operator|.
name|getXmlSchemas
argument_list|()
control|)
block|{
name|String
name|nspace
init|=
name|name
operator|.
name|getNamespaceURI
argument_list|()
decl_stmt|;
if|if
condition|(
name|nspace
operator|==
literal|null
condition|)
block|{
name|nspace
operator|=
name|xmlSchema
operator|.
name|getTargetNamespace
argument_list|()
expr_stmt|;
block|}
comment|//QName tname = createQName(nspace, name.getLocalPart(), "xsd");
name|QName
name|tname
init|=
name|createQName
argument_list|(
name|nspace
argument_list|,
name|name
operator|.
name|getLocalPart
argument_list|()
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|type
operator|=
name|findSchemaType
argument_list|(
name|tname
argument_list|)
expr_stmt|;
if|if
condition|(
name|type
operator|!=
literal|null
condition|)
block|{
break|break;
block|}
block|}
return|return
name|type
return|;
block|}
specifier|private
name|String
name|getModulePrefix
parameter_list|(
name|CorbaType
name|type
parameter_list|)
block|{
name|String
name|name
init|=
name|type
operator|.
name|getQName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
decl_stmt|;
name|int
name|dotPos
init|=
name|name
operator|.
name|lastIndexOf
argument_list|(
literal|"."
argument_list|)
decl_stmt|;
return|return
name|dotPos
operator|==
operator|-
literal|1
condition|?
literal|""
else|:
name|name
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|dotPos
operator|+
literal|1
argument_list|)
return|;
block|}
specifier|protected
name|CorbaType
name|processSequenceType
parameter_list|(
name|XmlSchemaSequence
name|seq
parameter_list|,
name|QName
name|defaultName
parameter_list|,
name|QName
name|schemaTypeName
parameter_list|)
throws|throws
name|Exception
block|{
name|CorbaType
name|type
init|=
literal|null
decl_stmt|;
name|QName
name|seqName
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|schemaTypeName
operator|==
literal|null
condition|)
block|{
name|seqName
operator|=
name|createQNameCorbaNamespace
argument_list|(
name|defaultName
operator|.
name|getLocalPart
argument_list|()
operator|+
literal|"SequenceStruct"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|seqName
operator|=
name|createQNameCorbaNamespace
argument_list|(
name|schemaTypeName
operator|.
name|getLocalPart
argument_list|()
operator|+
literal|"SequenceStruct"
argument_list|)
expr_stmt|;
block|}
name|schemaTypeName
operator|=
name|checkPrefix
argument_list|(
name|schemaTypeName
argument_list|)
expr_stmt|;
name|Struct
name|struct
init|=
operator|new
name|Struct
argument_list|()
decl_stmt|;
name|struct
operator|.
name|setName
argument_list|(
name|seqName
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
name|struct
operator|.
name|setQName
argument_list|(
name|seqName
argument_list|)
expr_stmt|;
name|struct
operator|.
name|setRepositoryID
argument_list|(
name|REPO_STRING
operator|+
name|seqName
operator|.
name|getLocalPart
argument_list|()
operator|.
name|replace
argument_list|(
literal|'.'
argument_list|,
literal|'/'
argument_list|)
operator|+
name|IDL_VERSION
argument_list|)
expr_stmt|;
name|struct
operator|.
name|setType
argument_list|(
name|schemaTypeName
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|MemberType
argument_list|>
name|members
init|=
name|processContainerAsMembers
argument_list|(
name|seq
argument_list|,
name|defaultName
argument_list|,
name|schemaTypeName
argument_list|)
decl_stmt|;
for|for
control|(
name|MemberType
name|memberType
range|:
name|members
control|)
block|{
name|struct
operator|.
name|getMember
argument_list|()
operator|.
name|add
argument_list|(
name|memberType
argument_list|)
expr_stmt|;
block|}
name|type
operator|=
name|struct
expr_stmt|;
if|if
condition|(
name|seq
operator|.
name|getMaxOccurs
argument_list|()
operator|!=
literal|1
operator|||
name|seq
operator|.
name|getMinOccurs
argument_list|()
operator|!=
literal|1
condition|)
block|{
name|QName
name|name
init|=
name|createQNameTargetNamespace
argument_list|(
name|type
operator|.
name|getQName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
operator|+
literal|"Array"
argument_list|)
decl_stmt|;
name|CorbaType
name|atype
init|=
name|createArray
argument_list|(
name|name
argument_list|,
name|type
operator|.
name|getQName
argument_list|()
argument_list|,
name|type
operator|.
name|getQName
argument_list|()
argument_list|,
name|seq
operator|.
name|getMaxOccurs
argument_list|()
argument_list|,
name|seq
operator|.
name|getMinOccurs
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|atype
operator|!=
literal|null
operator|&&
operator|!
name|isDuplicate
argument_list|(
name|atype
argument_list|)
condition|)
block|{
name|typeMappingType
operator|.
name|getStructOrExceptionOrUnion
argument_list|()
operator|.
name|add
argument_list|(
name|atype
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|(
name|struct
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|struct
operator|.
name|getMember
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|0
operator|)
condition|)
block|{
name|String
name|msgStr
init|=
literal|"Cannot create CORBA Struct"
operator|+
name|struct
operator|.
name|getName
argument_list|()
operator|+
literal|"from container with no members"
decl_stmt|;
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
name|msg
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
argument_list|(
name|msgStr
argument_list|,
name|LOG
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|Exception
argument_list|(
name|msg
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|type
return|;
block|}
specifier|protected
name|CorbaType
name|processAllType
parameter_list|(
name|XmlSchemaAll
name|seq
parameter_list|,
name|QName
name|defaultName
parameter_list|,
name|QName
name|schematypeName
parameter_list|)
throws|throws
name|Exception
block|{
name|QName
name|allName
init|=
literal|null
decl_stmt|;
name|Struct
name|type
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|schematypeName
operator|==
literal|null
condition|)
block|{
name|allName
operator|=
name|createQNameCorbaNamespace
argument_list|(
name|defaultName
operator|.
name|getLocalPart
argument_list|()
operator|+
literal|"AllStruct"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|allName
operator|=
name|createQNameCorbaNamespace
argument_list|(
name|schematypeName
operator|.
name|getLocalPart
argument_list|()
operator|+
literal|"AllStruct"
argument_list|)
expr_stmt|;
block|}
name|type
operator|=
operator|new
name|Struct
argument_list|()
expr_stmt|;
name|type
operator|.
name|setName
argument_list|(
name|allName
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
name|type
operator|.
name|setQName
argument_list|(
name|allName
argument_list|)
expr_stmt|;
name|type
operator|.
name|setType
argument_list|(
name|schematypeName
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|MemberType
argument_list|>
name|members
init|=
name|processContainerAsMembers
argument_list|(
name|seq
argument_list|,
name|defaultName
argument_list|,
name|schematypeName
argument_list|)
decl_stmt|;
for|for
control|(
name|MemberType
name|memberType
range|:
name|members
control|)
block|{
name|type
operator|.
name|getMember
argument_list|()
operator|.
name|add
argument_list|(
name|memberType
argument_list|)
expr_stmt|;
block|}
name|String
name|repoId
init|=
name|REPO_STRING
operator|+
name|type
operator|.
name|getQName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
operator|.
name|replace
argument_list|(
literal|'.'
argument_list|,
literal|'/'
argument_list|)
operator|+
name|IDL_VERSION
decl_stmt|;
name|type
operator|.
name|setRepositoryID
argument_list|(
name|repoId
argument_list|)
expr_stmt|;
return|return
name|type
return|;
block|}
specifier|private
name|CorbaType
name|processPrimitiveType
parameter_list|(
name|QName
name|typeName
parameter_list|)
block|{
name|QName
name|qName
init|=
name|createQNameXmlSchemaNamespace
argument_list|(
name|typeName
operator|.
name|getLocalPart
argument_list|()
argument_list|)
decl_stmt|;
name|CorbaType
name|corbatype
init|=
operator|(
name|CorbaType
operator|)
name|CORBAPRIMITIVEMAP
operator|.
name|get
argument_list|(
name|qName
argument_list|)
decl_stmt|;
if|if
condition|(
name|corbatype
operator|==
literal|null
condition|)
block|{
comment|//REVISIT, bravi, not an ideal way to add the fixed& octet type to the typemap.
name|CorbaType
name|type
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|typeName
operator|.
name|equals
argument_list|(
name|W3CConstants
operator|.
name|NT_SCHEMA_DECIMAL
argument_list|)
condition|)
block|{
name|QName
name|name
init|=
operator|new
name|QName
argument_list|(
name|idlNamespace
argument_list|,
literal|"fixed_1"
argument_list|)
decl_stmt|;
name|type
operator|=
name|WSDLTypes
operator|.
name|getFixedCorbaType
argument_list|(
name|name
argument_list|,
name|typeName
argument_list|,
literal|31
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|corbatype
operator|=
name|WSDLTypes
operator|.
name|getFixedCorbaType
argument_list|(
name|name
argument_list|,
name|typeName
argument_list|,
literal|31
argument_list|,
literal|6
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|typeName
operator|.
name|equals
argument_list|(
name|W3CConstants
operator|.
name|NT_SCHEMA_BASE64
argument_list|)
operator|||
name|typeName
operator|.
name|equals
argument_list|(
name|W3CConstants
operator|.
name|NT_SCHEMA_HBIN
argument_list|)
condition|)
block|{
name|QName
name|name
init|=
operator|new
name|QName
argument_list|(
name|idlNamespace
argument_list|,
name|typeName
operator|.
name|getLocalPart
argument_list|()
operator|+
literal|"Seq"
argument_list|)
decl_stmt|;
name|type
operator|=
name|WSDLTypes
operator|.
name|getOctetCorbaType
argument_list|(
name|name
argument_list|,
name|typeName
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|corbatype
operator|=
name|WSDLTypes
operator|.
name|getOctetCorbaType
argument_list|(
name|name
argument_list|,
name|typeName
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|type
operator|!=
literal|null
operator|&&
operator|!
name|isDuplicate
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|typeMappingType
operator|.
name|getStructOrExceptionOrUnion
argument_list|()
operator|.
name|add
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|corbatype
return|;
block|}
specifier|protected
name|List
argument_list|<
name|MemberType
argument_list|>
name|processAttributesAsMembers
parameter_list|(
name|List
argument_list|<
name|XmlSchemaAttributeOrGroupRef
argument_list|>
name|list
parameter_list|,
name|String
name|uri
parameter_list|)
throws|throws
name|Exception
block|{
name|QName
name|memName
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|MemberType
argument_list|>
name|members
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|XmlSchemaAttributeOrGroupRef
name|aog
range|:
name|list
control|)
block|{
if|if
condition|(
operator|!
operator|(
name|aog
operator|instanceof
name|XmlSchemaAttribute
operator|)
condition|)
block|{
name|LOG
operator|.
name|warning
argument_list|(
name|aog
operator|.
name|getClass
argument_list|()
operator|+
literal|" not supported in CORBA binding.  Skipping."
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|XmlSchemaAttribute
name|attribute
init|=
operator|(
name|XmlSchemaAttribute
operator|)
name|aog
decl_stmt|;
name|QName
name|attrName
init|=
name|attribute
operator|.
name|getQName
argument_list|()
decl_stmt|;
if|if
condition|(
name|attrName
operator|.
name|getNamespaceURI
argument_list|()
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|attrName
operator|=
operator|new
name|QName
argument_list|(
name|uri
argument_list|,
name|attrName
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|CorbaType
name|membertype
init|=
literal|null
decl_stmt|;
name|boolean
name|attrQualified
init|=
name|getAttributeQualification
argument_list|(
name|attribute
argument_list|,
name|uri
argument_list|)
decl_stmt|;
if|if
condition|(
name|attribute
operator|.
name|getUse
argument_list|()
operator|==
name|XmlSchemaUse
operator|.
name|NONE
operator|||
name|attribute
operator|.
name|getUse
argument_list|()
operator|==
name|XmlSchemaUse
operator|.
name|OPTIONAL
condition|)
block|{
name|CorbaType
name|attType
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|attribute
operator|.
name|getSchemaType
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// REVISIT, edell bug in XmlSchema 1.2.
comment|// https://issues.apache.org/jira/browse/WSCOMMONS-208
name|attType
operator|=
name|convertSchemaToCorbaType
argument_list|(
name|attribute
operator|.
name|getSchemaType
argument_list|()
argument_list|,
name|checkPrefix
argument_list|(
name|attrName
argument_list|)
argument_list|,
name|attribute
operator|.
name|getSchemaType
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|attType
operator|!=
literal|null
condition|)
block|{
name|QName
name|typeName
init|=
name|attType
operator|.
name|getQName
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|isDuplicate
argument_list|(
name|attType
argument_list|)
condition|)
block|{
name|typeMappingType
operator|.
name|getStructOrExceptionOrUnion
argument_list|()
operator|.
name|add
argument_list|(
name|attType
argument_list|)
expr_stmt|;
block|}
name|QName
name|name
init|=
name|createQNameTargetNamespace
argument_list|(
name|typeName
operator|.
name|getLocalPart
argument_list|()
operator|+
literal|"_nil"
argument_list|)
decl_stmt|;
name|membertype
operator|=
name|createNillableUnion
argument_list|(
name|name
argument_list|,
name|checkPrefix
argument_list|(
name|attrName
argument_list|)
argument_list|,
name|createQNameCorbaNamespace
argument_list|(
name|typeName
operator|.
name|getLocalPart
argument_list|()
argument_list|)
argument_list|,
name|attrQualified
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|attType
operator|=
name|processPrimitiveType
argument_list|(
name|attribute
operator|.
name|getSchemaTypeName
argument_list|()
argument_list|)
expr_stmt|;
comment|//REVISIT, bravi, attType is null for the wsaddr type
comment|//{http://www.w3.org/2005/08/addressing}RelationshipTypeOpenEnum
if|if
condition|(
name|attType
operator|!=
literal|null
condition|)
block|{
name|QName
name|name
init|=
name|createQNameTargetNamespace
argument_list|(
name|attType
operator|.
name|getQName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
operator|+
literal|"_nil"
argument_list|)
decl_stmt|;
comment|//REVISIT, Edell - bug in Xmlschema 1.2
comment|// https://issues.apache.org/jira/browse/WSCOMMONS-208
name|membertype
operator|=
name|createNillableUnion
argument_list|(
name|name
argument_list|,
name|checkPrefix
argument_list|(
name|attrName
argument_list|)
argument_list|,
name|attType
operator|.
name|getQName
argument_list|()
argument_list|,
name|attrQualified
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|membertype
operator|!=
literal|null
condition|)
block|{
name|memName
operator|=
name|createQNameCorbaNamespace
argument_list|(
name|membertype
operator|.
name|getQName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isDuplicate
argument_list|(
name|membertype
argument_list|)
condition|)
block|{
name|typeMappingType
operator|.
name|getStructOrExceptionOrUnion
argument_list|()
operator|.
name|add
argument_list|(
name|membertype
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
if|if
condition|(
name|attribute
operator|.
name|getSchemaType
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|membertype
operator|=
name|convertSchemaToCorbaType
argument_list|(
name|attribute
operator|.
name|getSchemaType
argument_list|()
argument_list|,
name|attrName
argument_list|,
name|attribute
operator|.
name|getSchemaType
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|membertype
operator|=
name|processPrimitiveType
argument_list|(
name|attribute
operator|.
name|getSchemaTypeName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|membertype
operator|!=
literal|null
condition|)
block|{
name|MemberType
name|member
decl_stmt|;
name|String
name|memberName
init|=
name|attrName
operator|.
name|getLocalPart
argument_list|()
decl_stmt|;
name|member
operator|=
operator|new
name|MemberType
argument_list|()
expr_stmt|;
name|member
operator|.
name|setName
argument_list|(
name|memberName
argument_list|)
expr_stmt|;
if|if
condition|(
name|memName
operator|!=
literal|null
condition|)
block|{
name|member
operator|.
name|setIdltype
argument_list|(
name|memName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|member
operator|.
name|setIdltype
argument_list|(
name|membertype
operator|.
name|getQName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|attrQualified
condition|)
block|{
name|member
operator|.
name|setQualified
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|members
operator|.
name|add
argument_list|(
name|member
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|msg
init|=
literal|"Unsupported Attribute Found in CORBA Binding Generation:"
operator|+
name|attrName
decl_stmt|;
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
name|msg
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|members
return|;
block|}
specifier|private
name|CorbaType
name|processElementType
parameter_list|(
name|XmlSchemaElement
name|stype
parameter_list|,
name|QName
name|defaultName
parameter_list|,
name|String
name|uri
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|name
init|=
literal|null
decl_stmt|;
name|QName
name|schemaTypeName
init|=
literal|null
decl_stmt|;
name|XmlSchemaType
name|schemaType
init|=
name|stype
operator|.
name|getSchemaType
argument_list|()
decl_stmt|;
if|if
condition|(
name|stype
operator|.
name|getQName
argument_list|()
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|stype
operator|.
name|getRef
argument_list|()
operator|.
name|getTargetQName
argument_list|()
operator|==
literal|null
condition|)
block|{
name|schemaTypeName
operator|=
name|defaultName
expr_stmt|;
block|}
else|else
block|{
name|name
operator|=
name|stype
operator|.
name|getRef
argument_list|()
operator|.
name|getTargetQName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
expr_stmt|;
name|schemaType
operator|=
name|findSchemaType
argument_list|(
name|stype
operator|.
name|getRef
argument_list|()
operator|.
name|getTargetQName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|name
operator|=
name|stype
operator|.
name|getQName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|schemaTypeName
operator|==
literal|null
condition|)
block|{
name|schemaTypeName
operator|=
name|createQNameTargetNamespace
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
name|CorbaType
name|result
init|=
name|convertSchemaToCorbaType
argument_list|(
name|schemaType
argument_list|,
name|schemaTypeName
argument_list|,
name|schemaType
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|result
operator|.
name|setQualified
argument_list|(
name|getElementQualification
argument_list|(
name|stype
argument_list|,
name|uri
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
specifier|private
name|CorbaType
name|processSimpleType
parameter_list|(
name|XmlSchemaSimpleType
name|stype
parameter_list|,
name|QName
name|defaultName
parameter_list|,
name|boolean
name|anonymous
parameter_list|)
throws|throws
name|Exception
block|{
name|CorbaType
name|corbaTypeImpl
init|=
literal|null
decl_stmt|;
name|QName
name|name
decl_stmt|;
name|QName
name|schematypeName
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|stype
operator|.
name|getQName
argument_list|()
operator|==
literal|null
condition|)
block|{
name|schematypeName
operator|=
name|defaultName
expr_stmt|;
name|name
operator|=
name|createQNameTargetNamespace
argument_list|(
name|defaultName
operator|.
name|getLocalPart
argument_list|()
operator|+
literal|"Type"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|schematypeName
operator|=
name|checkPrefix
argument_list|(
name|stype
operator|.
name|getQName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|schematypeName
operator|==
literal|null
condition|)
block|{
name|schematypeName
operator|=
name|stype
operator|.
name|getQName
argument_list|()
expr_stmt|;
block|}
name|name
operator|=
name|createQNameCorbaNamespace
argument_list|(
name|schematypeName
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|stype
operator|.
name|getParent
argument_list|()
operator|.
name|getTargetNamespace
argument_list|()
operator|.
name|equals
argument_list|(
name|W3CConstants
operator|.
name|NU_SCHEMA_XSD
argument_list|)
condition|)
block|{
comment|// built in types
name|QName
name|stypeName
init|=
name|createQNameXmlSchemaNamespace
argument_list|(
name|stype
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|corbaTypeImpl
operator|=
name|getLocalType
argument_list|(
name|stypeName
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|stype
operator|.
name|getContent
argument_list|()
operator|instanceof
name|XmlSchemaSimpleTypeRestriction
condition|)
block|{
name|corbaTypeImpl
operator|=
name|processSimpleRestrictionType
argument_list|(
name|stype
argument_list|,
name|name
argument_list|,
name|schematypeName
argument_list|,
name|anonymous
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|stype
operator|.
name|getContent
argument_list|()
operator|instanceof
name|XmlSchemaSimpleTypeList
condition|)
block|{
name|XmlSchemaSimpleTypeList
name|ltype
init|=
operator|(
name|XmlSchemaSimpleTypeList
operator|)
name|stype
operator|.
name|getContent
argument_list|()
decl_stmt|;
name|CorbaType
name|itemType
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|ltype
operator|.
name|getItemType
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|itemType
operator|=
name|convertSchemaToCorbaType
argument_list|(
name|ltype
operator|.
name|getItemType
argument_list|()
argument_list|,
name|name
argument_list|,
name|stype
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|itemType
operator|!=
literal|null
condition|)
block|{
return|return
name|WSDLTypes
operator|.
name|mapToSequence
argument_list|(
name|name
argument_list|,
name|checkPrefix
argument_list|(
name|schematypeName
argument_list|)
argument_list|,
name|itemType
operator|.
name|getQName
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|)
return|;
block|}
return|return
name|itemType
return|;
block|}
name|QName
name|ltypeName
init|=
name|createQNameXmlSchemaNamespace
argument_list|(
name|ltype
operator|.
name|getItemTypeName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
decl_stmt|;
name|itemType
operator|=
name|processPrimitiveType
argument_list|(
name|ltypeName
argument_list|)
expr_stmt|;
if|if
condition|(
name|itemType
operator|!=
literal|null
condition|)
block|{
return|return
name|WSDLTypes
operator|.
name|mapToSequence
argument_list|(
name|name
argument_list|,
name|checkPrefix
argument_list|(
name|schematypeName
argument_list|)
argument_list|,
name|itemType
operator|.
name|getQName
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|)
return|;
block|}
comment|// if the type of the simpleContent is a list with another simple type.
name|XmlSchemaType
name|base
init|=
name|getSchemaType
argument_list|(
name|ltype
operator|.
name|getItemTypeName
argument_list|()
argument_list|)
decl_stmt|;
name|itemType
operator|=
name|convertSchemaToCorbaType
argument_list|(
name|base
argument_list|,
name|base
operator|.
name|getQName
argument_list|()
argument_list|,
name|base
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|itemType
operator|!=
literal|null
condition|)
block|{
return|return
name|WSDLTypes
operator|.
name|mapToSequence
argument_list|(
name|name
argument_list|,
name|checkPrefix
argument_list|(
name|schematypeName
argument_list|)
argument_list|,
name|itemType
operator|.
name|getQName
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|)
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|stype
operator|.
name|getContent
argument_list|()
operator|==
literal|null
condition|)
block|{
comment|// elements primitive type
name|QName
name|stypeName
init|=
name|createQNameXmlSchemaNamespace
argument_list|(
name|stype
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|corbaTypeImpl
operator|=
name|getLocalType
argument_list|(
name|stypeName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"SimpleType Union Not Supported in CORBA Binding"
argument_list|)
expr_stmt|;
block|}
return|return
name|corbaTypeImpl
return|;
block|}
specifier|private
name|CorbaType
name|processSimpleRestrictionType
parameter_list|(
name|XmlSchemaSimpleType
name|stype
parameter_list|,
name|QName
name|name
parameter_list|,
name|QName
name|schematypeName
parameter_list|,
name|boolean
name|anonymous
parameter_list|)
throws|throws
name|Exception
block|{
name|CorbaType
name|corbaTypeImpl
init|=
literal|null
decl_stmt|;
comment|// checks if enumeration
name|XmlSchemaSimpleTypeRestriction
name|restrictionType
init|=
operator|(
name|XmlSchemaSimpleTypeRestriction
operator|)
name|stype
operator|.
name|getContent
argument_list|()
decl_stmt|;
name|QName
name|baseName
init|=
name|checkPrefix
argument_list|(
name|restrictionType
operator|.
name|getBaseTypeName
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|maxLength
init|=
literal|null
decl_stmt|;
name|String
name|length
init|=
literal|null
decl_stmt|;
for|for
control|(
name|XmlSchemaFacet
name|val
range|:
name|restrictionType
operator|.
name|getFacets
argument_list|()
control|)
block|{
if|if
condition|(
name|val
operator|instanceof
name|XmlSchemaMaxLengthFacet
condition|)
block|{
name|maxLength
operator|=
name|val
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|val
operator|instanceof
name|XmlSchemaLengthFacet
condition|)
block|{
name|length
operator|=
name|val
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|isEnumeration
argument_list|(
name|restrictionType
argument_list|)
condition|)
block|{
name|corbaTypeImpl
operator|=
name|createCorbaEnum
argument_list|(
name|restrictionType
argument_list|,
name|name
argument_list|,
name|schematypeName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|restrictionType
operator|.
name|getBaseType
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|corbaTypeImpl
operator|=
name|convertSchemaToCorbaType
argument_list|(
name|restrictionType
operator|.
name|getBaseType
argument_list|()
argument_list|,
name|schematypeName
argument_list|,
name|stype
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|corbaTypeImpl
operator|=
name|processPrimitiveType
argument_list|(
name|baseName
argument_list|)
expr_stmt|;
if|if
condition|(
name|corbaTypeImpl
operator|==
literal|null
condition|)
block|{
name|XmlSchemaType
name|schematype
init|=
name|findSchemaType
argument_list|(
name|baseName
argument_list|)
decl_stmt|;
name|corbaTypeImpl
operator|=
name|convertSchemaToCorbaType
argument_list|(
name|schematype
argument_list|,
name|schematypeName
argument_list|,
name|schematype
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|corbaTypeImpl
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|corbaTypeImpl
operator|.
name|getType
argument_list|()
operator|.
name|equals
argument_list|(
name|W3CConstants
operator|.
name|NT_SCHEMA_STRING
argument_list|)
operator|||
operator|(
name|baseName
operator|.
name|equals
argument_list|(
name|W3CConstants
operator|.
name|NT_SCHEMA_STRING
argument_list|)
operator|)
condition|)
block|{
name|corbaTypeImpl
operator|=
name|WSDLTypes
operator|.
name|processStringType
argument_list|(
name|corbaTypeImpl
argument_list|,
name|name
argument_list|,
name|maxLength
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|corbaTypeImpl
operator|.
name|getType
argument_list|()
operator|.
name|equals
argument_list|(
name|W3CConstants
operator|.
name|NT_SCHEMA_DECIMAL
argument_list|)
operator|||
operator|(
name|baseName
operator|.
name|equals
argument_list|(
name|W3CConstants
operator|.
name|NT_SCHEMA_DECIMAL
argument_list|)
operator|)
condition|)
block|{
name|corbaTypeImpl
operator|=
name|WSDLTypes
operator|.
name|processDecimalType
argument_list|(
name|restrictionType
argument_list|,
name|name
argument_list|,
name|corbaTypeImpl
argument_list|,
name|anonymous
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|corbaTypeImpl
operator|.
name|getType
argument_list|()
operator|.
name|equals
argument_list|(
name|W3CConstants
operator|.
name|NT_SCHEMA_BASE64
argument_list|)
operator|)
operator|||
operator|(
name|baseName
operator|.
name|equals
argument_list|(
name|W3CConstants
operator|.
name|NT_SCHEMA_BASE64
argument_list|)
operator|)
operator|||
operator|(
name|corbaTypeImpl
operator|.
name|getType
argument_list|()
operator|.
name|equals
argument_list|(
name|W3CConstants
operator|.
name|NT_SCHEMA_HBIN
argument_list|)
operator|)
condition|)
block|{
name|corbaTypeImpl
operator|=
name|WSDLTypes
operator|.
name|processBase64Type
argument_list|(
name|corbaTypeImpl
argument_list|,
name|name
argument_list|,
name|maxLength
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|corbaTypeImpl
return|;
block|}
specifier|private
name|CorbaType
name|getLocalType
parameter_list|(
name|QName
name|qname
parameter_list|)
block|{
return|return
name|processPrimitiveType
argument_list|(
name|qname
argument_list|)
return|;
block|}
specifier|private
name|Enum
name|createCorbaEnum
parameter_list|(
name|XmlSchemaSimpleTypeRestriction
name|restrictionType
parameter_list|,
name|QName
name|name
parameter_list|,
name|QName
name|schematypeName
parameter_list|)
block|{
name|Enum
name|corbaEnum
init|=
operator|new
name|Enum
argument_list|()
decl_stmt|;
name|corbaEnum
operator|.
name|setType
argument_list|(
name|schematypeName
argument_list|)
expr_stmt|;
name|corbaEnum
operator|.
name|setName
argument_list|(
name|name
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
name|corbaEnum
operator|.
name|setQName
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|corbaEnum
operator|.
name|setRepositoryID
argument_list|(
name|REPO_STRING
operator|+
name|name
operator|.
name|getLocalPart
argument_list|()
operator|.
name|replace
argument_list|(
literal|'.'
argument_list|,
literal|'/'
argument_list|)
operator|+
name|IDL_VERSION
argument_list|)
expr_stmt|;
for|for
control|(
name|XmlSchemaFacet
name|f
range|:
name|restrictionType
operator|.
name|getFacets
argument_list|()
control|)
block|{
name|XmlSchemaEnumerationFacet
name|val
init|=
operator|(
name|XmlSchemaEnumerationFacet
operator|)
name|f
decl_stmt|;
name|Enumerator
name|enumerator
init|=
operator|new
name|Enumerator
argument_list|()
decl_stmt|;
name|enumerator
operator|.
name|setValue
argument_list|(
name|val
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|corbaEnum
operator|.
name|getEnumerator
argument_list|()
operator|.
name|add
argument_list|(
name|enumerator
argument_list|)
expr_stmt|;
block|}
return|return
name|corbaEnum
return|;
block|}
specifier|private
name|boolean
name|isEnumeration
parameter_list|(
name|XmlSchemaSimpleTypeRestriction
name|restriction
parameter_list|)
block|{
if|if
condition|(
operator|(
name|restriction
operator|==
literal|null
operator|)
operator|||
operator|(
name|restriction
operator|.
name|getFacets
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|0
operator|)
operator|||
operator|(
name|restriction
operator|.
name|getBaseTypeName
argument_list|()
operator|==
literal|null
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
name|XmlSchemaFacet
name|facet
range|:
name|restriction
operator|.
name|getFacets
argument_list|()
control|)
block|{
if|if
condition|(
name|facet
operator|instanceof
name|XmlSchemaEnumerationFacet
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|protected
name|XmlSchemaType
name|lookUpType
parameter_list|(
name|Part
name|part
parameter_list|)
block|{
name|XmlSchemaType
name|schemaType
init|=
literal|null
decl_stmt|;
for|for
control|(
name|XmlSchema
name|xmlSchema
range|:
name|xmlSchemaList
operator|.
name|getXmlSchemas
argument_list|()
control|)
block|{
if|if
condition|(
name|part
operator|.
name|getElementName
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|XmlSchemaElement
name|schemaElement
init|=
name|xmlSchema
operator|.
name|getElementByName
argument_list|(
name|part
operator|.
name|getElementName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|schemaElement
operator|!=
literal|null
condition|)
block|{
name|schemaType
operator|=
name|schemaElement
operator|.
name|getSchemaType
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|part
operator|.
name|getTypeName
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|schemaType
operator|=
name|xmlSchema
operator|.
name|getTypeByName
argument_list|(
name|part
operator|.
name|getTypeName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|schemaType
operator|!=
literal|null
condition|)
block|{
return|return
name|schemaType
return|;
block|}
block|}
return|return
name|schemaType
return|;
block|}
specifier|private
name|XmlSchemaType
name|findSchemaType
parameter_list|(
name|QName
name|typeName
parameter_list|)
block|{
for|for
control|(
name|XmlSchema
name|xmlSchema
range|:
name|xmlSchemaList
operator|.
name|getXmlSchemas
argument_list|()
control|)
block|{
comment|// if the schema includes other schemas need to search there.
name|XmlSchemaType
name|schemaType
init|=
name|findTypeInSchema
argument_list|(
name|xmlSchema
argument_list|,
name|typeName
argument_list|)
decl_stmt|;
if|if
condition|(
name|schemaType
operator|!=
literal|null
condition|)
block|{
return|return
name|schemaType
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|XmlSchemaType
name|findTypeInSchema
parameter_list|(
name|XmlSchema
name|xmlSchema
parameter_list|,
name|QName
name|typeName
parameter_list|)
block|{
name|XmlSchemaType
name|schemaType
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|xmlSchema
operator|.
name|getElementByName
argument_list|(
name|typeName
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|XmlSchemaElement
name|schemaElement
init|=
name|xmlSchema
operator|.
name|getElementByName
argument_list|(
name|typeName
argument_list|)
decl_stmt|;
name|schemaType
operator|=
name|schemaElement
operator|.
name|getSchemaType
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|xmlSchema
operator|.
name|getTypeByName
argument_list|(
name|typeName
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|schemaType
operator|=
name|xmlSchema
operator|.
name|getTypeByName
argument_list|(
name|typeName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|schemaType
operator|!=
literal|null
condition|)
block|{
return|return
name|schemaType
return|;
block|}
for|for
control|(
name|XmlSchemaExternal
name|extSchema
range|:
name|xmlSchema
operator|.
name|getExternals
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
operator|(
name|extSchema
operator|instanceof
name|XmlSchemaImport
operator|)
condition|)
block|{
name|schemaType
operator|=
name|findTypeInSchema
argument_list|(
name|extSchema
operator|.
name|getSchema
argument_list|()
argument_list|,
name|typeName
argument_list|)
expr_stmt|;
if|if
condition|(
name|schemaType
operator|!=
literal|null
condition|)
block|{
return|return
name|schemaType
return|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|protected
name|boolean
name|isSchemaTypeException
parameter_list|(
name|XmlSchemaType
name|stype
parameter_list|)
block|{
name|boolean
name|exception
init|=
literal|false
decl_stmt|;
name|XmlSchemaComplexType
name|complex
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|stype
operator|instanceof
name|XmlSchemaComplexType
condition|)
block|{
name|complex
operator|=
operator|(
name|XmlSchemaComplexType
operator|)
name|stype
expr_stmt|;
if|if
condition|(
operator|!
name|isLiteralArray
argument_list|(
name|complex
argument_list|)
operator|&&
operator|!
name|WSDLTypes
operator|.
name|isOMGUnion
argument_list|(
name|complex
argument_list|)
operator|&&
operator|!
name|WSDLTypes
operator|.
name|isUnion
argument_list|(
name|complex
argument_list|)
condition|)
block|{
name|exception
operator|=
literal|true
expr_stmt|;
block|}
block|}
return|return
name|exception
return|;
block|}
specifier|public
name|boolean
name|isLiteralArray
parameter_list|(
name|XmlSchemaComplexType
name|type
parameter_list|)
block|{
name|boolean
name|array
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|(
name|type
operator|.
name|getAttributes
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|0
operator|)
operator|&&
operator|(
name|type
operator|.
name|getParticle
argument_list|()
operator|instanceof
name|XmlSchemaSequence
operator|)
condition|)
block|{
name|XmlSchemaSequence
name|stype
init|=
operator|(
name|XmlSchemaSequence
operator|)
name|type
operator|.
name|getParticle
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|stype
operator|.
name|getItems
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|)
operator|&&
operator|(
name|stype
operator|.
name|getItems
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|XmlSchemaElement
operator|)
condition|)
block|{
name|XmlSchemaElement
name|el
init|=
operator|(
name|XmlSchemaElement
operator|)
name|stype
operator|.
name|getItems
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|el
operator|.
name|getMaxOccurs
argument_list|()
operator|==
literal|1
operator|)
condition|)
block|{
comment|// it's a literal array
name|array
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|el
operator|.
name|getMaxOccurs
argument_list|()
operator|==
literal|1
operator|&&
name|el
operator|.
name|getMinOccurs
argument_list|()
operator|==
literal|1
operator|&&
name|type
operator|.
name|getName
argument_list|()
operator|!=
literal|null
operator|&&
name|WSDLTypes
operator|.
name|isAnonymous
argument_list|(
name|type
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|array
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
return|return
name|array
return|;
block|}
comment|/**      * Create a CORBA Array or Sequence based on min and max Occurs If minOccurs ==      * maxOccurs == 1 then log warning and return null. Else if minOccurs is      * equal to maxOccurs then create an Array. Else create a Sequence      */
specifier|protected
name|CorbaType
name|createArray
parameter_list|(
name|QName
name|name
parameter_list|,
name|QName
name|schematypeName
parameter_list|,
name|QName
name|arrayType
parameter_list|,
name|Long
name|maxOccurs
parameter_list|,
name|Long
name|minOccurs
parameter_list|,
name|boolean
name|anonymous
parameter_list|)
block|{
return|return
name|createArray
argument_list|(
name|name
argument_list|,
name|schematypeName
argument_list|,
name|arrayType
argument_list|,
literal|null
argument_list|,
name|maxOccurs
argument_list|,
name|minOccurs
argument_list|,
name|anonymous
argument_list|)
return|;
block|}
comment|/**      * Create a CORBA Array or Sequence based on min and max Occurs If minOccurs ==      * maxOccurs == 1 then log warning and return null. Else if minOccurs is      * equal to maxOccurs then create an Array. Else create a Sequence      */
specifier|protected
name|CorbaType
name|createArray
parameter_list|(
name|QName
name|name
parameter_list|,
name|QName
name|schematypeName
parameter_list|,
name|QName
name|arrayType
parameter_list|,
name|QName
name|elName
parameter_list|,
name|Long
name|maxOccurs
parameter_list|,
name|Long
name|minOccurs
parameter_list|,
name|boolean
name|anonymous
parameter_list|)
block|{
name|int
name|max
init|=
name|maxOccurs
operator|.
name|intValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|max
operator|==
operator|-
literal|1
condition|)
block|{
return|return
name|WSDLTypes
operator|.
name|mapToSequence
argument_list|(
name|name
argument_list|,
name|schematypeName
argument_list|,
name|arrayType
argument_list|,
name|elName
argument_list|,
literal|0
argument_list|,
name|anonymous
argument_list|)
return|;
block|}
name|int
name|min
init|=
name|minOccurs
operator|.
name|intValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|min
operator|==
name|max
condition|)
block|{
if|if
condition|(
name|max
operator|==
literal|1
condition|)
block|{
if|if
condition|(
operator|!
name|anonymous
condition|)
block|{
name|String
name|msg
init|=
literal|"Couldn't Map to Array:"
operator|+
name|name
operator|+
literal|":minOccurs="
operator|+
name|minOccurs
operator|+
literal|":maxOccurs="
operator|+
name|maxOccurs
decl_stmt|;
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
name|msg
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
return|return
name|WSDLTypes
operator|.
name|mapToArray
argument_list|(
name|name
argument_list|,
name|checkPrefix
argument_list|(
name|schematypeName
argument_list|)
argument_list|,
name|arrayType
argument_list|,
name|elName
argument_list|,
name|max
argument_list|,
name|anonymous
argument_list|)
return|;
block|}
return|return
name|WSDLTypes
operator|.
name|mapToArray
argument_list|(
name|name
argument_list|,
name|checkPrefix
argument_list|(
name|schematypeName
argument_list|)
argument_list|,
name|arrayType
argument_list|,
name|elName
argument_list|,
name|max
argument_list|,
name|anonymous
argument_list|)
return|;
block|}
return|return
name|WSDLTypes
operator|.
name|mapToSequence
argument_list|(
name|name
argument_list|,
name|checkPrefix
argument_list|(
name|schematypeName
argument_list|)
argument_list|,
name|arrayType
argument_list|,
name|elName
argument_list|,
name|max
argument_list|,
name|anonymous
argument_list|)
return|;
block|}
specifier|private
name|CorbaType
name|processComplexType
parameter_list|(
name|XmlSchemaComplexType
name|complex
parameter_list|,
name|QName
name|defaultName
parameter_list|,
name|XmlSchemaAnnotation
name|annotation
parameter_list|,
name|boolean
name|anonymous
parameter_list|)
throws|throws
name|Exception
block|{
name|CorbaType
name|corbatype
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|isLiteralArray
argument_list|(
name|complex
argument_list|)
condition|)
block|{
name|corbatype
operator|=
name|processLiteralArray
argument_list|(
name|complex
argument_list|,
name|defaultName
argument_list|,
name|anonymous
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|WSDLTypes
operator|.
name|isOMGUnion
argument_list|(
name|complex
argument_list|)
condition|)
block|{
name|corbatype
operator|=
name|processOMGUnion
argument_list|(
name|complex
argument_list|,
name|defaultName
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|WSDLTypes
operator|.
name|isUnion
argument_list|(
name|complex
argument_list|)
condition|)
block|{
name|corbatype
operator|=
name|processRegularUnion
argument_list|(
name|complex
argument_list|,
name|defaultName
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|complex
operator|.
name|getQName
argument_list|()
operator|!=
literal|null
operator|&&
name|isIDLObjectType
argument_list|(
name|complex
operator|.
name|getQName
argument_list|()
argument_list|)
condition|)
block|{
comment|// process it.
name|corbatype
operator|=
name|WSDLTypes
operator|.
name|processObject
argument_list|(
name|def
argument_list|,
name|complex
argument_list|,
name|annotation
argument_list|,
name|checkPrefix
argument_list|(
name|complex
operator|.
name|getQName
argument_list|()
argument_list|)
argument_list|,
name|defaultName
argument_list|,
name|idlNamespace
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Deal the ComplexType as Struct
name|corbatype
operator|=
name|processStruct
argument_list|(
name|complex
argument_list|,
name|defaultName
argument_list|)
expr_stmt|;
block|}
return|return
name|corbatype
return|;
block|}
specifier|private
name|CorbaType
name|processStruct
parameter_list|(
name|XmlSchemaComplexType
name|complex
parameter_list|,
name|QName
name|defaultName
parameter_list|)
throws|throws
name|Exception
block|{
name|QName
name|name
decl_stmt|;
name|Struct
name|corbaStruct
init|=
literal|null
decl_stmt|;
name|QName
name|schematypeName
init|=
name|checkPrefix
argument_list|(
name|complex
operator|.
name|getQName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|schematypeName
operator|==
literal|null
condition|)
block|{
name|schematypeName
operator|=
name|createQNameTargetNamespace
argument_list|(
name|defaultName
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|defaultName
operator|.
name|getNamespaceURI
argument_list|()
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|schematypeName
operator|=
name|checkPrefix
argument_list|(
name|schematypeName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|schematypeName
operator|=
name|checkPrefix
argument_list|(
name|defaultName
argument_list|)
expr_stmt|;
block|}
name|name
operator|=
name|checkPrefix
argument_list|(
name|createQNameCorbaNamespace
argument_list|(
name|defaultName
operator|.
name|getLocalPart
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|name
operator|=
name|checkPrefix
argument_list|(
name|createQNameCorbaNamespace
argument_list|(
name|schematypeName
operator|.
name|getLocalPart
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|corbaStruct
operator|=
operator|(
name|Struct
operator|)
name|recursionMap
operator|.
name|get
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|corbaStruct
operator|!=
literal|null
condition|)
block|{
return|return
name|corbaStruct
return|;
block|}
name|corbaStruct
operator|=
operator|new
name|Struct
argument_list|()
expr_stmt|;
name|corbaStruct
operator|.
name|setName
argument_list|(
name|name
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
name|corbaStruct
operator|.
name|setQName
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|String
name|repoId
init|=
name|REPO_STRING
operator|+
name|name
operator|.
name|getLocalPart
argument_list|()
operator|.
name|replace
argument_list|(
literal|'.'
argument_list|,
literal|'/'
argument_list|)
operator|+
name|IDL_VERSION
decl_stmt|;
name|corbaStruct
operator|.
name|setRepositoryID
argument_list|(
name|repoId
argument_list|)
expr_stmt|;
name|corbaStruct
operator|.
name|setType
argument_list|(
name|schematypeName
argument_list|)
expr_stmt|;
name|recursionMap
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|corbaStruct
argument_list|)
expr_stmt|;
if|if
condition|(
name|complex
operator|.
name|getContentModel
argument_list|()
operator|instanceof
name|XmlSchemaSimpleContent
condition|)
block|{
name|corbaStruct
operator|=
name|processSimpleContentStruct
argument_list|(
operator|(
name|XmlSchemaSimpleContent
operator|)
name|complex
operator|.
name|getContentModel
argument_list|()
argument_list|,
name|defaultName
argument_list|,
name|corbaStruct
argument_list|,
name|schematypeName
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|complex
operator|.
name|getContentModel
argument_list|()
operator|instanceof
name|XmlSchemaComplexContent
condition|)
block|{
name|corbaStruct
operator|=
name|processComplexContentStruct
argument_list|(
operator|(
name|XmlSchemaComplexContent
operator|)
name|complex
operator|.
name|getContentModel
argument_list|()
argument_list|,
name|defaultName
argument_list|,
name|corbaStruct
argument_list|,
name|schematypeName
argument_list|)
expr_stmt|;
block|}
comment|// Process attributes at ComplexType level
if|if
condition|(
operator|!
name|complex
operator|.
name|getAttributes
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|String
name|uri
decl_stmt|;
if|if
condition|(
name|schematypeName
operator|!=
literal|null
condition|)
block|{
name|uri
operator|=
name|schematypeName
operator|.
name|getNamespaceURI
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|uri
operator|=
name|defaultName
operator|.
name|getNamespaceURI
argument_list|()
expr_stmt|;
block|}
name|List
argument_list|<
name|MemberType
argument_list|>
name|attlist2
init|=
name|processAttributesAsMembers
argument_list|(
name|complex
operator|.
name|getAttributes
argument_list|()
argument_list|,
name|uri
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|attlist2
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|MemberType
name|member
init|=
name|attlist2
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|corbaStruct
operator|.
name|getMember
argument_list|()
operator|.
name|add
argument_list|(
name|member
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|complex
operator|.
name|getParticle
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|MemberType
argument_list|>
name|members
init|=
name|processContainerAsMembers
argument_list|(
name|complex
operator|.
name|getParticle
argument_list|()
argument_list|,
name|defaultName
argument_list|,
name|schematypeName
argument_list|)
decl_stmt|;
for|for
control|(
name|MemberType
name|memberType
range|:
name|members
control|)
block|{
name|corbaStruct
operator|.
name|getMember
argument_list|()
operator|.
name|add
argument_list|(
name|memberType
argument_list|)
expr_stmt|;
block|}
block|}
name|recursionMap
operator|.
name|remove
argument_list|(
name|name
argument_list|)
expr_stmt|;
return|return
name|corbaStruct
return|;
block|}
specifier|protected
name|Struct
name|processSimpleContentStruct
parameter_list|(
name|XmlSchemaSimpleContent
name|simpleContent
parameter_list|,
name|QName
name|defaultName
parameter_list|,
name|Struct
name|corbaStruct
parameter_list|,
name|QName
name|schematypeName
parameter_list|)
throws|throws
name|Exception
block|{
name|XmlSchemaType
name|base
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|MemberType
argument_list|>
name|attrMembers
init|=
literal|null
decl_stmt|;
name|CorbaType
name|basetype
init|=
literal|null
decl_stmt|;
name|String
name|uri
decl_stmt|;
if|if
condition|(
name|schematypeName
operator|!=
literal|null
condition|)
block|{
name|uri
operator|=
name|schematypeName
operator|.
name|getNamespaceURI
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|uri
operator|=
name|defaultName
operator|.
name|getNamespaceURI
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|simpleContent
operator|.
name|getContent
argument_list|()
operator|instanceof
name|XmlSchemaSimpleContentExtension
condition|)
block|{
name|XmlSchemaSimpleContentExtension
name|ext
init|=
operator|(
name|XmlSchemaSimpleContentExtension
operator|)
name|simpleContent
operator|.
name|getContent
argument_list|()
decl_stmt|;
if|if
condition|(
name|ext
operator|.
name|getBaseTypeName
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|basetype
operator|=
name|processPrimitiveType
argument_list|(
name|ext
operator|.
name|getBaseTypeName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|basetype
operator|==
literal|null
condition|)
block|{
name|base
operator|=
name|getSchemaType
argument_list|(
name|ext
operator|.
name|getBaseTypeName
argument_list|()
argument_list|)
expr_stmt|;
name|basetype
operator|=
name|convertSchemaToCorbaType
argument_list|(
name|base
argument_list|,
name|base
operator|.
name|getQName
argument_list|()
argument_list|,
name|base
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|basetype
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// process ext types ????
name|MemberType
name|basemember
init|=
operator|new
name|MemberType
argument_list|()
decl_stmt|;
name|basemember
operator|.
name|setName
argument_list|(
literal|"_simpleTypeValue"
argument_list|)
expr_stmt|;
name|QName
name|baseTypeName
init|=
name|checkPrefix
argument_list|(
name|basetype
operator|.
name|getQName
argument_list|()
argument_list|)
decl_stmt|;
name|basemember
operator|.
name|setIdltype
argument_list|(
name|baseTypeName
argument_list|)
expr_stmt|;
name|corbaStruct
operator|.
name|getMember
argument_list|()
operator|.
name|add
argument_list|(
name|basemember
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isDuplicate
argument_list|(
name|basetype
argument_list|)
condition|)
block|{
name|typeMappingType
operator|.
name|getStructOrExceptionOrUnion
argument_list|()
operator|.
name|add
argument_list|(
name|basetype
argument_list|)
expr_stmt|;
block|}
name|attrMembers
operator|=
name|processAttributesAsMembers
argument_list|(
name|ext
operator|.
name|getAttributes
argument_list|()
argument_list|,
name|uri
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|simpleContent
operator|.
name|getContent
argument_list|()
operator|instanceof
name|XmlSchemaSimpleContentRestriction
condition|)
block|{
name|XmlSchemaSimpleContentRestriction
name|restrict
init|=
operator|(
name|XmlSchemaSimpleContentRestriction
operator|)
name|simpleContent
operator|.
name|getContent
argument_list|()
decl_stmt|;
name|base
operator|=
name|restrict
operator|.
name|getBaseType
argument_list|()
expr_stmt|;
if|if
condition|(
name|restrict
operator|.
name|getBaseTypeName
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|basetype
operator|=
name|processPrimitiveType
argument_list|(
name|restrict
operator|.
name|getBaseTypeName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|basetype
operator|==
literal|null
condition|)
block|{
name|base
operator|=
name|getSchemaType
argument_list|(
name|restrict
operator|.
name|getBaseTypeName
argument_list|()
argument_list|)
expr_stmt|;
name|basetype
operator|=
name|convertSchemaToCorbaType
argument_list|(
name|base
argument_list|,
name|base
operator|.
name|getQName
argument_list|()
argument_list|,
name|base
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|MemberType
name|basemember
init|=
operator|new
name|MemberType
argument_list|()
decl_stmt|;
name|basemember
operator|.
name|setName
argument_list|(
literal|"_simpleTypeValue"
argument_list|)
expr_stmt|;
name|QName
name|baseTypeName
init|=
name|checkPrefix
argument_list|(
name|basetype
operator|.
name|getQName
argument_list|()
argument_list|)
decl_stmt|;
name|basemember
operator|.
name|setIdltype
argument_list|(
name|baseTypeName
argument_list|)
expr_stmt|;
name|corbaStruct
operator|.
name|getMember
argument_list|()
operator|.
name|add
argument_list|(
name|basemember
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isDuplicate
argument_list|(
name|basetype
argument_list|)
condition|)
block|{
name|typeMappingType
operator|.
name|getStructOrExceptionOrUnion
argument_list|()
operator|.
name|add
argument_list|(
name|basetype
argument_list|)
expr_stmt|;
block|}
name|attrMembers
operator|=
name|processAttributesAsMembers
argument_list|(
name|restrict
operator|.
name|getAttributes
argument_list|()
argument_list|,
name|uri
argument_list|)
expr_stmt|;
block|}
comment|//Deal with Attributes defined in Extension
if|if
condition|(
name|attrMembers
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|attrMembers
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|MemberType
name|member
init|=
name|attrMembers
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|corbaStruct
operator|.
name|getMember
argument_list|()
operator|.
name|add
argument_list|(
name|member
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|corbaStruct
return|;
block|}
specifier|protected
name|Struct
name|processComplexContentStruct
parameter_list|(
name|XmlSchemaComplexContent
name|complex
parameter_list|,
name|QName
name|defaultName
parameter_list|,
name|Struct
name|corbaStruct
parameter_list|,
name|QName
name|schematypeName
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|complex
operator|.
name|getContent
argument_list|()
operator|instanceof
name|XmlSchemaComplexContentExtension
condition|)
block|{
name|XmlSchemaComplexContentExtension
name|extype
init|=
operator|(
name|XmlSchemaComplexContentExtension
operator|)
name|complex
operator|.
name|getContent
argument_list|()
decl_stmt|;
name|QName
name|extName
init|=
name|extype
operator|.
name|getBaseTypeName
argument_list|()
decl_stmt|;
name|corbaStruct
operator|=
name|processComplexContentStructParticle
argument_list|(
name|extype
operator|.
name|getParticle
argument_list|()
argument_list|,
name|defaultName
argument_list|,
name|corbaStruct
argument_list|,
name|schematypeName
argument_list|,
name|extName
argument_list|,
name|extype
operator|.
name|getAttributes
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|complex
operator|.
name|getContent
argument_list|()
operator|instanceof
name|XmlSchemaComplexContentRestriction
condition|)
block|{
name|XmlSchemaComplexContentRestriction
name|extype
init|=
operator|(
name|XmlSchemaComplexContentRestriction
operator|)
name|complex
operator|.
name|getContent
argument_list|()
decl_stmt|;
name|QName
name|extName
init|=
name|extype
operator|.
name|getBaseTypeName
argument_list|()
decl_stmt|;
name|corbaStruct
operator|=
name|processComplexContentStructParticle
argument_list|(
name|extype
operator|.
name|getParticle
argument_list|()
argument_list|,
name|defaultName
argument_list|,
name|corbaStruct
argument_list|,
name|schematypeName
argument_list|,
name|extName
argument_list|,
name|extype
operator|.
name|getAttributes
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|corbaStruct
return|;
block|}
specifier|private
name|Struct
name|processComplexContentStructParticle
parameter_list|(
name|XmlSchemaParticle
name|extype
parameter_list|,
name|QName
name|defaultName
parameter_list|,
name|Struct
name|corbaStruct
parameter_list|,
name|QName
name|schematypeName
parameter_list|,
name|QName
name|extName
parameter_list|,
name|List
argument_list|<
name|XmlSchemaAttributeOrGroupRef
argument_list|>
name|list
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|uri
decl_stmt|;
if|if
condition|(
name|schematypeName
operator|!=
literal|null
condition|)
block|{
name|uri
operator|=
name|schematypeName
operator|.
name|getNamespaceURI
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|uri
operator|=
name|defaultName
operator|.
name|getNamespaceURI
argument_list|()
expr_stmt|;
block|}
comment|// Add base as a member of this struct
name|MemberType
name|memberType
init|=
operator|new
name|MemberType
argument_list|()
decl_stmt|;
name|memberType
operator|.
name|setName
argument_list|(
name|extName
operator|.
name|getLocalPart
argument_list|()
operator|+
literal|"_f"
argument_list|)
expr_stmt|;
if|if
condition|(
name|extName
operator|.
name|getLocalPart
argument_list|()
operator|.
name|equals
argument_list|(
literal|"anyType"
argument_list|)
condition|)
block|{
name|memberType
operator|.
name|setIdltype
argument_list|(
name|processPrimitiveType
argument_list|(
name|extName
argument_list|)
operator|.
name|getQName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|memberType
operator|.
name|setIdltype
argument_list|(
name|createQNameCorbaNamespace
argument_list|(
name|extName
operator|.
name|getLocalPart
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|corbaStruct
operator|.
name|getMember
argument_list|()
operator|.
name|add
argument_list|(
name|memberType
argument_list|)
expr_stmt|;
comment|// process attributes at complexContent level
name|List
argument_list|<
name|MemberType
argument_list|>
name|attlist1
init|=
name|processAttributesAsMembers
argument_list|(
name|list
argument_list|,
name|uri
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|attlist1
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|MemberType
name|member
init|=
name|attlist1
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|corbaStruct
operator|.
name|getMember
argument_list|()
operator|.
name|add
argument_list|(
name|member
argument_list|)
expr_stmt|;
block|}
comment|// Process members of Current Type
if|if
condition|(
name|extype
operator|instanceof
name|XmlSchemaChoice
condition|)
block|{
name|XmlSchemaChoice
name|choice
init|=
operator|(
name|XmlSchemaChoice
operator|)
name|extype
decl_stmt|;
name|MemberType
name|choicemem
init|=
name|processComplexContentStructChoice
argument_list|(
name|choice
argument_list|,
name|schematypeName
argument_list|,
name|defaultName
argument_list|)
decl_stmt|;
name|choicemem
operator|.
name|setAnonschematype
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|corbaStruct
operator|.
name|getMember
argument_list|()
operator|.
name|add
argument_list|(
name|choicemem
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|extype
operator|instanceof
name|XmlSchemaSequence
condition|)
block|{
name|XmlSchemaSequence
name|seq
init|=
operator|(
name|XmlSchemaSequence
operator|)
name|extype
decl_stmt|;
name|corbaStruct
operator|=
name|processComplexContentStructSequence
argument_list|(
name|corbaStruct
argument_list|,
name|seq
argument_list|,
name|defaultName
argument_list|,
name|schematypeName
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|extype
operator|instanceof
name|XmlSchemaAll
condition|)
block|{
name|XmlSchemaAll
name|all
init|=
operator|(
name|XmlSchemaAll
operator|)
name|extype
decl_stmt|;
name|corbaStruct
operator|=
name|processComplexContentStructSchemaAll
argument_list|(
name|corbaStruct
argument_list|,
name|all
argument_list|,
name|defaultName
argument_list|,
name|schematypeName
argument_list|)
expr_stmt|;
block|}
return|return
name|corbaStruct
return|;
block|}
specifier|private
name|Struct
name|processComplexContentStructSequence
parameter_list|(
name|Struct
name|corbaStruct
parameter_list|,
name|XmlSchemaSequence
name|seq
parameter_list|,
name|QName
name|defaultName
parameter_list|,
name|QName
name|schematypeName
parameter_list|)
throws|throws
name|Exception
block|{
name|CorbaType
name|seqtype
init|=
name|processSequenceType
argument_list|(
name|seq
argument_list|,
name|defaultName
argument_list|,
name|schematypeName
argument_list|)
decl_stmt|;
name|MemberType
name|seqmem
init|=
operator|new
name|MemberType
argument_list|()
decl_stmt|;
name|seqmem
operator|.
name|setName
argument_list|(
name|seqtype
operator|.
name|getQName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
operator|+
literal|"_f"
argument_list|)
expr_stmt|;
name|QName
name|type
init|=
name|createQNameCorbaNamespace
argument_list|(
name|seqtype
operator|.
name|getQName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
decl_stmt|;
name|seqmem
operator|.
name|setIdltype
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|seqmem
operator|.
name|setAnonschematype
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|seqtype
operator|.
name|isSetQualified
argument_list|()
operator|&&
name|seqtype
operator|.
name|isQualified
argument_list|()
condition|)
block|{
name|seqmem
operator|.
name|setQualified
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|corbaStruct
operator|.
name|getMember
argument_list|()
operator|.
name|add
argument_list|(
name|seqmem
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isDuplicate
argument_list|(
name|seqtype
argument_list|)
condition|)
block|{
name|typeMappingType
operator|.
name|getStructOrExceptionOrUnion
argument_list|()
operator|.
name|add
argument_list|(
name|seqtype
argument_list|)
expr_stmt|;
block|}
return|return
name|corbaStruct
return|;
block|}
specifier|private
name|Struct
name|processComplexContentStructSchemaAll
parameter_list|(
name|Struct
name|corbaStruct
parameter_list|,
name|XmlSchemaAll
name|all
parameter_list|,
name|QName
name|defaultName
parameter_list|,
name|QName
name|schematypeName
parameter_list|)
throws|throws
name|Exception
block|{
name|CorbaType
name|alltype
init|=
name|processAllType
argument_list|(
name|all
argument_list|,
name|defaultName
argument_list|,
name|schematypeName
argument_list|)
decl_stmt|;
name|MemberType
name|allmem
init|=
operator|new
name|MemberType
argument_list|()
decl_stmt|;
name|allmem
operator|.
name|setName
argument_list|(
name|alltype
operator|.
name|getQName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
operator|+
literal|"_f"
argument_list|)
expr_stmt|;
name|allmem
operator|.
name|setIdltype
argument_list|(
name|alltype
operator|.
name|getQName
argument_list|()
argument_list|)
expr_stmt|;
name|allmem
operator|.
name|setAnonschematype
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|alltype
operator|.
name|isSetQualified
argument_list|()
operator|&&
name|alltype
operator|.
name|isQualified
argument_list|()
condition|)
block|{
name|allmem
operator|.
name|setQualified
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|corbaStruct
operator|.
name|getMember
argument_list|()
operator|.
name|add
argument_list|(
name|allmem
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isDuplicate
argument_list|(
name|alltype
argument_list|)
condition|)
block|{
name|typeMappingType
operator|.
name|getStructOrExceptionOrUnion
argument_list|()
operator|.
name|add
argument_list|(
name|alltype
argument_list|)
expr_stmt|;
block|}
return|return
name|corbaStruct
return|;
block|}
specifier|protected
name|MemberType
name|processComplexContentStructChoice
parameter_list|(
name|XmlSchemaChoice
name|choice
parameter_list|,
name|QName
name|schematypeName
parameter_list|,
name|QName
name|defaultName
parameter_list|)
throws|throws
name|Exception
block|{
name|QName
name|choicename
init|=
name|createQNameTargetNamespace
argument_list|(
name|schematypeName
operator|.
name|getLocalPart
argument_list|()
operator|+
literal|"ChoiceType"
argument_list|)
decl_stmt|;
name|Union
name|choiceunion
init|=
name|createUnion
argument_list|(
name|choicename
argument_list|,
name|choice
argument_list|,
name|defaultName
argument_list|,
name|schematypeName
argument_list|)
decl_stmt|;
name|MemberType
name|choicemem
init|=
operator|new
name|MemberType
argument_list|()
decl_stmt|;
if|if
condition|(
name|choiceunion
operator|!=
literal|null
condition|)
block|{
name|String
name|repoId
init|=
name|REPO_STRING
operator|+
name|choiceunion
operator|.
name|getQName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
operator|.
name|replace
argument_list|(
literal|'.'
argument_list|,
literal|'/'
argument_list|)
operator|+
name|IDL_VERSION
decl_stmt|;
name|choiceunion
operator|.
name|setRepositoryID
argument_list|(
name|repoId
argument_list|)
expr_stmt|;
name|choicemem
operator|.
name|setName
argument_list|(
name|choiceunion
operator|.
name|getQName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
operator|+
literal|"_f"
argument_list|)
expr_stmt|;
name|choicemem
operator|.
name|setIdltype
argument_list|(
name|createQNameCorbaNamespace
argument_list|(
name|choiceunion
operator|.
name|getQName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isDuplicate
argument_list|(
name|choiceunion
argument_list|)
condition|)
block|{
name|typeMappingType
operator|.
name|getStructOrExceptionOrUnion
argument_list|()
operator|.
name|add
argument_list|(
name|choiceunion
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|choicemem
return|;
block|}
specifier|protected
name|CorbaType
name|createNillableUnion
parameter_list|(
name|QName
name|name
parameter_list|,
name|QName
name|schemaType
parameter_list|,
name|QName
name|membertype
parameter_list|,
name|boolean
name|isQualified
parameter_list|)
block|{
name|Union
name|nilUnion
init|=
operator|new
name|Union
argument_list|()
decl_stmt|;
name|nilUnion
operator|.
name|setName
argument_list|(
name|name
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
name|nilUnion
operator|.
name|setType
argument_list|(
name|schemaType
argument_list|)
expr_stmt|;
name|nilUnion
operator|.
name|setQName
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|nilUnion
operator|.
name|setDiscriminator
argument_list|(
name|CorbaConstants
operator|.
name|NT_CORBA_BOOLEAN
argument_list|)
expr_stmt|;
name|String
name|id
init|=
name|REPO_STRING
operator|+
name|nilUnion
operator|.
name|getQName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
operator|.
name|replace
argument_list|(
literal|'.'
argument_list|,
literal|'/'
argument_list|)
operator|+
name|IDL_VERSION
decl_stmt|;
name|nilUnion
operator|.
name|setRepositoryID
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|Unionbranch
name|branch
init|=
operator|new
name|Unionbranch
argument_list|()
decl_stmt|;
name|branch
operator|.
name|setName
argument_list|(
literal|"value"
argument_list|)
expr_stmt|;
name|branch
operator|.
name|setIdltype
argument_list|(
name|membertype
argument_list|)
expr_stmt|;
name|branch
operator|.
name|setDefault
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|isQualified
condition|)
block|{
name|branch
operator|.
name|setQualified
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|CaseType
name|caseType
init|=
operator|new
name|CaseType
argument_list|()
decl_stmt|;
name|caseType
operator|.
name|setLabel
argument_list|(
literal|"TRUE"
argument_list|)
expr_stmt|;
name|branch
operator|.
name|getCase
argument_list|()
operator|.
name|add
argument_list|(
name|caseType
argument_list|)
expr_stmt|;
name|nilUnion
operator|.
name|getUnionbranch
argument_list|()
operator|.
name|add
argument_list|(
name|branch
argument_list|)
expr_stmt|;
name|nilUnion
operator|.
name|setNillable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|nilUnion
return|;
block|}
specifier|private
name|CorbaType
name|processLiteralArray
parameter_list|(
name|XmlSchemaComplexType
name|complex
parameter_list|,
name|QName
name|defaultName
parameter_list|,
name|boolean
name|anonymous
parameter_list|)
throws|throws
name|Exception
block|{
comment|// NEED TO DO
name|QName
name|name
decl_stmt|;
name|QName
name|typeName
init|=
literal|null
decl_stmt|;
name|QName
name|schematypeName
init|=
name|checkPrefix
argument_list|(
name|complex
operator|.
name|getQName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|schematypeName
operator|==
literal|null
condition|)
block|{
name|schematypeName
operator|=
name|defaultName
expr_stmt|;
name|name
operator|=
name|createQNameCorbaNamespace
argument_list|(
name|defaultName
operator|.
name|getLocalPart
argument_list|()
operator|+
literal|"Type"
argument_list|)
expr_stmt|;
name|schematypeName
operator|=
name|checkPrefix
argument_list|(
name|schematypeName
argument_list|)
expr_stmt|;
name|name
operator|=
name|checkPrefix
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|name
operator|=
name|createQNameCorbaNamespace
argument_list|(
name|schematypeName
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
name|name
operator|=
name|checkPrefix
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
name|CorbaType
name|arrayType
init|=
literal|null
decl_stmt|;
name|XmlSchemaElement
name|arrayEl
init|=
literal|null
decl_stmt|;
name|QName
name|elName
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|complex
operator|.
name|getParticle
argument_list|()
operator|instanceof
name|XmlSchemaSequence
condition|)
block|{
name|XmlSchemaSequence
name|seq
init|=
operator|(
name|XmlSchemaSequence
operator|)
name|complex
operator|.
name|getParticle
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|XmlSchemaSequenceMember
argument_list|>
name|iterator
init|=
name|seq
operator|.
name|getItems
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|XmlSchemaSequenceMember
argument_list|>
name|iter
init|=
name|seq
operator|.
name|getItems
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
if|if
condition|(
name|iter
operator|.
name|next
argument_list|()
operator|instanceof
name|XmlSchemaElement
condition|)
block|{
name|arrayEl
operator|=
operator|(
name|XmlSchemaElement
operator|)
name|iterator
operator|.
name|next
argument_list|()
expr_stmt|;
name|elName
operator|=
name|arrayEl
operator|.
name|getQName
argument_list|()
expr_stmt|;
name|XmlSchemaType
name|atype
init|=
name|arrayEl
operator|.
name|getSchemaType
argument_list|()
decl_stmt|;
if|if
condition|(
name|elName
operator|==
literal|null
condition|)
block|{
name|elName
operator|=
name|arrayEl
operator|.
name|getRef
argument_list|()
operator|.
name|getTargetQName
argument_list|()
expr_stmt|;
comment|/*                          * TODO: why are we looking up an element name with findSchemaType?                          */
name|atype
operator|=
name|findSchemaType
argument_list|(
name|elName
argument_list|)
expr_stmt|;
block|}
name|String
name|uri
init|=
name|defaultName
operator|.
name|getNamespaceURI
argument_list|()
decl_stmt|;
if|if
condition|(
name|complex
operator|.
name|getQName
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|uri
operator|=
name|complex
operator|.
name|getQName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|elName
operator|.
name|getNamespaceURI
argument_list|()
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|elName
operator|=
operator|new
name|QName
argument_list|(
name|uri
argument_list|,
name|elName
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|QName
name|arrayTypeName
init|=
name|elName
decl_stmt|;
if|if
condition|(
name|anonymous
condition|)
block|{
name|arrayTypeName
operator|=
operator|new
name|QName
argument_list|(
name|elName
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
name|defaultName
operator|.
name|getLocalPart
argument_list|()
operator|+
literal|"."
operator|+
name|elName
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|arrayType
operator|=
name|convertSchemaToCorbaType
argument_list|(
name|atype
argument_list|,
name|arrayTypeName
argument_list|,
name|atype
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|boolean
name|isQualified
init|=
name|getElementQualification
argument_list|(
name|arrayEl
argument_list|,
name|uri
argument_list|)
decl_stmt|;
if|if
condition|(
name|isQualified
condition|)
block|{
name|arrayType
operator|.
name|setQualified
argument_list|(
name|isQualified
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|elName
operator|=
operator|new
name|QName
argument_list|(
literal|""
argument_list|,
name|elName
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|typeName
operator|=
name|arrayType
operator|.
name|getQName
argument_list|()
expr_stmt|;
block|}
block|}
block|}
name|Long
name|maxOccurs
init|=
literal|null
decl_stmt|;
name|Long
name|minOccurs
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|arrayEl
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|arrayEl
operator|.
name|isNillable
argument_list|()
condition|)
block|{
name|QName
name|nilunionname
init|=
name|createQNameTargetNamespace
argument_list|(
name|arrayType
operator|.
name|getQName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
operator|+
literal|"_nil"
argument_list|)
decl_stmt|;
name|boolean
name|isQualified
init|=
name|arrayType
operator|.
name|isSetQualified
argument_list|()
operator|&&
name|arrayType
operator|.
name|isQualified
argument_list|()
decl_stmt|;
name|arrayType
operator|=
name|createNillableUnion
argument_list|(
name|nilunionname
argument_list|,
name|elName
argument_list|,
name|arrayType
operator|.
name|getQName
argument_list|()
argument_list|,
name|isQualified
argument_list|)
expr_stmt|;
name|typeName
operator|=
name|createQNameCorbaNamespace
argument_list|(
name|arrayType
operator|.
name|getQName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|arrayType
operator|!=
literal|null
operator|&&
operator|!
name|isDuplicate
argument_list|(
name|arrayType
argument_list|)
condition|)
block|{
name|typeMappingType
operator|.
name|getStructOrExceptionOrUnion
argument_list|()
operator|.
name|add
argument_list|(
name|arrayType
argument_list|)
expr_stmt|;
block|}
block|}
name|maxOccurs
operator|=
name|arrayEl
operator|.
name|getMaxOccurs
argument_list|()
expr_stmt|;
name|minOccurs
operator|=
name|arrayEl
operator|.
name|getMinOccurs
argument_list|()
expr_stmt|;
block|}
return|return
name|createArray
argument_list|(
name|name
argument_list|,
name|schematypeName
argument_list|,
name|checkPrefix
argument_list|(
name|typeName
argument_list|)
argument_list|,
name|elName
argument_list|,
name|maxOccurs
argument_list|,
name|minOccurs
argument_list|,
name|anonymous
argument_list|)
return|;
block|}
specifier|private
name|CorbaType
name|processOMGUnion
parameter_list|(
name|XmlSchemaComplexType
name|complex
parameter_list|,
name|QName
name|defaultName
parameter_list|)
throws|throws
name|Exception
block|{
name|QName
name|name
decl_stmt|;
name|Union
name|corbaUnion
init|=
literal|null
decl_stmt|;
name|QName
name|schematypeName
init|=
name|checkPrefix
argument_list|(
name|complex
operator|.
name|getQName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|schematypeName
operator|==
literal|null
condition|)
block|{
name|schematypeName
operator|=
name|defaultName
expr_stmt|;
name|name
operator|=
name|createQNameCorbaNamespace
argument_list|(
name|defaultName
operator|.
name|getLocalPart
argument_list|()
operator|+
literal|"Type"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|name
operator|=
name|createQNameCorbaNamespace
argument_list|(
name|schematypeName
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|corbaUnion
operator|=
operator|new
name|Union
argument_list|()
expr_stmt|;
name|corbaUnion
operator|.
name|setName
argument_list|(
name|name
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
name|corbaUnion
operator|.
name|setQName
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|String
name|id
init|=
name|REPO_STRING
operator|+
name|name
operator|.
name|getLocalPart
argument_list|()
operator|.
name|replace
argument_list|(
literal|'.'
argument_list|,
literal|'/'
argument_list|)
operator|+
name|IDL_VERSION
decl_stmt|;
name|corbaUnion
operator|.
name|setRepositoryID
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|corbaUnion
operator|.
name|setType
argument_list|(
name|schematypeName
argument_list|)
expr_stmt|;
name|XmlSchemaSequence
name|stype
init|=
operator|(
name|XmlSchemaSequence
operator|)
name|complex
operator|.
name|getParticle
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|XmlSchemaSequenceMember
argument_list|>
name|it
init|=
name|stype
operator|.
name|getItems
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|XmlSchemaParticle
name|st1
init|=
operator|(
name|XmlSchemaParticle
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|XmlSchemaParticle
name|st2
init|=
operator|(
name|XmlSchemaParticle
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|XmlSchemaElement
name|discEl
init|=
literal|null
decl_stmt|;
name|XmlSchemaChoice
name|choice
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|st1
operator|instanceof
name|XmlSchemaElement
condition|)
block|{
name|discEl
operator|=
operator|(
name|XmlSchemaElement
operator|)
name|st1
expr_stmt|;
name|choice
operator|=
operator|(
name|XmlSchemaChoice
operator|)
name|st2
expr_stmt|;
block|}
else|else
block|{
name|discEl
operator|=
operator|(
name|XmlSchemaElement
operator|)
name|st2
expr_stmt|;
name|choice
operator|=
operator|(
name|XmlSchemaChoice
operator|)
name|st1
expr_stmt|;
block|}
name|CorbaType
name|disctype
init|=
name|convertSchemaToCorbaType
argument_list|(
name|discEl
operator|.
name|getSchemaType
argument_list|()
argument_list|,
name|discEl
operator|.
name|getQName
argument_list|()
argument_list|,
name|discEl
operator|.
name|getSchemaType
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|corbaUnion
operator|.
name|setDiscriminator
argument_list|(
name|disctype
operator|.
name|getQName
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|MemberType
argument_list|>
name|fields
init|=
name|processContainerAsMembers
argument_list|(
name|choice
argument_list|,
name|defaultName
argument_list|,
name|schematypeName
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|caselist
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|disctype
operator|instanceof
name|Enum
condition|)
block|{
name|Enum
name|corbaenum
init|=
operator|(
name|Enum
operator|)
name|disctype
decl_stmt|;
name|Iterator
argument_list|<
name|Enumerator
argument_list|>
name|iterator
init|=
name|corbaenum
operator|.
name|getEnumerator
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Enumerator
name|enumerator
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|caselist
operator|.
name|add
argument_list|(
name|enumerator
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|SUPPORTEDDISTYPES
operator|.
name|contains
argument_list|(
name|disctype
operator|.
name|getQName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|disctype
operator|.
name|getQName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
operator|.
name|equals
argument_list|(
literal|"long"
argument_list|)
operator|||
name|disctype
operator|.
name|getQName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
operator|.
name|equals
argument_list|(
literal|"short"
argument_list|)
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fields
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|caselist
operator|.
name|add
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|disctype
operator|.
name|getQName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
operator|.
name|equals
argument_list|(
literal|"char"
argument_list|)
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fields
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|caselist
operator|.
name|add
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|disctype
operator|.
name|getQName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
operator|.
name|equals
argument_list|(
literal|"char"
argument_list|)
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fields
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|caselist
operator|.
name|add
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|disctype
operator|.
name|getQName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
operator|.
name|equals
argument_list|(
literal|"boolean"
argument_list|)
condition|)
block|{
if|if
condition|(
name|fields
operator|.
name|size
argument_list|()
operator|==
literal|2
condition|)
block|{
name|caselist
operator|.
name|add
argument_list|(
literal|"TRUE"
argument_list|)
expr_stmt|;
name|caselist
operator|.
name|add
argument_list|(
literal|"FALSE"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|fields
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|caselist
operator|.
name|add
argument_list|(
literal|"TRUE"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|msg
init|=
literal|"Discriminator Type doesnt match number of Choices in Union:"
operator|+
name|name
decl_stmt|;
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
name|msg
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|WSDLTypes
operator|.
name|processUnionBranches
argument_list|(
name|corbaUnion
argument_list|,
name|fields
argument_list|,
name|caselist
argument_list|)
expr_stmt|;
return|return
name|corbaUnion
return|;
block|}
specifier|private
name|CorbaType
name|processRegularUnion
parameter_list|(
name|XmlSchemaComplexType
name|complex
parameter_list|,
name|QName
name|defaultName
parameter_list|)
throws|throws
name|Exception
block|{
comment|//NEED TO DO
name|QName
name|name
init|=
literal|null
decl_stmt|;
name|QName
name|schematypeName
init|=
name|complex
operator|.
name|getQName
argument_list|()
decl_stmt|;
if|if
condition|(
name|schematypeName
operator|==
literal|null
condition|)
block|{
name|schematypeName
operator|=
name|defaultName
expr_stmt|;
name|name
operator|=
name|createQNameCorbaNamespace
argument_list|(
name|defaultName
operator|.
name|getLocalPart
argument_list|()
operator|+
literal|"Type"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|name
operator|=
name|createQNameCorbaNamespace
argument_list|(
name|schematypeName
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|createUnion
argument_list|(
name|name
argument_list|,
operator|(
name|XmlSchemaChoice
operator|)
name|complex
operator|.
name|getParticle
argument_list|()
argument_list|,
name|defaultName
argument_list|,
name|schematypeName
argument_list|)
return|;
block|}
specifier|protected
name|Union
name|createUnion
parameter_list|(
name|QName
name|name
parameter_list|,
name|XmlSchemaChoice
name|choice
parameter_list|,
name|QName
name|defaultName
parameter_list|,
name|QName
name|schematypeName
parameter_list|)
throws|throws
name|Exception
block|{
name|Union
name|corbaUnion
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|recursionMap
operator|.
name|get
argument_list|(
name|name
argument_list|)
operator|instanceof
name|Union
condition|)
block|{
name|corbaUnion
operator|=
operator|(
name|Union
operator|)
name|recursionMap
operator|.
name|get
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|corbaUnion
operator|!=
literal|null
condition|)
block|{
return|return
name|corbaUnion
return|;
block|}
block|}
name|corbaUnion
operator|=
operator|new
name|Union
argument_list|()
expr_stmt|;
name|corbaUnion
operator|.
name|setName
argument_list|(
name|name
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
name|corbaUnion
operator|.
name|setQName
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|corbaUnion
operator|.
name|setType
argument_list|(
name|schematypeName
argument_list|)
expr_stmt|;
name|String
name|id
init|=
name|REPO_STRING
operator|+
name|name
operator|.
name|getLocalPart
argument_list|()
operator|.
name|replace
argument_list|(
literal|'.'
argument_list|,
literal|'/'
argument_list|)
operator|+
name|IDL_VERSION
decl_stmt|;
name|corbaUnion
operator|.
name|setRepositoryID
argument_list|(
name|id
argument_list|)
expr_stmt|;
comment|//Set Integer as Discriminator
name|corbaUnion
operator|.
name|setDiscriminator
argument_list|(
name|CorbaConstants
operator|.
name|NT_CORBA_LONG
argument_list|)
expr_stmt|;
comment|// add to the list of possible recursive types
name|recursionMap
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|corbaUnion
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|MemberType
argument_list|>
name|fields
init|=
name|processContainerAsMembers
argument_list|(
name|choice
argument_list|,
name|defaultName
argument_list|,
name|schematypeName
argument_list|)
decl_stmt|;
comment|//Choose an Integer as a Discriminator
name|List
argument_list|<
name|String
argument_list|>
name|caselist
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fields
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|caselist
operator|.
name|add
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|corbaUnion
operator|=
name|WSDLTypes
operator|.
name|processUnionBranches
argument_list|(
name|corbaUnion
argument_list|,
name|fields
argument_list|,
name|caselist
argument_list|)
expr_stmt|;
name|recursionMap
operator|.
name|remove
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isDuplicate
argument_list|(
name|corbaUnion
argument_list|)
condition|)
block|{
name|typeMappingType
operator|.
name|getStructOrExceptionOrUnion
argument_list|()
operator|.
name|add
argument_list|(
name|corbaUnion
argument_list|)
expr_stmt|;
block|}
return|return
name|corbaUnion
return|;
block|}
specifier|protected
name|boolean
name|isDuplicate
parameter_list|(
name|CorbaType
name|corbaTypeImpl
parameter_list|)
block|{
name|String
name|corbaName
init|=
name|corbaTypeImpl
operator|.
name|getName
argument_list|()
decl_stmt|;
name|QName
name|corbaType
init|=
name|corbaTypeImpl
operator|.
name|getType
argument_list|()
decl_stmt|;
name|QName
name|primName
init|=
name|createQNameXmlSchemaNamespace
argument_list|(
name|corbaName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|CorbaType
operator|)
name|CORBAPRIMITIVEMAP
operator|.
name|get
argument_list|(
name|primName
argument_list|)
operator|!=
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
operator|!
name|typeMappingType
operator|.
name|getStructOrExceptionOrUnion
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Iterator
argument_list|<
name|CorbaType
argument_list|>
name|i
init|=
name|typeMappingType
operator|.
name|getStructOrExceptionOrUnion
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|CorbaType
name|type
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|corbaName
operator|!=
literal|null
operator|)
operator|&&
name|type
operator|.
name|getType
argument_list|()
operator|!=
literal|null
operator|&&
name|corbaType
operator|!=
literal|null
operator|&&
operator|(
name|corbaName
operator|.
name|equals
argument_list|(
name|type
operator|.
name|getName
argument_list|()
argument_list|)
operator|)
operator|&&
operator|(
name|corbaType
operator|.
name|getLocalPart
argument_list|()
operator|.
name|equals
argument_list|(
name|type
operator|.
name|getType
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
operator|)
operator|&&
operator|(
name|corbaTypeImpl
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|type
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|protected
name|CorbaType
name|isDuplicateException
parameter_list|(
name|CorbaType
name|corbaTypeImpl
parameter_list|)
block|{
name|CorbaType
name|duplicate
init|=
literal|null
decl_stmt|;
name|String
name|corbaName
init|=
name|corbaTypeImpl
operator|.
name|getName
argument_list|()
decl_stmt|;
name|String
name|corbaType
init|=
name|corbaTypeImpl
operator|.
name|getType
argument_list|()
operator|.
name|getLocalPart
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|typeMappingType
operator|.
name|getStructOrExceptionOrUnion
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Iterator
argument_list|<
name|CorbaType
argument_list|>
name|i
init|=
name|typeMappingType
operator|.
name|getStructOrExceptionOrUnion
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|CorbaType
name|type
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|corbaName
operator|.
name|equals
argument_list|(
name|type
operator|.
name|getName
argument_list|()
argument_list|)
operator|&&
name|corbaType
operator|.
name|equals
argument_list|(
name|type
operator|.
name|getType
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
operator|&&
name|type
operator|instanceof
name|Struct
condition|)
block|{
return|return
name|type
return|;
block|}
block|}
block|}
return|return
name|duplicate
return|;
block|}
specifier|protected
name|QName
name|checkPrefix
parameter_list|(
name|QName
name|schematypeName
parameter_list|)
block|{
name|QName
name|name
init|=
name|schematypeName
decl_stmt|;
if|if
condition|(
operator|(
name|name
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|name
operator|.
name|getPrefix
argument_list|()
operator|==
literal|null
operator|||
name|name
operator|.
name|getPrefix
argument_list|()
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
operator|)
condition|)
block|{
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|name
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|name
return|;
block|}
name|String
name|prefix
init|=
name|def
operator|.
name|getPrefix
argument_list|(
name|name
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|prefix
operator|==
literal|null
condition|)
block|{
name|prefix
operator|=
name|xmlSchemaList
operator|.
name|getSchemaByTargetNamespace
argument_list|(
name|name
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
operator|.
name|getNamespaceContext
argument_list|()
operator|.
name|getPrefix
argument_list|(
name|name
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|prefix
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|QName
argument_list|(
name|name
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
name|name
operator|.
name|getLocalPart
argument_list|()
argument_list|,
name|prefix
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
return|return
name|name
return|;
block|}
specifier|public
name|QName
name|createQNameTargetNamespace
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
operator|new
name|QName
argument_list|(
name|def
operator|.
name|getTargetNamespace
argument_list|()
argument_list|,
name|name
argument_list|,
name|def
operator|.
name|getPrefix
argument_list|(
name|def
operator|.
name|getTargetNamespace
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|QName
name|createQNameCorbaNamespace
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
operator|new
name|QName
argument_list|(
name|getIdlNamespace
argument_list|()
argument_list|,
name|name
argument_list|,
name|def
operator|.
name|getPrefix
argument_list|(
name|getIdlNamespace
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|QName
name|createQName
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|namespaceName
parameter_list|,
name|String
name|prefix
parameter_list|)
block|{
return|return
operator|new
name|QName
argument_list|(
name|name
argument_list|,
name|namespaceName
argument_list|,
name|prefix
argument_list|)
return|;
block|}
specifier|public
name|QName
name|createQNameXmlSchemaNamespace
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
operator|new
name|QName
argument_list|(
name|W3CConstants
operator|.
name|NU_SCHEMA_XSD
argument_list|,
name|name
argument_list|,
name|W3CConstants
operator|.
name|NP_SCHEMA_XSD
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|isIDLObjectType
parameter_list|(
name|QName
name|typeName
parameter_list|)
block|{
return|return
name|typeName
operator|.
name|equals
argument_list|(
name|ReferenceConstants
operator|.
name|WSADDRESSING_TYPE
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|isAddressingNamespace
parameter_list|(
name|QName
name|typeName
parameter_list|)
block|{
return|return
operator|(
name|typeName
operator|!=
literal|null
operator|)
operator|&&
operator|(
operator|!
name|isIDLObjectType
argument_list|(
name|typeName
argument_list|)
operator|)
operator|&&
operator|(
name|typeName
operator|.
name|getNamespaceURI
argument_list|()
operator|.
name|equals
argument_list|(
name|ReferenceConstants
operator|.
name|WSADDRESSING_NAMESPACE
argument_list|)
operator|)
return|;
block|}
specifier|protected
specifier|static
name|boolean
name|queryBinding
parameter_list|(
name|Definition
name|definition
parameter_list|,
name|QName
name|bqname
parameter_list|)
block|{
name|Collection
argument_list|<
name|Binding
argument_list|>
name|bindings
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
name|definition
operator|.
name|getBindings
argument_list|()
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Binding
name|binding
range|:
name|bindings
control|)
block|{
if|if
condition|(
name|binding
operator|.
name|getQName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
operator|.
name|equals
argument_list|(
name|bqname
operator|.
name|getLocalPart
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|getElementQualification
parameter_list|(
name|XmlSchemaElement
name|element
parameter_list|,
name|String
name|uri
parameter_list|)
block|{
name|QName
name|schemaName
init|=
name|element
operator|.
name|getQName
argument_list|()
decl_stmt|;
if|if
condition|(
name|element
operator|.
name|isRef
argument_list|()
condition|)
block|{
name|schemaName
operator|=
name|element
operator|.
name|getRef
argument_list|()
operator|.
name|getTargetQName
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|schemaName
operator|.
name|getNamespaceURI
argument_list|()
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|schemaName
operator|=
operator|new
name|QName
argument_list|(
name|uri
argument_list|,
name|schemaName
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|boolean
name|qualified
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|element
operator|.
name|getForm
argument_list|()
operator|==
name|XmlSchemaForm
operator|.
name|QUALIFIED
condition|)
block|{
name|qualified
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|qualified
operator|=
name|WSDLUtils
operator|.
name|isElementFormQualified
argument_list|(
name|xmlSchemaList
argument_list|,
name|schemaName
argument_list|)
expr_stmt|;
block|}
return|return
name|qualified
return|;
block|}
specifier|private
name|boolean
name|getAttributeQualification
parameter_list|(
name|XmlSchemaAttribute
name|attr
parameter_list|,
name|String
name|uri
parameter_list|)
block|{
name|QName
name|schemaName
init|=
name|attr
operator|.
name|getQName
argument_list|()
decl_stmt|;
name|boolean
name|qualified
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|attr
operator|.
name|getForm
argument_list|()
operator|==
name|XmlSchemaForm
operator|.
name|QUALIFIED
condition|)
block|{
name|qualified
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|qualified
operator|=
name|WSDLUtils
operator|.
name|isElementFormQualified
argument_list|(
name|xmlSchemaList
argument_list|,
name|schemaName
argument_list|)
expr_stmt|;
block|}
return|return
name|qualified
return|;
block|}
block|}
end_class

end_unit

