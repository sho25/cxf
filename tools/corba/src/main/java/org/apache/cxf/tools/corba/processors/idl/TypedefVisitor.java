begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|corba
operator|.
name|processors
operator|.
name|idl
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|Definition
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|collections
operator|.
name|AST
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|Alias
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|CorbaConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|CorbaTypeImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|constants
operator|.
name|Constants
import|;
end_import

begin_class
specifier|public
class|class
name|TypedefVisitor
extends|extends
name|VisitorBase
block|{
specifier|public
name|TypedefVisitor
parameter_list|(
name|Scope
name|scope
parameter_list|,
name|Definition
name|defn
parameter_list|,
name|XmlSchema
name|schemaRef
parameter_list|,
name|WSDLASTVisitor
name|wsdlVisitor
parameter_list|)
block|{
name|super
argument_list|(
name|scope
argument_list|,
name|defn
argument_list|,
name|schemaRef
argument_list|,
name|wsdlVisitor
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|boolean
name|accept
parameter_list|(
name|AST
name|node
parameter_list|)
block|{
if|if
condition|(
name|node
operator|.
name|getType
argument_list|()
operator|==
name|IDLTokenTypes
operator|.
name|LITERAL_typedef
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|void
name|visit
parameter_list|(
name|AST
name|typedefNode
parameter_list|)
block|{
comment|// "typedef"<type_declarator>
comment|//<type_declarator> ::=<type_spec><declarators>
name|AST
name|typeDeclaratorNode
init|=
name|typedefNode
operator|.
name|getFirstChild
argument_list|()
decl_stmt|;
name|AST
name|identifierNode
init|=
name|TypesUtils
operator|.
name|getCorbaTypeNameNode
argument_list|(
name|typeDeclaratorNode
argument_list|)
decl_stmt|;
name|TypesVisitor
name|typesVisitor
init|=
operator|new
name|TypesVisitor
argument_list|(
name|getScope
argument_list|()
argument_list|,
name|definition
argument_list|,
name|schema
argument_list|,
name|wsdlVisitor
argument_list|,
name|identifierNode
argument_list|)
decl_stmt|;
name|typesVisitor
operator|.
name|visit
argument_list|(
name|typeDeclaratorNode
argument_list|)
expr_stmt|;
name|XmlSchemaType
name|schemaType
init|=
name|typesVisitor
operator|.
name|getSchemaType
argument_list|()
decl_stmt|;
name|CorbaTypeImpl
name|corbaType
init|=
name|typesVisitor
operator|.
name|getCorbaType
argument_list|()
decl_stmt|;
name|Scope
name|fullyQualifiedName
init|=
name|typesVisitor
operator|.
name|getFullyQualifiedName
argument_list|()
decl_stmt|;
name|Scope
name|typedefScope
init|=
operator|new
name|Scope
argument_list|(
name|getScope
argument_list|()
argument_list|,
name|identifierNode
argument_list|)
decl_stmt|;
if|if
condition|(
name|SequenceVisitor
operator|.
name|accept
argument_list|(
name|typeDeclaratorNode
argument_list|)
operator|||
name|FixedVisitor
operator|.
name|accept
argument_list|(
name|typeDeclaratorNode
argument_list|)
condition|)
block|{
comment|// Handle cases "typedef sequence"
comment|//              "typedef fixed"
name|DeclaratorVisitor
name|declaratorVisitor
init|=
operator|new
name|DeclaratorVisitor
argument_list|(
name|typedefScope
argument_list|,
name|definition
argument_list|,
name|schema
argument_list|,
name|wsdlVisitor
argument_list|,
name|schemaType
argument_list|,
name|corbaType
argument_list|,
name|fullyQualifiedName
argument_list|)
decl_stmt|;
name|declaratorVisitor
operator|.
name|visit
argument_list|(
name|identifierNode
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|StringVisitor
operator|.
name|accept
argument_list|(
name|typeDeclaratorNode
argument_list|)
condition|)
block|{
comment|// Handle cases "typedef string"
comment|//              "typedef wstring"
if|if
condition|(
name|StringVisitor
operator|.
name|isBounded
argument_list|(
name|typeDeclaratorNode
argument_list|)
operator|&&
operator|!
name|wsdlVisitor
operator|.
name|getBoundedStringOverride
argument_list|()
condition|)
block|{
name|DeclaratorVisitor
name|declaratorVisitor
init|=
operator|new
name|DeclaratorVisitor
argument_list|(
name|typedefScope
argument_list|,
name|definition
argument_list|,
name|schema
argument_list|,
name|wsdlVisitor
argument_list|,
name|schemaType
argument_list|,
name|corbaType
argument_list|,
name|fullyQualifiedName
argument_list|)
decl_stmt|;
name|declaratorVisitor
operator|.
name|visit
argument_list|(
name|identifierNode
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// unbounded string type is already in the XmlSchema and only needs to be added
comment|// to the CorbaTypeMap, therefore we cannot use DeclaratorVisitor here.
while|while
condition|(
name|identifierNode
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|ArrayVisitor
operator|.
name|accept
argument_list|(
name|identifierNode
argument_list|)
condition|)
block|{
name|ArrayVisitor
name|arrayVisitor
init|=
operator|new
name|ArrayVisitor
argument_list|(
operator|new
name|Scope
argument_list|(
name|getScope
argument_list|()
argument_list|,
name|identifierNode
operator|.
name|getText
argument_list|()
argument_list|)
argument_list|,
name|definition
argument_list|,
name|schema
argument_list|,
name|wsdlVisitor
argument_list|,
name|identifierNode
argument_list|,
name|fullyQualifiedName
argument_list|)
decl_stmt|;
name|arrayVisitor
operator|.
name|setSchemaType
argument_list|(
name|schemaType
argument_list|)
expr_stmt|;
name|arrayVisitor
operator|.
name|setCorbaType
argument_list|(
name|corbaType
argument_list|)
expr_stmt|;
name|arrayVisitor
operator|.
name|visit
argument_list|(
name|identifierNode
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|generateStringAlias
argument_list|(
name|typeDeclaratorNode
argument_list|,
name|identifierNode
argument_list|,
name|schemaType
argument_list|,
name|corbaType
argument_list|,
name|fullyQualifiedName
argument_list|)
expr_stmt|;
block|}
name|identifierNode
operator|=
name|identifierNode
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
comment|// typedef used to define an alias
comment|// if declaring an array, do not generate aliases
if|if
condition|(
operator|!
name|ArrayVisitor
operator|.
name|accept
argument_list|(
name|identifierNode
argument_list|)
condition|)
block|{
name|generateAlias
argument_list|(
name|identifierNode
argument_list|,
name|schemaType
argument_list|,
name|corbaType
argument_list|,
name|fullyQualifiedName
argument_list|)
expr_stmt|;
name|corbaType
operator|=
name|getCorbaType
argument_list|()
expr_stmt|;
block|}
name|DeclaratorVisitor
name|declaratorVisitor
init|=
operator|new
name|DeclaratorVisitor
argument_list|(
name|typedefScope
argument_list|,
name|definition
argument_list|,
name|schema
argument_list|,
name|wsdlVisitor
argument_list|,
name|schemaType
argument_list|,
name|corbaType
argument_list|,
name|fullyQualifiedName
argument_list|)
decl_stmt|;
name|declaratorVisitor
operator|.
name|visit
argument_list|(
name|identifierNode
argument_list|)
expr_stmt|;
block|}
name|setSchemaType
argument_list|(
name|schemaType
argument_list|)
expr_stmt|;
name|setCorbaType
argument_list|(
name|corbaType
argument_list|)
expr_stmt|;
name|setFullyQualifiedName
argument_list|(
name|fullyQualifiedName
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|generateAlias
parameter_list|(
name|AST
name|identifierNode
parameter_list|,
name|XmlSchemaType
name|schemaType
parameter_list|,
name|CorbaTypeImpl
name|corbaType
parameter_list|,
name|Scope
name|fqName
parameter_list|)
block|{
name|Scope
name|scopedName
init|=
operator|new
name|Scope
argument_list|(
name|getScope
argument_list|()
argument_list|,
name|identifierNode
argument_list|)
decl_stmt|;
comment|// corba:alias
name|Alias
name|alias
init|=
operator|new
name|Alias
argument_list|()
decl_stmt|;
name|alias
operator|.
name|setQName
argument_list|(
operator|new
name|QName
argument_list|(
name|typeMap
operator|.
name|getTargetNamespace
argument_list|()
argument_list|,
name|scopedName
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|corbaType
operator|!=
literal|null
condition|)
block|{
name|alias
operator|.
name|setBasetype
argument_list|(
name|corbaType
operator|.
name|getQName
argument_list|()
argument_list|)
expr_stmt|;
comment|// if (schemaType == null) might not be correct here
block|}
elseif|else
if|if
condition|(
name|schemaType
operator|==
literal|null
condition|)
block|{
name|wsdlVisitor
operator|.
name|getDeferredActions
argument_list|()
operator|.
name|add
argument_list|(
name|fqName
argument_list|,
operator|new
name|TypedefDeferredAction
argument_list|(
name|alias
argument_list|)
argument_list|)
expr_stmt|;
name|scopedNames
operator|.
name|add
argument_list|(
name|scopedName
argument_list|)
expr_stmt|;
block|}
name|alias
operator|.
name|setRepositoryID
argument_list|(
name|scopedName
operator|.
name|toIDLRepositoryID
argument_list|()
argument_list|)
expr_stmt|;
comment|// add corba:alias
name|setCorbaType
argument_list|(
name|alias
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|generateStringAlias
parameter_list|(
name|AST
name|typeDeclaratorNode
parameter_list|,
name|AST
name|identifierNode
parameter_list|,
name|XmlSchemaType
name|schemaType
parameter_list|,
name|CorbaTypeImpl
name|corbaType
parameter_list|,
name|Scope
name|fqName
parameter_list|)
block|{
name|Scope
name|typedefScope
init|=
operator|new
name|Scope
argument_list|(
name|getScope
argument_list|()
argument_list|,
name|identifierNode
argument_list|)
decl_stmt|;
name|Alias
name|corbaString
init|=
operator|new
name|Alias
argument_list|()
decl_stmt|;
if|if
condition|(
name|typeDeclaratorNode
operator|.
name|getType
argument_list|()
operator|==
name|IDLTokenTypes
operator|.
name|LITERAL_string
condition|)
block|{
name|corbaString
operator|.
name|setBasetype
argument_list|(
name|CorbaConstants
operator|.
name|NT_CORBA_STRING
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|typeDeclaratorNode
operator|.
name|getType
argument_list|()
operator|==
name|IDLTokenTypes
operator|.
name|LITERAL_wstring
condition|)
block|{
name|corbaString
operator|.
name|setBasetype
argument_list|(
name|CorbaConstants
operator|.
name|NT_CORBA_WSTRING
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// should never get here
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"[TypedefVisitor] Attempted to visit an invalid node: "
operator|+
name|typeDeclaratorNode
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
name|Scope
name|newScope
init|=
operator|new
name|Scope
argument_list|(
name|typedefScope
operator|.
name|getParent
argument_list|()
argument_list|,
name|identifierNode
argument_list|)
decl_stmt|;
name|corbaString
operator|.
name|setQName
argument_list|(
operator|new
name|QName
argument_list|(
name|typeMap
operator|.
name|getTargetNamespace
argument_list|()
argument_list|,
name|newScope
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|corbaString
operator|.
name|setType
argument_list|(
name|Constants
operator|.
name|XSD_STRING
argument_list|)
expr_stmt|;
name|corbaString
operator|.
name|setRepositoryID
argument_list|(
name|newScope
operator|.
name|toIDLRepositoryID
argument_list|()
argument_list|)
expr_stmt|;
name|typeMap
operator|.
name|getStructOrExceptionOrUnion
argument_list|()
operator|.
name|add
argument_list|(
name|corbaString
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

