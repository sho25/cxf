begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|tools
operator|.
name|corba
operator|.
name|processors
operator|.
name|idl
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|Definition
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|collections
operator|.
name|AST
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|Const
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|corba
operator|.
name|wsdl
operator|.
name|CorbaTypeImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaType
import|;
end_import

begin_class
specifier|public
class|class
name|ConstVisitor
extends|extends
name|VisitorBase
block|{
specifier|public
name|ConstVisitor
parameter_list|(
name|Scope
name|scope
parameter_list|,
name|Definition
name|defn
parameter_list|,
name|XmlSchema
name|schemaRef
parameter_list|,
name|WSDLASTVisitor
name|wsdlVisitor
parameter_list|)
block|{
name|super
argument_list|(
name|scope
argument_list|,
name|defn
argument_list|,
name|schemaRef
argument_list|,
name|wsdlVisitor
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|boolean
name|accept
parameter_list|(
name|AST
name|node
parameter_list|)
block|{
return|return
name|node
operator|.
name|getType
argument_list|()
operator|==
name|IDLTokenTypes
operator|.
name|LITERAL_const
return|;
block|}
specifier|public
name|void
name|visit
parameter_list|(
name|AST
name|constNode
parameter_list|)
block|{
comment|//<const_dcl> ::= "const"<const_type><identifier> "="<const_exp>
comment|//<const_type> ::=<integer_type>
comment|//                |<char_type>
comment|//                |<wide_char_type>
comment|//                |<boolean_type>
comment|//                |<floating_pt_type>
comment|//                |<string_type>
comment|//                |<wide_string_type>
comment|//                |<fixed_pt_const_type>
comment|//                |<scoped_name>
comment|//                |<octet_type>
name|AST
name|constTypeNode
init|=
name|constNode
operator|.
name|getFirstChild
argument_list|()
decl_stmt|;
name|AST
name|constNameNode
init|=
name|TypesUtils
operator|.
name|getCorbaTypeNameNode
argument_list|(
name|constTypeNode
argument_list|)
decl_stmt|;
name|AST
name|constValueNode
init|=
name|constNameNode
operator|.
name|getNextSibling
argument_list|()
decl_stmt|;
comment|// build value string
name|StringBuilder
name|constValue
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|constValueNode
operator|.
name|toString
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|constValue
operator|.
name|append
argument_list|(
name|constValueNode
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|constValueNode
operator|=
name|constValueNode
operator|.
name|getFirstChild
argument_list|()
expr_stmt|;
if|if
condition|(
name|constValue
operator|.
name|length
argument_list|()
operator|==
literal|1
condition|)
block|{
comment|// might be a control char
name|byte
name|ch
init|=
operator|(
name|byte
operator|)
name|constValue
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|ch
operator|>=
literal|0
operator|&&
name|ch
operator|<=
literal|31
condition|)
block|{
comment|// ascii code between 0 and 31 is invisible control code
name|constValue
operator|.
name|deleteCharAt
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|constValue
operator|.
name|append
argument_list|(
literal|"\\"
operator|+
name|Integer
operator|.
name|toOctalString
argument_list|(
name|ch
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
while|while
condition|(
name|constValueNode
operator|!=
literal|null
condition|)
block|{
name|constValue
operator|.
name|append
argument_list|(
name|constValueNode
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|constValueNode
operator|=
name|constValueNode
operator|.
name|getFirstChild
argument_list|()
expr_stmt|;
block|}
name|QName
name|constQName
init|=
operator|new
name|QName
argument_list|(
name|typeMap
operator|.
name|getTargetNamespace
argument_list|()
argument_list|,
operator|new
name|Scope
argument_list|(
name|getScope
argument_list|()
argument_list|,
name|constNameNode
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|Visitor
name|visitor
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|PrimitiveTypesVisitor
operator|.
name|accept
argument_list|(
name|constTypeNode
argument_list|)
condition|)
block|{
name|visitor
operator|=
operator|new
name|PrimitiveTypesVisitor
argument_list|(
name|getScope
argument_list|()
argument_list|,
name|definition
argument_list|,
name|schema
argument_list|,
name|schemas
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|StringVisitor
operator|.
name|accept
argument_list|(
name|constTypeNode
argument_list|)
condition|)
block|{
comment|// string_type_spec
comment|// wstring_type_spec
name|visitor
operator|=
operator|new
name|StringVisitor
argument_list|(
name|getScope
argument_list|()
argument_list|,
name|definition
argument_list|,
name|schema
argument_list|,
name|wsdlVisitor
argument_list|,
name|constTypeNode
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|FixedPtConstVisitor
operator|.
name|accept
argument_list|(
name|constTypeNode
argument_list|)
condition|)
block|{
name|visitor
operator|=
operator|new
name|FixedPtConstVisitor
argument_list|(
name|getScope
argument_list|()
argument_list|,
name|definition
argument_list|,
name|schema
argument_list|,
name|schemas
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ScopedNameVisitor
operator|.
name|accept
argument_list|(
name|getScope
argument_list|()
argument_list|,
name|definition
argument_list|,
name|schema
argument_list|,
name|constTypeNode
argument_list|,
name|wsdlVisitor
argument_list|)
condition|)
block|{
name|visitor
operator|=
operator|new
name|ScopedNameVisitor
argument_list|(
name|getScope
argument_list|()
argument_list|,
name|definition
argument_list|,
name|schema
argument_list|,
name|wsdlVisitor
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|visitor
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"can't resolve type for const "
operator|+
name|constNameNode
operator|.
name|getText
argument_list|()
argument_list|)
throw|;
block|}
name|visitor
operator|.
name|visit
argument_list|(
name|constTypeNode
argument_list|)
expr_stmt|;
name|XmlSchemaType
name|constSchemaType
init|=
name|visitor
operator|.
name|getSchemaType
argument_list|()
decl_stmt|;
name|CorbaTypeImpl
name|constCorbaType
init|=
name|visitor
operator|.
name|getCorbaType
argument_list|()
decl_stmt|;
comment|// corba:const
name|Const
name|corbaConst
init|=
operator|new
name|Const
argument_list|()
decl_stmt|;
name|corbaConst
operator|.
name|setQName
argument_list|(
name|constQName
argument_list|)
expr_stmt|;
name|corbaConst
operator|.
name|setValue
argument_list|(
name|constValue
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|corbaConst
operator|.
name|setType
argument_list|(
name|constSchemaType
operator|.
name|getQName
argument_list|()
argument_list|)
expr_stmt|;
name|corbaConst
operator|.
name|setIdltype
argument_list|(
name|constCorbaType
operator|.
name|getQName
argument_list|()
argument_list|)
expr_stmt|;
name|typeMap
operator|.
name|getStructOrExceptionOrUnion
argument_list|()
operator|.
name|add
argument_list|(
name|corbaConst
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

