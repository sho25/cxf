begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|pmd
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sourceforge
operator|.
name|pmd
operator|.
name|AbstractJavaRule
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sourceforge
operator|.
name|pmd
operator|.
name|RuleContext
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sourceforge
operator|.
name|pmd
operator|.
name|ast
operator|.
name|ASTAdditiveExpression
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sourceforge
operator|.
name|pmd
operator|.
name|ast
operator|.
name|ASTAllocationExpression
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sourceforge
operator|.
name|pmd
operator|.
name|ast
operator|.
name|ASTArgumentList
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sourceforge
operator|.
name|pmd
operator|.
name|ast
operator|.
name|ASTArrayDimsAndInits
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sourceforge
operator|.
name|pmd
operator|.
name|ast
operator|.
name|ASTClassOrInterfaceType
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sourceforge
operator|.
name|pmd
operator|.
name|ast
operator|.
name|ASTExpression
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sourceforge
operator|.
name|pmd
operator|.
name|ast
operator|.
name|ASTName
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sourceforge
operator|.
name|pmd
operator|.
name|ast
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sourceforge
operator|.
name|pmd
operator|.
name|ast
operator|.
name|SimpleNode
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sourceforge
operator|.
name|pmd
operator|.
name|symboltable
operator|.
name|NameDeclaration
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sourceforge
operator|.
name|pmd
operator|.
name|symboltable
operator|.
name|VariableNameDeclaration
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sourceforge
operator|.
name|pmd
operator|.
name|typeresolution
operator|.
name|TypeHelper
import|;
end_import

begin_comment
comment|/**  * Look for new String(byte[]) or new String(byte[], start, end)  * and complain.  */
end_comment

begin_class
specifier|public
class|class
name|UnsafeStringConstructorRule
extends|extends
name|AbstractJavaRule
block|{
comment|/** {@inheritDoc} */
annotation|@
name|Override
specifier|public
name|Object
name|visit
parameter_list|(
name|ASTAllocationExpression
name|node
parameter_list|,
name|Object
name|data
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|node
operator|.
name|jjtGetChild
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|ASTClassOrInterfaceType
operator|)
condition|)
block|{
return|return
name|data
return|;
block|}
if|if
condition|(
operator|!
name|TypeHelper
operator|.
name|isA
argument_list|(
operator|(
name|ASTClassOrInterfaceType
operator|)
name|node
operator|.
name|jjtGetChild
argument_list|(
literal|0
argument_list|)
argument_list|,
name|String
operator|.
name|class
argument_list|)
condition|)
block|{
return|return
name|data
return|;
block|}
name|ASTArgumentList
name|arglist
init|=
name|node
operator|.
name|getFirstChildOfType
argument_list|(
name|ASTArgumentList
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|arglist
operator|==
literal|null
condition|)
block|{
comment|// unlikely
return|return
name|data
return|;
block|}
comment|// one of the two possibilities ...
if|if
condition|(
name|arglist
operator|.
name|jjtGetNumChildren
argument_list|()
operator|==
literal|1
operator|||
name|arglist
operator|.
name|jjtGetNumChildren
argument_list|()
operator|==
literal|3
condition|)
block|{
name|ASTExpression
name|firstArgExpr
init|=
name|arglist
operator|.
name|getFirstChildOfType
argument_list|(
name|ASTExpression
operator|.
name|class
argument_list|)
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|exprType
init|=
name|firstArgExpr
operator|.
name|getType
argument_list|()
decl_stmt|;
comment|// pmd reports the type as byte, not byte[]. But since
comment|// there is no such thing as new String(byte), it seems
comment|// safe enough to take that as good enough.
if|if
condition|(
name|exprType
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|exprType
operator|==
name|Byte
operator|.
name|TYPE
operator|||
operator|(
name|exprType
operator|.
name|isArray
argument_list|()
operator|&&
name|exprType
operator|.
name|getComponentType
argument_list|()
operator|==
name|Byte
operator|.
name|TYPE
operator|)
condition|)
block|{
name|addViolation
argument_list|(
name|data
argument_list|,
name|node
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|data
return|;
block|}
block|}
end_class

end_unit

