begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|maven
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStreamWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|jar
operator|.
name|JarEntry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|jar
operator|.
name|JarOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|maven
operator|.
name|plugins
operator|.
name|shade
operator|.
name|resource
operator|.
name|ResourceTransformer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jdom
operator|.
name|Content
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jdom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jdom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jdom
operator|.
name|JDOMException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jdom
operator|.
name|input
operator|.
name|SAXBuilder
import|;
end_import

begin_class
specifier|public
class|class
name|CXFAllTransformer
implements|implements
name|ResourceTransformer
block|{
name|byte
name|buffer
index|[]
init|=
operator|new
name|byte
index|[
literal|1024
index|]
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|ByteArrayOutputStream
argument_list|>
name|extensions
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|ByteArrayOutputStream
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|lastResource
decl_stmt|;
specifier|public
name|CXFAllTransformer
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
specifier|public
name|boolean
name|canTransformResource
parameter_list|(
name|String
name|r
parameter_list|)
block|{
if|if
condition|(
name|r
operator|.
name|startsWith
argument_list|(
literal|"META-INF/cxf/cxf-extension-"
argument_list|)
operator|&&
name|r
operator|.
name|endsWith
argument_list|(
literal|".xml"
argument_list|)
condition|)
block|{
name|lastResource
operator|=
name|r
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|hasTransformedResource
parameter_list|()
block|{
return|return
operator|!
name|extensions
operator|.
name|isEmpty
argument_list|()
return|;
block|}
specifier|public
name|void
name|processResource
parameter_list|(
name|InputStream
name|is
parameter_list|)
throws|throws
name|IOException
block|{
name|ByteArrayOutputStream
name|bout
init|=
operator|new
name|ByteArrayOutputStream
argument_list|(
literal|1024
argument_list|)
decl_stmt|;
name|int
name|i
init|=
name|is
operator|.
name|read
argument_list|(
name|buffer
argument_list|)
decl_stmt|;
while|while
condition|(
name|i
operator|!=
operator|-
literal|1
condition|)
block|{
name|bout
operator|.
name|write
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|i
operator|=
name|is
operator|.
name|read
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
block|}
name|extensions
operator|.
name|put
argument_list|(
name|lastResource
argument_list|,
name|bout
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|modifyOutputStream
parameter_list|(
name|JarOutputStream
name|jos
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|imps
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|extensions
operator|.
name|keySet
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|ByteArrayOutputStream
argument_list|>
name|ent
range|:
name|extensions
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|jos
operator|.
name|putNextEntry
argument_list|(
operator|new
name|JarEntry
argument_list|(
name|ent
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ent
operator|.
name|getValue
argument_list|()
operator|.
name|writeTo
argument_list|(
name|jos
argument_list|)
expr_stmt|;
try|try
block|{
name|Document
name|r
init|=
operator|new
name|SAXBuilder
argument_list|()
operator|.
name|build
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|ent
operator|.
name|getValue
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Element
name|root
init|=
name|r
operator|.
name|getRootElement
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|itr
init|=
name|root
operator|.
name|getChildren
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|itr
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Content
name|n
init|=
operator|(
name|Content
operator|)
name|itr
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|n
operator|instanceof
name|Element
condition|)
block|{
name|Element
name|e
init|=
operator|(
name|Element
operator|)
name|n
decl_stmt|;
if|if
condition|(
literal|"import"
operator|.
name|equals
argument_list|(
name|e
operator|.
name|getName
argument_list|()
argument_list|)
operator|&&
literal|"http://www.springframework.org/schema/beans"
operator|.
name|equals
argument_list|(
name|e
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
condition|)
block|{
comment|//remove stuff that is imported from other extensions to
comment|//keep them from being loaded twice. (it's not an issue
comment|//to load them twice, there just is a performance
comment|//penalty in doing so
name|String
name|loc
init|=
name|e
operator|.
name|getAttributeValue
argument_list|(
literal|"resource"
argument_list|)
decl_stmt|;
if|if
condition|(
name|loc
operator|.
name|startsWith
argument_list|(
literal|"classpath:META-INF/cxf/cxf"
argument_list|)
condition|)
block|{
name|loc
operator|=
name|loc
operator|.
name|substring
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|imps
operator|.
name|remove
argument_list|(
name|loc
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|JDOMException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|imps
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|jos
operator|.
name|putNextEntry
argument_list|(
operator|new
name|JarEntry
argument_list|(
literal|"META-INF/cxf/cxf-all.xml"
argument_list|)
argument_list|)
expr_stmt|;
name|Writer
name|writer
init|=
operator|new
name|OutputStreamWriter
argument_list|(
name|jos
argument_list|,
literal|"UTF-8"
argument_list|)
decl_stmt|;
name|writer
operator|.
name|append
argument_list|(
literal|"<?xml version=\"1.0\" encoding=\"UTF-8\"?>"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
literal|"<beans xmlns=\"http://www.springframework.org/schema/beans\"\n"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
literal|"    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
literal|"    xsi:schemaLocation=\""
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
literal|"http://www.springframework.org/schema/beans "
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
literal|"http://www.springframework.org/schema/beans/spring-beans.xsd\">\n"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
literal|"<import resource=\"classpath:META-INF/cxf/cxf.xml\"/>\n"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|res
range|:
name|imps
control|)
block|{
name|writer
operator|.
name|append
argument_list|(
literal|"<import resource=\"classpath:"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
name|res
argument_list|)
expr_stmt|;
name|writer
operator|.
name|append
argument_list|(
literal|"\"/>\n"
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|append
argument_list|(
literal|"</beans>"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

