begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|staxutils
operator|.
name|transform
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|Marshaller
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlElement
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlRootElement
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|staxutils
operator|.
name|StaxUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|OutTransformWriterTest
extends|extends
name|Assert
block|{
annotation|@
name|Test
specifier|public
name|void
name|testDefaultNamespace
parameter_list|()
throws|throws
name|Exception
block|{
name|ByteArrayOutputStream
name|os
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|XMLStreamWriter
name|writer
init|=
name|StaxUtils
operator|.
name|createXMLStreamWriter
argument_list|(
name|os
argument_list|,
literal|"UTF-8"
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|outMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|outMap
operator|.
name|put
argument_list|(
literal|"{http://testbeans.com}*"
argument_list|,
literal|"{http://testbeans.com/v2}*"
argument_list|)
expr_stmt|;
name|OutTransformWriter
name|transformWriter
init|=
operator|new
name|OutTransformWriter
argument_list|(
name|writer
argument_list|,
name|outMap
argument_list|,
name|Collections
operator|.
expr|<
name|String
argument_list|,
name|String
operator|>
name|emptyMap
argument_list|()
argument_list|,
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptyList
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|"http://testbeans.com/v2"
argument_list|)
decl_stmt|;
name|JAXBContext
name|context
init|=
name|JAXBContext
operator|.
name|newInstance
argument_list|(
name|TestBean
operator|.
name|class
argument_list|)
decl_stmt|;
name|Marshaller
name|m
init|=
name|context
operator|.
name|createMarshaller
argument_list|()
decl_stmt|;
name|m
operator|.
name|marshal
argument_list|(
operator|new
name|TestBean
argument_list|()
argument_list|,
name|transformWriter
argument_list|)
expr_stmt|;
name|String
name|expected
init|=
literal|"<?xml version='1.0' encoding='UTF-8'?>"
operator|+
literal|"<testBean xmlns=\"http://testbeans.com/v2\"><bean/></testBean>"
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|os
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNamespaceConversion
parameter_list|()
throws|throws
name|Exception
block|{
name|ByteArrayOutputStream
name|os
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|XMLStreamWriter
name|writer
init|=
name|StaxUtils
operator|.
name|createXMLStreamWriter
argument_list|(
name|os
argument_list|,
literal|"UTF-8"
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|outMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|outMap
operator|.
name|put
argument_list|(
literal|"{http://testbeans.com}testBean"
argument_list|,
literal|"{http://testbeans.com/v2}testBean"
argument_list|)
expr_stmt|;
name|outMap
operator|.
name|put
argument_list|(
literal|"{http://testbeans.com}bean"
argument_list|,
literal|"{http://testbeans.com/v3}bean"
argument_list|)
expr_stmt|;
name|OutTransformWriter
name|transformWriter
init|=
operator|new
name|OutTransformWriter
argument_list|(
name|writer
argument_list|,
name|outMap
argument_list|,
name|Collections
operator|.
expr|<
name|String
argument_list|,
name|String
operator|>
name|emptyMap
argument_list|()
argument_list|,
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptyList
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|JAXBContext
name|context
init|=
name|JAXBContext
operator|.
name|newInstance
argument_list|(
name|TestBean
operator|.
name|class
argument_list|)
decl_stmt|;
name|Marshaller
name|m
init|=
name|context
operator|.
name|createMarshaller
argument_list|()
decl_stmt|;
name|m
operator|.
name|marshal
argument_list|(
operator|new
name|TestBean
argument_list|()
argument_list|,
name|transformWriter
argument_list|)
expr_stmt|;
name|String
name|xmlPI
init|=
literal|"<?xml version='1.0' encoding='UTF-8'?>"
decl_stmt|;
name|String
name|start
init|=
literal|"<ps1:testBean xmlns:ps1=\"http://testbeans.com/v2\""
decl_stmt|;
name|String
name|expected1
init|=
name|xmlPI
operator|+
name|start
operator|+
literal|" xmlns:ps2=\"http://testbeans.com/v3\"><ps2:bean/></ps1:testBean>"
decl_stmt|;
name|String
name|expected2
init|=
name|xmlPI
operator|+
name|start
operator|+
literal|"><ps2:bean xmlns:ps2=\"http://testbeans.com/v3\"/></ps1:testBean>"
decl_stmt|;
name|String
name|out
init|=
name|os
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Output \""
operator|+
name|out
operator|+
literal|"\" does not match expected values"
argument_list|,
name|expected1
operator|.
name|equals
argument_list|(
name|out
argument_list|)
operator|||
name|expected2
operator|.
name|equals
argument_list|(
name|out
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNamespaceConversionAndDefaultNS
parameter_list|()
throws|throws
name|Exception
block|{
name|ByteArrayOutputStream
name|os
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|XMLStreamWriter
name|writer
init|=
name|StaxUtils
operator|.
name|createXMLStreamWriter
argument_list|(
name|os
argument_list|,
literal|"UTF-8"
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|outMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|outMap
operator|.
name|put
argument_list|(
literal|"{http://testbeans.com}testBean"
argument_list|,
literal|"{http://testbeans.com/v2}testBean"
argument_list|)
expr_stmt|;
name|outMap
operator|.
name|put
argument_list|(
literal|"{http://testbeans.com}bean"
argument_list|,
literal|"{http://testbeans.com/v3}bean"
argument_list|)
expr_stmt|;
name|OutTransformWriter
name|transformWriter
init|=
operator|new
name|OutTransformWriter
argument_list|(
name|writer
argument_list|,
name|outMap
argument_list|,
name|Collections
operator|.
expr|<
name|String
argument_list|,
name|String
operator|>
name|emptyMap
argument_list|()
argument_list|,
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptyList
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|"http://testbeans.com/v2"
argument_list|)
decl_stmt|;
name|JAXBContext
name|context
init|=
name|JAXBContext
operator|.
name|newInstance
argument_list|(
name|TestBean
operator|.
name|class
argument_list|)
decl_stmt|;
name|Marshaller
name|m
init|=
name|context
operator|.
name|createMarshaller
argument_list|()
decl_stmt|;
name|m
operator|.
name|marshal
argument_list|(
operator|new
name|TestBean
argument_list|()
argument_list|,
name|transformWriter
argument_list|)
expr_stmt|;
name|String
name|xmlPI
init|=
literal|"<?xml version='1.0' encoding='UTF-8'?>"
decl_stmt|;
name|String
name|start
init|=
literal|"<testBean xmlns=\"http://testbeans.com/v2\""
decl_stmt|;
name|String
name|expected1
init|=
name|xmlPI
operator|+
name|start
operator|+
literal|" xmlns:ps2=\"http://testbeans.com/v3\"><ps2:bean/></testBean>"
decl_stmt|;
name|String
name|expected2
init|=
name|xmlPI
operator|+
name|start
operator|+
literal|"><ps2:bean xmlns:ps2=\"http://testbeans.com/v3\"/></testBean>"
decl_stmt|;
name|String
name|out
init|=
name|os
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Output \""
operator|+
name|out
operator|+
literal|"\" does not match expected values"
argument_list|,
name|expected1
operator|.
name|equals
argument_list|(
name|out
argument_list|)
operator|||
name|expected2
operator|.
name|equals
argument_list|(
name|out
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|XmlRootElement
argument_list|(
name|name
operator|=
literal|"testBean"
argument_list|,
name|namespace
operator|=
literal|"http://testbeans.com"
argument_list|)
specifier|public
specifier|static
class|class
name|TestBean
block|{
specifier|private
name|TestBean2
name|bean
init|=
operator|new
name|TestBean2
argument_list|()
decl_stmt|;
annotation|@
name|XmlElement
argument_list|(
name|name
operator|=
literal|"bean"
argument_list|,
name|namespace
operator|=
literal|"http://testbeans.com"
argument_list|)
specifier|public
name|void
name|setBean
parameter_list|(
name|TestBean2
name|bean
parameter_list|)
block|{
name|this
operator|.
name|bean
operator|=
name|bean
expr_stmt|;
block|}
specifier|public
name|TestBean2
name|getBean
parameter_list|()
block|{
return|return
name|bean
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|TestBean2
block|{     }
block|}
end_class

end_unit

