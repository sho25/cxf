begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxb
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBElement
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|builder
operator|.
name|ToStringBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|JAXBElementToStringStyleTest
block|{
class|class
name|Holder
block|{
name|String
name|name
init|=
literal|"HolderName"
decl_stmt|;
name|Object
name|obj
decl_stmt|;
name|Holder
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
name|this
operator|.
name|obj
operator|=
name|o
expr_stmt|;
block|}
block|}
name|JAXBElement
argument_list|<
name|String
argument_list|>
name|nel
init|=
operator|new
name|JAXBElement
argument_list|<
name|String
argument_list|>
argument_list|(
operator|new
name|QName
argument_list|(
literal|"ab"
argument_list|,
literal|"bv"
argument_list|)
argument_list|,
name|String
operator|.
name|class
argument_list|,
literal|"SomeText"
argument_list|)
decl_stmt|;
name|Holder
name|h
init|=
operator|new
name|Holder
argument_list|(
name|nel
argument_list|)
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testToStringDefault
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|ts
init|=
name|ToStringBuilder
operator|.
name|reflectionToString
argument_list|(
name|h
argument_list|)
decl_stmt|;
name|validateHolderString
argument_list|(
name|ts
argument_list|)
expr_stmt|;
comment|// JAXBElement contents not present
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"has no value"
argument_list|,
name|ts
operator|.
name|indexOf
argument_list|(
literal|"value"
argument_list|)
operator|==
operator|-
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"has no bv"
argument_list|,
name|ts
operator|.
name|indexOf
argument_list|(
literal|"bv"
argument_list|)
operator|==
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testToStringMultiLineStyle
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|ts
init|=
name|ToStringBuilder
operator|.
name|reflectionToString
argument_list|(
name|h
argument_list|,
name|JAXBToStringStyle
operator|.
name|MULTI_LINE_STYLE
argument_list|)
decl_stmt|;
name|validateHolderString
argument_list|(
name|ts
argument_list|)
expr_stmt|;
name|validateElementString
argument_list|(
name|ts
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testToStringSimpleStyle
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|ts
init|=
name|ToStringBuilder
operator|.
name|reflectionToString
argument_list|(
name|h
argument_list|,
name|JAXBToStringStyle
operator|.
name|SIMPLE_STYLE
argument_list|)
decl_stmt|;
comment|// field names are missing
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"has no obj field"
argument_list|,
name|ts
operator|.
name|indexOf
argument_list|(
literal|"obj"
argument_list|)
operator|==
operator|-
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"has HolderName"
argument_list|,
name|ts
operator|.
name|indexOf
argument_list|(
literal|"HolderName"
argument_list|)
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"has SomeText"
argument_list|,
name|ts
operator|.
name|indexOf
argument_list|(
literal|"SomeText"
argument_list|)
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|validateHolderString
parameter_list|(
name|String
name|ts
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"has HolderName"
argument_list|,
name|ts
operator|.
name|indexOf
argument_list|(
literal|"HolderName"
argument_list|)
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"has JAXBElement"
argument_list|,
name|ts
operator|.
name|indexOf
argument_list|(
literal|"JAXBElement"
argument_list|)
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"has obj"
argument_list|,
name|ts
operator|.
name|indexOf
argument_list|(
literal|"obj"
argument_list|)
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|validateElementString
parameter_list|(
name|String
name|ts
parameter_list|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"has  value"
argument_list|,
name|ts
operator|.
name|indexOf
argument_list|(
literal|"value"
argument_list|)
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"has scope"
argument_list|,
name|ts
operator|.
name|indexOf
argument_list|(
literal|"scope"
argument_list|)
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"has bv"
argument_list|,
name|ts
operator|.
name|indexOf
argument_list|(
literal|"bv"
argument_list|)
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

