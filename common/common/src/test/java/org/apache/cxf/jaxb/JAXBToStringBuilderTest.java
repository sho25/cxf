begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxb
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|JAXBToStringBuilderTest
block|{
specifier|final
name|String
name|dataV
init|=
literal|"someData"
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testToString
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|res
init|=
name|JAXBToStringBuilder
operator|.
name|valueOf
argument_list|(
name|dataV
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|res
argument_list|,
name|dataV
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testToStringArray
parameter_list|()
throws|throws
name|Exception
block|{
name|String
index|[]
name|data
init|=
operator|new
name|String
index|[]
block|{
name|dataV
block|}
decl_stmt|;
name|String
name|res
init|=
name|JAXBToStringBuilder
operator|.
name|valueOf
argument_list|(
name|data
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|res
operator|.
name|indexOf
argument_list|(
name|dataV
argument_list|)
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testToStringCollection
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|data
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|data
operator|.
name|add
argument_list|(
name|dataV
argument_list|)
expr_stmt|;
name|String
name|res
init|=
name|JAXBToStringBuilder
operator|.
name|valueOf
argument_list|(
name|data
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|res
operator|.
name|indexOf
argument_list|(
name|dataV
argument_list|)
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testToStringMap
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|data
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|data
operator|.
name|put
argument_list|(
name|dataV
argument_list|,
name|dataV
argument_list|)
expr_stmt|;
comment|// no content as it is not a Collection
name|String
name|res
init|=
name|JAXBToStringBuilder
operator|.
name|valueOf
argument_list|(
name|data
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|res
operator|.
name|indexOf
argument_list|(
name|dataV
argument_list|)
operator|==
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

