begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|TwoStageCacheTest
extends|extends
name|Assert
block|{
annotation|@
name|Test
specifier|public
name|void
name|testToString
parameter_list|()
block|{
name|TestTwoStageCache
name|cache
init|=
operator|new
name|TestTwoStageCache
argument_list|(
literal|3
argument_list|,
literal|5
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"AbstractTwoStageCache"
argument_list|,
name|cache
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/*      * Test method for 'org.apache.cxf.common.util.AbstractTwoStageCache.get()'      */
annotation|@
name|Test
specifier|public
name|void
name|testGet
parameter_list|()
throws|throws
name|Throwable
block|{
name|TestTwoStageCache
name|cache
init|=
operator|new
name|TestTwoStageCache
argument_list|(
literal|3
argument_list|,
literal|5
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|cache
operator|.
name|populateCache
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
literal|10
condition|;
name|x
operator|++
control|)
block|{
name|assertNotNull
argument_list|(
name|cache
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|cache
operator|=
operator|new
name|TestTwoStageCache
argument_list|(
literal|3
argument_list|,
literal|5
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|cache
operator|.
name|populateCache
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
literal|10
condition|;
name|x
operator|++
control|)
block|{
name|assertNotNull
argument_list|(
name|cache
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/*      * Test method for 'org.apache.cxf.common.util.AbstractTwoStageCache.poll()'      */
annotation|@
name|Test
specifier|public
name|void
name|testPoll
parameter_list|()
throws|throws
name|Throwable
block|{
name|TestTwoStageCache
name|cache
init|=
operator|new
name|TestTwoStageCache
argument_list|(
literal|3
argument_list|,
literal|5
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|cache
operator|.
name|populateCache
argument_list|()
expr_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|cache
operator|.
name|poll
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|count
operator|++
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|cache
operator|=
operator|new
name|TestTwoStageCache
argument_list|(
literal|3
argument_list|,
literal|5
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|cache
operator|.
name|populateCache
argument_list|()
expr_stmt|;
name|count
operator|=
literal|0
expr_stmt|;
while|while
condition|(
name|cache
operator|.
name|poll
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|count
operator|++
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|cache
operator|=
operator|new
name|TestTwoStageCache
argument_list|(
literal|3
argument_list|,
literal|5
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|cache
operator|.
name|populateCache
argument_list|()
expr_stmt|;
name|count
operator|=
literal|0
expr_stmt|;
while|while
condition|(
name|cache
operator|.
name|poll
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|count
operator|++
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|count
argument_list|)
expr_stmt|;
comment|// try to prealloc more than high water mark...
name|cache
operator|=
operator|new
name|TestTwoStageCache
argument_list|(
literal|3
argument_list|,
literal|5
argument_list|,
literal|9
argument_list|)
expr_stmt|;
name|cache
operator|.
name|populateCache
argument_list|()
expr_stmt|;
name|count
operator|=
literal|0
expr_stmt|;
while|while
condition|(
name|cache
operator|.
name|poll
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|count
operator|++
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
comment|/*      * Test method for 'org.apache.cxf.common.util.AbstractTwoStageCache.recycle(E)'      */
annotation|@
name|Test
specifier|public
name|void
name|testRecycle
parameter_list|()
throws|throws
name|Throwable
block|{
name|TestTwoStageCache
name|cache
init|=
operator|new
name|TestTwoStageCache
argument_list|(
literal|3
argument_list|,
literal|8
argument_list|,
literal|5
argument_list|,
operator|new
name|Object
argument_list|()
argument_list|)
decl_stmt|;
name|cache
operator|.
name|populateCache
argument_list|()
expr_stmt|;
name|Object
name|objs
index|[]
init|=
operator|new
name|Object
index|[
literal|10
index|]
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
literal|10
condition|;
name|x
operator|++
control|)
block|{
name|objs
index|[
name|x
index|]
operator|=
name|cache
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
literal|10
condition|;
name|x
operator|++
control|)
block|{
name|cache
operator|.
name|recycle
argument_list|(
name|objs
index|[
name|x
index|]
argument_list|)
expr_stmt|;
block|}
name|int
name|count
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|cache
operator|.
name|poll
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|count
operator|++
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|8
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|count
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
literal|10
condition|;
name|x
operator|++
control|)
block|{
name|cache
operator|.
name|recycle
argument_list|(
name|objs
index|[
name|x
index|]
argument_list|)
expr_stmt|;
name|objs
index|[
name|x
index|]
operator|=
literal|null
expr_stmt|;
name|System
operator|.
name|gc
argument_list|()
expr_stmt|;
block|}
name|objs
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.vendor"
argument_list|)
operator|.
name|contains
argument_list|(
literal|"IBM"
argument_list|)
condition|)
block|{
comment|//The IBM VM will dump a core file and a heap dump
comment|//at OOM which kind of pollutes the svn space
return|return;
block|}
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|list
init|=
operator|new
name|LinkedList
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|allocCount
init|=
literal|0
decl_stmt|;
try|try
block|{
while|while
condition|(
name|allocCount
operator|++
operator|<
literal|1000
condition|)
block|{
name|System
operator|.
name|gc
argument_list|()
expr_stmt|;
name|long
name|memFree
init|=
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|freeMemory
argument_list|()
decl_stmt|;
name|int
name|memToAlloc
init|=
name|memFree
operator|>
literal|512
operator|*
literal|1024
operator|*
literal|1024
condition|?
literal|512
operator|*
literal|1024
operator|*
literal|1024
else|:
operator|(
name|int
operator|)
name|memFree
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
operator|new
name|byte
index|[
name|memToAlloc
index|]
argument_list|)
expr_stmt|;
block|}
name|fail
argument_list|(
literal|"cannot trigger OutOfMemoryError within a reasonable timeframe"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OutOfMemoryError
name|ex
parameter_list|)
block|{
name|System
operator|.
name|gc
argument_list|()
expr_stmt|;
name|list
operator|=
literal|null
expr_stmt|;
name|System
operator|.
name|gc
argument_list|()
expr_stmt|;
block|}
name|cache
operator|.
name|recycle
argument_list|(
name|cache
operator|.
name|create
argument_list|()
argument_list|)
expr_stmt|;
name|cache
operator|.
name|recycle
argument_list|(
name|cache
operator|.
name|create
argument_list|()
argument_list|)
expr_stmt|;
name|cache
operator|.
name|recycle
argument_list|(
name|cache
operator|.
name|create
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|gc
argument_list|()
expr_stmt|;
while|while
condition|(
name|cache
operator|.
name|poll
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|count
operator|++
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"Did not get enough objects "
operator|+
name|count
argument_list|,
literal|3
operator|<=
name|count
argument_list|)
expr_stmt|;
block|}
specifier|static
class|class
name|TestTwoStageCache
extends|extends
name|AbstractTwoStageCache
argument_list|<
name|Object
argument_list|>
block|{
specifier|public
name|TestTwoStageCache
parameter_list|(
name|int
name|pCacheSize
parameter_list|,
name|int
name|highWaterMark
parameter_list|,
name|int
name|prealloc
parameter_list|)
block|{
name|super
argument_list|(
name|pCacheSize
argument_list|,
name|highWaterMark
argument_list|,
name|prealloc
argument_list|)
expr_stmt|;
block|}
specifier|public
name|TestTwoStageCache
parameter_list|(
name|int
name|pCacheSize
parameter_list|,
name|int
name|highWaterMark
parameter_list|,
name|int
name|prealloc
parameter_list|,
name|Object
name|mutex
parameter_list|)
block|{
name|super
argument_list|(
name|pCacheSize
argument_list|,
name|highWaterMark
argument_list|,
name|prealloc
argument_list|,
name|mutex
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Object
name|create
parameter_list|()
block|{
return|return
operator|new
name|Object
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

