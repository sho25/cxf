begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|commands
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|ForkedCommandTest
extends|extends
name|Assert
block|{
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|ENV_COMMAND
decl_stmt|;
static|static
block|{
if|if
condition|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"os.name"
argument_list|)
operator|.
name|startsWith
argument_list|(
literal|"Windows"
argument_list|)
condition|)
block|{
name|ENV_COMMAND
operator|=
operator|new
name|String
index|[]
block|{
literal|"cmd"
block|,
literal|"/c"
block|,
literal|"set"
block|}
expr_stmt|;
block|}
else|else
block|{
name|ENV_COMMAND
operator|=
operator|new
name|String
index|[]
block|{
literal|"env"
block|}
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBasics
parameter_list|()
block|{
name|ForkedCommand
name|fc1
init|=
operator|new
name|ForkedCommand
argument_list|()
decl_stmt|;
name|String
name|cmdline1
init|=
name|fc1
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|cmdline1
argument_list|)
expr_stmt|;
try|try
block|{
name|fc1
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ForkedCommandException
name|ex
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"NO_ARGUMENTS_EXC"
argument_list|,
name|ex
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[]
block|{
literal|"a"
block|,
literal|"b"
block|,
literal|"c d e"
block|}
decl_stmt|;
name|ForkedCommand
name|fc2
init|=
operator|new
name|ForkedCommand
argument_list|(
name|args
argument_list|)
decl_stmt|;
name|String
name|cmdline2
init|=
name|fc2
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|cmdline2
operator|.
name|startsWith
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cmdline2
operator|.
name|endsWith
argument_list|(
literal|"\""
argument_list|)
argument_list|)
expr_stmt|;
name|fc1
operator|.
name|setArgs
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|cmdline1
operator|=
name|fc1
operator|.
name|toString
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|cmdline1
argument_list|,
name|cmdline2
argument_list|)
expr_stmt|;
operator|new
name|ForkedCommandException
argument_list|(
operator|new
name|NullPointerException
argument_list|()
argument_list|)
expr_stmt|;
name|Message
name|msg
init|=
name|org
operator|.
name|easymock
operator|.
name|classextension
operator|.
name|EasyMock
operator|.
name|createMock
argument_list|(
name|Message
operator|.
name|class
argument_list|)
decl_stmt|;
operator|new
name|ForkedCommandException
argument_list|(
name|msg
argument_list|,
operator|new
name|NullPointerException
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testExecuteInDefaultEnvironment
parameter_list|()
block|{
name|ByteArrayOutputStream
name|bosOut
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|ByteArrayOutputStream
name|bosErr
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|executeEnvCommand
argument_list|(
literal|null
argument_list|,
name|bosOut
argument_list|,
name|bosErr
argument_list|)
expr_stmt|;
name|String
name|output
init|=
name|bosOut
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|output
operator|.
name|indexOf
argument_list|(
literal|"AVAR"
argument_list|)
operator|<
literal|0
operator|||
name|output
operator|.
name|indexOf
argument_list|(
literal|"BVAR"
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testExecuteInNonDefaultEnvironment
parameter_list|()
block|{
name|ByteArrayOutputStream
name|bosOut
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|ByteArrayOutputStream
name|bosErr
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|String
index|[]
name|env
init|=
operator|new
name|String
index|[
literal|3
index|]
decl_stmt|;
name|env
index|[
literal|0
index|]
operator|=
literal|"BVAR=strange"
expr_stmt|;
if|if
condition|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"os.name"
argument_list|)
operator|.
name|startsWith
argument_list|(
literal|"Windows"
argument_list|)
condition|)
block|{
name|env
index|[
literal|1
index|]
operator|=
literal|"AVAR=something %BVAR%"
expr_stmt|;
name|env
index|[
literal|2
index|]
operator|=
literal|"AVAR=something very %BVAR%"
expr_stmt|;
block|}
else|else
block|{
name|env
index|[
literal|1
index|]
operator|=
literal|"AVAR=something $BVAR"
expr_stmt|;
name|env
index|[
literal|2
index|]
operator|=
literal|"AVAR=something very $BVAR"
expr_stmt|;
block|}
name|executeEnvCommand
argument_list|(
name|env
argument_list|,
name|bosOut
argument_list|,
name|bosErr
argument_list|)
expr_stmt|;
comment|// test variables are overwritten but not replaced
name|boolean
name|found
init|=
literal|false
decl_stmt|;
name|String
name|output
init|=
name|bosOut
operator|.
name|toString
argument_list|()
decl_stmt|;
name|StringTokenizer
name|st
init|=
operator|new
name|StringTokenizer
argument_list|(
name|output
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"line.separator"
argument_list|)
argument_list|)
decl_stmt|;
while|while
condition|(
name|st
operator|.
name|hasMoreTokens
argument_list|()
condition|)
block|{
name|String
name|line
init|=
name|st
operator|.
name|nextToken
argument_list|()
decl_stmt|;
if|if
condition|(
name|line
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"os.name"
argument_list|)
operator|.
name|startsWith
argument_list|(
literal|"Windows"
argument_list|)
condition|)
block|{
if|if
condition|(
literal|"AVAR=something very %BVAR%"
operator|.
name|equals
argument_list|(
name|line
argument_list|)
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
else|else
block|{
if|if
condition|(
literal|"AVAR=something very $BVAR"
operator|.
name|equals
argument_list|(
name|line
argument_list|)
operator|||
literal|"AVAR=something $BVAR"
operator|.
name|equals
argument_list|(
name|line
argument_list|)
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
name|assertTrue
argument_list|(
name|found
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTimeout
parameter_list|()
throws|throws
name|Exception
block|{
name|URL
name|url
init|=
name|TestCommand
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"TestCommand.class"
argument_list|)
decl_stmt|;
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|url
operator|.
name|toURI
argument_list|()
argument_list|)
decl_stmt|;
name|file
operator|=
name|file
operator|.
name|getParentFile
argument_list|()
expr_stmt|;
name|file
operator|=
operator|new
name|File
argument_list|(
name|file
argument_list|,
literal|"../../../../.."
argument_list|)
expr_stmt|;
name|String
index|[]
name|cmd
init|=
operator|new
name|String
index|[]
block|{
name|JavaHelper
operator|.
name|getJavaCommand
argument_list|()
block|,
literal|"-classpath"
block|,
name|file
operator|.
name|getCanonicalPath
argument_list|()
block|,
literal|"org.apache.cxf.common.commands.TestCommand"
block|,
literal|"-duration"
block|,
literal|"60000"
block|,         }
decl_stmt|;
name|ForkedCommand
name|fc
init|=
operator|new
name|ForkedCommand
argument_list|(
name|cmd
argument_list|)
decl_stmt|;
try|try
block|{
name|fc
operator|.
name|execute
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected ForkedCommandException not thrown."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ForkedCommandException
name|ex
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"TIMEOUT_EXC"
argument_list|,
name|ex
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|executeEnvCommand
parameter_list|(
name|String
index|[]
name|env
parameter_list|,
name|ByteArrayOutputStream
name|bosOut
parameter_list|,
name|ByteArrayOutputStream
name|bosErr
parameter_list|)
block|{
name|ForkedCommand
name|fc
init|=
operator|new
name|ForkedCommand
argument_list|(
name|ENV_COMMAND
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|env
condition|)
block|{
name|fc
operator|.
name|setEnvironment
argument_list|(
name|env
argument_list|)
expr_stmt|;
block|}
name|fc
operator|.
name|joinErrOut
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|PrintStream
name|pso
init|=
operator|new
name|PrintStream
argument_list|(
name|bosOut
argument_list|)
decl_stmt|;
name|PrintStream
name|pse
init|=
operator|new
name|PrintStream
argument_list|(
name|bosErr
argument_list|)
decl_stmt|;
name|fc
operator|.
name|setOutputStream
argument_list|(
name|pso
argument_list|)
expr_stmt|;
name|fc
operator|.
name|setErrorStream
argument_list|(
name|pse
argument_list|)
expr_stmt|;
name|int
name|result
init|=
name|fc
operator|.
name|execute
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

