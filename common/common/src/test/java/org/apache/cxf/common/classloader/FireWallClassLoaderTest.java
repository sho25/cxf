begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|classloader
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Constructor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|FireWallClassLoaderTest
extends|extends
name|Assert
block|{
specifier|public
name|FireWallClassLoaderTest
parameter_list|()
block|{     }
annotation|@
name|Test
specifier|public
name|void
name|testJavaLangStringAlt
parameter_list|()
throws|throws
name|Exception
block|{
name|ClassLoader
name|c
init|=
operator|new
name|FireWallClassLoader
argument_list|(
name|ClassLoader
operator|.
name|getSystemClassLoader
argument_list|()
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"java.*"
block|}
argument_list|)
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|c1
init|=
name|c
operator|.
name|loadClass
argument_list|(
literal|"java.lang.String"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Should have returned a class here"
argument_list|,
name|c1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testJavaLangStringBlock
parameter_list|()
throws|throws
name|Exception
block|{
name|ClassLoader
name|c
init|=
operator|new
name|FireWallClassLoader
argument_list|(
name|ClassLoader
operator|.
name|getSystemClassLoader
argument_list|()
argument_list|,
operator|new
name|String
index|[]
block|{}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"java.lang.String"
block|}
argument_list|)
decl_stmt|;
try|try
block|{
name|c
operator|.
name|loadClass
argument_list|(
literal|"java.lang.String"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected ClassNotFoundException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|ex
parameter_list|)
block|{
name|assertNotNull
argument_list|(
literal|"Exception message must not be null."
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"not found class must be part of the message. "
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|"java.lang.String"
argument_list|)
operator|>
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Check that an internal JDK class can load a class with a prefix that
comment|// would have
comment|// been blocked by the firewall
annotation|@
name|Test
specifier|public
name|void
name|testJDKInternalClass
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Just create a temp file we can play with
name|File
name|tmpFile
init|=
name|File
operator|.
name|createTempFile
argument_list|(
literal|"FireWall"
argument_list|,
literal|"Test"
argument_list|)
decl_stmt|;
name|OutputStream
name|os
init|=
operator|new
name|FileOutputStream
argument_list|(
name|tmpFile
argument_list|)
decl_stmt|;
name|os
operator|.
name|write
argument_list|(
literal|"This is a test"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|os
operator|.
name|close
argument_list|()
expr_stmt|;
name|tmpFile
operator|.
name|deleteOnExit
argument_list|()
expr_stmt|;
name|String
name|urlString
init|=
name|tmpFile
operator|.
name|toURI
argument_list|()
operator|.
name|toURL
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|ClassLoader
name|c
init|=
operator|new
name|FireWallClassLoader
argument_list|(
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"java."
block|}
argument_list|)
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|urlClass
init|=
name|c
operator|.
name|loadClass
argument_list|(
literal|"java.net.URL"
argument_list|)
decl_stmt|;
name|Constructor
argument_list|<
name|?
argument_list|>
name|urlConstr
init|=
name|urlClass
operator|.
name|getConstructor
argument_list|(
operator|new
name|Class
index|[]
block|{
name|String
operator|.
name|class
block|}
argument_list|)
decl_stmt|;
name|Object
name|url
init|=
name|urlConstr
operator|.
name|newInstance
argument_list|(
operator|new
name|Object
index|[]
block|{
name|urlString
block|}
argument_list|)
decl_stmt|;
name|Method
name|meth
init|=
name|url
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"openConnection"
argument_list|,
operator|new
name|Class
index|[]
block|{}
argument_list|)
decl_stmt|;
name|Object
name|urlConn
init|=
name|meth
operator|.
name|invoke
argument_list|(
name|url
argument_list|,
operator|new
name|Object
index|[]
block|{}
argument_list|)
decl_stmt|;
comment|// Make sure that the internal (sun) class used by the URL connection
comment|// cannot be found directly through the firewall
try|try
block|{
name|c
operator|.
name|loadClass
argument_list|(
name|urlConn
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|cfne
parameter_list|)
block|{
return|return;
block|}
name|fail
argument_list|(
literal|"Should not have found the "
operator|+
name|urlConn
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" class"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSecurityException
parameter_list|()
block|{
try|try
block|{
operator|new
name|FireWallClassLoader
argument_list|(
name|ClassLoader
operator|.
name|getSystemClassLoader
argument_list|()
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"hi.there"
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SecurityException
name|se
parameter_list|)
block|{
return|return;
block|}
name|fail
argument_list|(
literal|"Constructing a FireWallClassLoader that does not pass through java."
operator|+
literal|" should cause a SecurityException."
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

