begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|xmlschema
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaElement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaEnumerationFacet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaFacet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaImport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaObjectCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaSimpleType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaSimpleTypeContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaSimpleTypeRestriction
import|;
end_import

begin_comment
comment|/**  * Some functions that avoid problems with Commons XML Schema.    */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|XmlSchemaTools
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|XmlSchemaTools
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|XmlSchemaTools
parameter_list|()
block|{     }
specifier|private
specifier|static
name|void
name|setNameFromQName
parameter_list|(
name|XmlSchemaElement
name|element
parameter_list|,
name|QName
name|name
parameter_list|)
block|{
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
name|element
operator|.
name|setName
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|element
operator|.
name|setName
argument_list|(
name|name
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Wrapper around XmlSchemaElement.setQName that checks for inconsistency with       * refName.      * @param element      * @param name      */
specifier|public
specifier|static
name|void
name|setElementQName
parameter_list|(
name|XmlSchemaElement
name|element
parameter_list|,
name|QName
name|name
parameter_list|)
block|{
if|if
condition|(
name|name
operator|!=
literal|null
operator|&&
name|element
operator|.
name|getRefName
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|element
operator|.
name|getRefName
argument_list|()
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|severe
argument_list|(
literal|"Attempt to set the QName of an element with a reference name"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|XmlSchemaInvalidOperation
argument_list|(
literal|"Attempt to set the QName of an element "
operator|+
literal|"with a reference name."
argument_list|)
throw|;
block|}
name|element
operator|.
name|setQName
argument_list|(
name|name
argument_list|)
expr_stmt|;
comment|// in CXF, we want them to be consistent.
name|setNameFromQName
argument_list|(
name|element
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
comment|/**      * Wrapper around XmlSchemaElement.setName that checks for inconsistency with       * refName.      * @param element      * @param name      */
specifier|public
specifier|static
name|void
name|setElementName
parameter_list|(
name|XmlSchemaElement
name|element
parameter_list|,
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|name
operator|!=
literal|null
operator|&&
name|element
operator|.
name|getRefName
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|element
operator|.
name|getRefName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
operator|.
name|equals
argument_list|(
name|name
argument_list|)
operator|&&
operator|(
name|element
operator|.
name|getQName
argument_list|()
operator|==
literal|null
operator|||
name|element
operator|.
name|getQName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
operator|.
name|equals
argument_list|(
name|name
argument_list|)
operator|)
condition|)
block|{
name|LOG
operator|.
name|severe
argument_list|(
literal|"Attempt to set the name of an element with a reference name."
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|XmlSchemaInvalidOperation
argument_list|(
literal|"Attempt to set the name of an element "
operator|+
literal|"with a reference name."
argument_list|)
throw|;
block|}
name|element
operator|.
name|setName
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
comment|/**      * Wrapper around XmlSchemaElement.setRefName that checks for inconsistency with       * name and QName.      * @param element      * @param name      */
specifier|public
specifier|static
name|void
name|setElementRefName
parameter_list|(
name|XmlSchemaElement
name|element
parameter_list|,
name|QName
name|name
parameter_list|)
block|{
if|if
condition|(
name|name
operator|!=
literal|null
operator|&&
operator|(
operator|(
name|element
operator|.
name|getQName
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|element
operator|.
name|getQName
argument_list|()
operator|.
name|equals
argument_list|(
name|name
argument_list|)
operator|)
operator|||
operator|(
name|element
operator|.
name|getName
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|element
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|name
operator|.
name|getLocalPart
argument_list|()
argument_list|)
operator|)
operator|)
condition|)
block|{
name|LOG
operator|.
name|severe
argument_list|(
literal|"Attempt to set the refName of an element with a name or QName"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|XmlSchemaInvalidOperation
argument_list|(
literal|"Attempt to set the refName of an element "
operator|+
literal|"with a name or QName."
argument_list|)
throw|;
block|}
name|element
operator|.
name|setRefName
argument_list|(
name|name
argument_list|)
expr_stmt|;
comment|// cxf conventionally keeps something in the name slot.
name|setNameFromQName
argument_list|(
name|element
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
comment|/**      * Return true if a simple type is a straightforward XML Schema representation of an enumeration.      * If we discover schemas that are 'enum-like' with more complex structures, we might      * make this deal with them.      * @param type Simple type, possible an enumeration.      * @return true for an enumeration.      */
specifier|public
specifier|static
name|boolean
name|isEumeration
parameter_list|(
name|XmlSchemaSimpleType
name|type
parameter_list|)
block|{
name|XmlSchemaSimpleTypeContent
name|content
init|=
name|type
operator|.
name|getContent
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|content
operator|instanceof
name|XmlSchemaSimpleTypeRestriction
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|XmlSchemaSimpleTypeRestriction
name|restriction
init|=
operator|(
name|XmlSchemaSimpleTypeRestriction
operator|)
name|content
decl_stmt|;
name|XmlSchemaObjectCollection
name|facets
init|=
name|restriction
operator|.
name|getFacets
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|facets
operator|.
name|getCount
argument_list|()
condition|;
name|x
operator|++
control|)
block|{
name|XmlSchemaFacet
name|facet
init|=
operator|(
name|XmlSchemaFacet
operator|)
name|facets
operator|.
name|getItem
argument_list|(
name|x
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|facet
operator|instanceof
name|XmlSchemaEnumerationFacet
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
comment|/**      * Retrieve the string values for an enumeration.      * @param type      * @return      */
specifier|public
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|enumeratorValues
parameter_list|(
name|XmlSchemaSimpleType
name|type
parameter_list|)
block|{
name|XmlSchemaSimpleTypeContent
name|content
init|=
name|type
operator|.
name|getContent
argument_list|()
decl_stmt|;
name|XmlSchemaSimpleTypeRestriction
name|restriction
init|=
operator|(
name|XmlSchemaSimpleTypeRestriction
operator|)
name|content
decl_stmt|;
name|XmlSchemaObjectCollection
name|facets
init|=
name|restriction
operator|.
name|getFacets
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|values
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|facets
operator|.
name|getCount
argument_list|()
condition|;
name|x
operator|++
control|)
block|{
name|XmlSchemaFacet
name|facet
init|=
operator|(
name|XmlSchemaFacet
operator|)
name|facets
operator|.
name|getItem
argument_list|(
name|x
argument_list|)
decl_stmt|;
name|XmlSchemaEnumerationFacet
name|enumFacet
init|=
operator|(
name|XmlSchemaEnumerationFacet
operator|)
name|facet
decl_stmt|;
name|values
operator|.
name|add
argument_list|(
name|enumFacet
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|values
return|;
block|}
comment|/**      * Is there an import for a particular namespace in a schema?      * @param schema      * @param namespaceUri      * @return      */
specifier|public
specifier|static
name|boolean
name|schemaImportsNamespace
parameter_list|(
name|XmlSchema
name|schema
parameter_list|,
name|String
name|namespaceUri
parameter_list|)
block|{
name|XmlSchemaObjectCollection
name|inc
init|=
name|schema
operator|.
name|getIncludes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|inc
operator|.
name|getCount
argument_list|()
condition|;
name|x
operator|++
control|)
block|{
name|XmlSchemaObject
name|what
init|=
name|inc
operator|.
name|getItem
argument_list|(
name|x
argument_list|)
decl_stmt|;
if|if
condition|(
name|what
operator|instanceof
name|XmlSchemaImport
condition|)
block|{
name|XmlSchemaImport
name|imp
init|=
operator|(
name|XmlSchemaImport
operator|)
name|what
decl_stmt|;
comment|// already there.
if|if
condition|(
name|namespaceUri
operator|.
name|equals
argument_list|(
name|imp
operator|.
name|getNamespace
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**      * Assist in managing the required<import namespace='uri'> for imports of peer schemas.      * @param schema      * @param namespaceUri      */
specifier|public
specifier|static
name|void
name|addImportIfNeeded
parameter_list|(
name|XmlSchema
name|schema
parameter_list|,
name|String
name|namespaceUri
parameter_list|)
block|{
name|XmlSchemaObjectCollection
name|inc
init|=
name|schema
operator|.
name|getIncludes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|inc
operator|.
name|getCount
argument_list|()
condition|;
name|x
operator|++
control|)
block|{
name|XmlSchemaObject
name|what
init|=
name|inc
operator|.
name|getItem
argument_list|(
name|x
argument_list|)
decl_stmt|;
if|if
condition|(
name|what
operator|instanceof
name|XmlSchemaImport
condition|)
block|{
name|XmlSchemaImport
name|imp
init|=
operator|(
name|XmlSchemaImport
operator|)
name|what
decl_stmt|;
comment|// already there.
if|if
condition|(
name|namespaceUri
operator|.
name|equals
argument_list|(
name|imp
operator|.
name|getNamespace
argument_list|()
argument_list|)
condition|)
block|{
return|return;
block|}
block|}
block|}
name|XmlSchemaImport
name|imp
init|=
operator|new
name|XmlSchemaImport
argument_list|()
decl_stmt|;
name|imp
operator|.
name|setNamespace
argument_list|(
name|namespaceUri
argument_list|)
expr_stmt|;
name|inc
operator|.
name|add
argument_list|(
name|imp
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

