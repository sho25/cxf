begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|MissingResourceException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ResourceBundle
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Handler
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|LogRecord
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_comment
comment|/**  * java.util.logging.Logger implementation delegating to another framework.  * All methods can be used except:  *   setLevel  *   addHandler / getHandlers  *   setParent / getParent  *   setUseParentHandlers / getUseParentHandlers  *  * @author gnodet  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractDelegatingLogger
extends|extends
name|Logger
block|{
specifier|protected
name|AbstractDelegatingLogger
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|resourceBundleName
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|,
name|resourceBundleName
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|log
parameter_list|(
name|LogRecord
name|record
parameter_list|)
block|{
if|if
condition|(
name|isLoggable
argument_list|(
name|record
operator|.
name|getLevel
argument_list|()
argument_list|)
condition|)
block|{
name|internalLog
argument_list|(
name|record
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|log
parameter_list|(
name|Level
name|level
parameter_list|,
name|String
name|msg
parameter_list|)
block|{
if|if
condition|(
name|isLoggable
argument_list|(
name|level
argument_list|)
condition|)
block|{
name|LogRecord
name|lr
init|=
operator|new
name|LogRecord
argument_list|(
name|level
argument_list|,
name|msg
argument_list|)
decl_stmt|;
name|doLog
argument_list|(
name|lr
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|log
parameter_list|(
name|Level
name|level
parameter_list|,
name|String
name|msg
parameter_list|,
name|Object
name|param1
parameter_list|)
block|{
if|if
condition|(
name|isLoggable
argument_list|(
name|level
argument_list|)
condition|)
block|{
name|LogRecord
name|lr
init|=
operator|new
name|LogRecord
argument_list|(
name|level
argument_list|,
name|msg
argument_list|)
decl_stmt|;
name|Object
name|params
index|[]
init|=
block|{
name|param1
block|}
decl_stmt|;
name|lr
operator|.
name|setParameters
argument_list|(
name|params
argument_list|)
expr_stmt|;
name|doLog
argument_list|(
name|lr
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|log
parameter_list|(
name|Level
name|level
parameter_list|,
name|String
name|msg
parameter_list|,
name|Object
name|params
index|[]
parameter_list|)
block|{
if|if
condition|(
name|isLoggable
argument_list|(
name|level
argument_list|)
condition|)
block|{
name|LogRecord
name|lr
init|=
operator|new
name|LogRecord
argument_list|(
name|level
argument_list|,
name|msg
argument_list|)
decl_stmt|;
name|lr
operator|.
name|setParameters
argument_list|(
name|params
argument_list|)
expr_stmt|;
name|doLog
argument_list|(
name|lr
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|log
parameter_list|(
name|Level
name|level
parameter_list|,
name|String
name|msg
parameter_list|,
name|Throwable
name|thrown
parameter_list|)
block|{
if|if
condition|(
name|isLoggable
argument_list|(
name|level
argument_list|)
condition|)
block|{
name|LogRecord
name|lr
init|=
operator|new
name|LogRecord
argument_list|(
name|level
argument_list|,
name|msg
argument_list|)
decl_stmt|;
name|lr
operator|.
name|setThrown
argument_list|(
name|thrown
argument_list|)
expr_stmt|;
name|doLog
argument_list|(
name|lr
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|logp
parameter_list|(
name|Level
name|level
parameter_list|,
name|String
name|sourceClass
parameter_list|,
name|String
name|sourceMethod
parameter_list|,
name|String
name|msg
parameter_list|)
block|{
if|if
condition|(
name|isLoggable
argument_list|(
name|level
argument_list|)
condition|)
block|{
name|LogRecord
name|lr
init|=
operator|new
name|LogRecord
argument_list|(
name|level
argument_list|,
name|msg
argument_list|)
decl_stmt|;
name|lr
operator|.
name|setSourceClassName
argument_list|(
name|sourceClass
argument_list|)
expr_stmt|;
name|lr
operator|.
name|setSourceMethodName
argument_list|(
name|sourceMethod
argument_list|)
expr_stmt|;
name|doLog
argument_list|(
name|lr
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|logp
parameter_list|(
name|Level
name|level
parameter_list|,
name|String
name|sourceClass
parameter_list|,
name|String
name|sourceMethod
parameter_list|,
name|String
name|msg
parameter_list|,
name|Object
name|param1
parameter_list|)
block|{
if|if
condition|(
name|isLoggable
argument_list|(
name|level
argument_list|)
condition|)
block|{
name|LogRecord
name|lr
init|=
operator|new
name|LogRecord
argument_list|(
name|level
argument_list|,
name|msg
argument_list|)
decl_stmt|;
name|lr
operator|.
name|setSourceClassName
argument_list|(
name|sourceClass
argument_list|)
expr_stmt|;
name|lr
operator|.
name|setSourceMethodName
argument_list|(
name|sourceMethod
argument_list|)
expr_stmt|;
name|Object
name|params
index|[]
init|=
block|{
name|param1
block|}
decl_stmt|;
name|lr
operator|.
name|setParameters
argument_list|(
name|params
argument_list|)
expr_stmt|;
name|doLog
argument_list|(
name|lr
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|logp
parameter_list|(
name|Level
name|level
parameter_list|,
name|String
name|sourceClass
parameter_list|,
name|String
name|sourceMethod
parameter_list|,
name|String
name|msg
parameter_list|,
name|Object
name|params
index|[]
parameter_list|)
block|{
if|if
condition|(
name|isLoggable
argument_list|(
name|level
argument_list|)
condition|)
block|{
name|LogRecord
name|lr
init|=
operator|new
name|LogRecord
argument_list|(
name|level
argument_list|,
name|msg
argument_list|)
decl_stmt|;
name|lr
operator|.
name|setSourceClassName
argument_list|(
name|sourceClass
argument_list|)
expr_stmt|;
name|lr
operator|.
name|setSourceMethodName
argument_list|(
name|sourceMethod
argument_list|)
expr_stmt|;
name|lr
operator|.
name|setParameters
argument_list|(
name|params
argument_list|)
expr_stmt|;
name|doLog
argument_list|(
name|lr
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|logp
parameter_list|(
name|Level
name|level
parameter_list|,
name|String
name|sourceClass
parameter_list|,
name|String
name|sourceMethod
parameter_list|,
name|String
name|msg
parameter_list|,
name|Throwable
name|thrown
parameter_list|)
block|{
if|if
condition|(
name|isLoggable
argument_list|(
name|level
argument_list|)
condition|)
block|{
name|LogRecord
name|lr
init|=
operator|new
name|LogRecord
argument_list|(
name|level
argument_list|,
name|msg
argument_list|)
decl_stmt|;
name|lr
operator|.
name|setSourceClassName
argument_list|(
name|sourceClass
argument_list|)
expr_stmt|;
name|lr
operator|.
name|setSourceMethodName
argument_list|(
name|sourceMethod
argument_list|)
expr_stmt|;
name|lr
operator|.
name|setThrown
argument_list|(
name|thrown
argument_list|)
expr_stmt|;
name|doLog
argument_list|(
name|lr
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|logrb
parameter_list|(
name|Level
name|level
parameter_list|,
name|String
name|sourceClass
parameter_list|,
name|String
name|sourceMethod
parameter_list|,
name|String
name|bundleName
parameter_list|,
name|String
name|msg
parameter_list|)
block|{
if|if
condition|(
name|isLoggable
argument_list|(
name|level
argument_list|)
condition|)
block|{
name|LogRecord
name|lr
init|=
operator|new
name|LogRecord
argument_list|(
name|level
argument_list|,
name|msg
argument_list|)
decl_stmt|;
name|lr
operator|.
name|setSourceClassName
argument_list|(
name|sourceClass
argument_list|)
expr_stmt|;
name|lr
operator|.
name|setSourceMethodName
argument_list|(
name|sourceMethod
argument_list|)
expr_stmt|;
name|doLog
argument_list|(
name|lr
argument_list|,
name|bundleName
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|logrb
parameter_list|(
name|Level
name|level
parameter_list|,
name|String
name|sourceClass
parameter_list|,
name|String
name|sourceMethod
parameter_list|,
name|String
name|bundleName
parameter_list|,
name|String
name|msg
parameter_list|,
name|Object
name|param1
parameter_list|)
block|{
if|if
condition|(
name|isLoggable
argument_list|(
name|level
argument_list|)
condition|)
block|{
name|LogRecord
name|lr
init|=
operator|new
name|LogRecord
argument_list|(
name|level
argument_list|,
name|msg
argument_list|)
decl_stmt|;
name|lr
operator|.
name|setSourceClassName
argument_list|(
name|sourceClass
argument_list|)
expr_stmt|;
name|lr
operator|.
name|setSourceMethodName
argument_list|(
name|sourceMethod
argument_list|)
expr_stmt|;
name|Object
name|params
index|[]
init|=
block|{
name|param1
block|}
decl_stmt|;
name|lr
operator|.
name|setParameters
argument_list|(
name|params
argument_list|)
expr_stmt|;
name|doLog
argument_list|(
name|lr
argument_list|,
name|bundleName
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|logrb
parameter_list|(
name|Level
name|level
parameter_list|,
name|String
name|sourceClass
parameter_list|,
name|String
name|sourceMethod
parameter_list|,
name|String
name|bundleName
parameter_list|,
name|String
name|msg
parameter_list|,
name|Object
name|params
index|[]
parameter_list|)
block|{
if|if
condition|(
name|isLoggable
argument_list|(
name|level
argument_list|)
condition|)
block|{
name|LogRecord
name|lr
init|=
operator|new
name|LogRecord
argument_list|(
name|level
argument_list|,
name|msg
argument_list|)
decl_stmt|;
name|lr
operator|.
name|setSourceClassName
argument_list|(
name|sourceClass
argument_list|)
expr_stmt|;
name|lr
operator|.
name|setSourceMethodName
argument_list|(
name|sourceMethod
argument_list|)
expr_stmt|;
name|lr
operator|.
name|setParameters
argument_list|(
name|params
argument_list|)
expr_stmt|;
name|doLog
argument_list|(
name|lr
argument_list|,
name|bundleName
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|logrb
parameter_list|(
name|Level
name|level
parameter_list|,
name|String
name|sourceClass
parameter_list|,
name|String
name|sourceMethod
parameter_list|,
name|String
name|bundleName
parameter_list|,
name|String
name|msg
parameter_list|,
name|Throwable
name|thrown
parameter_list|)
block|{
if|if
condition|(
name|isLoggable
argument_list|(
name|level
argument_list|)
condition|)
block|{
name|LogRecord
name|lr
init|=
operator|new
name|LogRecord
argument_list|(
name|level
argument_list|,
name|msg
argument_list|)
decl_stmt|;
name|lr
operator|.
name|setSourceClassName
argument_list|(
name|sourceClass
argument_list|)
expr_stmt|;
name|lr
operator|.
name|setSourceMethodName
argument_list|(
name|sourceMethod
argument_list|)
expr_stmt|;
name|lr
operator|.
name|setThrown
argument_list|(
name|thrown
argument_list|)
expr_stmt|;
name|doLog
argument_list|(
name|lr
argument_list|,
name|bundleName
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|entering
parameter_list|(
name|String
name|sourceClass
parameter_list|,
name|String
name|sourceMethod
parameter_list|)
block|{
if|if
condition|(
name|isLoggable
argument_list|(
name|Level
operator|.
name|FINER
argument_list|)
condition|)
block|{
name|logp
argument_list|(
name|Level
operator|.
name|FINER
argument_list|,
name|sourceClass
argument_list|,
name|sourceMethod
argument_list|,
literal|"ENTRY"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|entering
parameter_list|(
name|String
name|sourceClass
parameter_list|,
name|String
name|sourceMethod
parameter_list|,
name|Object
name|param1
parameter_list|)
block|{
if|if
condition|(
name|isLoggable
argument_list|(
name|Level
operator|.
name|FINER
argument_list|)
condition|)
block|{
name|Object
name|params
index|[]
init|=
block|{
name|param1
block|}
decl_stmt|;
name|logp
argument_list|(
name|Level
operator|.
name|FINER
argument_list|,
name|sourceClass
argument_list|,
name|sourceMethod
argument_list|,
literal|"ENTRY {0}"
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|entering
parameter_list|(
name|String
name|sourceClass
parameter_list|,
name|String
name|sourceMethod
parameter_list|,
name|Object
name|params
index|[]
parameter_list|)
block|{
if|if
condition|(
name|isLoggable
argument_list|(
name|Level
operator|.
name|FINER
argument_list|)
condition|)
block|{
name|String
name|msg
init|=
literal|"ENTRY"
decl_stmt|;
if|if
condition|(
name|params
operator|==
literal|null
condition|)
block|{
name|logp
argument_list|(
name|Level
operator|.
name|FINER
argument_list|,
name|sourceClass
argument_list|,
name|sourceMethod
argument_list|,
name|msg
argument_list|)
expr_stmt|;
return|return;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|params
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|msg
operator|=
name|msg
operator|+
literal|" {"
operator|+
name|i
operator|+
literal|"}"
expr_stmt|;
block|}
name|logp
argument_list|(
name|Level
operator|.
name|FINER
argument_list|,
name|sourceClass
argument_list|,
name|sourceMethod
argument_list|,
name|msg
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|exiting
parameter_list|(
name|String
name|sourceClass
parameter_list|,
name|String
name|sourceMethod
parameter_list|)
block|{
if|if
condition|(
name|isLoggable
argument_list|(
name|Level
operator|.
name|FINER
argument_list|)
condition|)
block|{
name|logp
argument_list|(
name|Level
operator|.
name|FINER
argument_list|,
name|sourceClass
argument_list|,
name|sourceMethod
argument_list|,
literal|"RETURN"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|exiting
parameter_list|(
name|String
name|sourceClass
parameter_list|,
name|String
name|sourceMethod
parameter_list|,
name|Object
name|result
parameter_list|)
block|{
if|if
condition|(
name|isLoggable
argument_list|(
name|Level
operator|.
name|FINER
argument_list|)
condition|)
block|{
name|Object
name|params
index|[]
init|=
block|{
name|result
block|}
decl_stmt|;
name|logp
argument_list|(
name|Level
operator|.
name|FINER
argument_list|,
name|sourceClass
argument_list|,
name|sourceMethod
argument_list|,
literal|"RETURN {0}"
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|throwing
parameter_list|(
name|String
name|sourceClass
parameter_list|,
name|String
name|sourceMethod
parameter_list|,
name|Throwable
name|thrown
parameter_list|)
block|{
if|if
condition|(
name|isLoggable
argument_list|(
name|Level
operator|.
name|FINER
argument_list|)
condition|)
block|{
name|LogRecord
name|lr
init|=
operator|new
name|LogRecord
argument_list|(
name|Level
operator|.
name|FINER
argument_list|,
literal|"THROW"
argument_list|)
decl_stmt|;
name|lr
operator|.
name|setSourceClassName
argument_list|(
name|sourceClass
argument_list|)
expr_stmt|;
name|lr
operator|.
name|setSourceMethodName
argument_list|(
name|sourceMethod
argument_list|)
expr_stmt|;
name|lr
operator|.
name|setThrown
argument_list|(
name|thrown
argument_list|)
expr_stmt|;
name|doLog
argument_list|(
name|lr
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|severe
parameter_list|(
name|String
name|msg
parameter_list|)
block|{
if|if
condition|(
name|isLoggable
argument_list|(
name|Level
operator|.
name|SEVERE
argument_list|)
condition|)
block|{
name|LogRecord
name|lr
init|=
operator|new
name|LogRecord
argument_list|(
name|Level
operator|.
name|SEVERE
argument_list|,
name|msg
argument_list|)
decl_stmt|;
name|doLog
argument_list|(
name|lr
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|warning
parameter_list|(
name|String
name|msg
parameter_list|)
block|{
if|if
condition|(
name|isLoggable
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|)
condition|)
block|{
name|LogRecord
name|lr
init|=
operator|new
name|LogRecord
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
name|msg
argument_list|)
decl_stmt|;
name|doLog
argument_list|(
name|lr
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|info
parameter_list|(
name|String
name|msg
parameter_list|)
block|{
if|if
condition|(
name|isLoggable
argument_list|(
name|Level
operator|.
name|INFO
argument_list|)
condition|)
block|{
name|LogRecord
name|lr
init|=
operator|new
name|LogRecord
argument_list|(
name|Level
operator|.
name|INFO
argument_list|,
name|msg
argument_list|)
decl_stmt|;
name|doLog
argument_list|(
name|lr
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|config
parameter_list|(
name|String
name|msg
parameter_list|)
block|{
if|if
condition|(
name|isLoggable
argument_list|(
name|Level
operator|.
name|CONFIG
argument_list|)
condition|)
block|{
name|LogRecord
name|lr
init|=
operator|new
name|LogRecord
argument_list|(
name|Level
operator|.
name|CONFIG
argument_list|,
name|msg
argument_list|)
decl_stmt|;
name|doLog
argument_list|(
name|lr
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|fine
parameter_list|(
name|String
name|msg
parameter_list|)
block|{
if|if
condition|(
name|isLoggable
argument_list|(
name|Level
operator|.
name|FINE
argument_list|)
condition|)
block|{
name|LogRecord
name|lr
init|=
operator|new
name|LogRecord
argument_list|(
name|Level
operator|.
name|FINE
argument_list|,
name|msg
argument_list|)
decl_stmt|;
name|doLog
argument_list|(
name|lr
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|finer
parameter_list|(
name|String
name|msg
parameter_list|)
block|{
if|if
condition|(
name|isLoggable
argument_list|(
name|Level
operator|.
name|FINER
argument_list|)
condition|)
block|{
name|LogRecord
name|lr
init|=
operator|new
name|LogRecord
argument_list|(
name|Level
operator|.
name|FINER
argument_list|,
name|msg
argument_list|)
decl_stmt|;
name|doLog
argument_list|(
name|lr
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|finest
parameter_list|(
name|String
name|msg
parameter_list|)
block|{
if|if
condition|(
name|isLoggable
argument_list|(
name|Level
operator|.
name|FINEST
argument_list|)
condition|)
block|{
name|LogRecord
name|lr
init|=
operator|new
name|LogRecord
argument_list|(
name|Level
operator|.
name|FINEST
argument_list|,
name|msg
argument_list|)
decl_stmt|;
name|doLog
argument_list|(
name|lr
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setLevel
parameter_list|(
name|Level
name|newLevel
parameter_list|)
throws|throws
name|SecurityException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
specifier|public
specifier|abstract
name|Level
name|getLevel
parameter_list|()
function_decl|;
specifier|public
name|boolean
name|isLoggable
parameter_list|(
name|Level
name|level
parameter_list|)
block|{
name|Level
name|l
init|=
name|getLevel
argument_list|()
decl_stmt|;
return|return
name|level
operator|.
name|intValue
argument_list|()
operator|>=
name|l
operator|.
name|intValue
argument_list|()
operator|&&
name|l
operator|!=
name|Level
operator|.
name|OFF
return|;
block|}
specifier|public
specifier|synchronized
name|void
name|addHandler
parameter_list|(
name|Handler
name|handler
parameter_list|)
throws|throws
name|SecurityException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
specifier|public
specifier|synchronized
name|void
name|removeHandler
parameter_list|(
name|Handler
name|handler
parameter_list|)
throws|throws
name|SecurityException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
specifier|public
specifier|synchronized
name|Handler
index|[]
name|getHandlers
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
specifier|public
specifier|synchronized
name|void
name|setUseParentHandlers
parameter_list|(
name|boolean
name|useParentHandlers
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
specifier|public
specifier|synchronized
name|boolean
name|getUseParentHandlers
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
specifier|public
name|Logger
name|getParent
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
specifier|public
name|void
name|setParent
parameter_list|(
name|Logger
name|parent
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
specifier|protected
name|void
name|doLog
parameter_list|(
name|LogRecord
name|lr
parameter_list|)
block|{
name|lr
operator|.
name|setLoggerName
argument_list|(
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|rbname
init|=
name|getResourceBundleName
argument_list|()
decl_stmt|;
if|if
condition|(
name|rbname
operator|!=
literal|null
condition|)
block|{
name|lr
operator|.
name|setResourceBundleName
argument_list|(
name|rbname
argument_list|)
expr_stmt|;
name|lr
operator|.
name|setResourceBundle
argument_list|(
name|getResourceBundle
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|internalLog
argument_list|(
name|lr
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|doLog
parameter_list|(
name|LogRecord
name|lr
parameter_list|,
name|String
name|rbname
parameter_list|)
block|{
name|lr
operator|.
name|setLoggerName
argument_list|(
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|rbname
operator|!=
literal|null
condition|)
block|{
name|lr
operator|.
name|setResourceBundleName
argument_list|(
name|rbname
argument_list|)
expr_stmt|;
name|lr
operator|.
name|setResourceBundle
argument_list|(
name|loadResourceBundle
argument_list|(
name|rbname
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|internalLog
argument_list|(
name|lr
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|internalLog
parameter_list|(
name|LogRecord
name|record
parameter_list|)
block|{
name|Filter
name|filter
init|=
name|getFilter
argument_list|()
decl_stmt|;
if|if
condition|(
name|filter
operator|!=
literal|null
operator|&&
operator|!
name|filter
operator|.
name|isLoggable
argument_list|(
name|record
argument_list|)
condition|)
block|{
return|return;
block|}
name|String
name|msg
init|=
name|formatMessage
argument_list|(
name|record
argument_list|)
decl_stmt|;
name|internalLogFormatted
argument_list|(
name|msg
argument_list|,
name|record
argument_list|)
expr_stmt|;
block|}
specifier|protected
specifier|abstract
name|void
name|internalLogFormatted
parameter_list|(
name|String
name|msg
parameter_list|,
name|LogRecord
name|record
parameter_list|)
function_decl|;
specifier|protected
name|String
name|formatMessage
parameter_list|(
name|LogRecord
name|record
parameter_list|)
block|{
name|String
name|format
init|=
name|record
operator|.
name|getMessage
argument_list|()
decl_stmt|;
name|ResourceBundle
name|catalog
init|=
name|record
operator|.
name|getResourceBundle
argument_list|()
decl_stmt|;
if|if
condition|(
name|catalog
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|format
operator|=
name|catalog
operator|.
name|getString
argument_list|(
name|record
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MissingResourceException
name|ex
parameter_list|)
block|{
name|format
operator|=
name|record
operator|.
name|getMessage
argument_list|()
expr_stmt|;
block|}
block|}
try|try
block|{
name|Object
name|parameters
index|[]
init|=
name|record
operator|.
name|getParameters
argument_list|()
decl_stmt|;
if|if
condition|(
name|parameters
operator|==
literal|null
operator|||
name|parameters
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
name|format
return|;
block|}
if|if
condition|(
name|format
operator|.
name|indexOf
argument_list|(
literal|"{0"
argument_list|)
operator|>=
literal|0
operator|||
name|format
operator|.
name|indexOf
argument_list|(
literal|"{1"
argument_list|)
operator|>=
literal|0
operator|||
name|format
operator|.
name|indexOf
argument_list|(
literal|"{2"
argument_list|)
operator|>=
literal|0
operator|||
name|format
operator|.
name|indexOf
argument_list|(
literal|"{3"
argument_list|)
operator|>=
literal|0
condition|)
block|{
return|return
name|java
operator|.
name|text
operator|.
name|MessageFormat
operator|.
name|format
argument_list|(
name|format
argument_list|,
name|parameters
argument_list|)
return|;
block|}
return|return
name|format
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
return|return
name|format
return|;
block|}
block|}
comment|/**      * Load the specified resource bundle      *      * @param resourceBundleName      *            the name of the resource bundle to load, cannot be null      * @return the loaded resource bundle.      * @throws java.util.MissingResourceException      *             If the specified resource bundle can not be loaded.      */
specifier|static
name|ResourceBundle
name|loadResourceBundle
parameter_list|(
name|String
name|resourceBundleName
parameter_list|)
block|{
comment|// try context class loader to load the resource
name|ClassLoader
name|cl
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|cl
condition|)
block|{
try|try
block|{
return|return
name|ResourceBundle
operator|.
name|getBundle
argument_list|(
name|resourceBundleName
argument_list|,
name|Locale
operator|.
name|getDefault
argument_list|()
argument_list|,
name|cl
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|MissingResourceException
name|e
parameter_list|)
block|{
comment|// Failed to load using context classloader, ignore
block|}
block|}
comment|// try system class loader to load the resource
name|cl
operator|=
name|ClassLoader
operator|.
name|getSystemClassLoader
argument_list|()
expr_stmt|;
if|if
condition|(
literal|null
operator|!=
name|cl
condition|)
block|{
try|try
block|{
return|return
name|ResourceBundle
operator|.
name|getBundle
argument_list|(
name|resourceBundleName
argument_list|,
name|Locale
operator|.
name|getDefault
argument_list|()
argument_list|,
name|cl
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|MissingResourceException
name|e
parameter_list|)
block|{
comment|// Failed to load using system classloader, ignore
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

