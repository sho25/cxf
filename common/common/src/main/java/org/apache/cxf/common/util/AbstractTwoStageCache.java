begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|ref
operator|.
name|SoftReference
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Queue
import|;
end_import

begin_comment
comment|/**  * This class pools objects, for efficiency accross a lightweight  * fixed-size primary cache and a variable-size secondary cache - the  * latter uses soft references to allow the polled object be GCed if  * necessary.  *<p>  * To use the cache, a subclass is defined which provides an implementation  * of the abstract get() method - this may be conveniently achieved via  * an anonymous subclass. The cache is then populated by calling the  * populate_cache() method - the reason a two-stage process is used is  * to avoid problems with the inner class create() method accessing outer  * class data members from the inner class ctor (before its reference to  * the outer class is initialized).  *<p>  *  * @author Eoghan Glynn  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractTwoStageCache
parameter_list|<
name|E
parameter_list|>
block|{
specifier|private
name|Object
name|mutex
decl_stmt|;
specifier|private
name|int
name|preallocation
decl_stmt|;
specifier|private
name|int
name|primaryCacheSize
decl_stmt|;
specifier|private
name|int
name|secondaryCacheHighWaterMark
decl_stmt|;
specifier|private
name|Queue
argument_list|<
name|E
argument_list|>
name|primaryCache
decl_stmt|;
specifier|private
name|Queue
argument_list|<
name|SoftReference
argument_list|<
name|E
argument_list|>
argument_list|>
name|secondaryCache
decl_stmt|;
comment|/**      * Constructor.      *      * @param pCacheSize primary cache size      * @param secondary_cache_max secondary cache high water mark      * @param preallocation the number of object to preallocation when the      * cache is created      */
specifier|public
name|AbstractTwoStageCache
parameter_list|(
name|int
name|pCacheSize
parameter_list|,
name|int
name|highWaterMark
parameter_list|,
name|int
name|prealloc
parameter_list|)
block|{
name|this
argument_list|(
name|pCacheSize
argument_list|,
name|highWaterMark
argument_list|,
name|prealloc
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**      * Constructor.      *      * @param pCacheSize primary cache size      * @param secondary_cache_max secondary cache high water mark      * @param preallocation the number of object to preallocation when the      * cache is created      * @param mutex object to use as a monitor      */
specifier|public
name|AbstractTwoStageCache
parameter_list|(
name|int
name|pCacheSize
parameter_list|,
name|int
name|highWaterMark
parameter_list|,
name|int
name|prealloc
parameter_list|,
name|Object
name|mutexParam
parameter_list|)
block|{
name|this
operator|.
name|primaryCacheSize
operator|=
name|Math
operator|.
name|min
argument_list|(
name|pCacheSize
argument_list|,
name|highWaterMark
argument_list|)
expr_stmt|;
name|this
operator|.
name|secondaryCacheHighWaterMark
operator|=
name|highWaterMark
operator|-
name|pCacheSize
expr_stmt|;
name|this
operator|.
name|preallocation
operator|=
name|prealloc
operator|>
name|highWaterMark
condition|?
name|highWaterMark
else|:
name|prealloc
expr_stmt|;
name|this
operator|.
name|mutex
operator|=
name|mutexParam
operator|!=
literal|null
condition|?
name|mutexParam
else|:
name|this
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"AbstractTwoStageCache"
return|;
block|}
comment|/**      * Over-ride this method to create objects to populate the pool      *      * @return newly created object      */
specifier|protected
specifier|abstract
name|E
name|create
parameter_list|()
throws|throws
name|Exception
function_decl|;
comment|/**      * Populate the cache      */
specifier|public
name|void
name|populateCache
parameter_list|()
throws|throws
name|Exception
block|{
comment|// create cache
name|primaryCache
operator|=
operator|new
name|LinkedList
argument_list|<
name|E
argument_list|>
argument_list|()
expr_stmt|;
name|secondaryCache
operator|=
operator|new
name|LinkedList
argument_list|<
name|SoftReference
argument_list|<
name|E
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
comment|// preallocate objects into primary cache
name|int
name|primaryCachePreallocation
init|=
operator|(
name|preallocation
operator|>
name|primaryCacheSize
operator|)
condition|?
name|primaryCacheSize
else|:
name|preallocation
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|primaryCachePreallocation
condition|;
name|i
operator|++
control|)
block|{
name|primaryCache
operator|.
name|offer
argument_list|(
name|create
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// preallocate objects into secondary cache
name|int
name|secondaryCachePreallocation
init|=
name|preallocation
operator|-
name|primaryCachePreallocation
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|secondaryCachePreallocation
condition|;
name|i
operator|++
control|)
block|{
name|secondaryCache
operator|.
name|offer
argument_list|(
operator|new
name|SoftReference
argument_list|<
name|E
argument_list|>
argument_list|(
name|create
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Return a cached or newly created object      *      * @return an object      */
specifier|public
name|E
name|get
parameter_list|()
throws|throws
name|Exception
block|{
name|E
name|ret
init|=
name|poll
argument_list|()
decl_stmt|;
if|if
condition|(
name|ret
operator|==
literal|null
condition|)
block|{
name|ret
operator|=
name|create
argument_list|()
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
comment|/**      * Return a cached object if one is available      *      * @return an object      */
specifier|public
name|E
name|poll
parameter_list|()
block|{
name|E
name|ret
init|=
literal|null
decl_stmt|;
synchronized|synchronized
init|(
name|mutex
init|)
block|{
if|if
condition|(
name|primaryCache
operator|!=
literal|null
condition|)
block|{
name|ret
operator|=
name|primaryCache
operator|.
name|poll
argument_list|()
expr_stmt|;
if|if
condition|(
name|ret
operator|==
literal|null
condition|)
block|{
name|SoftReference
argument_list|<
name|E
argument_list|>
name|sr
init|=
name|secondaryCache
operator|.
name|poll
argument_list|()
decl_stmt|;
while|while
condition|(
name|ret
operator|==
literal|null
operator|&&
name|sr
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|sr
operator|!=
literal|null
condition|)
block|{
name|ret
operator|=
name|sr
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|ret
operator|==
literal|null
condition|)
block|{
name|sr
operator|=
name|secondaryCache
operator|.
name|poll
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
return|return
name|ret
return|;
block|}
comment|/**      * Recycle an old Object.      *      * @param oldObject the object to recycle      * @return true iff the object can be accomodated in the cache      */
specifier|public
name|boolean
name|recycle
parameter_list|(
name|E
name|oldObject
parameter_list|)
block|{
name|boolean
name|cached
init|=
literal|false
decl_stmt|;
synchronized|synchronized
init|(
name|mutex
init|)
block|{
if|if
condition|(
name|primaryCache
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|primaryCache
operator|.
name|size
argument_list|()
operator|<
name|primaryCacheSize
condition|)
block|{
name|cached
operator|=
name|primaryCache
operator|.
name|offer
argument_list|(
name|oldObject
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|cached
operator|&&
operator|(
name|secondaryCache
operator|.
name|size
argument_list|()
operator|>=
name|secondaryCacheHighWaterMark
operator|)
condition|)
block|{
comment|// check for nulls in secondary cache and remove them to create room
name|Iterator
argument_list|<
name|SoftReference
argument_list|<
name|E
argument_list|>
argument_list|>
name|it
init|=
name|secondaryCache
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|SoftReference
argument_list|<
name|E
argument_list|>
name|sr
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|sr
operator|.
name|get
argument_list|()
operator|==
literal|null
condition|)
block|{
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|cached
operator|&&
operator|(
name|secondaryCache
operator|.
name|size
argument_list|()
operator|<
name|secondaryCacheHighWaterMark
operator|)
condition|)
block|{
name|cached
operator|=
name|secondaryCache
operator|.
name|offer
argument_list|(
operator|new
name|SoftReference
argument_list|<
name|E
argument_list|>
argument_list|(
name|oldObject
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|cached
return|;
block|}
block|}
end_class

end_unit

