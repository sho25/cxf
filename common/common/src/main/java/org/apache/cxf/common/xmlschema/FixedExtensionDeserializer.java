begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|xmlschema
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|constants
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|extensions
operator|.
name|ExtensionDeserializer
import|;
end_import

begin_comment
comment|/**  * Workaround a bug in XmlSchema (WSCOMMONS-261). Remove this when there is a version of XmlSchema  * with the fix.  *   * In XmlSchema, the default deserializer will only allow a single extension per element.  The   * last one wipes out the earlier recorded extensions.  */
end_comment

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
class|class
name|FixedExtensionDeserializer
implements|implements
name|ExtensionDeserializer
block|{
specifier|public
name|void
name|deserialize
parameter_list|(
name|XmlSchemaObject
name|schemaObject
parameter_list|,
name|QName
name|name
parameter_list|,
name|Node
name|node
parameter_list|)
block|{
comment|// we just attach the raw node either to the meta map of
comment|// elements or the attributes
name|Map
name|metaInfoMap
init|=
name|schemaObject
operator|.
name|getMetaInfoMap
argument_list|()
decl_stmt|;
if|if
condition|(
name|metaInfoMap
operator|==
literal|null
condition|)
block|{
name|metaInfoMap
operator|=
operator|new
name|HashMap
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|node
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|ATTRIBUTE_NODE
condition|)
block|{
if|if
condition|(
name|name
operator|.
name|getNamespaceURI
argument_list|()
operator|.
name|equals
argument_list|(
name|Constants
operator|.
name|XMLNS_ATTRIBUTE_NS_URI
argument_list|)
condition|)
block|{
return|return;
block|}
name|Map
name|attribMap
decl_stmt|;
if|if
condition|(
name|metaInfoMap
operator|.
name|containsKey
argument_list|(
name|Constants
operator|.
name|MetaDataConstants
operator|.
name|EXTERNAL_ATTRIBUTES
argument_list|)
condition|)
block|{
name|attribMap
operator|=
operator|(
name|Map
operator|)
name|metaInfoMap
operator|.
name|get
argument_list|(
name|Constants
operator|.
name|MetaDataConstants
operator|.
name|EXTERNAL_ATTRIBUTES
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|attribMap
operator|=
operator|new
name|HashMap
argument_list|()
expr_stmt|;
name|metaInfoMap
operator|.
name|put
argument_list|(
name|Constants
operator|.
name|MetaDataConstants
operator|.
name|EXTERNAL_ATTRIBUTES
argument_list|,
name|attribMap
argument_list|)
expr_stmt|;
block|}
name|attribMap
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|node
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|node
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|ELEMENT_NODE
condition|)
block|{
name|Map
name|elementMap
decl_stmt|;
if|if
condition|(
name|metaInfoMap
operator|.
name|containsKey
argument_list|(
name|Constants
operator|.
name|MetaDataConstants
operator|.
name|EXTERNAL_ELEMENTS
argument_list|)
condition|)
block|{
name|elementMap
operator|=
operator|(
name|Map
operator|)
name|metaInfoMap
operator|.
name|get
argument_list|(
name|Constants
operator|.
name|MetaDataConstants
operator|.
name|EXTERNAL_ELEMENTS
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|elementMap
operator|=
operator|new
name|HashMap
argument_list|()
expr_stmt|;
name|metaInfoMap
operator|.
name|put
argument_list|(
name|Constants
operator|.
name|MetaDataConstants
operator|.
name|EXTERNAL_ELEMENTS
argument_list|,
name|elementMap
argument_list|)
expr_stmt|;
block|}
name|elementMap
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|node
argument_list|)
expr_stmt|;
block|}
comment|//subsequent processing takes place only if this map is not empty
if|if
condition|(
operator|!
name|metaInfoMap
operator|.
name|isEmpty
argument_list|()
operator|&&
name|schemaObject
operator|.
name|getMetaInfoMap
argument_list|()
operator|==
literal|null
condition|)
block|{
name|schemaObject
operator|.
name|setMetaInfoMap
argument_list|(
name|metaInfoMap
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

