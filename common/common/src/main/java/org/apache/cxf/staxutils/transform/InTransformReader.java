begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|staxutils
operator|.
name|transform
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Stack
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|XMLConstants
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|NamespaceContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamConstants
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|staxutils
operator|.
name|DepthXMLStreamReader
import|;
end_import

begin_class
specifier|public
class|class
name|InTransformReader
extends|extends
name|DepthXMLStreamReader
block|{
specifier|private
specifier|static
specifier|final
name|String
name|INTERN_NAMES
init|=
literal|"org.codehaus.stax2.internNames"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|INTERN_NS
init|=
literal|"org.codehaus.stax2.internNsUris"
decl_stmt|;
specifier|private
name|Stack
argument_list|<
name|QName
argument_list|>
name|elementStack
init|=
operator|new
name|Stack
argument_list|<
name|QName
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|QNamesMap
name|inElementsMap
decl_stmt|;
specifier|private
name|QNamesMap
name|inAttributesMap
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|QName
argument_list|,
name|ElementProperty
argument_list|>
name|inAppendMap
init|=
operator|new
name|HashMap
argument_list|<
name|QName
argument_list|,
name|ElementProperty
argument_list|>
argument_list|(
literal|5
argument_list|)
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|QName
argument_list|>
name|inDropSet
init|=
operator|new
name|HashSet
argument_list|<
name|QName
argument_list|>
argument_list|(
literal|5
argument_list|)
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|nsMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|(
literal|5
argument_list|)
decl_stmt|;
specifier|private
name|QName
name|currentQName
decl_stmt|;
specifier|private
name|QName
name|pushBackQName
decl_stmt|;
specifier|private
name|QName
name|pushAheadQName
decl_stmt|;
specifier|private
name|String
name|currentText
decl_stmt|;
specifier|private
name|String
name|pushAheadText
decl_stmt|;
specifier|private
name|List
argument_list|<
name|Integer
argument_list|>
name|attributesIndexes
init|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|int
name|previousDepth
init|=
operator|-
literal|1
decl_stmt|;
specifier|private
name|boolean
name|blockOriginalReader
init|=
literal|true
decl_stmt|;
specifier|private
name|boolean
name|attributesIndexed
decl_stmt|;
specifier|private
name|DelegatingNamespaceContext
name|namespaceContext
decl_stmt|;
specifier|public
name|InTransformReader
parameter_list|(
name|XMLStreamReader
name|reader
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|inEMap
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|appendMap
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|dropESet
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|inAMap
parameter_list|,
name|boolean
name|blockOriginalReader
parameter_list|)
block|{
name|super
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|inElementsMap
operator|=
operator|new
name|QNamesMap
argument_list|(
name|inEMap
operator|==
literal|null
condition|?
literal|0
else|:
name|inEMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|inAttributesMap
operator|=
operator|new
name|QNamesMap
argument_list|(
name|inAMap
operator|==
literal|null
condition|?
literal|0
else|:
name|inAMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|blockOriginalReader
operator|=
name|blockOriginalReader
expr_stmt|;
name|TransformUtils
operator|.
name|convertToQNamesMap
argument_list|(
name|inEMap
argument_list|,
name|inElementsMap
argument_list|,
name|nsMap
argument_list|)
expr_stmt|;
name|TransformUtils
operator|.
name|convertToQNamesMap
argument_list|(
name|inAMap
argument_list|,
name|inAttributesMap
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|TransformUtils
operator|.
name|convertToMapOfElementProperties
argument_list|(
name|appendMap
argument_list|,
name|inAppendMap
argument_list|)
expr_stmt|;
name|TransformUtils
operator|.
name|convertToSetOfQNames
argument_list|(
name|dropESet
argument_list|,
name|inDropSet
argument_list|)
expr_stmt|;
name|namespaceContext
operator|=
operator|new
name|DelegatingNamespaceContext
argument_list|(
name|reader
operator|.
name|getNamespaceContext
argument_list|()
argument_list|,
name|nsMap
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
comment|// If JAXB schema validation is disabled then returning
comment|// the native reader and thus bypassing this reader may work
specifier|public
name|XMLStreamReader
name|getReader
parameter_list|()
block|{
return|return
name|blockOriginalReader
condition|?
name|this
else|:
name|super
operator|.
name|getReader
argument_list|()
return|;
block|}
specifier|public
name|int
name|next
parameter_list|()
throws|throws
name|XMLStreamException
block|{
if|if
condition|(
name|isAtText
argument_list|()
condition|)
block|{
name|resetCurrentText
argument_list|()
expr_stmt|;
return|return
name|currentText
operator|!=
literal|null
condition|?
name|XMLStreamConstants
operator|.
name|CHARACTERS
else|:
name|XMLStreamConstants
operator|.
name|END_ELEMENT
return|;
block|}
elseif|else
if|if
condition|(
name|isAtPushedQName
argument_list|()
condition|)
block|{
name|resetCurrentQName
argument_list|()
expr_stmt|;
name|pushElement
argument_list|()
expr_stmt|;
return|return
name|XMLStreamConstants
operator|.
name|START_ELEMENT
return|;
block|}
elseif|else
if|if
condition|(
name|isAtMarkedDepth
argument_list|()
condition|)
block|{
name|previousDepth
operator|=
operator|-
literal|1
expr_stmt|;
name|popElement
argument_list|()
expr_stmt|;
return|return
name|XMLStreamConstants
operator|.
name|END_ELEMENT
return|;
block|}
else|else
block|{
specifier|final
name|int
name|event
init|=
name|super
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|event
operator|==
name|XMLStreamConstants
operator|.
name|START_ELEMENT
condition|)
block|{
name|attributesIndexed
operator|=
literal|false
expr_stmt|;
specifier|final
name|QName
name|theName
init|=
name|super
operator|.
name|getName
argument_list|()
decl_stmt|;
specifier|final
name|ElementProperty
name|appendProp
init|=
name|inAppendMap
operator|.
name|remove
argument_list|(
name|theName
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|dropped
init|=
name|inDropSet
operator|.
name|contains
argument_list|(
name|theName
argument_list|)
decl_stmt|;
if|if
condition|(
name|appendProp
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|appendProp
operator|.
name|isChild
argument_list|()
condition|)
block|{
comment|// append-post-*
name|pushAheadQName
operator|=
name|appendProp
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// append-pre-*
name|currentQName
operator|=
name|appendProp
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|appendProp
operator|.
name|getText
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// append-*-include
name|pushAheadText
operator|=
name|appendProp
operator|.
name|getText
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// append-*-wrap
name|previousDepth
operator|=
name|getDepth
argument_list|()
expr_stmt|;
name|pushElement
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|dropped
condition|)
block|{
comment|// unwrap the current element (shallow drop)
name|previousDepth
operator|=
name|getDepth
argument_list|()
expr_stmt|;
return|return
name|super
operator|.
name|next
argument_list|()
return|;
block|}
name|QName
name|expected
init|=
name|inElementsMap
operator|.
name|get
argument_list|(
name|theName
argument_list|)
decl_stmt|;
if|if
condition|(
name|expected
operator|==
literal|null
condition|)
block|{
name|expected
operator|=
name|theName
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|isEmpty
argument_list|(
name|expected
argument_list|)
condition|)
block|{
comment|// drop the current element (deep drop)
specifier|final
name|int
name|depth
init|=
name|getDepth
argument_list|()
decl_stmt|;
while|while
condition|(
name|depth
operator|!=
name|getDepth
argument_list|()
operator|||
name|super
operator|.
name|next
argument_list|()
operator|!=
name|XMLStreamConstants
operator|.
name|END_ELEMENT
condition|)
block|{
comment|// get to the matching end element event
block|}
name|popElement
argument_list|()
expr_stmt|;
return|return
name|XMLStreamConstants
operator|.
name|END_ELEMENT
return|;
block|}
if|if
condition|(
name|appendProp
operator|!=
literal|null
operator|&&
name|appendProp
operator|.
name|isChild
argument_list|()
condition|)
block|{
comment|// append-post-*
name|currentQName
operator|=
name|expected
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|appendProp
operator|!=
literal|null
operator|&&
operator|!
name|appendProp
operator|.
name|isChild
argument_list|()
condition|)
block|{
comment|// append-pre-*
name|pushBackQName
operator|=
name|expected
expr_stmt|;
block|}
else|else
block|{
comment|// no append
name|currentQName
operator|=
name|expected
expr_stmt|;
name|pushElement
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|event
operator|==
name|XMLStreamConstants
operator|.
name|END_ELEMENT
condition|)
block|{
name|QName
name|theName
init|=
name|super
operator|.
name|getName
argument_list|()
decl_stmt|;
name|boolean
name|dropped
init|=
name|inDropSet
operator|.
name|contains
argument_list|(
name|theName
argument_list|)
decl_stmt|;
if|if
condition|(
name|dropped
condition|)
block|{
name|super
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
name|popElement
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// reset the element context and content
name|currentQName
operator|=
literal|null
expr_stmt|;
name|currentText
operator|=
literal|null
expr_stmt|;
block|}
return|return
name|event
return|;
block|}
block|}
specifier|private
name|boolean
name|isAtText
parameter_list|()
block|{
return|return
name|pushAheadQName
operator|==
literal|null
operator|&&
operator|(
name|pushAheadText
operator|!=
literal|null
operator|||
name|currentText
operator|!=
literal|null
operator|)
return|;
block|}
specifier|private
name|boolean
name|isAtPushedQName
parameter_list|()
block|{
return|return
name|pushBackQName
operator|!=
literal|null
operator|||
name|pushAheadQName
operator|!=
literal|null
return|;
block|}
specifier|private
name|boolean
name|isAtMarkedDepth
parameter_list|()
block|{
return|return
name|previousDepth
operator|!=
operator|-
literal|1
operator|&&
name|previousDepth
operator|==
name|getDepth
argument_list|()
operator|+
literal|1
return|;
block|}
specifier|private
name|boolean
name|isEmpty
parameter_list|(
name|QName
name|qname
parameter_list|)
block|{
return|return
name|XMLConstants
operator|.
name|NULL_NS_URI
operator|.
name|equals
argument_list|(
name|qname
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
operator|&&
literal|""
operator|.
name|equals
argument_list|(
name|qname
operator|.
name|getLocalPart
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|void
name|popElement
parameter_list|()
block|{
name|currentQName
operator|=
name|elementStack
operator|.
name|empty
argument_list|()
condition|?
literal|null
else|:
name|elementStack
operator|.
name|pop
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|pushElement
parameter_list|()
block|{
name|elementStack
operator|.
name|push
argument_list|(
name|currentQName
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Object
name|getProperty
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
if|if
condition|(
name|INTERN_NAMES
operator|.
name|equals
argument_list|(
name|name
argument_list|)
operator|||
name|INTERN_NS
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
name|Boolean
operator|.
name|FALSE
return|;
block|}
return|return
name|super
operator|.
name|getProperty
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|public
name|String
name|getLocalName
parameter_list|()
block|{
if|if
condition|(
name|currentQName
operator|!=
literal|null
condition|)
block|{
return|return
name|currentQName
operator|.
name|getLocalPart
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|super
operator|.
name|getLocalName
argument_list|()
return|;
block|}
block|}
specifier|private
name|void
name|resetCurrentQName
parameter_list|()
block|{
name|currentQName
operator|=
name|pushBackQName
operator|!=
literal|null
condition|?
name|pushBackQName
else|:
name|pushAheadQName
expr_stmt|;
name|pushBackQName
operator|=
literal|null
expr_stmt|;
name|pushAheadQName
operator|=
literal|null
expr_stmt|;
block|}
specifier|private
name|void
name|resetCurrentText
parameter_list|()
block|{
name|currentText
operator|=
name|pushAheadText
expr_stmt|;
name|pushAheadText
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|NamespaceContext
name|getNamespaceContext
parameter_list|()
block|{
return|return
name|namespaceContext
return|;
block|}
specifier|public
name|String
name|getPrefix
parameter_list|()
block|{
name|QName
name|name
init|=
name|readCurrentElement
argument_list|()
decl_stmt|;
name|String
name|prefix
init|=
name|name
operator|.
name|getPrefix
argument_list|()
decl_stmt|;
if|if
condition|(
name|prefix
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|prefix
operator|=
name|namespaceContext
operator|.
name|findUniquePrefix
argument_list|(
name|name
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|prefix
return|;
block|}
specifier|public
name|String
name|getNamespaceURI
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|String
name|ns
init|=
name|super
operator|.
name|getNamespaceURI
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|String
name|actualNs
init|=
name|nsMap
operator|.
name|get
argument_list|(
name|ns
argument_list|)
decl_stmt|;
if|if
condition|(
name|actualNs
operator|!=
literal|null
condition|)
block|{
return|return
name|actualNs
return|;
block|}
else|else
block|{
return|return
name|ns
return|;
block|}
block|}
specifier|public
name|String
name|getNamespacePrefix
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|String
name|ns
init|=
name|super
operator|.
name|getNamespaceURI
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|String
name|actualNs
init|=
name|nsMap
operator|.
name|get
argument_list|(
name|ns
argument_list|)
decl_stmt|;
if|if
condition|(
name|actualNs
operator|!=
literal|null
condition|)
block|{
return|return
name|namespaceContext
operator|.
name|findUniquePrefix
argument_list|(
name|actualNs
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|namespaceContext
operator|.
name|getPrefix
argument_list|(
name|ns
argument_list|)
return|;
block|}
block|}
specifier|public
name|String
name|getNamespaceURI
parameter_list|()
block|{
if|if
condition|(
name|currentQName
operator|!=
literal|null
condition|)
block|{
return|return
name|currentQName
operator|.
name|getNamespaceURI
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|super
operator|.
name|getNamespaceURI
argument_list|()
return|;
block|}
block|}
specifier|private
name|QName
name|readCurrentElement
parameter_list|()
block|{
if|if
condition|(
name|currentQName
operator|!=
literal|null
condition|)
block|{
return|return
name|currentQName
return|;
block|}
name|String
name|ns
init|=
name|super
operator|.
name|getNamespaceURI
argument_list|()
decl_stmt|;
name|String
name|name
init|=
name|super
operator|.
name|getLocalName
argument_list|()
decl_stmt|;
name|String
name|prefix
init|=
name|super
operator|.
name|getPrefix
argument_list|()
decl_stmt|;
return|return
operator|new
name|QName
argument_list|(
name|ns
argument_list|,
name|name
argument_list|,
name|prefix
operator|==
literal|null
condition|?
literal|""
else|:
name|prefix
argument_list|)
return|;
block|}
specifier|public
name|QName
name|getName
parameter_list|()
block|{
return|return
operator|new
name|QName
argument_list|(
name|getNamespaceURI
argument_list|()
argument_list|,
name|getLocalName
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|int
name|getAttributeCount
parameter_list|()
block|{
if|if
condition|(
name|pushBackQName
operator|!=
literal|null
condition|)
block|{
return|return
literal|0
return|;
block|}
name|checkAttributeIndexRange
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
return|return
name|attributesIndexes
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|String
name|getAttributeLocalName
parameter_list|(
name|int
name|arg0
parameter_list|)
block|{
if|if
condition|(
name|pushBackQName
operator|!=
literal|null
condition|)
block|{
name|throwIndexException
argument_list|(
name|arg0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
name|checkAttributeIndexRange
argument_list|(
name|arg0
argument_list|)
expr_stmt|;
return|return
name|getAttributeName
argument_list|(
name|arg0
argument_list|)
operator|.
name|getLocalPart
argument_list|()
return|;
block|}
specifier|public
name|QName
name|getAttributeName
parameter_list|(
name|int
name|arg0
parameter_list|)
block|{
if|if
condition|(
name|pushBackQName
operator|!=
literal|null
condition|)
block|{
name|throwIndexException
argument_list|(
name|arg0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
name|checkAttributeIndexRange
argument_list|(
name|arg0
argument_list|)
expr_stmt|;
name|QName
name|aname
init|=
name|super
operator|.
name|getAttributeName
argument_list|(
name|attributesIndexes
operator|.
name|get
argument_list|(
name|arg0
argument_list|)
argument_list|)
decl_stmt|;
name|QName
name|expected
init|=
name|inAttributesMap
operator|.
name|get
argument_list|(
name|aname
argument_list|)
decl_stmt|;
return|return
name|expected
operator|==
literal|null
condition|?
name|aname
else|:
name|expected
return|;
block|}
specifier|public
name|String
name|getAttributeNamespace
parameter_list|(
name|int
name|arg0
parameter_list|)
block|{
if|if
condition|(
name|pushBackQName
operator|!=
literal|null
condition|)
block|{
name|throwIndexException
argument_list|(
name|arg0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
name|checkAttributeIndexRange
argument_list|(
name|arg0
argument_list|)
expr_stmt|;
return|return
name|getAttributeName
argument_list|(
name|arg0
argument_list|)
operator|.
name|getNamespaceURI
argument_list|()
return|;
block|}
specifier|public
name|String
name|getAttributePrefix
parameter_list|(
name|int
name|arg0
parameter_list|)
block|{
if|if
condition|(
name|pushBackQName
operator|!=
literal|null
condition|)
block|{
name|throwIndexException
argument_list|(
name|arg0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
name|checkAttributeIndexRange
argument_list|(
name|arg0
argument_list|)
expr_stmt|;
name|QName
name|aname
init|=
name|getAttributeName
argument_list|(
name|arg0
argument_list|)
decl_stmt|;
if|if
condition|(
name|XMLConstants
operator|.
name|NULL_NS_URI
operator|.
name|equals
argument_list|(
name|aname
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|""
return|;
block|}
else|else
block|{
name|String
name|actualNs
init|=
name|nsMap
operator|.
name|get
argument_list|(
name|aname
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|actualNs
operator|!=
literal|null
condition|)
block|{
return|return
name|namespaceContext
operator|.
name|findUniquePrefix
argument_list|(
name|actualNs
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|namespaceContext
operator|.
name|getPrefix
argument_list|(
name|aname
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
return|;
block|}
block|}
block|}
specifier|public
name|String
name|getAttributeType
parameter_list|(
name|int
name|arg0
parameter_list|)
block|{
if|if
condition|(
name|pushBackQName
operator|!=
literal|null
condition|)
block|{
name|throwIndexException
argument_list|(
name|arg0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
name|checkAttributeIndexRange
argument_list|(
name|arg0
argument_list|)
expr_stmt|;
return|return
name|super
operator|.
name|getAttributeType
argument_list|(
name|attributesIndexes
operator|.
name|get
argument_list|(
name|arg0
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|String
name|getAttributeValue
parameter_list|(
name|int
name|arg0
parameter_list|)
block|{
if|if
condition|(
name|pushBackQName
operator|!=
literal|null
condition|)
block|{
name|throwIndexException
argument_list|(
name|arg0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
name|checkAttributeIndexRange
argument_list|(
name|arg0
argument_list|)
expr_stmt|;
return|return
name|super
operator|.
name|getAttributeValue
argument_list|(
name|attributesIndexes
operator|.
name|get
argument_list|(
name|arg0
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|String
name|getAttributeValue
parameter_list|(
name|String
name|namespace
parameter_list|,
name|String
name|localName
parameter_list|)
block|{
if|if
condition|(
name|pushBackQName
operator|!=
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|checkAttributeIndexRange
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|//TODO need reverse lookup
return|return
name|super
operator|.
name|getAttributeValue
argument_list|(
name|namespace
argument_list|,
name|localName
argument_list|)
return|;
block|}
specifier|public
name|String
name|getText
parameter_list|()
block|{
if|if
condition|(
name|currentText
operator|!=
literal|null
condition|)
block|{
return|return
name|currentText
return|;
block|}
return|return
name|super
operator|.
name|getText
argument_list|()
return|;
block|}
specifier|public
name|char
index|[]
name|getTextCharacters
parameter_list|()
block|{
if|if
condition|(
name|currentText
operator|!=
literal|null
condition|)
block|{
return|return
name|currentText
operator|.
name|toCharArray
argument_list|()
return|;
block|}
return|return
name|super
operator|.
name|getTextCharacters
argument_list|()
return|;
block|}
specifier|public
name|int
name|getTextCharacters
parameter_list|(
name|int
name|sourceStart
parameter_list|,
name|char
index|[]
name|target
parameter_list|,
name|int
name|targetStart
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|XMLStreamException
block|{
if|if
condition|(
name|currentText
operator|!=
literal|null
condition|)
block|{
name|int
name|len
init|=
name|currentText
operator|.
name|length
argument_list|()
operator|-
name|sourceStart
decl_stmt|;
if|if
condition|(
name|len
operator|>
name|length
condition|)
block|{
name|len
operator|=
name|length
expr_stmt|;
block|}
name|currentText
operator|.
name|getChars
argument_list|(
name|sourceStart
argument_list|,
name|sourceStart
operator|+
name|len
argument_list|,
name|target
argument_list|,
name|targetStart
argument_list|)
expr_stmt|;
return|return
name|len
return|;
block|}
return|return
name|super
operator|.
name|getTextCharacters
argument_list|(
name|sourceStart
argument_list|,
name|target
argument_list|,
name|targetStart
argument_list|,
name|length
argument_list|)
return|;
block|}
specifier|public
name|int
name|getTextLength
parameter_list|()
block|{
if|if
condition|(
name|currentText
operator|!=
literal|null
condition|)
block|{
return|return
name|currentText
operator|.
name|length
argument_list|()
return|;
block|}
return|return
name|super
operator|.
name|getTextLength
argument_list|()
return|;
block|}
comment|/**      * Checks the index range for the current attributes set.      * If the attributes are not indexed for the current element context, they      * will be indexed.       * @param index      */
specifier|private
name|void
name|checkAttributeIndexRange
parameter_list|(
name|int
name|index
parameter_list|)
block|{
if|if
condition|(
operator|!
name|attributesIndexed
condition|)
block|{
name|attributesIndexes
operator|.
name|clear
argument_list|()
expr_stmt|;
specifier|final
name|int
name|c
init|=
name|super
operator|.
name|getAttributeCount
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|c
condition|;
name|i
operator|++
control|)
block|{
name|QName
name|aname
init|=
name|super
operator|.
name|getAttributeName
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|QName
name|expected
init|=
name|inAttributesMap
operator|.
name|get
argument_list|(
name|aname
argument_list|)
decl_stmt|;
if|if
condition|(
name|expected
operator|==
literal|null
operator|||
operator|!
name|isEmpty
argument_list|(
name|expected
argument_list|)
condition|)
block|{
name|attributesIndexes
operator|.
name|add
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
name|attributesIndexed
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|index
operator|>=
name|attributesIndexes
operator|.
name|size
argument_list|()
condition|)
block|{
name|throwIndexException
argument_list|(
name|index
argument_list|,
name|attributesIndexes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|throwIndexException
parameter_list|(
name|int
name|index
parameter_list|,
name|int
name|size
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid index "
operator|+
name|index
operator|+
literal|"; current element has only "
operator|+
name|size
operator|+
literal|" attributes"
argument_list|)
throw|;
block|}
block|}
end_class

end_unit

