begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|staxutils
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamReader
import|;
end_import

begin_class
specifier|public
class|class
name|PartialXMLStreamReader
extends|extends
name|DepthXMLStreamReader
block|{
specifier|private
name|QName
name|endTag
decl_stmt|;
specifier|private
name|boolean
name|foundEnd
decl_stmt|;
specifier|private
name|int
name|endDepth
decl_stmt|;
specifier|private
name|int
name|currentEvent
decl_stmt|;
specifier|public
name|PartialXMLStreamReader
parameter_list|(
name|XMLStreamReader
name|r
parameter_list|,
name|QName
name|endTag
parameter_list|)
block|{
name|super
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|this
operator|.
name|endTag
operator|=
name|endTag
expr_stmt|;
name|currentEvent
operator|=
name|r
operator|.
name|getEventType
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|next
parameter_list|()
throws|throws
name|XMLStreamException
block|{
if|if
condition|(
operator|!
name|foundEnd
condition|)
block|{
name|currentEvent
operator|=
name|super
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|currentEvent
operator|==
name|START_ELEMENT
operator|&&
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|endTag
argument_list|)
condition|)
block|{
name|foundEnd
operator|=
literal|true
expr_stmt|;
name|endDepth
operator|=
name|getDepth
argument_list|()
expr_stmt|;
return|return
name|START_ELEMENT
return|;
block|}
return|return
name|currentEvent
return|;
block|}
elseif|else
if|if
condition|(
name|endDepth
operator|>
literal|0
condition|)
block|{
name|endDepth
operator|--
expr_stmt|;
name|currentEvent
operator|=
name|END_ELEMENT
expr_stmt|;
block|}
else|else
block|{
name|currentEvent
operator|=
name|END_DOCUMENT
expr_stmt|;
block|}
return|return
name|currentEvent
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getEventType
parameter_list|()
block|{
return|return
name|currentEvent
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|currentEvent
operator|!=
name|END_DOCUMENT
return|;
block|}
block|}
end_class

end_unit

