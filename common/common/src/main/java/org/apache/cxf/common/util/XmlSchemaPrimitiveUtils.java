begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_class
specifier|public
specifier|final
class|class
name|XmlSchemaPrimitiveUtils
block|{
specifier|private
specifier|static
specifier|final
name|String
name|SCHEMA_NS_PREFIX
init|=
literal|"xs"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|,
name|String
argument_list|>
name|XML_SCHEMA_PRIMITIVE_MAP
init|=
operator|new
name|HashMap
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
name|initializeMap
argument_list|()
expr_stmt|;
block|}
specifier|private
name|XmlSchemaPrimitiveUtils
parameter_list|()
block|{     }
specifier|private
specifier|static
name|void
name|initializeMap
parameter_list|()
block|{
name|registerPrimitiveClasses
argument_list|(
literal|"int"
argument_list|,
name|Integer
operator|.
name|class
argument_list|,
name|int
operator|.
name|class
argument_list|)
expr_stmt|;
name|registerPrimitiveClasses
argument_list|(
literal|"byte"
argument_list|,
name|Byte
operator|.
name|class
argument_list|,
name|byte
operator|.
name|class
argument_list|)
expr_stmt|;
name|registerPrimitiveClasses
argument_list|(
literal|"boolean"
argument_list|,
name|Boolean
operator|.
name|class
argument_list|,
name|boolean
operator|.
name|class
argument_list|)
expr_stmt|;
name|registerPrimitiveClasses
argument_list|(
literal|"long"
argument_list|,
name|Long
operator|.
name|class
argument_list|,
name|long
operator|.
name|class
argument_list|)
expr_stmt|;
name|registerPrimitiveClasses
argument_list|(
literal|"float"
argument_list|,
name|Float
operator|.
name|class
argument_list|,
name|float
operator|.
name|class
argument_list|)
expr_stmt|;
name|registerPrimitiveClasses
argument_list|(
literal|"double"
argument_list|,
name|Double
operator|.
name|class
argument_list|,
name|double
operator|.
name|class
argument_list|)
expr_stmt|;
name|registerPrimitiveClasses
argument_list|(
literal|"string"
argument_list|,
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// add more as needed
block|}
specifier|private
specifier|static
name|void
name|registerPrimitiveClasses
parameter_list|(
name|String
name|value
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
modifier|...
name|classes
parameter_list|)
block|{
for|for
control|(
name|Class
argument_list|<
name|?
argument_list|>
name|cls
range|:
name|classes
control|)
block|{
name|XML_SCHEMA_PRIMITIVE_MAP
operator|.
name|put
argument_list|(
name|cls
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|String
name|getSchemaRepresentation
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|type
parameter_list|)
block|{
return|return
name|getSchemaRepresentation
argument_list|(
name|type
argument_list|,
name|SCHEMA_NS_PREFIX
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|getSchemaRepresentation
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|type
parameter_list|,
name|String
name|xsdPrefix
parameter_list|)
block|{
name|String
name|value
init|=
name|XML_SCHEMA_PRIMITIVE_MAP
operator|.
name|get
argument_list|(
name|type
argument_list|)
decl_stmt|;
return|return
name|value
operator|==
literal|null
condition|?
name|value
else|:
name|xsdPrefix
operator|+
literal|":"
operator|+
name|value
return|;
block|}
block|}
end_class

end_unit

