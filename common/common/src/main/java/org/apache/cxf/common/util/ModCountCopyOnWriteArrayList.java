begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CopyOnWriteArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_class
specifier|public
specifier|final
class|class
name|ModCountCopyOnWriteArrayList
parameter_list|<
name|T
parameter_list|>
extends|extends
name|CopyOnWriteArrayList
argument_list|<
name|T
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1783937035760941219L
decl_stmt|;
name|AtomicInteger
name|modCount
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
specifier|public
name|ModCountCopyOnWriteArrayList
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
specifier|public
name|ModCountCopyOnWriteArrayList
parameter_list|(
name|Collection
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|c
parameter_list|)
block|{
name|super
argument_list|(
name|c
argument_list|)
expr_stmt|;
if|if
condition|(
name|c
operator|instanceof
name|ModCountCopyOnWriteArrayList
condition|)
block|{
name|modCount
operator|.
name|set
argument_list|(
operator|(
operator|(
name|ModCountCopyOnWriteArrayList
argument_list|<
name|?
argument_list|>
operator|)
name|c
operator|)
operator|.
name|getModCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|int
name|getModCount
parameter_list|()
block|{
return|return
name|modCount
operator|.
name|get
argument_list|()
return|;
block|}
specifier|public
name|void
name|setModCount
parameter_list|(
name|int
name|i
parameter_list|)
block|{
name|modCount
operator|.
name|set
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|add
parameter_list|(
name|int
name|index
parameter_list|,
name|T
name|element
parameter_list|)
block|{
name|super
operator|.
name|add
argument_list|(
name|index
argument_list|,
name|element
argument_list|)
expr_stmt|;
name|modCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|add
parameter_list|(
name|T
name|element
parameter_list|)
block|{
if|if
condition|(
name|super
operator|.
name|add
argument_list|(
name|element
argument_list|)
condition|)
block|{
name|modCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|addAll
parameter_list|(
name|Collection
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|c
parameter_list|)
block|{
if|if
condition|(
name|super
operator|.
name|addAll
argument_list|(
name|c
argument_list|)
condition|)
block|{
name|modCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|addAll
parameter_list|(
name|int
name|index
parameter_list|,
name|Collection
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|c
parameter_list|)
block|{
if|if
condition|(
name|super
operator|.
name|addAll
argument_list|(
name|index
argument_list|,
name|c
argument_list|)
condition|)
block|{
name|modCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|addAllAbsent
parameter_list|(
name|Collection
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|c
parameter_list|)
block|{
name|int
name|i
init|=
name|super
operator|.
name|addAllAbsent
argument_list|(
name|c
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|modCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
return|return
name|i
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|addIfAbsent
parameter_list|(
name|T
name|element
parameter_list|)
block|{
if|if
condition|(
name|super
operator|.
name|addIfAbsent
argument_list|(
name|element
argument_list|)
condition|)
block|{
name|modCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|super
operator|.
name|clear
argument_list|()
expr_stmt|;
name|modCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|T
name|remove
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|T
name|t
init|=
name|super
operator|.
name|remove
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|t
operator|!=
literal|null
condition|)
block|{
name|modCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
return|return
name|t
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|remove
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|super
operator|.
name|remove
argument_list|(
name|o
argument_list|)
condition|)
block|{
name|modCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|removeAll
parameter_list|(
name|Collection
argument_list|<
name|?
argument_list|>
name|c
parameter_list|)
block|{
if|if
condition|(
name|super
operator|.
name|removeAll
argument_list|(
name|c
argument_list|)
condition|)
block|{
name|modCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|retainAll
parameter_list|(
name|Collection
argument_list|<
name|?
argument_list|>
name|c
parameter_list|)
block|{
if|if
condition|(
name|super
operator|.
name|retainAll
argument_list|(
name|c
argument_list|)
condition|)
block|{
name|modCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|super
operator|.
name|hashCode
argument_list|()
operator|+
name|modCount
operator|.
name|get
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|instanceof
name|ModCountCopyOnWriteArrayList
condition|)
block|{
return|return
name|super
operator|.
name|equals
argument_list|(
name|o
argument_list|)
operator|&&
name|modCount
operator|.
name|get
argument_list|()
operator|==
operator|(
operator|(
name|ModCountCopyOnWriteArrayList
argument_list|<
name|?
argument_list|>
operator|)
name|o
operator|)
operator|.
name|getModCount
argument_list|()
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

