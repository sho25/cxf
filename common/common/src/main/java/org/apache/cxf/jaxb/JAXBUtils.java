begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxb
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|AsyncHandler
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|Holder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|JavaUtils
import|;
end_import

begin_class
specifier|public
specifier|final
class|class
name|JAXBUtils
block|{
specifier|public
enum|enum
name|IdentifierType
block|{
name|CLASS
block|,
name|INTERFACE
block|,
name|GETTER
block|,
name|SETTER
block|,
name|VARIABLE
block|,
name|CONSTANT
block|}
empty_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|JAXB_URI
init|=
literal|"http://java.sun.com/xml/ns/jaxb"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|char
index|[]
name|XML_NAME_PUNCTUATION_CHARS
init|=
operator|new
name|char
index|[]
block|{
comment|/* hyphen                       */
literal|'\u002D'
block|,
comment|/* period                       */
literal|'\u002E'
block|,
comment|/* colon                        */
literal|'\u003A'
block|,
comment|/* dot                          */
literal|'\u00B7'
block|,
comment|/* greek ano teleia             */
literal|'\u0387'
block|,
comment|/* arabic end of ayah           */
literal|'\u06DD'
block|,
comment|/* arabic start of rub el hizb  */
literal|'\u06DE'
block|,
comment|/* underscore                   */
literal|'\u005F'
block|,     }
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|XML_NAME_PUNCTUATION_STRING
init|=
operator|new
name|String
argument_list|(
name|XML_NAME_PUNCTUATION_CHARS
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|BUILTIN_DATATYPES_MAP
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|HOLDER_TYPES_MAP
decl_stmt|;
static|static
block|{
name|BUILTIN_DATATYPES_MAP
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|BUILTIN_DATATYPES_MAP
operator|.
name|put
argument_list|(
literal|"string"
argument_list|,
literal|"java.lang.String"
argument_list|)
expr_stmt|;
name|BUILTIN_DATATYPES_MAP
operator|.
name|put
argument_list|(
literal|"integer"
argument_list|,
literal|"java.math.BigInteger"
argument_list|)
expr_stmt|;
name|BUILTIN_DATATYPES_MAP
operator|.
name|put
argument_list|(
literal|"int"
argument_list|,
literal|"int"
argument_list|)
expr_stmt|;
name|BUILTIN_DATATYPES_MAP
operator|.
name|put
argument_list|(
literal|"long"
argument_list|,
literal|"long"
argument_list|)
expr_stmt|;
name|BUILTIN_DATATYPES_MAP
operator|.
name|put
argument_list|(
literal|"short"
argument_list|,
literal|"short"
argument_list|)
expr_stmt|;
name|BUILTIN_DATATYPES_MAP
operator|.
name|put
argument_list|(
literal|"decimal"
argument_list|,
literal|"java.math.BigDecimal"
argument_list|)
expr_stmt|;
name|BUILTIN_DATATYPES_MAP
operator|.
name|put
argument_list|(
literal|"float"
argument_list|,
literal|"float"
argument_list|)
expr_stmt|;
name|BUILTIN_DATATYPES_MAP
operator|.
name|put
argument_list|(
literal|"double"
argument_list|,
literal|"double"
argument_list|)
expr_stmt|;
name|BUILTIN_DATATYPES_MAP
operator|.
name|put
argument_list|(
literal|"boolean"
argument_list|,
literal|"boolean"
argument_list|)
expr_stmt|;
name|BUILTIN_DATATYPES_MAP
operator|.
name|put
argument_list|(
literal|"byte"
argument_list|,
literal|"byte"
argument_list|)
expr_stmt|;
name|BUILTIN_DATATYPES_MAP
operator|.
name|put
argument_list|(
literal|"QName"
argument_list|,
literal|"javax.xml.namespace.QName"
argument_list|)
expr_stmt|;
name|BUILTIN_DATATYPES_MAP
operator|.
name|put
argument_list|(
literal|"dateTime"
argument_list|,
literal|"javax.xml.datatype.XMLGregorianCalendar"
argument_list|)
expr_stmt|;
name|BUILTIN_DATATYPES_MAP
operator|.
name|put
argument_list|(
literal|"base64Binary"
argument_list|,
literal|"byte[]"
argument_list|)
expr_stmt|;
name|BUILTIN_DATATYPES_MAP
operator|.
name|put
argument_list|(
literal|"hexBinary"
argument_list|,
literal|"byte[]"
argument_list|)
expr_stmt|;
name|BUILTIN_DATATYPES_MAP
operator|.
name|put
argument_list|(
literal|"unsignedInt"
argument_list|,
literal|"long"
argument_list|)
expr_stmt|;
name|BUILTIN_DATATYPES_MAP
operator|.
name|put
argument_list|(
literal|"unsignedShort"
argument_list|,
literal|"short"
argument_list|)
expr_stmt|;
name|BUILTIN_DATATYPES_MAP
operator|.
name|put
argument_list|(
literal|"unsignedByte"
argument_list|,
literal|"byte"
argument_list|)
expr_stmt|;
name|BUILTIN_DATATYPES_MAP
operator|.
name|put
argument_list|(
literal|"time"
argument_list|,
literal|"javax.xml.datatype.XMLGregorianCalendar"
argument_list|)
expr_stmt|;
name|BUILTIN_DATATYPES_MAP
operator|.
name|put
argument_list|(
literal|"date"
argument_list|,
literal|"javax.xml.datatype.XMLGregorianCalendar"
argument_list|)
expr_stmt|;
name|BUILTIN_DATATYPES_MAP
operator|.
name|put
argument_list|(
literal|"gYear"
argument_list|,
literal|"javax.xml.datatype.XMLGregorianCalendar"
argument_list|)
expr_stmt|;
name|BUILTIN_DATATYPES_MAP
operator|.
name|put
argument_list|(
literal|"gYearMonth"
argument_list|,
literal|"javax.xml.datatype.XMLGregorianCalendar"
argument_list|)
expr_stmt|;
name|BUILTIN_DATATYPES_MAP
operator|.
name|put
argument_list|(
literal|"gMonth"
argument_list|,
literal|"javax.xml.datatype.XMLGregorianCalendar"
argument_list|)
expr_stmt|;
name|BUILTIN_DATATYPES_MAP
operator|.
name|put
argument_list|(
literal|"gMonthDay"
argument_list|,
literal|"javax.xml.datatype.XMLGregorianCalendar"
argument_list|)
expr_stmt|;
name|BUILTIN_DATATYPES_MAP
operator|.
name|put
argument_list|(
literal|"gDay"
argument_list|,
literal|"javax.xml.datatype.XMLGregorianCalendar"
argument_list|)
expr_stmt|;
name|BUILTIN_DATATYPES_MAP
operator|.
name|put
argument_list|(
literal|"duration"
argument_list|,
literal|"javax.xml.datatype.Duration"
argument_list|)
expr_stmt|;
name|BUILTIN_DATATYPES_MAP
operator|.
name|put
argument_list|(
literal|"NOTATION"
argument_list|,
literal|"javax.xml.namespace.QName"
argument_list|)
expr_stmt|;
name|BUILTIN_DATATYPES_MAP
operator|.
name|put
argument_list|(
literal|"string"
argument_list|,
literal|"java.lang.String"
argument_list|)
expr_stmt|;
name|HOLDER_TYPES_MAP
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|HOLDER_TYPES_MAP
operator|.
name|put
argument_list|(
literal|"int"
argument_list|,
name|java
operator|.
name|lang
operator|.
name|Integer
operator|.
name|class
argument_list|)
expr_stmt|;
name|HOLDER_TYPES_MAP
operator|.
name|put
argument_list|(
literal|"long"
argument_list|,
name|java
operator|.
name|lang
operator|.
name|Long
operator|.
name|class
argument_list|)
expr_stmt|;
name|HOLDER_TYPES_MAP
operator|.
name|put
argument_list|(
literal|"short"
argument_list|,
name|java
operator|.
name|lang
operator|.
name|Short
operator|.
name|class
argument_list|)
expr_stmt|;
name|HOLDER_TYPES_MAP
operator|.
name|put
argument_list|(
literal|"float"
argument_list|,
name|java
operator|.
name|lang
operator|.
name|Float
operator|.
name|class
argument_list|)
expr_stmt|;
name|HOLDER_TYPES_MAP
operator|.
name|put
argument_list|(
literal|"double"
argument_list|,
name|java
operator|.
name|lang
operator|.
name|Double
operator|.
name|class
argument_list|)
expr_stmt|;
name|HOLDER_TYPES_MAP
operator|.
name|put
argument_list|(
literal|"boolean"
argument_list|,
name|java
operator|.
name|lang
operator|.
name|Boolean
operator|.
name|class
argument_list|)
expr_stmt|;
name|HOLDER_TYPES_MAP
operator|.
name|put
argument_list|(
literal|"byte"
argument_list|,
name|java
operator|.
name|lang
operator|.
name|Byte
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
comment|/**      * prevents instantiation      *      */
specifier|private
name|JAXBUtils
parameter_list|()
block|{     }
specifier|public
specifier|static
name|String
name|builtInTypeToJavaType
parameter_list|(
name|String
name|type
parameter_list|)
block|{
return|return
name|BUILTIN_DATATYPES_MAP
operator|.
name|get
argument_list|(
name|type
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Class
argument_list|<
name|?
argument_list|>
name|holderClass
parameter_list|(
name|String
name|type
parameter_list|)
block|{
return|return
name|HOLDER_TYPES_MAP
operator|.
name|get
argument_list|(
name|type
argument_list|)
return|;
block|}
comment|/**       * Checks if the specified word is a Java keyword (as of 1.5).      *       * @param word the word to check.      * @return true if the word is a keyword.      */
specifier|public
specifier|static
name|boolean
name|isJavaKeyword
parameter_list|(
name|String
name|word
parameter_list|)
block|{
return|return
name|JavaUtils
operator|.
name|isJavaKeyword
argument_list|(
name|word
argument_list|)
return|;
block|}
comment|/**      * Generates a Java package name from a URI according to the      * algorithm outlined in JAXB 2.0.      *       * @param namespaceURI the namespace URI.      * @return the package name.      */
specifier|public
specifier|static
name|String
name|namespaceURIToPackage
parameter_list|(
name|String
name|namespaceURI
parameter_list|)
block|{
try|try
block|{
return|return
name|nameSpaceURIToPackage
argument_list|(
operator|new
name|URI
argument_list|(
name|namespaceURI
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|ex
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
comment|/**      * Generates a Java package name from a URI according to the      * algorithm outlined in JAXB 2.0.      *       * @param namespaceURI the namespace URI.      * @return the package name.      */
specifier|public
specifier|static
name|String
name|nameSpaceURIToPackage
parameter_list|(
name|URI
name|uri
parameter_list|)
block|{
name|StringBuffer
name|packageName
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|String
name|authority
init|=
name|uri
operator|.
name|getAuthority
argument_list|()
decl_stmt|;
if|if
condition|(
name|authority
operator|==
literal|null
operator|&&
literal|"urn"
operator|.
name|equals
argument_list|(
name|uri
operator|.
name|getScheme
argument_list|()
argument_list|)
condition|)
block|{
name|authority
operator|=
name|uri
operator|.
name|getSchemeSpecificPart
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
literal|null
operator|!=
name|authority
operator|&&
operator|!
literal|""
operator|.
name|equals
argument_list|(
name|authority
argument_list|)
condition|)
block|{
if|if
condition|(
literal|"urn"
operator|.
name|equals
argument_list|(
name|uri
operator|.
name|getScheme
argument_list|()
argument_list|)
condition|)
block|{
name|packageName
operator|.
name|append
argument_list|(
name|authority
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|packageName
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|packageName
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
operator|==
literal|'-'
condition|)
block|{
name|packageName
operator|.
name|setCharAt
argument_list|(
name|i
argument_list|,
literal|'.'
argument_list|)
expr_stmt|;
block|}
block|}
name|authority
operator|=
name|packageName
operator|.
name|toString
argument_list|()
expr_stmt|;
name|packageName
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|StringTokenizer
name|st
init|=
operator|new
name|StringTokenizer
argument_list|(
name|authority
argument_list|,
literal|":"
argument_list|)
decl_stmt|;
while|while
condition|(
name|st
operator|.
name|hasMoreTokens
argument_list|()
condition|)
block|{
name|String
name|token
init|=
name|st
operator|.
name|nextToken
argument_list|()
decl_stmt|;
if|if
condition|(
name|packageName
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|packageName
operator|.
name|insert
argument_list|(
literal|0
argument_list|,
literal|"."
argument_list|)
expr_stmt|;
name|packageName
operator|.
name|insert
argument_list|(
literal|0
argument_list|,
name|normalizePackageNamePart
argument_list|(
name|token
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|packageName
operator|.
name|insert
argument_list|(
literal|0
argument_list|,
name|token
argument_list|)
expr_stmt|;
block|}
block|}
name|authority
operator|=
name|packageName
operator|.
name|toString
argument_list|()
expr_stmt|;
name|packageName
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|StringTokenizer
name|st
init|=
operator|new
name|StringTokenizer
argument_list|(
name|authority
argument_list|,
literal|"."
argument_list|)
decl_stmt|;
if|if
condition|(
name|st
operator|.
name|hasMoreTokens
argument_list|()
condition|)
block|{
name|String
name|token
init|=
literal|null
decl_stmt|;
while|while
condition|(
name|st
operator|.
name|hasMoreTokens
argument_list|()
condition|)
block|{
name|token
operator|=
name|st
operator|.
name|nextToken
argument_list|()
expr_stmt|;
if|if
condition|(
name|packageName
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
if|if
condition|(
literal|"www"
operator|.
name|equals
argument_list|(
name|token
argument_list|)
condition|)
block|{
continue|continue;
block|}
block|}
else|else
block|{
name|packageName
operator|.
name|insert
argument_list|(
literal|0
argument_list|,
literal|"."
argument_list|)
expr_stmt|;
block|}
name|packageName
operator|.
name|insert
argument_list|(
literal|0
argument_list|,
name|normalizePackageNamePart
argument_list|(
name|token
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|String
name|path
init|=
name|uri
operator|.
name|getPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|path
operator|==
literal|null
condition|)
block|{
name|path
operator|=
literal|""
expr_stmt|;
block|}
name|int
name|index
init|=
name|path
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|<
literal|0
condition|)
block|{
name|index
operator|=
name|path
operator|.
name|length
argument_list|()
expr_stmt|;
block|}
name|StringTokenizer
name|st
init|=
operator|new
name|StringTokenizer
argument_list|(
name|path
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|index
argument_list|)
argument_list|,
literal|"/"
argument_list|)
decl_stmt|;
while|while
condition|(
name|st
operator|.
name|hasMoreTokens
argument_list|()
condition|)
block|{
name|String
name|token
init|=
name|st
operator|.
name|nextToken
argument_list|()
decl_stmt|;
if|if
condition|(
name|packageName
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|packageName
operator|.
name|append
argument_list|(
literal|'.'
argument_list|)
expr_stmt|;
block|}
name|packageName
operator|.
name|append
argument_list|(
name|normalizePackageNamePart
argument_list|(
name|token
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|packageName
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|boolean
name|isAsync
parameter_list|(
name|Method
name|method
parameter_list|)
block|{
return|return
name|method
operator|.
name|getName
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"Async"
argument_list|)
operator|&&
operator|(
name|method
operator|.
name|getReturnType
argument_list|()
operator|.
name|equals
argument_list|(
name|Response
operator|.
name|class
argument_list|)
operator|||
name|method
operator|.
name|getReturnType
argument_list|()
operator|.
name|equals
argument_list|(
name|Future
operator|.
name|class
argument_list|)
operator|)
return|;
block|}
specifier|public
specifier|static
name|boolean
name|isAsyncPolling
parameter_list|(
name|Method
name|method
parameter_list|)
block|{
return|return
name|method
operator|.
name|getName
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"Async"
argument_list|)
operator|&&
operator|(
name|method
operator|.
name|getReturnType
argument_list|()
operator|.
name|equals
argument_list|(
name|Response
operator|.
name|class
argument_list|)
operator|)
return|;
block|}
specifier|public
specifier|static
name|boolean
name|isAsyncCallback
parameter_list|(
name|Method
name|method
parameter_list|)
block|{
name|Class
index|[]
name|paramTypes
init|=
name|method
operator|.
name|getParameterTypes
argument_list|()
decl_stmt|;
return|return
name|method
operator|.
name|getName
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"Async"
argument_list|)
operator|&&
operator|(
name|method
operator|.
name|getReturnType
argument_list|()
operator|.
name|equals
argument_list|(
name|Future
operator|.
name|class
argument_list|)
operator|&&
name|AsyncHandler
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|paramTypes
index|[
name|paramTypes
operator|.
name|length
operator|-
literal|1
index|]
argument_list|)
operator|)
return|;
block|}
specifier|private
specifier|static
name|String
name|normalizePackageNamePart
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|StringBuffer
name|sname
init|=
operator|new
name|StringBuffer
argument_list|(
name|name
operator|.
name|toLowerCase
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sname
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|sname
operator|.
name|setCharAt
argument_list|(
name|i
argument_list|,
name|Character
operator|.
name|toLowerCase
argument_list|(
name|sname
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sname
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|Character
operator|.
name|isJavaIdentifierPart
argument_list|(
name|sname
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
argument_list|)
condition|)
block|{
name|sname
operator|.
name|setCharAt
argument_list|(
name|i
argument_list|,
literal|'_'
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|isJavaKeyword
argument_list|(
name|sname
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
name|sname
operator|.
name|insert
argument_list|(
literal|0
argument_list|,
literal|'_'
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|Character
operator|.
name|isJavaIdentifierStart
argument_list|(
name|sname
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
argument_list|)
condition|)
block|{
name|sname
operator|.
name|insert
argument_list|(
literal|0
argument_list|,
literal|'_'
argument_list|)
expr_stmt|;
block|}
return|return
name|sname
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      * Converts an XML name to a Java identifier according to the mapping      * algorithm outlines in the JAXB specification      *       * @param name the XML name      * @return the Java identifier      */
specifier|public
specifier|static
name|String
name|nameToIdentifier
parameter_list|(
name|String
name|name
parameter_list|,
name|IdentifierType
name|type
parameter_list|)
block|{
if|if
condition|(
literal|null
operator|==
name|name
operator|||
name|name
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
name|name
return|;
block|}
comment|// algorithm will not change an XML name that is already a legal and
comment|// conventional (!) Java class, method, or constant identifier
name|boolean
name|legalIdentifier
init|=
literal|false
decl_stmt|;
name|StringBuffer
name|buf
init|=
operator|new
name|StringBuffer
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|legalIdentifier
operator|=
name|Character
operator|.
name|isJavaIdentifierStart
argument_list|(
name|buf
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|name
operator|.
name|length
argument_list|()
operator|&&
name|legalIdentifier
condition|;
name|i
operator|++
control|)
block|{
name|legalIdentifier
operator|=
name|legalIdentifier
operator|&&
name|Character
operator|.
name|isJavaIdentifierPart
argument_list|(
name|buf
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|boolean
name|conventionalIdentifier
init|=
name|isConventionalIdentifier
argument_list|(
name|buf
argument_list|,
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|legalIdentifier
operator|&&
name|conventionalIdentifier
condition|)
block|{
if|if
condition|(
name|JAXBUtils
operator|.
name|isJavaKeyword
argument_list|(
name|name
argument_list|)
operator|&&
name|type
operator|==
name|IdentifierType
operator|.
name|VARIABLE
condition|)
block|{
name|name
operator|=
name|normalizePackageNamePart
argument_list|(
name|name
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|name
return|;
block|}
comment|// split into words
name|List
argument_list|<
name|String
argument_list|>
name|words
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|StringTokenizer
name|st
init|=
operator|new
name|StringTokenizer
argument_list|(
name|name
argument_list|,
name|XML_NAME_PUNCTUATION_STRING
argument_list|)
decl_stmt|;
while|while
condition|(
name|st
operator|.
name|hasMoreTokens
argument_list|()
condition|)
block|{
name|words
operator|.
name|add
argument_list|(
name|st
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|words
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|splitWord
argument_list|(
name|words
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
return|return
name|makeConventionalIdentifier
argument_list|(
name|words
argument_list|,
name|type
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|void
name|splitWord
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|words
parameter_list|,
name|int
name|listIndex
parameter_list|)
block|{
name|String
name|word
init|=
name|words
operator|.
name|get
argument_list|(
name|listIndex
argument_list|)
decl_stmt|;
if|if
condition|(
name|word
operator|.
name|length
argument_list|()
operator|<=
literal|1
condition|)
block|{
return|return;
block|}
name|int
name|index
init|=
name|listIndex
operator|+
literal|1
decl_stmt|;
name|StringBuffer
name|sword
init|=
operator|new
name|StringBuffer
argument_list|(
name|word
argument_list|)
decl_stmt|;
name|int
name|first
init|=
literal|0
decl_stmt|;
name|char
name|firstChar
init|=
name|sword
operator|.
name|charAt
argument_list|(
name|first
argument_list|)
decl_stmt|;
if|if
condition|(
name|Character
operator|.
name|isLowerCase
argument_list|(
name|firstChar
argument_list|)
condition|)
block|{
name|sword
operator|.
name|setCharAt
argument_list|(
name|first
argument_list|,
name|Character
operator|.
name|toUpperCase
argument_list|(
name|firstChar
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|int
name|i
init|=
literal|1
decl_stmt|;
while|while
condition|(
name|i
operator|<
name|sword
operator|.
name|length
argument_list|()
condition|)
block|{
if|if
condition|(
name|Character
operator|.
name|isDigit
argument_list|(
name|firstChar
argument_list|)
condition|)
block|{
while|while
condition|(
name|i
operator|<
name|sword
operator|.
name|length
argument_list|()
operator|&&
name|Character
operator|.
name|isDigit
argument_list|(
name|sword
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
argument_list|)
condition|)
block|{
name|i
operator|++
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|isCasedLetter
argument_list|(
name|firstChar
argument_list|)
condition|)
block|{
name|boolean
name|previousIsLower
init|=
name|Character
operator|.
name|isLowerCase
argument_list|(
name|firstChar
argument_list|)
decl_stmt|;
while|while
condition|(
name|i
operator|<
name|sword
operator|.
name|length
argument_list|()
operator|&&
name|isCasedLetter
argument_list|(
name|sword
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
argument_list|)
condition|)
block|{
if|if
condition|(
name|Character
operator|.
name|isUpperCase
argument_list|(
name|sword
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
argument_list|)
operator|&&
name|previousIsLower
condition|)
block|{
break|break;
block|}
name|previousIsLower
operator|=
name|Character
operator|.
name|isLowerCase
argument_list|(
name|sword
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// first must be a mark or an uncased letter
while|while
condition|(
name|i
operator|<
name|sword
operator|.
name|length
argument_list|()
operator|&&
operator|(
name|isMark
argument_list|(
name|sword
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
argument_list|)
operator|||
operator|!
name|isCasedLetter
argument_list|(
name|sword
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
argument_list|)
operator|)
condition|)
block|{
name|i
operator|++
expr_stmt|;
block|}
block|}
comment|// characters from first to i are all either
comment|// * digits
comment|// * upper or lower case letters, with only the first one an upper
comment|// * uncased letters or marks
name|String
name|newWord
init|=
name|sword
operator|.
name|substring
argument_list|(
name|first
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|words
operator|.
name|add
argument_list|(
name|index
argument_list|,
name|newWord
argument_list|)
expr_stmt|;
name|index
operator|++
expr_stmt|;
if|if
condition|(
name|i
operator|>=
name|sword
operator|.
name|length
argument_list|()
condition|)
block|{
break|break;
block|}
else|else
block|{
name|first
operator|=
name|i
expr_stmt|;
name|firstChar
operator|=
name|sword
operator|.
name|charAt
argument_list|(
name|first
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|index
operator|>
operator|(
name|listIndex
operator|+
literal|1
operator|)
condition|)
block|{
name|words
operator|.
name|remove
argument_list|(
name|listIndex
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|boolean
name|isMark
parameter_list|(
name|char
name|c
parameter_list|)
block|{
return|return
name|Character
operator|.
name|isJavaIdentifierPart
argument_list|(
name|c
argument_list|)
operator|&&
operator|!
name|Character
operator|.
name|isLetter
argument_list|(
name|c
argument_list|)
operator|&&
operator|!
name|Character
operator|.
name|isDigit
argument_list|(
name|c
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|boolean
name|isCasedLetter
parameter_list|(
name|char
name|c
parameter_list|)
block|{
return|return
name|Character
operator|.
name|isUpperCase
argument_list|(
name|c
argument_list|)
operator|||
name|Character
operator|.
name|isLowerCase
argument_list|(
name|c
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|boolean
name|isConventionalIdentifier
parameter_list|(
name|StringBuffer
name|buf
parameter_list|,
name|IdentifierType
name|type
parameter_list|)
block|{
if|if
condition|(
literal|null
operator|==
name|buf
operator|||
name|buf
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
name|boolean
name|result
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|IdentifierType
operator|.
name|CONSTANT
operator|==
name|type
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|buf
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|Character
operator|.
name|isLowerCase
argument_list|(
name|buf
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
name|result
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|IdentifierType
operator|.
name|VARIABLE
operator|==
name|type
condition|)
block|{
name|result
operator|=
name|Character
operator|.
name|isLowerCase
argument_list|(
name|buf
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|int
name|pos
init|=
literal|3
decl_stmt|;
if|if
condition|(
name|IdentifierType
operator|.
name|GETTER
operator|==
name|type
operator|&&
operator|!
operator|(
name|buf
operator|.
name|length
argument_list|()
operator|>=
name|pos
operator|&&
literal|"get"
operator|.
name|equals
argument_list|(
name|buf
operator|.
name|subSequence
argument_list|(
literal|0
argument_list|,
literal|3
argument_list|)
argument_list|)
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
name|IdentifierType
operator|.
name|SETTER
operator|==
name|type
operator|&&
operator|!
operator|(
name|buf
operator|.
name|length
argument_list|()
operator|>=
name|pos
operator|&&
literal|"set"
operator|.
name|equals
argument_list|(
name|buf
operator|.
name|subSequence
argument_list|(
literal|0
argument_list|,
literal|3
argument_list|)
argument_list|)
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
else|else
block|{
name|pos
operator|=
literal|0
expr_stmt|;
block|}
name|result
operator|=
name|Character
operator|.
name|isUpperCase
argument_list|(
name|buf
operator|.
name|charAt
argument_list|(
name|pos
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|private
specifier|static
name|String
name|makeConventionalIdentifier
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|words
parameter_list|,
name|IdentifierType
name|type
parameter_list|)
block|{
name|StringBuffer
name|buf
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|boolean
name|firstWord
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|IdentifierType
operator|.
name|GETTER
operator|==
name|type
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|"get"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|IdentifierType
operator|.
name|SETTER
operator|==
name|type
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|"set"
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|w
range|:
name|words
control|)
block|{
name|int
name|l
init|=
name|buf
operator|.
name|length
argument_list|()
decl_stmt|;
if|if
condition|(
name|l
operator|>
literal|0
operator|&&
name|IdentifierType
operator|.
name|CONSTANT
operator|==
name|type
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|'_'
argument_list|)
expr_stmt|;
name|l
operator|++
expr_stmt|;
block|}
name|buf
operator|.
name|append
argument_list|(
name|w
argument_list|)
expr_stmt|;
if|if
condition|(
name|IdentifierType
operator|.
name|CONSTANT
operator|==
name|type
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
name|l
init|;
name|i
operator|<
name|buf
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|Character
operator|.
name|isLowerCase
argument_list|(
name|buf
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
argument_list|)
condition|)
block|{
name|buf
operator|.
name|setCharAt
argument_list|(
name|i
argument_list|,
name|Character
operator|.
name|toUpperCase
argument_list|(
name|buf
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|IdentifierType
operator|.
name|VARIABLE
operator|==
name|type
condition|)
block|{
if|if
condition|(
name|firstWord
operator|&&
name|Character
operator|.
name|isUpperCase
argument_list|(
name|buf
operator|.
name|charAt
argument_list|(
name|l
argument_list|)
argument_list|)
condition|)
block|{
name|buf
operator|.
name|setCharAt
argument_list|(
name|l
argument_list|,
name|Character
operator|.
name|toLowerCase
argument_list|(
name|buf
operator|.
name|charAt
argument_list|(
name|l
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|firstWord
operator|&&
name|Character
operator|.
name|isLowerCase
argument_list|(
name|buf
operator|.
name|charAt
argument_list|(
name|l
argument_list|)
argument_list|)
condition|)
block|{
name|buf
operator|.
name|setCharAt
argument_list|(
name|l
argument_list|,
name|Character
operator|.
name|toUpperCase
argument_list|(
name|buf
operator|.
name|charAt
argument_list|(
name|l
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|firstWord
operator|=
literal|false
expr_stmt|;
block|}
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|Class
argument_list|<
name|?
argument_list|>
name|getValidClass
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|cls
parameter_list|)
block|{
if|if
condition|(
name|cls
operator|.
name|isEnum
argument_list|()
condition|)
block|{
return|return
name|cls
return|;
block|}
if|if
condition|(
name|cls
operator|.
name|isArray
argument_list|()
condition|)
block|{
return|return
name|cls
return|;
block|}
if|if
condition|(
name|cls
operator|==
name|Object
operator|.
name|class
operator|||
name|cls
operator|==
name|String
operator|.
name|class
operator|||
name|cls
operator|==
name|Holder
operator|.
name|class
condition|)
block|{
name|cls
operator|=
literal|null
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cls
operator|.
name|isPrimitive
argument_list|()
operator|||
name|cls
operator|.
name|isAnnotation
argument_list|()
condition|)
block|{
name|cls
operator|=
literal|null
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cls
operator|.
name|isInterface
argument_list|()
condition|)
block|{
return|return
name|cls
return|;
block|}
if|if
condition|(
name|cls
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|cls
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"javax.xml.ws.wsaddressing.W3CEndpointReference"
argument_list|)
condition|)
block|{
return|return
name|cls
return|;
block|}
try|try
block|{
if|if
condition|(
name|cls
operator|.
name|getConstructor
argument_list|(
operator|new
name|Class
index|[
literal|0
index|]
argument_list|)
operator|==
literal|null
condition|)
block|{
name|cls
operator|=
literal|null
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|ex
parameter_list|)
block|{
name|cls
operator|=
literal|null
expr_stmt|;
block|}
block|}
return|return
name|cls
return|;
block|}
block|}
end_class

end_unit

