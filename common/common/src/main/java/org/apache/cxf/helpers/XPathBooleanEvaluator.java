begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|xpath
operator|.
name|XPath
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|xpath
operator|.
name|XPathConstants
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|xpath
operator|.
name|XPathExpression
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|xpath
operator|.
name|XPathExpressionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_comment
comment|/**  * Utility class to make the javax.xml.xpath package pass painful.  */
end_comment

begin_class
specifier|public
class|class
name|XPathBooleanEvaluator
block|{
specifier|private
name|XPathExpression
name|expression
decl_stmt|;
comment|/**      * Construct an evaluator that returns a boolean over a given expression with one namespace prefix.      * @param prefix      * @param uri      * @param expressionString      * @throws XPathExpressionException      */
specifier|public
name|XPathBooleanEvaluator
parameter_list|(
name|String
name|prefix
parameter_list|,
name|String
name|uri
parameter_list|,
name|String
name|expressionString
parameter_list|)
throws|throws
name|XPathExpressionException
block|{
name|MapNamespaceContext
name|namespaceContext
init|=
operator|new
name|MapNamespaceContext
argument_list|()
decl_stmt|;
name|namespaceContext
operator|.
name|addNamespace
argument_list|(
name|prefix
argument_list|,
name|uri
argument_list|)
expr_stmt|;
name|XPath
name|xpath
init|=
name|XPathUtils
operator|.
name|getFactory
argument_list|()
operator|.
name|newXPath
argument_list|()
decl_stmt|;
name|xpath
operator|.
name|setNamespaceContext
argument_list|(
name|namespaceContext
argument_list|)
expr_stmt|;
name|expression
operator|=
name|xpath
operator|.
name|compile
argument_list|(
name|expressionString
argument_list|)
expr_stmt|;
block|}
comment|/**      * Construct an evaluator that returns a boolean over a given expression with a map      * of namespace prefixes.      * @param mappings      * @param expressionString      * @throws XPathExpressionException      */
specifier|public
name|XPathBooleanEvaluator
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|mappings
parameter_list|,
name|String
name|expressionString
parameter_list|)
throws|throws
name|XPathExpressionException
block|{
name|MapNamespaceContext
name|namespaceContext
init|=
operator|new
name|MapNamespaceContext
argument_list|(
name|mappings
argument_list|)
decl_stmt|;
name|XPath
name|xpath
init|=
name|XPathUtils
operator|.
name|getFactory
argument_list|()
operator|.
name|newXPath
argument_list|()
decl_stmt|;
name|xpath
operator|.
name|setNamespaceContext
argument_list|(
name|namespaceContext
argument_list|)
expr_stmt|;
name|expression
operator|=
name|xpath
operator|.
name|compile
argument_list|(
name|expressionString
argument_list|)
expr_stmt|;
block|}
comment|/**      * Evaluate the xpath against a given DOM node.      * @param context      * @return      * @throws XPathExpressionException      */
specifier|public
name|boolean
name|evaluate
parameter_list|(
name|Node
name|context
parameter_list|)
throws|throws
name|XPathExpressionException
block|{
return|return
operator|(
operator|(
name|Boolean
operator|)
name|expression
operator|.
name|evaluate
argument_list|(
name|context
argument_list|,
name|XPathConstants
operator|.
name|BOOLEAN
argument_list|)
operator|)
operator|.
name|booleanValue
argument_list|()
return|;
block|}
block|}
end_class

end_unit

