begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Handler
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|LogRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Appender
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|AppenderSkeleton
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|spi
operator|.
name|LoggingEvent
import|;
end_import

begin_comment
comment|/**  * java.util.logging.Logger implementation delegating to Log4j.  * All methods can be used except:  *   setLevel  *   addHandler / getHandlers  *   setParent / getParent  *   setUseParentHandlers / getUseParentHandlers  *  * @author gnodet  */
end_comment

begin_class
specifier|public
class|class
name|Log4jLogger
extends|extends
name|AbstractDelegatingLogger
block|{
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|Level
argument_list|,
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
argument_list|>
name|TO_LOG4J
init|=
operator|new
name|HashMap
argument_list|<
name|Level
argument_list|,
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
name|TRACE
decl_stmt|;
specifier|private
specifier|final
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
name|log
decl_stmt|;
static|static
block|{
comment|//older versions of log4j don't have TRACE, use debug
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
name|t
init|=
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
operator|.
name|DEBUG
decl_stmt|;
try|try
block|{
name|Field
name|f
init|=
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
operator|.
name|class
operator|.
name|getField
argument_list|(
literal|"TRACE"
argument_list|)
decl_stmt|;
name|t
operator|=
operator|(
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
operator|)
name|f
operator|.
name|get
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
comment|//ignore, assume old version of log4j
block|}
name|TRACE
operator|=
name|t
expr_stmt|;
name|TO_LOG4J
operator|.
name|put
argument_list|(
name|Level
operator|.
name|ALL
argument_list|,
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
operator|.
name|ALL
argument_list|)
expr_stmt|;
name|TO_LOG4J
operator|.
name|put
argument_list|(
name|Level
operator|.
name|SEVERE
argument_list|,
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
operator|.
name|ERROR
argument_list|)
expr_stmt|;
name|TO_LOG4J
operator|.
name|put
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
operator|.
name|WARN
argument_list|)
expr_stmt|;
name|TO_LOG4J
operator|.
name|put
argument_list|(
name|Level
operator|.
name|INFO
argument_list|,
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
operator|.
name|INFO
argument_list|)
expr_stmt|;
name|TO_LOG4J
operator|.
name|put
argument_list|(
name|Level
operator|.
name|CONFIG
argument_list|,
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
operator|.
name|DEBUG
argument_list|)
expr_stmt|;
name|TO_LOG4J
operator|.
name|put
argument_list|(
name|Level
operator|.
name|FINE
argument_list|,
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
operator|.
name|DEBUG
argument_list|)
expr_stmt|;
name|TO_LOG4J
operator|.
name|put
argument_list|(
name|Level
operator|.
name|FINER
argument_list|,
name|TRACE
argument_list|)
expr_stmt|;
name|TO_LOG4J
operator|.
name|put
argument_list|(
name|Level
operator|.
name|FINEST
argument_list|,
name|TRACE
argument_list|)
expr_stmt|;
name|TO_LOG4J
operator|.
name|put
argument_list|(
name|Level
operator|.
name|OFF
argument_list|,
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
operator|.
name|OFF
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Log4jLogger
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|resourceBundleName
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|,
name|resourceBundleName
argument_list|)
expr_stmt|;
name|log
operator|=
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|LogManager
operator|.
name|getLogger
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Level
name|getLevel
parameter_list|()
block|{
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
name|l
init|=
name|log
operator|.
name|getEffectiveLevel
argument_list|()
decl_stmt|;
if|if
condition|(
name|l
operator|!=
literal|null
condition|)
block|{
return|return
name|fromL4J
argument_list|(
name|l
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|void
name|setLevel
parameter_list|(
name|Level
name|newLevel
parameter_list|)
throws|throws
name|SecurityException
block|{
name|log
operator|.
name|setLevel
argument_list|(
name|TO_LOG4J
operator|.
name|get
argument_list|(
name|newLevel
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|synchronized
name|void
name|addHandler
parameter_list|(
name|Handler
name|handler
parameter_list|)
throws|throws
name|SecurityException
block|{
name|log
operator|.
name|addAppender
argument_list|(
operator|new
name|HandlerWrapper
argument_list|(
name|handler
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|synchronized
name|void
name|removeHandler
parameter_list|(
name|Handler
name|handler
parameter_list|)
throws|throws
name|SecurityException
block|{
name|log
operator|.
name|removeAppender
argument_list|(
literal|"HandlerWrapper-"
operator|+
name|handler
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|synchronized
name|Handler
index|[]
name|getHandlers
parameter_list|()
block|{
name|List
argument_list|<
name|Handler
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<
name|Handler
argument_list|>
argument_list|()
decl_stmt|;
name|Enumeration
argument_list|<
name|?
argument_list|>
name|en
init|=
name|log
operator|.
name|getAllAppenders
argument_list|()
decl_stmt|;
while|while
condition|(
name|en
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|Appender
name|ap
init|=
operator|(
name|Appender
operator|)
name|en
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|ap
operator|instanceof
name|HandlerWrapper
condition|)
block|{
name|ret
operator|.
name|add
argument_list|(
operator|(
operator|(
name|HandlerWrapper
operator|)
name|ap
operator|)
operator|.
name|getHandler
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|ret
operator|.
name|toArray
argument_list|(
operator|new
name|Handler
index|[
name|ret
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
specifier|protected
name|void
name|internalLogFormatted
parameter_list|(
name|String
name|msg
parameter_list|,
name|LogRecord
name|record
parameter_list|)
block|{
name|log
operator|.
name|log
argument_list|(
name|AbstractDelegatingLogger
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|TO_LOG4J
operator|.
name|get
argument_list|(
name|record
operator|.
name|getLevel
argument_list|()
argument_list|)
argument_list|,
name|msg
argument_list|,
name|record
operator|.
name|getThrown
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Level
name|fromL4J
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
name|l
parameter_list|)
block|{
name|Level
name|l2
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|l
operator|.
name|toInt
argument_list|()
condition|)
block|{
case|case
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
operator|.
name|ALL_INT
case|:
name|l2
operator|=
name|Level
operator|.
name|ALL
expr_stmt|;
break|break;
case|case
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
operator|.
name|FATAL_INT
case|:
name|l2
operator|=
name|Level
operator|.
name|SEVERE
expr_stmt|;
break|break;
case|case
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
operator|.
name|ERROR_INT
case|:
name|l2
operator|=
name|Level
operator|.
name|SEVERE
expr_stmt|;
break|break;
case|case
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
operator|.
name|WARN_INT
case|:
name|l2
operator|=
name|Level
operator|.
name|WARNING
expr_stmt|;
break|break;
case|case
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
operator|.
name|INFO_INT
case|:
name|l2
operator|=
name|Level
operator|.
name|INFO
expr_stmt|;
break|break;
case|case
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
operator|.
name|DEBUG_INT
case|:
name|l2
operator|=
name|Level
operator|.
name|FINE
expr_stmt|;
break|break;
case|case
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
operator|.
name|OFF_INT
case|:
name|l2
operator|=
name|Level
operator|.
name|OFF
expr_stmt|;
break|break;
default|default:
if|if
condition|(
name|l
operator|.
name|toInt
argument_list|()
operator|==
name|TRACE
operator|.
name|toInt
argument_list|()
condition|)
block|{
name|l2
operator|=
name|Level
operator|.
name|FINEST
expr_stmt|;
block|}
else|else
block|{
name|l2
operator|=
literal|null
expr_stmt|;
block|}
block|}
return|return
name|l2
return|;
block|}
specifier|private
class|class
name|HandlerWrapper
extends|extends
name|AppenderSkeleton
block|{
name|Handler
name|handler
decl_stmt|;
specifier|public
name|HandlerWrapper
parameter_list|(
name|Handler
name|h
parameter_list|)
block|{
name|handler
operator|=
name|h
expr_stmt|;
name|name
operator|=
literal|"HandlerWrapper-"
operator|+
name|h
operator|.
name|hashCode
argument_list|()
expr_stmt|;
block|}
specifier|public
name|Handler
name|getHandler
parameter_list|()
block|{
return|return
name|handler
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|append
parameter_list|(
name|LoggingEvent
name|event
parameter_list|)
block|{
name|LogRecord
name|lr
init|=
operator|new
name|LogRecord
argument_list|(
name|fromL4J
argument_list|(
name|event
operator|.
name|getLevel
argument_list|()
argument_list|)
argument_list|,
name|event
operator|.
name|getMessage
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|lr
operator|.
name|setLoggerName
argument_list|(
name|event
operator|.
name|getLoggerName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|event
operator|.
name|getThrowableInformation
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|lr
operator|.
name|setThrown
argument_list|(
name|event
operator|.
name|getThrowableInformation
argument_list|()
operator|.
name|getThrowable
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|String
name|rbname
init|=
name|getResourceBundleName
argument_list|()
decl_stmt|;
if|if
condition|(
name|rbname
operator|!=
literal|null
condition|)
block|{
name|lr
operator|.
name|setResourceBundleName
argument_list|(
name|rbname
argument_list|)
expr_stmt|;
name|lr
operator|.
name|setResourceBundle
argument_list|(
name|getResourceBundle
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|getFullInfoForLogUtils
argument_list|(
name|lr
argument_list|,
name|event
operator|.
name|fqnOfCategoryClass
argument_list|)
expr_stmt|;
name|handler
operator|.
name|publish
argument_list|(
name|lr
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|close
parameter_list|()
block|{
name|handler
operator|.
name|close
argument_list|()
expr_stmt|;
name|closed
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|boolean
name|requiresLayout
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|Priority
name|getThreshold
parameter_list|()
block|{
return|return
name|TO_LOG4J
operator|.
name|get
argument_list|(
name|handler
operator|.
name|getLevel
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isAsSevereAsThreshold
parameter_list|(
name|Priority
name|priority
parameter_list|)
block|{
name|Priority
name|p
init|=
name|getThreshold
argument_list|()
decl_stmt|;
return|return
operator|(
name|p
operator|==
literal|null
operator|)
operator|||
name|priority
operator|.
name|isGreaterOrEqual
argument_list|(
name|p
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|static
name|void
name|getFullInfoForLogUtils
parameter_list|(
name|LogRecord
name|lr
parameter_list|,
name|String
name|cname
parameter_list|)
block|{
name|StackTraceElement
name|el
index|[]
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getStackTrace
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
name|el
operator|.
name|length
operator|-
literal|2
init|;
name|x
operator|>=
literal|0
condition|;
name|x
operator|--
control|)
block|{
if|if
condition|(
name|LogUtils
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|el
index|[
name|x
index|]
operator|.
name|getClassName
argument_list|()
argument_list|)
operator|||
name|cname
operator|.
name|equals
argument_list|(
name|el
index|[
name|x
index|]
operator|.
name|getClassName
argument_list|()
argument_list|)
condition|)
block|{
name|lr
operator|.
name|setSourceClassName
argument_list|(
name|el
index|[
name|x
operator|+
literal|1
index|]
operator|.
name|getClassName
argument_list|()
argument_list|)
expr_stmt|;
name|lr
operator|.
name|setSourceMethodName
argument_list|(
name|el
index|[
name|x
operator|+
literal|1
index|]
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
block|}
end_class

end_unit

