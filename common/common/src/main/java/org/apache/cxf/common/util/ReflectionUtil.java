begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_class
specifier|public
specifier|final
class|class
name|ReflectionUtil
block|{
specifier|private
name|ReflectionUtil
parameter_list|()
block|{
comment|// intentionally empty
block|}
specifier|public
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|getPackagesFromJar
parameter_list|(
name|File
name|jarFile
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|packageNames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|jarFile
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|getPackageNamesFromDir
argument_list|(
name|jarFile
argument_list|,
name|jarFile
argument_list|,
name|packageNames
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|JarResource
name|resource
init|=
operator|new
name|JarResource
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|item
range|:
name|resource
operator|.
name|getJarContents
argument_list|(
name|jarFile
argument_list|)
control|)
block|{
if|if
condition|(
operator|!
name|item
operator|.
name|endsWith
argument_list|(
literal|".class"
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|String
name|packageName
init|=
name|getPackageName
argument_list|(
name|item
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|packageName
argument_list|)
operator|&&
operator|!
name|packageNames
operator|.
name|contains
argument_list|(
name|packageName
argument_list|)
condition|)
block|{
name|packageNames
operator|.
name|add
argument_list|(
name|packageName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|packageNames
return|;
block|}
specifier|private
specifier|static
name|void
name|getPackageNamesFromDir
parameter_list|(
name|File
name|base
parameter_list|,
name|File
name|dir
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|pkgs
parameter_list|)
block|{
name|boolean
name|foundClass
init|=
literal|false
decl_stmt|;
for|for
control|(
name|File
name|file
range|:
name|dir
operator|.
name|listFiles
argument_list|()
control|)
block|{
if|if
condition|(
name|file
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|getPackageNamesFromDir
argument_list|(
name|base
argument_list|,
name|file
argument_list|,
name|pkgs
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|foundClass
operator|&&
name|file
operator|.
name|getName
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|".class"
argument_list|)
condition|)
block|{
name|foundClass
operator|=
literal|true
expr_stmt|;
name|String
name|pkg
init|=
literal|""
decl_stmt|;
name|file
operator|=
name|dir
expr_stmt|;
while|while
condition|(
operator|!
name|file
operator|.
name|equals
argument_list|(
name|base
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
literal|""
operator|.
name|equals
argument_list|(
name|pkg
argument_list|)
condition|)
block|{
name|pkg
operator|=
literal|"."
operator|+
name|pkg
expr_stmt|;
block|}
name|pkg
operator|=
name|file
operator|.
name|getName
argument_list|()
operator|+
name|pkg
expr_stmt|;
name|file
operator|=
name|file
operator|.
name|getParentFile
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|pkgs
operator|.
name|contains
argument_list|(
name|pkg
argument_list|)
condition|)
block|{
name|pkgs
operator|.
name|add
argument_list|(
name|pkg
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
specifier|static
name|String
name|getPackageName
parameter_list|(
name|String
name|clzName
parameter_list|)
block|{
if|if
condition|(
name|clzName
operator|.
name|indexOf
argument_list|(
literal|"/"
argument_list|)
operator|==
operator|-
literal|1
condition|)
block|{
return|return
literal|null
return|;
block|}
name|String
name|packageName
init|=
name|clzName
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|clzName
operator|.
name|lastIndexOf
argument_list|(
literal|"/"
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|packageName
operator|.
name|replace
argument_list|(
literal|"/"
argument_list|,
literal|"."
argument_list|)
return|;
block|}
block|}
end_class

end_unit

