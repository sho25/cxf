begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|ref
operator|.
name|WeakReference
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Constructor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|GenericArrayType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|ParameterizedType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|TypeVariable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|WildcardType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|objectweb
operator|.
name|asm
operator|.
name|ClassWriter
import|;
end_import

begin_class
specifier|public
class|class
name|ASMHelper
block|{
specifier|protected
specifier|static
specifier|final
name|Map
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|,
name|String
argument_list|>
name|PRIMITIVE_MAP
init|=
operator|new
name|HashMap
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|Map
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|,
name|String
argument_list|>
name|NONPRIMITIVE_MAP
init|=
operator|new
name|HashMap
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|Map
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|,
name|WeakReference
argument_list|<
name|TypeHelperClassLoader
argument_list|>
argument_list|>
name|LOADER_MAP
init|=
operator|new
name|WeakIdentityHashMap
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|,
name|WeakReference
argument_list|<
name|TypeHelperClassLoader
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|protected
specifier|static
name|boolean
name|oldASM
decl_stmt|;
static|static
block|{
name|PRIMITIVE_MAP
operator|.
name|put
argument_list|(
name|Byte
operator|.
name|TYPE
argument_list|,
literal|"B"
argument_list|)
expr_stmt|;
name|PRIMITIVE_MAP
operator|.
name|put
argument_list|(
name|Boolean
operator|.
name|TYPE
argument_list|,
literal|"Z"
argument_list|)
expr_stmt|;
name|PRIMITIVE_MAP
operator|.
name|put
argument_list|(
name|Long
operator|.
name|TYPE
argument_list|,
literal|"J"
argument_list|)
expr_stmt|;
name|PRIMITIVE_MAP
operator|.
name|put
argument_list|(
name|Integer
operator|.
name|TYPE
argument_list|,
literal|"I"
argument_list|)
expr_stmt|;
name|PRIMITIVE_MAP
operator|.
name|put
argument_list|(
name|Short
operator|.
name|TYPE
argument_list|,
literal|"S"
argument_list|)
expr_stmt|;
name|PRIMITIVE_MAP
operator|.
name|put
argument_list|(
name|Character
operator|.
name|TYPE
argument_list|,
literal|"C"
argument_list|)
expr_stmt|;
name|PRIMITIVE_MAP
operator|.
name|put
argument_list|(
name|Float
operator|.
name|TYPE
argument_list|,
literal|"F"
argument_list|)
expr_stmt|;
name|PRIMITIVE_MAP
operator|.
name|put
argument_list|(
name|Double
operator|.
name|TYPE
argument_list|,
literal|"D"
argument_list|)
expr_stmt|;
name|NONPRIMITIVE_MAP
operator|.
name|put
argument_list|(
name|Byte
operator|.
name|TYPE
argument_list|,
name|Byte
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|"\\."
argument_list|,
literal|"/"
argument_list|)
argument_list|)
expr_stmt|;
name|NONPRIMITIVE_MAP
operator|.
name|put
argument_list|(
name|Boolean
operator|.
name|TYPE
argument_list|,
name|Boolean
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|"\\."
argument_list|,
literal|"/"
argument_list|)
argument_list|)
expr_stmt|;
name|NONPRIMITIVE_MAP
operator|.
name|put
argument_list|(
name|Long
operator|.
name|TYPE
argument_list|,
name|Long
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|"\\."
argument_list|,
literal|"/"
argument_list|)
argument_list|)
expr_stmt|;
name|NONPRIMITIVE_MAP
operator|.
name|put
argument_list|(
name|Integer
operator|.
name|TYPE
argument_list|,
name|Integer
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|"\\."
argument_list|,
literal|"/"
argument_list|)
argument_list|)
expr_stmt|;
name|NONPRIMITIVE_MAP
operator|.
name|put
argument_list|(
name|Short
operator|.
name|TYPE
argument_list|,
name|Short
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|"\\."
argument_list|,
literal|"/"
argument_list|)
argument_list|)
expr_stmt|;
name|NONPRIMITIVE_MAP
operator|.
name|put
argument_list|(
name|Character
operator|.
name|TYPE
argument_list|,
name|Character
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|"\\."
argument_list|,
literal|"/"
argument_list|)
argument_list|)
expr_stmt|;
name|NONPRIMITIVE_MAP
operator|.
name|put
argument_list|(
name|Float
operator|.
name|TYPE
argument_list|,
name|Float
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|"\\."
argument_list|,
literal|"/"
argument_list|)
argument_list|)
expr_stmt|;
name|NONPRIMITIVE_MAP
operator|.
name|put
argument_list|(
name|Double
operator|.
name|TYPE
argument_list|,
name|Double
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|"\\."
argument_list|,
literal|"/"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|protected
specifier|static
name|String
name|getMethodSignature
parameter_list|(
name|Method
name|m
parameter_list|)
block|{
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"("
argument_list|)
decl_stmt|;
for|for
control|(
name|Class
argument_list|<
name|?
argument_list|>
name|cl
range|:
name|m
operator|.
name|getParameterTypes
argument_list|()
control|)
block|{
name|buf
operator|.
name|append
argument_list|(
name|getClassCode
argument_list|(
name|cl
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|buf
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|getClassCode
argument_list|(
name|m
operator|.
name|getReturnType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|protected
specifier|static
name|String
name|periodToSlashes
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|char
name|ch
index|[]
init|=
name|s
operator|.
name|toCharArray
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|ch
operator|.
name|length
condition|;
name|x
operator|++
control|)
block|{
if|if
condition|(
name|ch
index|[
name|x
index|]
operator|==
literal|'.'
condition|)
block|{
name|ch
index|[
name|x
index|]
operator|=
literal|'/'
expr_stmt|;
block|}
block|}
return|return
operator|new
name|String
argument_list|(
name|ch
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|getClassCode
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|cl
parameter_list|)
block|{
if|if
condition|(
name|cl
operator|==
name|Void
operator|.
name|TYPE
condition|)
block|{
return|return
literal|"V"
return|;
block|}
if|if
condition|(
name|cl
operator|.
name|isPrimitive
argument_list|()
condition|)
block|{
return|return
name|PRIMITIVE_MAP
operator|.
name|get
argument_list|(
name|cl
argument_list|)
return|;
block|}
if|if
condition|(
name|cl
operator|.
name|isArray
argument_list|()
condition|)
block|{
return|return
literal|"["
operator|+
name|getClassCode
argument_list|(
name|cl
operator|.
name|getComponentType
argument_list|()
argument_list|)
return|;
block|}
return|return
literal|"L"
operator|+
name|periodToSlashes
argument_list|(
name|cl
operator|.
name|getName
argument_list|()
argument_list|)
operator|+
literal|";"
return|;
block|}
specifier|public
specifier|static
name|String
name|getClassCode
parameter_list|(
name|Type
name|type
parameter_list|)
block|{
if|if
condition|(
name|type
operator|instanceof
name|Class
condition|)
block|{
return|return
name|getClassCode
argument_list|(
operator|(
name|Class
operator|)
name|type
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|type
operator|instanceof
name|GenericArrayType
condition|)
block|{
name|GenericArrayType
name|at
init|=
operator|(
name|GenericArrayType
operator|)
name|type
decl_stmt|;
return|return
literal|"["
operator|+
name|getClassCode
argument_list|(
name|at
operator|.
name|getGenericComponentType
argument_list|()
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|type
operator|instanceof
name|TypeVariable
condition|)
block|{
name|TypeVariable
name|tv
init|=
operator|(
name|TypeVariable
operator|)
name|type
decl_stmt|;
name|Type
index|[]
name|bounds
init|=
name|tv
operator|.
name|getBounds
argument_list|()
decl_stmt|;
if|if
condition|(
name|bounds
operator|!=
literal|null
operator|&&
name|bounds
operator|.
name|length
operator|==
literal|1
condition|)
block|{
return|return
name|getClassCode
argument_list|(
name|bounds
index|[
literal|0
index|]
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unable to determine type for: "
operator|+
name|tv
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|type
operator|instanceof
name|ParameterizedType
condition|)
block|{
name|ParameterizedType
name|pt
init|=
operator|(
name|ParameterizedType
operator|)
name|type
decl_stmt|;
name|StringBuilder
name|a
init|=
operator|new
name|StringBuilder
argument_list|(
name|getClassCode
argument_list|(
name|pt
operator|.
name|getRawType
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|a
operator|.
name|setLength
argument_list|(
name|a
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|a
operator|.
name|append
argument_list|(
literal|'<'
argument_list|)
expr_stmt|;
for|for
control|(
name|Type
name|t
range|:
name|pt
operator|.
name|getActualTypeArguments
argument_list|()
control|)
block|{
name|a
operator|.
name|append
argument_list|(
name|getClassCode
argument_list|(
name|t
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|a
operator|.
name|append
argument_list|(
literal|">;"
argument_list|)
expr_stmt|;
return|return
name|a
operator|.
name|toString
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|type
operator|instanceof
name|WildcardType
condition|)
block|{
name|WildcardType
name|wt
init|=
operator|(
name|WildcardType
operator|)
name|type
decl_stmt|;
name|StringBuilder
name|a
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|Type
index|[]
name|lowBounds
init|=
name|wt
operator|.
name|getLowerBounds
argument_list|()
decl_stmt|;
name|Type
index|[]
name|upBounds
init|=
name|wt
operator|.
name|getUpperBounds
argument_list|()
decl_stmt|;
for|for
control|(
name|Type
name|t
range|:
name|upBounds
control|)
block|{
name|a
operator|.
name|append
argument_list|(
literal|"+"
argument_list|)
expr_stmt|;
name|a
operator|.
name|append
argument_list|(
name|getClassCode
argument_list|(
name|t
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Type
name|t
range|:
name|lowBounds
control|)
block|{
name|a
operator|.
name|append
argument_list|(
literal|"-"
argument_list|)
expr_stmt|;
name|a
operator|.
name|append
argument_list|(
name|getClassCode
argument_list|(
name|t
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|a
operator|.
name|toString
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|ClassWriter
name|createClassWriter
parameter_list|()
block|{
name|ClassWriter
name|newCw
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|oldASM
condition|)
block|{
name|Class
argument_list|<
name|ClassWriter
argument_list|>
name|cls
decl_stmt|;
try|try
block|{
name|cls
operator|=
name|ClassWriter
operator|.
name|class
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoClassDefFoundError
name|error
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"No ASM ClassWriterFound"
argument_list|,
name|error
argument_list|)
throw|;
block|}
try|try
block|{
comment|// ASM 1.5.x/2.x
name|Constructor
argument_list|<
name|ClassWriter
argument_list|>
name|cons
init|=
name|cls
operator|.
name|getConstructor
argument_list|(
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[]
block|{
name|Boolean
operator|.
name|TYPE
block|}
block|)
empty_stmt|;
try|try
block|{
comment|// got constructor, now check if it's 1.x which is very
comment|// different from 2.x and 3.x
name|cls
operator|.
name|getMethod
argument_list|(
literal|"newConstInt"
argument_list|,
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[]
block|{
name|Integer
operator|.
name|TYPE
block|}
block|)
empty_stmt|;
comment|// newConstInt was removed in 2.x, if we get this far, we're
comment|// using 1.5.x,
comment|// set to null so we don't attempt to use it.
name|newCw
operator|=
literal|null
expr_stmt|;
name|oldASM
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|newCw
operator|=
name|cons
operator|.
name|newInstance
argument_list|(
operator|new
name|Object
index|[]
block|{
name|Boolean
operator|.
name|TRUE
block|}
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
comment|// ASM 3.x
try|try
block|{
name|Constructor
argument_list|<
name|ClassWriter
argument_list|>
name|cons
init|=
name|cls
operator|.
name|getConstructor
argument_list|(
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[]
block|{
name|Integer
operator|.
name|TYPE
block|}
block|)
empty_stmt|;
name|int
name|i
init|=
name|cls
operator|.
name|getField
argument_list|(
literal|"COMPUTE_MAXS"
argument_list|)
operator|.
name|getInt
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|i
operator||=
name|cls
operator|.
name|getField
argument_list|(
literal|"COMPUTE_FRAMES"
argument_list|)
operator|.
name|getInt
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|newCw
operator|=
name|cons
operator|.
name|newInstance
argument_list|(
operator|new
name|Object
index|[]
block|{
name|Integer
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e1
parameter_list|)
block|{
comment|// ignore
block|}
block|}
end_class

begin_expr_stmt
unit|}         return
name|newCw
expr_stmt|;
end_expr_stmt

begin_function
unit|}               public
name|Class
argument_list|<
name|?
argument_list|>
name|loadClass
parameter_list|(
name|String
name|className
parameter_list|,
name|Class
name|clz
parameter_list|,
name|byte
index|[]
name|bytes
parameter_list|)
block|{
name|TypeHelperClassLoader
name|loader
init|=
name|getTypeHelperClassLoader
argument_list|(
name|clz
argument_list|)
decl_stmt|;
synchronized|synchronized
init|(
name|loader
init|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|cls
init|=
name|loader
operator|.
name|lookupDefinedClass
argument_list|(
name|className
argument_list|)
decl_stmt|;
if|if
condition|(
name|cls
operator|==
literal|null
condition|)
block|{
return|return
name|loader
operator|.
name|defineClass
argument_list|(
name|className
argument_list|,
name|bytes
argument_list|)
return|;
block|}
return|return
name|cls
return|;
block|}
block|}
end_function

begin_function
specifier|public
name|Class
argument_list|<
name|?
argument_list|>
name|findClass
parameter_list|(
name|String
name|className
parameter_list|,
name|Class
name|clz
parameter_list|)
block|{
name|TypeHelperClassLoader
name|loader
init|=
name|getTypeHelperClassLoader
argument_list|(
name|clz
argument_list|)
decl_stmt|;
return|return
name|loader
operator|.
name|lookupDefinedClass
argument_list|(
name|className
argument_list|)
return|;
block|}
end_function

begin_function
specifier|private
specifier|static
specifier|synchronized
name|TypeHelperClassLoader
name|getTypeHelperClassLoader
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|l
parameter_list|)
block|{
name|WeakReference
argument_list|<
name|TypeHelperClassLoader
argument_list|>
name|ref
init|=
name|LOADER_MAP
operator|.
name|get
argument_list|(
name|l
argument_list|)
decl_stmt|;
name|TypeHelperClassLoader
name|ret
decl_stmt|;
if|if
condition|(
name|ref
operator|==
literal|null
operator|||
name|ref
operator|.
name|get
argument_list|()
operator|==
literal|null
condition|)
block|{
name|ret
operator|=
operator|new
name|TypeHelperClassLoader
argument_list|(
name|l
operator|.
name|getClassLoader
argument_list|()
argument_list|)
expr_stmt|;
name|LOADER_MAP
operator|.
name|put
argument_list|(
name|l
argument_list|,
operator|new
name|WeakReference
argument_list|<
name|TypeHelperClassLoader
argument_list|>
argument_list|(
name|ret
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|ref
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
end_function

begin_class
specifier|public
specifier|static
class|class
name|TypeHelperClassLoader
extends|extends
name|ClassLoader
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|defined
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|TypeHelperClassLoader
parameter_list|(
name|ClassLoader
name|parent
parameter_list|)
block|{
name|super
argument_list|(
name|parent
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Class
argument_list|<
name|?
argument_list|>
name|lookupDefinedClass
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|defined
operator|.
name|get
argument_list|(
name|name
operator|.
name|replace
argument_list|(
literal|'/'
argument_list|,
literal|'.'
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|synchronized
name|Class
argument_list|<
name|?
argument_list|>
name|defineClass
parameter_list|(
name|String
name|name
parameter_list|,
name|byte
name|bytes
index|[]
parameter_list|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|ret
init|=
name|defined
operator|.
name|get
argument_list|(
name|name
operator|.
name|replace
argument_list|(
literal|'/'
argument_list|,
literal|'.'
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|ret
operator|!=
literal|null
condition|)
block|{
return|return
name|ret
return|;
block|}
if|if
condition|(
name|name
operator|.
name|endsWith
argument_list|(
literal|"package-info"
argument_list|)
condition|)
block|{
name|Package
name|p
init|=
name|super
operator|.
name|getPackage
argument_list|(
name|name
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|name
operator|.
name|length
argument_list|()
operator|-
literal|13
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|==
literal|null
condition|)
block|{
name|definePackage
argument_list|(
name|name
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|name
operator|.
name|length
argument_list|()
operator|-
literal|13
argument_list|)
operator|.
name|replace
argument_list|(
literal|'/'
argument_list|,
literal|'.'
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
name|ret
operator|=
name|super
operator|.
name|defineClass
argument_list|(
name|name
operator|.
name|replace
argument_list|(
literal|'/'
argument_list|,
literal|'.'
argument_list|)
argument_list|,
name|bytes
argument_list|,
literal|0
argument_list|,
name|bytes
operator|.
name|length
argument_list|)
expr_stmt|;
name|defined
operator|.
name|put
argument_list|(
name|name
operator|.
name|replace
argument_list|(
literal|'/'
argument_list|,
literal|'.'
argument_list|)
argument_list|,
name|ret
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
block|}
end_class

unit|}
end_unit

