begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|commands
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_class
specifier|public
specifier|final
class|class
name|JavaHelper
block|{
specifier|private
name|JavaHelper
parameter_list|()
block|{
comment|//complete
block|}
comment|/** Get the command to launch a JVM.  Find the java command      * relative to the java.home property rather than what is on the      * path.  It is possible that the java version being used it not      * on the path      *      */
specifier|public
specifier|static
name|String
name|getJavaCommand
parameter_list|()
block|{
name|String
name|javaHome
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.home"
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|javaHome
condition|)
block|{
return|return
name|javaHome
operator|+
name|File
operator|.
name|separator
operator|+
literal|"bin"
operator|+
name|File
operator|.
name|separator
operator|+
literal|"java"
operator|+
name|ForkedCommand
operator|.
name|EXE_SUFFIX
return|;
block|}
else|else
block|{
return|return
literal|"java"
operator|+
name|ForkedCommand
operator|.
name|EXE_SUFFIX
return|;
block|}
block|}
block|}
end_class

end_unit

