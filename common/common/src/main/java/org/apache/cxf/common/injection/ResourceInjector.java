begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|injection
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|Annotation
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|PostConstruct
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|PreDestroy
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Resources
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|annotation
operator|.
name|AbstractAnnotationVisitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|annotation
operator|.
name|AnnotationProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|resource
operator|.
name|ResourceManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|resource
operator|.
name|ResourceResolver
import|;
end_import

begin_comment
comment|/**  * injects references specified using @Resource annotation   *   */
end_comment

begin_class
specifier|public
class|class
name|ResourceInjector
extends|extends
name|AbstractAnnotationVisitor
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|ResourceInjector
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|List
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|Annotation
argument_list|>
argument_list|>
name|ANNOTATIONS
init|=
operator|new
name|ArrayList
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|Annotation
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
name|ANNOTATIONS
operator|.
name|add
argument_list|(
name|Resource
operator|.
name|class
argument_list|)
expr_stmt|;
name|ANNOTATIONS
operator|.
name|add
argument_list|(
name|Resources
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|final
name|ResourceManager
name|resourceManager
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|ResourceResolver
argument_list|>
name|resourceResolvers
decl_stmt|;
specifier|public
name|ResourceInjector
parameter_list|(
name|ResourceManager
name|resMgr
parameter_list|)
block|{
name|this
argument_list|(
name|resMgr
argument_list|,
name|resMgr
operator|.
name|getResourceResolvers
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ResourceInjector
parameter_list|(
name|ResourceManager
name|resMgr
parameter_list|,
name|List
argument_list|<
name|ResourceResolver
argument_list|>
name|resolvers
parameter_list|)
block|{
name|super
argument_list|(
name|ANNOTATIONS
argument_list|)
expr_stmt|;
name|resourceManager
operator|=
name|resMgr
expr_stmt|;
name|resourceResolvers
operator|=
name|resolvers
expr_stmt|;
block|}
specifier|private
specifier|static
name|Field
name|getField
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|cls
parameter_list|,
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|cls
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
try|try
block|{
return|return
name|cls
operator|.
name|getDeclaredField
argument_list|(
name|name
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
return|return
name|getField
argument_list|(
name|cls
operator|.
name|getSuperclass
argument_list|()
argument_list|,
name|name
argument_list|)
return|;
block|}
block|}
specifier|public
specifier|static
name|boolean
name|processable
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|cls
parameter_list|,
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|QName
operator|.
name|class
operator|.
name|equals
argument_list|(
name|cls
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|NoJSR250Annotations
name|njsr
init|=
name|cls
operator|.
name|getAnnotation
argument_list|(
name|NoJSR250Annotations
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|njsr
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|s
range|:
name|njsr
operator|.
name|unlessNull
argument_list|()
control|)
block|{
try|try
block|{
name|Field
name|f
init|=
name|getField
argument_list|(
name|cls
argument_list|,
name|s
argument_list|)
decl_stmt|;
name|f
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|f
operator|.
name|get
argument_list|(
name|o
argument_list|)
operator|==
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|void
name|inject
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
name|inject
argument_list|(
name|o
argument_list|,
name|o
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|inject
parameter_list|(
name|Object
name|o
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|claz
parameter_list|)
block|{
if|if
condition|(
name|processable
argument_list|(
name|claz
argument_list|,
name|o
argument_list|)
condition|)
block|{
name|AnnotationProcessor
name|processor
init|=
operator|new
name|AnnotationProcessor
argument_list|(
name|o
argument_list|)
decl_stmt|;
name|processor
operator|.
name|accept
argument_list|(
name|this
argument_list|,
name|claz
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|construct
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
name|setTarget
argument_list|(
name|o
argument_list|)
expr_stmt|;
if|if
condition|(
name|processable
argument_list|(
name|targetClass
argument_list|,
name|o
argument_list|)
condition|)
block|{
name|invokePostConstruct
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|construct
parameter_list|(
name|Object
name|o
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|cls
parameter_list|)
block|{
name|setTarget
argument_list|(
name|o
argument_list|,
name|cls
argument_list|)
expr_stmt|;
if|if
condition|(
name|processable
argument_list|(
name|targetClass
argument_list|,
name|o
argument_list|)
condition|)
block|{
name|invokePostConstruct
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|destroy
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
name|setTarget
argument_list|(
name|o
argument_list|)
expr_stmt|;
if|if
condition|(
name|processable
argument_list|(
name|targetClass
argument_list|,
name|o
argument_list|)
condition|)
block|{
name|invokePreDestroy
argument_list|()
expr_stmt|;
block|}
block|}
comment|// Implementation of org.apache.cxf.common.annotation.AnnotationVisitor
specifier|public
specifier|final
name|void
name|visitClass
parameter_list|(
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|clz
parameter_list|,
specifier|final
name|Annotation
name|annotation
parameter_list|)
block|{
assert|assert
name|annotation
operator|instanceof
name|Resource
operator|||
name|annotation
operator|instanceof
name|Resources
operator|:
name|annotation
assert|;
if|if
condition|(
name|annotation
operator|instanceof
name|Resource
condition|)
block|{
name|injectResourceClassLevel
argument_list|(
name|clz
argument_list|,
operator|(
name|Resource
operator|)
name|annotation
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|annotation
operator|instanceof
name|Resources
condition|)
block|{
name|Resources
name|resources
init|=
operator|(
name|Resources
operator|)
name|annotation
decl_stmt|;
for|for
control|(
name|Resource
name|resource
range|:
name|resources
operator|.
name|value
argument_list|()
control|)
block|{
name|injectResourceClassLevel
argument_list|(
name|clz
argument_list|,
name|resource
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|injectResourceClassLevel
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|clz
parameter_list|,
name|Resource
name|res
parameter_list|)
block|{
if|if
condition|(
name|res
operator|.
name|name
argument_list|()
operator|==
literal|null
operator|||
literal|""
operator|.
name|equals
argument_list|(
name|res
operator|.
name|name
argument_list|()
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|INFO
argument_list|,
literal|"RESOURCE_NAME_NOT_SPECIFIED"
argument_list|,
name|target
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|Object
name|resource
init|=
literal|null
decl_stmt|;
comment|// first find a setter that matches this resource
name|Method
name|setter
init|=
name|findSetterForResource
argument_list|(
name|res
argument_list|)
decl_stmt|;
if|if
condition|(
name|setter
operator|!=
literal|null
condition|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|type
init|=
name|getResourceType
argument_list|(
name|res
argument_list|,
name|setter
argument_list|)
decl_stmt|;
name|resource
operator|=
name|resolveResource
argument_list|(
name|res
operator|.
name|name
argument_list|()
argument_list|,
name|type
argument_list|)
expr_stmt|;
if|if
condition|(
name|resource
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|INFO
argument_list|,
literal|"RESOURCE_RESOLVE_FAILED"
argument_list|)
expr_stmt|;
return|return;
block|}
name|invokeSetter
argument_list|(
name|setter
argument_list|,
name|resource
argument_list|)
expr_stmt|;
return|return;
block|}
name|Field
name|field
init|=
name|findFieldForResource
argument_list|(
name|res
argument_list|)
decl_stmt|;
if|if
condition|(
name|field
operator|!=
literal|null
condition|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|type
init|=
name|getResourceType
argument_list|(
name|res
argument_list|,
name|field
argument_list|)
decl_stmt|;
name|resource
operator|=
name|resolveResource
argument_list|(
name|res
operator|.
name|name
argument_list|()
argument_list|,
name|type
argument_list|)
expr_stmt|;
if|if
condition|(
name|resource
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|INFO
argument_list|,
literal|"RESOURCE_RESOLVE_FAILED"
argument_list|)
expr_stmt|;
return|return;
block|}
name|injectField
argument_list|(
name|field
argument_list|,
name|resource
argument_list|)
expr_stmt|;
return|return;
block|}
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|SEVERE
argument_list|,
literal|"NO_SETTER_OR_FIELD_FOR_RESOURCE"
argument_list|,
name|getTarget
argument_list|()
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|visitField
parameter_list|(
specifier|final
name|Field
name|field
parameter_list|,
specifier|final
name|Annotation
name|annotation
parameter_list|)
block|{
assert|assert
name|annotation
operator|instanceof
name|Resource
operator|:
name|annotation
assert|;
name|Resource
name|res
init|=
operator|(
name|Resource
operator|)
name|annotation
decl_stmt|;
name|String
name|name
init|=
name|getFieldNameForResource
argument_list|(
name|res
argument_list|,
name|field
argument_list|)
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|type
init|=
name|getResourceType
argument_list|(
name|res
argument_list|,
name|field
argument_list|)
decl_stmt|;
name|Object
name|resource
init|=
name|resolveResource
argument_list|(
name|name
argument_list|,
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|resource
operator|==
literal|null
operator|&&
literal|""
operator|.
name|equals
argument_list|(
name|res
operator|.
name|name
argument_list|()
argument_list|)
condition|)
block|{
name|resource
operator|=
name|resolveResource
argument_list|(
literal|null
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|resource
operator|!=
literal|null
condition|)
block|{
name|injectField
argument_list|(
name|field
argument_list|,
name|resource
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|INFO
argument_list|,
literal|"RESOURCE_RESOLVE_FAILED"
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|final
name|void
name|visitMethod
parameter_list|(
specifier|final
name|Method
name|method
parameter_list|,
specifier|final
name|Annotation
name|annotation
parameter_list|)
block|{
assert|assert
name|annotation
operator|instanceof
name|Resource
operator|:
name|annotation
assert|;
name|Resource
name|res
init|=
operator|(
name|Resource
operator|)
name|annotation
decl_stmt|;
name|String
name|resourceName
init|=
name|getResourceName
argument_list|(
name|res
argument_list|,
name|method
argument_list|)
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|clz
init|=
name|getResourceType
argument_list|(
name|res
argument_list|,
name|method
argument_list|)
decl_stmt|;
name|Object
name|resource
init|=
name|resolveResource
argument_list|(
name|resourceName
argument_list|,
name|clz
argument_list|)
decl_stmt|;
if|if
condition|(
name|resource
operator|==
literal|null
operator|&&
literal|""
operator|.
name|equals
argument_list|(
name|res
operator|.
name|name
argument_list|()
argument_list|)
condition|)
block|{
name|resource
operator|=
name|resolveResource
argument_list|(
literal|null
argument_list|,
name|clz
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|resource
operator|!=
literal|null
condition|)
block|{
name|invokeSetter
argument_list|(
name|method
argument_list|,
name|resource
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|FINE
argument_list|,
literal|"RESOURCE_RESOLVE_FAILED"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|resourceName
block|,
name|clz
block|}
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|Field
name|findFieldForResource
parameter_list|(
name|Resource
name|res
parameter_list|)
block|{
assert|assert
name|target
operator|!=
literal|null
assert|;
assert|assert
name|res
operator|.
name|name
argument_list|()
operator|!=
literal|null
assert|;
for|for
control|(
name|Field
name|field
range|:
name|target
operator|.
name|getClass
argument_list|()
operator|.
name|getFields
argument_list|()
control|)
block|{
if|if
condition|(
name|field
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|res
operator|.
name|name
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|field
return|;
block|}
block|}
for|for
control|(
name|Field
name|field
range|:
name|target
operator|.
name|getClass
argument_list|()
operator|.
name|getDeclaredFields
argument_list|()
control|)
block|{
if|if
condition|(
name|field
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|res
operator|.
name|name
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|field
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|Method
name|findSetterForResource
parameter_list|(
name|Resource
name|res
parameter_list|)
block|{
assert|assert
name|target
operator|!=
literal|null
assert|;
name|String
name|setterName
init|=
name|resourceNameToSetter
argument_list|(
name|res
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
name|Method
name|setterMethod
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Method
name|method
range|:
name|getTarget
argument_list|()
operator|.
name|getClass
argument_list|()
operator|.
name|getMethods
argument_list|()
control|)
block|{
if|if
condition|(
name|setterName
operator|.
name|equals
argument_list|(
name|method
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|setterMethod
operator|=
name|method
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|setterMethod
operator|!=
literal|null
operator|&&
name|setterMethod
operator|.
name|getParameterTypes
argument_list|()
operator|.
name|length
operator|!=
literal|1
condition|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
literal|"SETTER_INJECTION_WITH_INCORRECT_TYPE"
argument_list|,
name|setterMethod
argument_list|)
expr_stmt|;
block|}
return|return
name|setterMethod
return|;
block|}
specifier|private
name|String
name|resourceNameToSetter
parameter_list|(
name|String
name|resName
parameter_list|)
block|{
return|return
literal|"set"
operator|+
name|Character
operator|.
name|toUpperCase
argument_list|(
name|resName
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|+
name|resName
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
return|;
block|}
specifier|private
name|void
name|invokeSetter
parameter_list|(
name|Method
name|method
parameter_list|,
name|Object
name|resource
parameter_list|)
block|{
try|try
block|{
name|method
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|method
operator|.
name|getDeclaringClass
argument_list|()
operator|.
name|isAssignableFrom
argument_list|(
name|getTarget
argument_list|()
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
name|method
operator|.
name|invoke
argument_list|(
name|getTarget
argument_list|()
argument_list|,
name|resource
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// deal with the proxy setter method
name|Method
name|targetMethod
init|=
name|getTarget
argument_list|()
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
name|method
operator|.
name|getName
argument_list|()
argument_list|,
name|method
operator|.
name|getParameterTypes
argument_list|()
argument_list|)
decl_stmt|;
name|targetMethod
operator|.
name|invoke
argument_list|(
name|getTarget
argument_list|()
argument_list|,
name|resource
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|SEVERE
argument_list|,
literal|"INJECTION_SETTER_NOT_VISIBLE"
argument_list|,
name|method
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvocationTargetException
name|e
parameter_list|)
block|{
name|LogUtils
operator|.
name|log
argument_list|(
name|LOG
argument_list|,
name|Level
operator|.
name|SEVERE
argument_list|,
literal|"INJECTION_SETTER_RAISED_EXCEPTION"
argument_list|,
name|e
argument_list|,
name|method
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SecurityException
name|e
parameter_list|)
block|{
name|LogUtils
operator|.
name|log
argument_list|(
name|LOG
argument_list|,
name|Level
operator|.
name|SEVERE
argument_list|,
literal|"INJECTION_SETTER_RAISED_EXCEPTION"
argument_list|,
name|e
argument_list|,
name|method
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|SEVERE
argument_list|,
literal|"INJECTION_SETTER_METHOD_NOT_FOUND"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|method
operator|.
name|getName
argument_list|()
block|}
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|String
name|getResourceName
parameter_list|(
name|Resource
name|res
parameter_list|,
name|Method
name|method
parameter_list|)
block|{
assert|assert
name|method
operator|!=
literal|null
assert|;
assert|assert
name|res
operator|!=
literal|null
assert|;
assert|assert
name|method
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"set"
argument_list|)
operator|:
name|method
assert|;
if|if
condition|(
name|res
operator|.
name|name
argument_list|()
operator|==
literal|null
operator|||
literal|""
operator|.
name|equals
argument_list|(
name|res
operator|.
name|name
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|name
init|=
name|method
operator|.
name|getName
argument_list|()
operator|.
name|substring
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|name
operator|=
name|Character
operator|.
name|toLowerCase
argument_list|(
name|name
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|+
name|name
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
return|return
name|method
operator|.
name|getDeclaringClass
argument_list|()
operator|.
name|getCanonicalName
argument_list|()
operator|+
literal|"/"
operator|+
name|name
return|;
block|}
return|return
name|res
operator|.
name|name
argument_list|()
return|;
block|}
specifier|private
name|void
name|injectField
parameter_list|(
name|Field
name|field
parameter_list|,
name|Object
name|resource
parameter_list|)
block|{
assert|assert
name|field
operator|!=
literal|null
assert|;
assert|assert
name|resource
operator|!=
literal|null
assert|;
name|boolean
name|accessible
init|=
name|field
operator|.
name|isAccessible
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
name|field
operator|.
name|getType
argument_list|()
operator|.
name|isAssignableFrom
argument_list|(
name|resource
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
name|field
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|field
operator|.
name|set
argument_list|(
name|getTarget
argument_list|()
argument_list|,
name|resource
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|severe
argument_list|(
literal|"FAILED_TO_INJECT_FIELD"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|field
operator|.
name|setAccessible
argument_list|(
name|accessible
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|invokePostConstruct
parameter_list|()
block|{
name|boolean
name|accessible
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Method
name|method
range|:
name|getPostConstructMethods
argument_list|()
control|)
block|{
name|PostConstruct
name|pc
init|=
name|method
operator|.
name|getAnnotation
argument_list|(
name|PostConstruct
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|pc
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|method
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|method
operator|.
name|invoke
argument_list|(
name|target
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
literal|"INJECTION_COMPLETE_NOT_VISIBLE"
argument_list|,
name|method
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvocationTargetException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
literal|"INJECTION_COMPLETE_THREW_EXCEPTION"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|method
operator|.
name|setAccessible
argument_list|(
name|accessible
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
name|void
name|invokePreDestroy
parameter_list|()
block|{
name|boolean
name|accessible
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Method
name|method
range|:
name|getPreDestroyMethods
argument_list|()
control|)
block|{
name|PreDestroy
name|pd
init|=
name|method
operator|.
name|getAnnotation
argument_list|(
name|PreDestroy
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|pd
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|method
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|method
operator|.
name|invoke
argument_list|(
name|target
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
literal|"PRE_DESTROY_NOT_VISIBLE"
argument_list|,
name|method
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvocationTargetException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
literal|"PRE_DESTROY_THREW_EXCEPTION"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|method
operator|.
name|setAccessible
argument_list|(
name|accessible
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|Collection
argument_list|<
name|Method
argument_list|>
name|getPostConstructMethods
parameter_list|()
block|{
return|return
name|getAnnotatedMethods
argument_list|(
name|PostConstruct
operator|.
name|class
argument_list|)
return|;
block|}
specifier|private
name|Collection
argument_list|<
name|Method
argument_list|>
name|getPreDestroyMethods
parameter_list|()
block|{
return|return
name|getAnnotatedMethods
argument_list|(
name|PreDestroy
operator|.
name|class
argument_list|)
return|;
block|}
specifier|private
name|Collection
argument_list|<
name|Method
argument_list|>
name|getAnnotatedMethods
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|Annotation
argument_list|>
name|acls
parameter_list|)
block|{
name|Collection
argument_list|<
name|Method
argument_list|>
name|methods
init|=
operator|new
name|LinkedList
argument_list|<
name|Method
argument_list|>
argument_list|()
decl_stmt|;
name|addAnnotatedMethods
argument_list|(
name|acls
argument_list|,
name|getTarget
argument_list|()
operator|.
name|getClass
argument_list|()
operator|.
name|getMethods
argument_list|()
argument_list|,
name|methods
argument_list|)
expr_stmt|;
name|addAnnotatedMethods
argument_list|(
name|acls
argument_list|,
name|getTarget
argument_list|()
operator|.
name|getClass
argument_list|()
operator|.
name|getDeclaredMethods
argument_list|()
argument_list|,
name|methods
argument_list|)
expr_stmt|;
if|if
condition|(
name|getTargetClass
argument_list|()
operator|!=
name|getTarget
argument_list|()
operator|.
name|getClass
argument_list|()
condition|)
block|{
name|addAnnotatedMethods
argument_list|(
name|acls
argument_list|,
name|getTargetClass
argument_list|()
operator|.
name|getMethods
argument_list|()
argument_list|,
name|methods
argument_list|)
expr_stmt|;
name|addAnnotatedMethods
argument_list|(
name|acls
argument_list|,
name|getTargetClass
argument_list|()
operator|.
name|getDeclaredMethods
argument_list|()
argument_list|,
name|methods
argument_list|)
expr_stmt|;
block|}
return|return
name|methods
return|;
block|}
specifier|private
name|void
name|addAnnotatedMethods
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|Annotation
argument_list|>
name|acls
parameter_list|,
name|Method
index|[]
name|methods
parameter_list|,
name|Collection
argument_list|<
name|Method
argument_list|>
name|annotatedMethods
parameter_list|)
block|{
for|for
control|(
name|Method
name|method
range|:
name|methods
control|)
block|{
if|if
condition|(
name|method
operator|.
name|getAnnotation
argument_list|(
name|acls
argument_list|)
operator|!=
literal|null
operator|&&
operator|!
name|annotatedMethods
operator|.
name|contains
argument_list|(
name|method
argument_list|)
condition|)
block|{
name|annotatedMethods
operator|.
name|add
argument_list|(
name|method
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * making this protected to keep pmd happy      */
specifier|protected
name|Class
argument_list|<
name|?
argument_list|>
name|getResourceType
parameter_list|(
name|Resource
name|res
parameter_list|,
name|Field
name|field
parameter_list|)
block|{
assert|assert
name|res
operator|!=
literal|null
assert|;
name|Class
argument_list|<
name|?
argument_list|>
name|type
init|=
name|res
operator|.
name|type
argument_list|()
decl_stmt|;
if|if
condition|(
name|res
operator|.
name|type
argument_list|()
operator|==
literal|null
operator|||
name|Object
operator|.
name|class
operator|==
name|res
operator|.
name|type
argument_list|()
condition|)
block|{
name|type
operator|=
name|field
operator|.
name|getType
argument_list|()
expr_stmt|;
block|}
return|return
name|type
return|;
block|}
specifier|private
name|Class
argument_list|<
name|?
argument_list|>
name|getResourceType
parameter_list|(
name|Resource
name|res
parameter_list|,
name|Method
name|method
parameter_list|)
block|{
return|return
name|res
operator|.
name|type
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|Object
operator|.
name|class
operator|.
name|equals
argument_list|(
name|res
operator|.
name|type
argument_list|()
argument_list|)
condition|?
name|res
operator|.
name|type
argument_list|()
else|:
name|method
operator|.
name|getParameterTypes
argument_list|()
index|[
literal|0
index|]
return|;
block|}
specifier|private
name|String
name|getFieldNameForResource
parameter_list|(
name|Resource
name|res
parameter_list|,
name|Field
name|field
parameter_list|)
block|{
assert|assert
name|res
operator|!=
literal|null
assert|;
if|if
condition|(
name|res
operator|.
name|name
argument_list|()
operator|==
literal|null
operator|||
literal|""
operator|.
name|equals
argument_list|(
name|res
operator|.
name|name
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|field
operator|.
name|getDeclaringClass
argument_list|()
operator|.
name|getCanonicalName
argument_list|()
operator|+
literal|"/"
operator|+
name|field
operator|.
name|getName
argument_list|()
return|;
block|}
return|return
name|res
operator|.
name|name
argument_list|()
return|;
block|}
specifier|private
name|Object
name|resolveResource
parameter_list|(
name|String
name|resourceName
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|type
parameter_list|)
block|{
if|if
condition|(
name|resourceManager
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|resourceManager
operator|.
name|resolveResource
argument_list|(
name|resourceName
argument_list|,
name|type
argument_list|,
name|resourceResolvers
argument_list|)
return|;
block|}
block|}
end_class

end_unit

