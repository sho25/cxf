begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLDecoder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_comment
comment|/**  * Utility class for decoding and encoding URLs  *  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|UrlUtils
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|UrlUtils
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|RESERVED_CHARS
init|=
block|{
literal|"+"
block|}
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|ENCODED_CHARS
init|=
block|{
literal|"%2b"
block|}
decl_stmt|;
specifier|private
name|UrlUtils
parameter_list|()
block|{              }
comment|/**      * Decodes using URLDecoder - use when queries or form post values are decoded      * @param value value to decode      * @param enc encoding      * @return      */
specifier|public
specifier|static
name|String
name|urlDecode
parameter_list|(
name|String
name|value
parameter_list|,
name|String
name|enc
parameter_list|)
block|{
try|try
block|{
name|value
operator|=
name|URLDecoder
operator|.
name|decode
argument_list|(
name|value
argument_list|,
name|enc
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warning
argument_list|(
literal|"UTF-8 encoding can not be used to decode "
operator|+
name|value
argument_list|)
expr_stmt|;
block|}
return|return
name|value
return|;
block|}
specifier|public
specifier|static
name|String
name|urlDecode
parameter_list|(
name|String
name|value
parameter_list|)
block|{
return|return
name|urlDecode
argument_list|(
name|value
argument_list|,
literal|"UTF-8"
argument_list|)
return|;
block|}
comment|/**      * URL path segments may contain '+' symbols which should not be decoded into ' '      * This method replaces '+' with %2B and delegates to URLDecoder      * @param value value to decode      * @return      */
specifier|public
specifier|static
name|String
name|pathDecode
parameter_list|(
name|String
name|value
parameter_list|)
block|{
comment|// TODO: we actually need to do a proper URI analysis here according to
comment|// http://tools.ietf.org/html/rfc3986
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|RESERVED_CHARS
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|value
operator|.
name|indexOf
argument_list|(
name|RESERVED_CHARS
index|[
name|i
index|]
argument_list|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|value
operator|=
name|value
operator|.
name|replace
argument_list|(
name|RESERVED_CHARS
index|[
name|i
index|]
argument_list|,
name|ENCODED_CHARS
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|urlDecode
argument_list|(
name|value
argument_list|)
return|;
block|}
block|}
end_class

end_unit

