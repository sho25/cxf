begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|WeakHashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|CastUtils
import|;
end_import

begin_comment
comment|/**  * A Map backed by a limted capacity strong HashMap ("eden") containing  * the youngest entries, overflowing into an unlimted WeakMapHash ("aged")  * containing the older entries.  * Used to avoid caching schemes being frustrated by over-agressive GC.  *   * @param<K> key type  * @param<V> value type  */
end_comment

begin_class
specifier|public
class|class
name|TwoStageMap
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
implements|implements
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|int
name|DEFAULT_EDEN_CAPACITY
init|=
literal|50
decl_stmt|;
specifier|private
specifier|final
name|int
name|edenCapacity
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|eden
decl_stmt|;
specifier|private
name|List
argument_list|<
name|K
argument_list|>
name|edenKeys
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|aged
decl_stmt|;
specifier|public
name|TwoStageMap
parameter_list|()
block|{
name|this
argument_list|(
name|DEFAULT_EDEN_CAPACITY
argument_list|)
expr_stmt|;
block|}
specifier|public
name|TwoStageMap
parameter_list|(
name|int
name|c
parameter_list|)
block|{
name|edenCapacity
operator|=
name|c
expr_stmt|;
name|eden
operator|=
operator|new
name|HashMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|(
name|edenCapacity
argument_list|)
expr_stmt|;
name|edenKeys
operator|=
operator|new
name|ArrayList
argument_list|<
name|K
argument_list|>
argument_list|(
name|edenCapacity
argument_list|)
expr_stmt|;
name|aged
operator|=
operator|new
name|WeakHashMap
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|()
expr_stmt|;
block|}
specifier|public
specifier|synchronized
name|int
name|size
parameter_list|()
block|{
return|return
name|eden
operator|.
name|size
argument_list|()
operator|+
name|aged
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
specifier|synchronized
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
name|eden
operator|.
name|isEmpty
argument_list|()
operator|&&
name|aged
operator|.
name|isEmpty
argument_list|()
return|;
block|}
specifier|public
specifier|synchronized
name|boolean
name|containsKey
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
return|return
name|eden
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
operator|||
name|aged
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
return|;
block|}
specifier|public
specifier|synchronized
name|boolean
name|containsValue
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
return|return
name|eden
operator|.
name|containsValue
argument_list|(
name|value
argument_list|)
operator|||
name|aged
operator|.
name|containsValue
argument_list|(
name|value
argument_list|)
return|;
block|}
specifier|public
specifier|synchronized
name|V
name|get
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
name|V
name|edenValue
init|=
name|eden
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
return|return
name|edenValue
operator|!=
literal|null
condition|?
name|edenValue
else|:
name|aged
operator|.
name|get
argument_list|(
name|key
argument_list|)
return|;
block|}
specifier|public
specifier|synchronized
name|V
name|put
parameter_list|(
name|K
name|key
parameter_list|,
name|V
name|value
parameter_list|)
block|{
if|if
condition|(
name|eden
operator|.
name|size
argument_list|()
operator|>=
name|edenCapacity
condition|)
block|{
name|K
name|victimKey
init|=
name|edenKeys
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|aged
operator|.
name|put
argument_list|(
name|victimKey
argument_list|,
name|eden
operator|.
name|remove
argument_list|(
name|victimKey
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|edenKeys
operator|.
name|add
argument_list|(
name|key
argument_list|)
expr_stmt|;
return|return
name|eden
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
return|;
block|}
specifier|public
specifier|synchronized
name|V
name|remove
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
name|V
name|victim
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|eden
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|edenKeys
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|victim
operator|=
name|eden
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|victim
operator|=
name|aged
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
return|return
name|victim
return|;
block|}
specifier|public
specifier|synchronized
name|void
name|putAll
parameter_list|(
name|Map
argument_list|<
name|?
extends|extends
name|K
argument_list|,
name|?
extends|extends
name|V
argument_list|>
name|t
parameter_list|)
block|{
name|Set
argument_list|<
name|Entry
argument_list|<
name|?
extends|extends
name|K
argument_list|,
name|?
extends|extends
name|V
argument_list|>
argument_list|>
name|entries
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
name|t
operator|.
name|entrySet
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|?
extends|extends
name|K
argument_list|,
name|?
extends|extends
name|V
argument_list|>
name|entry
range|:
name|entries
control|)
block|{
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|synchronized
name|void
name|clear
parameter_list|()
block|{
name|eden
operator|.
name|clear
argument_list|()
expr_stmt|;
name|edenKeys
operator|.
name|clear
argument_list|()
expr_stmt|;
name|aged
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
specifier|public
specifier|synchronized
name|Set
argument_list|<
name|K
argument_list|>
name|keySet
parameter_list|()
block|{
name|Set
argument_list|<
name|K
argument_list|>
name|keys
init|=
name|eden
operator|.
name|keySet
argument_list|()
decl_stmt|;
name|keys
operator|.
name|addAll
argument_list|(
name|aged
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|keys
return|;
block|}
specifier|public
specifier|synchronized
name|Collection
argument_list|<
name|V
argument_list|>
name|values
parameter_list|()
block|{
name|Collection
argument_list|<
name|V
argument_list|>
name|values
init|=
name|eden
operator|.
name|values
argument_list|()
decl_stmt|;
name|values
operator|.
name|addAll
argument_list|(
name|aged
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|values
return|;
block|}
specifier|public
specifier|synchronized
name|Set
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|entrySet
parameter_list|()
block|{
name|Set
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|entries
init|=
name|eden
operator|.
name|entrySet
argument_list|()
decl_stmt|;
name|entries
operator|.
name|addAll
argument_list|(
name|aged
operator|.
name|entrySet
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|entries
return|;
block|}
block|}
end_class

end_unit

