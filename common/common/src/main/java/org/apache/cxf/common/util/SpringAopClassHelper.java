begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|aop
operator|.
name|framework
operator|.
name|Advised
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|aop
operator|.
name|support
operator|.
name|AopUtils
import|;
end_import

begin_comment
comment|/**  *   */
end_comment

begin_class
class|class
name|SpringAopClassHelper
extends|extends
name|ClassHelper
block|{
name|SpringAopClassHelper
parameter_list|()
throws|throws
name|Exception
block|{
name|Class
operator|.
name|forName
argument_list|(
literal|"org.springframework.aop.support.AopUtils"
argument_list|)
expr_stmt|;
name|Class
operator|.
name|forName
argument_list|(
literal|"org.springframework.aop.framework.Advised"
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|Class
name|getRealClassFromClassInternal
parameter_list|(
name|Class
name|cls
parameter_list|)
block|{
if|if
condition|(
name|AopUtils
operator|.
name|isCglibProxyClass
argument_list|(
name|cls
argument_list|)
condition|)
block|{
return|return
name|getRealClassFromClassInternal
argument_list|(
name|cls
operator|.
name|getSuperclass
argument_list|()
argument_list|)
return|;
block|}
return|return
name|cls
return|;
block|}
specifier|protected
name|Class
name|getRealClassInternal
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|AopUtils
operator|.
name|isAopProxy
argument_list|(
name|o
argument_list|)
condition|)
block|{
name|Advised
name|advised
init|=
operator|(
name|Advised
operator|)
name|o
decl_stmt|;
try|try
block|{
name|Object
name|target
init|=
name|advised
operator|.
name|getTargetSource
argument_list|()
operator|.
name|getTarget
argument_list|()
decl_stmt|;
if|if
condition|(
name|target
operator|==
literal|null
condition|)
block|{
name|Class
name|targetClass
init|=
name|AopUtils
operator|.
name|getTargetClass
argument_list|(
name|o
argument_list|)
decl_stmt|;
if|if
condition|(
name|targetClass
operator|!=
literal|null
condition|)
block|{
return|return
name|targetClass
return|;
block|}
block|}
else|else
block|{
return|return
name|getRealClassInternal
argument_list|(
name|target
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|// ignore
block|}
block|}
elseif|else
if|if
condition|(
name|AopUtils
operator|.
name|isCglibProxyClass
argument_list|(
name|o
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getRealClassFromClassInternal
argument_list|(
name|AopUtils
operator|.
name|getTargetClass
argument_list|(
name|o
argument_list|)
argument_list|)
return|;
block|}
return|return
name|o
operator|.
name|getClass
argument_list|()
return|;
block|}
block|}
end_class

end_unit

