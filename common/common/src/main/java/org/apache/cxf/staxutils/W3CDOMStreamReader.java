begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|staxutils
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|NamespaceContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Attr
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|CDATASection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Comment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|EntityReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NamedNodeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|TypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|DOMUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|staxutils
operator|.
name|AbstractDOMStreamReader
operator|.
name|ElementFrame
import|;
end_import

begin_class
specifier|public
class|class
name|W3CDOMStreamReader
extends|extends
name|AbstractDOMStreamReader
block|{
specifier|private
name|Node
name|content
decl_stmt|;
specifier|private
name|Document
name|document
decl_stmt|;
specifier|private
name|W3CNamespaceContext
name|context
decl_stmt|;
comment|/**      * @param element      */
specifier|public
name|W3CDOMStreamReader
parameter_list|(
name|Element
name|element
parameter_list|)
block|{
name|super
argument_list|(
operator|new
name|ElementFrame
argument_list|(
name|element
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|newFrame
argument_list|(
name|getCurrentFrame
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|document
operator|=
name|element
operator|.
name|getOwnerDocument
argument_list|()
expr_stmt|;
block|}
comment|/**      * Get the document associated with this stream.      *       * @return      */
specifier|public
name|Document
name|getDocument
parameter_list|()
block|{
return|return
name|document
return|;
block|}
comment|/**      * Find name spaces declaration in atrributes and move them to separate      * collection.      */
annotation|@
name|Override
specifier|protected
specifier|final
name|void
name|newFrame
parameter_list|(
name|ElementFrame
name|frame
parameter_list|)
block|{
name|Element
name|element
init|=
name|getCurrentElement
argument_list|()
decl_stmt|;
name|frame
operator|.
name|uris
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|frame
operator|.
name|prefixes
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|frame
operator|.
name|attributes
operator|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
expr_stmt|;
if|if
condition|(
name|context
operator|==
literal|null
condition|)
block|{
name|context
operator|=
operator|new
name|W3CNamespaceContext
argument_list|()
expr_stmt|;
block|}
name|context
operator|.
name|setElement
argument_list|(
name|element
argument_list|)
expr_stmt|;
name|NamedNodeMap
name|nodes
init|=
name|element
operator|.
name|getAttributes
argument_list|()
decl_stmt|;
name|String
name|ePrefix
init|=
name|element
operator|.
name|getPrefix
argument_list|()
decl_stmt|;
if|if
condition|(
name|ePrefix
operator|==
literal|null
condition|)
block|{
name|ePrefix
operator|=
literal|""
expr_stmt|;
block|}
if|if
condition|(
name|nodes
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nodes
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Node
name|node
init|=
name|nodes
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|prefix
init|=
name|node
operator|.
name|getPrefix
argument_list|()
decl_stmt|;
name|String
name|localName
init|=
name|node
operator|.
name|getLocalName
argument_list|()
decl_stmt|;
name|String
name|value
init|=
name|node
operator|.
name|getNodeValue
argument_list|()
decl_stmt|;
name|String
name|name
init|=
name|node
operator|.
name|getNodeName
argument_list|()
decl_stmt|;
if|if
condition|(
name|prefix
operator|==
literal|null
condition|)
block|{
name|prefix
operator|=
literal|""
expr_stmt|;
block|}
if|if
condition|(
name|name
operator|!=
literal|null
operator|&&
literal|"xmlns"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|frame
operator|.
name|uris
operator|.
name|add
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|frame
operator|.
name|prefixes
operator|.
name|add
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|prefix
operator|.
name|length
argument_list|()
operator|>
literal|0
operator|&&
literal|"xmlns"
operator|.
name|equals
argument_list|(
name|prefix
argument_list|)
condition|)
block|{
name|frame
operator|.
name|uris
operator|.
name|add
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|frame
operator|.
name|prefixes
operator|.
name|add
argument_list|(
name|localName
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|name
operator|.
name|startsWith
argument_list|(
literal|"xmlns:"
argument_list|)
condition|)
block|{
name|prefix
operator|=
name|name
operator|.
name|substring
argument_list|(
literal|6
argument_list|)
expr_stmt|;
name|frame
operator|.
name|uris
operator|.
name|add
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|frame
operator|.
name|prefixes
operator|.
name|add
argument_list|(
name|prefix
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|frame
operator|.
name|attributes
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|endElement
parameter_list|()
block|{
name|super
operator|.
name|endElement
argument_list|()
expr_stmt|;
block|}
specifier|public
specifier|final
name|Element
name|getCurrentElement
parameter_list|()
block|{
return|return
operator|(
name|Element
operator|)
name|getCurrentFrame
argument_list|()
operator|.
name|element
return|;
block|}
annotation|@
name|Override
specifier|protected
name|ElementFrame
name|getChildFrame
parameter_list|(
name|int
name|currentChild
parameter_list|)
block|{
return|return
operator|new
name|ElementFrame
argument_list|(
name|getCurrentElement
argument_list|()
operator|.
name|getChildNodes
argument_list|()
operator|.
name|item
argument_list|(
name|currentChild
argument_list|)
argument_list|,
name|getCurrentFrame
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|int
name|getChildCount
parameter_list|()
block|{
return|return
name|getCurrentElement
argument_list|()
operator|.
name|getChildNodes
argument_list|()
operator|.
name|getLength
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|protected
name|int
name|moveToChild
parameter_list|(
name|int
name|currentChild
parameter_list|)
block|{
name|this
operator|.
name|content
operator|=
name|getCurrentElement
argument_list|()
operator|.
name|getChildNodes
argument_list|()
operator|.
name|item
argument_list|(
name|currentChild
argument_list|)
expr_stmt|;
if|if
condition|(
name|content
operator|instanceof
name|Text
condition|)
block|{
return|return
name|CHARACTERS
return|;
block|}
elseif|else
if|if
condition|(
name|content
operator|instanceof
name|Element
condition|)
block|{
return|return
name|START_ELEMENT
return|;
block|}
elseif|else
if|if
condition|(
name|content
operator|instanceof
name|CDATASection
condition|)
block|{
return|return
name|CDATA
return|;
block|}
elseif|else
if|if
condition|(
name|content
operator|instanceof
name|Comment
condition|)
block|{
return|return
name|CHARACTERS
return|;
block|}
elseif|else
if|if
condition|(
name|content
operator|instanceof
name|EntityReference
condition|)
block|{
return|return
name|ENTITY_REFERENCE
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getElementText
parameter_list|()
throws|throws
name|XMLStreamException
block|{
name|String
name|result
init|=
name|DOMUtils
operator|.
name|getContent
argument_list|(
name|content
argument_list|)
decl_stmt|;
name|ElementFrame
name|frame
init|=
name|getCurrentFrame
argument_list|()
decl_stmt|;
name|frame
operator|.
name|ended
operator|=
literal|true
expr_stmt|;
name|currentEvent
operator|=
name|END_ELEMENT
expr_stmt|;
name|endElement
argument_list|()
expr_stmt|;
comment|// we should not return null according to the StAx API javadoc
return|return
name|result
operator|!=
literal|null
condition|?
name|result
else|:
literal|""
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getNamespaceURI
parameter_list|(
name|String
name|prefix
parameter_list|)
block|{
name|ElementFrame
name|frame
init|=
name|getCurrentFrame
argument_list|()
decl_stmt|;
while|while
condition|(
literal|null
operator|!=
name|frame
condition|)
block|{
name|int
name|index
init|=
name|frame
operator|.
name|prefixes
operator|.
name|indexOf
argument_list|(
name|prefix
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|!=
operator|-
literal|1
condition|)
block|{
return|return
name|frame
operator|.
name|uris
operator|.
name|get
argument_list|(
name|index
argument_list|)
return|;
block|}
if|if
condition|(
name|frame
operator|.
name|parent
operator|==
literal|null
condition|)
block|{
return|return
operator|(
operator|(
name|Element
operator|)
name|frame
operator|.
name|getElement
argument_list|()
operator|)
operator|.
name|lookupNamespaceURI
argument_list|(
name|prefix
argument_list|)
return|;
block|}
name|frame
operator|=
name|frame
operator|.
name|parent
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|String
name|getAttributeValue
parameter_list|(
name|String
name|ns
parameter_list|,
name|String
name|local
parameter_list|)
block|{
name|Attr
name|at
decl_stmt|;
if|if
condition|(
name|ns
operator|==
literal|null
operator|||
name|ns
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|at
operator|=
name|getCurrentElement
argument_list|()
operator|.
name|getAttributeNode
argument_list|(
name|local
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|at
operator|=
name|getCurrentElement
argument_list|()
operator|.
name|getAttributeNodeNS
argument_list|(
name|ns
argument_list|,
name|local
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|at
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|DOMUtils
operator|.
name|getContent
argument_list|(
name|at
argument_list|)
return|;
block|}
specifier|public
name|int
name|getAttributeCount
parameter_list|()
block|{
return|return
name|getCurrentFrame
argument_list|()
operator|.
name|attributes
operator|.
name|size
argument_list|()
return|;
block|}
name|Attr
name|getAttribute
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
operator|(
name|Attr
operator|)
name|getCurrentFrame
argument_list|()
operator|.
name|attributes
operator|.
name|get
argument_list|(
name|i
argument_list|)
return|;
block|}
specifier|private
name|String
name|getLocalName
parameter_list|(
name|Attr
name|attr
parameter_list|)
block|{
name|String
name|name
init|=
name|attr
operator|.
name|getLocalName
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
name|name
operator|=
name|attr
operator|.
name|getNodeName
argument_list|()
expr_stmt|;
block|}
return|return
name|name
return|;
block|}
specifier|public
name|QName
name|getAttributeName
parameter_list|(
name|int
name|i
parameter_list|)
block|{
name|Attr
name|at
init|=
name|getAttribute
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|prefix
init|=
name|at
operator|.
name|getPrefix
argument_list|()
decl_stmt|;
name|String
name|ln
init|=
name|getLocalName
argument_list|(
name|at
argument_list|)
decl_stmt|;
comment|// at.getNodeName();
name|String
name|ns
init|=
name|at
operator|.
name|getNamespaceURI
argument_list|()
decl_stmt|;
if|if
condition|(
name|prefix
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|QName
argument_list|(
name|ns
argument_list|,
name|ln
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|QName
argument_list|(
name|ns
argument_list|,
name|ln
argument_list|,
name|prefix
argument_list|)
return|;
block|}
block|}
specifier|public
name|String
name|getAttributeNamespace
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|getAttribute
argument_list|(
name|i
argument_list|)
operator|.
name|getNamespaceURI
argument_list|()
return|;
block|}
specifier|public
name|String
name|getAttributeLocalName
parameter_list|(
name|int
name|i
parameter_list|)
block|{
name|Attr
name|attr
init|=
name|getAttribute
argument_list|(
name|i
argument_list|)
decl_stmt|;
return|return
name|getLocalName
argument_list|(
name|attr
argument_list|)
return|;
block|}
specifier|public
name|String
name|getAttributePrefix
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|getAttribute
argument_list|(
name|i
argument_list|)
operator|.
name|getPrefix
argument_list|()
return|;
block|}
specifier|public
name|String
name|getAttributeType
parameter_list|(
name|int
name|i
parameter_list|)
block|{
name|Attr
name|attr
init|=
name|getAttribute
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|attr
operator|.
name|isId
argument_list|()
condition|)
block|{
return|return
literal|"ID"
return|;
block|}
name|TypeInfo
name|schemaType
init|=
name|attr
operator|.
name|getSchemaTypeInfo
argument_list|()
decl_stmt|;
return|return
operator|(
name|schemaType
operator|==
literal|null
operator|)
condition|?
literal|"CDATA"
else|:
name|schemaType
operator|.
name|getTypeName
argument_list|()
operator|==
literal|null
condition|?
literal|"CDATA"
else|:
name|schemaType
operator|.
name|getTypeName
argument_list|()
return|;
block|}
specifier|public
name|String
name|getAttributeValue
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|getAttribute
argument_list|(
name|i
argument_list|)
operator|.
name|getValue
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|isAttributeSpecified
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|getAttribute
argument_list|(
name|i
argument_list|)
operator|.
name|getValue
argument_list|()
operator|!=
literal|null
return|;
block|}
specifier|public
name|int
name|getNamespaceCount
parameter_list|()
block|{
return|return
name|getCurrentFrame
argument_list|()
operator|.
name|prefixes
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|String
name|getNamespacePrefix
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|getCurrentFrame
argument_list|()
operator|.
name|prefixes
operator|.
name|get
argument_list|(
name|i
argument_list|)
return|;
block|}
specifier|public
name|String
name|getNamespaceURI
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|getCurrentFrame
argument_list|()
operator|.
name|uris
operator|.
name|get
argument_list|(
name|i
argument_list|)
return|;
block|}
specifier|public
name|NamespaceContext
name|getNamespaceContext
parameter_list|()
block|{
return|return
name|context
return|;
block|}
specifier|public
name|String
name|getText
parameter_list|()
block|{
return|return
name|DOMUtils
operator|.
name|getRawContent
argument_list|(
name|getCurrentElement
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|char
index|[]
name|getTextCharacters
parameter_list|()
block|{
return|return
name|getText
argument_list|()
operator|.
name|toCharArray
argument_list|()
return|;
block|}
specifier|public
name|int
name|getTextStart
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|getTextLength
parameter_list|()
block|{
return|return
name|getText
argument_list|()
operator|.
name|length
argument_list|()
return|;
block|}
specifier|public
name|String
name|getEncoding
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
specifier|public
name|QName
name|getName
parameter_list|()
block|{
name|Element
name|el
init|=
name|getCurrentElement
argument_list|()
decl_stmt|;
name|String
name|prefix
init|=
name|getPrefix
argument_list|()
decl_stmt|;
name|String
name|ln
init|=
name|getLocalName
argument_list|()
decl_stmt|;
if|if
condition|(
name|prefix
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|QName
argument_list|(
name|el
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
name|ln
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|QName
argument_list|(
name|el
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
name|ln
argument_list|,
name|prefix
argument_list|)
return|;
block|}
block|}
specifier|public
name|String
name|getLocalName
parameter_list|()
block|{
name|String
name|ln
init|=
name|getCurrentElement
argument_list|()
operator|.
name|getLocalName
argument_list|()
decl_stmt|;
if|if
condition|(
name|ln
operator|==
literal|null
condition|)
block|{
name|ln
operator|=
name|getCurrentElement
argument_list|()
operator|.
name|getNodeName
argument_list|()
expr_stmt|;
block|}
return|return
name|ln
return|;
block|}
specifier|public
name|String
name|getNamespaceURI
parameter_list|()
block|{
name|String
name|ln
init|=
name|getCurrentElement
argument_list|()
operator|.
name|getLocalName
argument_list|()
decl_stmt|;
if|if
condition|(
name|ln
operator|==
literal|null
condition|)
block|{
name|ln
operator|=
name|getCurrentElement
argument_list|()
operator|.
name|getNodeName
argument_list|()
expr_stmt|;
if|if
condition|(
name|ln
operator|.
name|indexOf
argument_list|(
literal|":"
argument_list|)
operator|==
operator|-
literal|1
condition|)
block|{
name|ln
operator|=
name|getNamespaceURI
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ln
operator|=
name|getNamespaceURI
argument_list|(
name|ln
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|ln
operator|.
name|indexOf
argument_list|(
literal|":"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|ln
return|;
block|}
return|return
name|getCurrentElement
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
return|;
block|}
specifier|public
name|String
name|getPrefix
parameter_list|()
block|{
name|String
name|prefix
init|=
name|getCurrentElement
argument_list|()
operator|.
name|getPrefix
argument_list|()
decl_stmt|;
if|if
condition|(
name|prefix
operator|==
literal|null
condition|)
block|{
name|prefix
operator|=
literal|""
expr_stmt|;
block|}
return|return
name|prefix
return|;
block|}
specifier|public
name|String
name|getPITarget
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
specifier|public
name|String
name|getPIData
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
end_class

end_unit

