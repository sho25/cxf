begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|configuration
operator|.
name|spring
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|injection
operator|.
name|NoJSR250Annotations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|CastUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|Mergeable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|PropertyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|BeanIsAbstractException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|config
operator|.
name|BeanDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|config
operator|.
name|BeanDefinitionHolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|config
operator|.
name|BeanReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|config
operator|.
name|ConstructorArgumentValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|config
operator|.
name|ConstructorArgumentValues
operator|.
name|ValueHolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|config
operator|.
name|TypedStringValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|ApplicationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|ConfigurableApplicationContext
import|;
end_import

begin_class
annotation|@
name|NoJSR250Annotations
specifier|public
class|class
name|SpringBeanQNameMap
parameter_list|<
name|V
parameter_list|>
extends|extends
name|AbstractSpringBeanMap
argument_list|<
name|QName
argument_list|,
name|V
argument_list|>
block|{
specifier|protected
name|void
name|processBeans
parameter_list|(
name|ApplicationContext
name|beanFactory
parameter_list|)
block|{
if|if
condition|(
name|beanFactory
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|String
index|[]
name|beanNames
init|=
name|beanFactory
operator|.
name|getBeanNamesForType
argument_list|(
name|type
argument_list|)
decl_stmt|;
name|ConfigurableApplicationContext
name|ctxt
init|=
operator|(
name|ConfigurableApplicationContext
operator|)
name|beanFactory
decl_stmt|;
comment|// Take any bean name or alias that has a web service annotation
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|beanNames
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|BeanDefinition
name|def
init|=
name|ctxt
operator|.
name|getBeanFactory
argument_list|()
operator|.
name|getBeanDefinition
argument_list|(
name|beanNames
index|[
name|i
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|beanFactory
operator|.
name|isSingleton
argument_list|(
name|beanNames
index|[
name|i
index|]
argument_list|)
operator|||
name|def
operator|.
name|isAbstract
argument_list|()
condition|)
block|{
continue|continue;
block|}
try|try
block|{
name|Collection
argument_list|<
name|?
argument_list|>
name|ids
init|=
literal|null
decl_stmt|;
name|PropertyValue
name|pv
init|=
name|def
operator|.
name|getPropertyValues
argument_list|()
operator|.
name|getPropertyValue
argument_list|(
name|idsProperty
argument_list|)
decl_stmt|;
if|if
condition|(
name|pv
operator|!=
literal|null
condition|)
block|{
name|Object
name|value
init|=
name|pv
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|value
operator|instanceof
name|Collection
operator|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"The property "
operator|+
name|idsProperty
operator|+
literal|" must be a collection!"
argument_list|)
throw|;
block|}
if|if
condition|(
name|value
operator|instanceof
name|Mergeable
condition|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|Mergeable
operator|)
name|value
operator|)
operator|.
name|isMergeEnabled
argument_list|()
condition|)
block|{
name|ids
operator|=
operator|(
name|Collection
argument_list|<
name|?
argument_list|>
operator|)
name|value
expr_stmt|;
block|}
block|}
else|else
block|{
name|ids
operator|=
operator|(
name|Collection
argument_list|<
name|?
argument_list|>
operator|)
name|value
expr_stmt|;
block|}
block|}
if|if
condition|(
name|ids
operator|==
literal|null
operator|&&
name|staticFieldName
operator|!=
literal|null
condition|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|cls
init|=
name|context
operator|.
name|getType
argument_list|(
name|beanNames
index|[
name|i
index|]
argument_list|)
decl_stmt|;
try|try
block|{
name|Field
name|f
init|=
name|cls
operator|.
name|getDeclaredField
argument_list|(
name|staticFieldName
argument_list|)
decl_stmt|;
name|f
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|QName
argument_list|>
name|sids
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
operator|(
name|Collection
argument_list|<
name|?
argument_list|>
operator|)
name|f
operator|.
name|get
argument_list|(
literal|null
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|sids
operator|!=
literal|null
condition|)
block|{
name|ids
operator|=
operator|new
name|ArrayList
argument_list|<
name|QName
argument_list|>
argument_list|(
name|sids
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|//ignore, fall through
block|}
block|}
comment|// if values are not legal keys (for lazy-init bean definitions id values may be
comment|// BeanDefinitionHolders), load the bean and get its id values instead
comment|// for BeanReference type values, simply resolve reference
comment|//
if|if
condition|(
literal|null
operator|!=
name|ids
condition|)
block|{
name|Collection
argument_list|<
name|Object
argument_list|>
name|checked
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|(
name|ids
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Object
name|id
range|:
name|ids
control|)
block|{
if|if
condition|(
name|id
operator|instanceof
name|QName
condition|)
block|{
name|checked
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|id
operator|instanceof
name|BeanReference
condition|)
block|{
name|BeanReference
name|br
init|=
operator|(
name|BeanReference
operator|)
name|id
decl_stmt|;
name|Object
name|refId
init|=
name|context
operator|.
name|getBean
argument_list|(
name|br
operator|.
name|getBeanName
argument_list|()
argument_list|)
decl_stmt|;
name|checked
operator|.
name|add
argument_list|(
name|refId
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|id
operator|instanceof
name|BeanDefinitionHolder
condition|)
block|{
name|BeanDefinitionHolder
name|bdh
init|=
operator|(
name|BeanDefinitionHolder
operator|)
name|id
decl_stmt|;
if|if
condition|(
name|QName
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|bdh
operator|.
name|getBeanDefinition
argument_list|()
operator|.
name|getBeanClassName
argument_list|()
argument_list|)
condition|)
block|{
try|try
block|{
name|java
operator|.
name|util
operator|.
name|List
argument_list|<
name|ValueHolder
argument_list|>
name|l
init|=
name|bdh
operator|.
name|getBeanDefinition
argument_list|()
operator|.
name|getConstructorArgumentValues
argument_list|()
operator|.
name|getGenericArgumentValues
argument_list|()
decl_stmt|;
name|ConstructorArgumentValues
operator|.
name|ValueHolder
name|v
init|=
operator|(
name|ConstructorArgumentValues
operator|.
name|ValueHolder
operator|)
name|l
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|TypedStringValue
name|nss
init|=
operator|(
name|TypedStringValue
operator|)
name|v
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|v
operator|=
operator|(
name|ConstructorArgumentValues
operator|.
name|ValueHolder
operator|)
name|l
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|TypedStringValue
name|ln
init|=
operator|(
name|TypedStringValue
operator|)
name|v
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|checked
operator|.
name|add
argument_list|(
operator|new
name|QName
argument_list|(
name|nss
operator|.
name|getValue
argument_list|()
argument_list|,
name|ln
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|//ignore
break|break;
block|}
block|}
else|else
block|{
break|break;
block|}
block|}
else|else
block|{
break|break;
block|}
block|}
if|if
condition|(
name|checked
operator|.
name|size
argument_list|()
operator|<
name|ids
operator|.
name|size
argument_list|()
condition|)
block|{
name|ids
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|ids
operator|=
name|checked
expr_stmt|;
block|}
block|}
if|if
condition|(
name|ids
operator|==
literal|null
condition|)
block|{
name|ids
operator|=
name|getIds
argument_list|(
name|ctxt
operator|.
name|getBean
argument_list|(
name|beanNames
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|ids
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
block|}
for|for
control|(
name|Object
name|id
range|:
name|ids
control|)
block|{
name|QName
name|key
init|=
operator|(
name|QName
operator|)
name|id
decl_stmt|;
name|getBeanListForId
argument_list|(
name|key
argument_list|)
operator|.
name|add
argument_list|(
name|beanNames
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|BeanIsAbstractException
name|e
parameter_list|)
block|{
comment|// The bean is abstract, we won't be doing anything with it.
continue|continue;
block|}
block|}
name|processBeans
argument_list|(
name|ctxt
operator|.
name|getParent
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

