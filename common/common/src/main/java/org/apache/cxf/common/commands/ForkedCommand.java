begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|commands
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_class
specifier|public
class|class
name|ForkedCommand
extends|extends
name|Thread
block|{
specifier|public
specifier|static
specifier|final
name|String
name|EXE_SUFFIX
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_TIMEOUT
init|=
literal|0
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|ForkedCommand
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|String
index|[]
name|arguments
decl_stmt|;
specifier|private
name|String
index|[]
name|environment
decl_stmt|;
specifier|private
name|PrintStream
name|outputStream
decl_stmt|;
specifier|private
name|PrintStream
name|errorStream
decl_stmt|;
specifier|private
name|java
operator|.
name|lang
operator|.
name|Process
name|proc
decl_stmt|;
specifier|private
name|boolean
name|completed
decl_stmt|;
specifier|private
name|boolean
name|killed
decl_stmt|;
specifier|private
name|boolean
name|joinErrOut
init|=
literal|true
decl_stmt|;
static|static
block|{
if|if
condition|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"os.name"
argument_list|)
operator|.
name|startsWith
argument_list|(
literal|"Windows"
argument_list|)
condition|)
block|{
name|EXE_SUFFIX
operator|=
literal|".exe"
expr_stmt|;
block|}
else|else
block|{
name|EXE_SUFFIX
operator|=
literal|""
expr_stmt|;
block|}
block|}
specifier|public
name|ForkedCommand
parameter_list|()
block|{     }
specifier|public
name|ForkedCommand
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|arguments
operator|=
name|args
expr_stmt|;
block|}
specifier|protected
name|void
name|setArgs
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|arguments
operator|=
name|args
expr_stmt|;
block|}
specifier|public
name|void
name|setEnvironment
parameter_list|(
name|String
index|[]
name|env
parameter_list|)
block|{
name|environment
operator|=
name|env
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
if|if
condition|(
literal|null
operator|==
name|arguments
condition|)
block|{
return|return
literal|null
return|;
block|}
name|StringBuffer
name|buf
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|arguments
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
block|}
name|boolean
name|quotesNeeded
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|arguments
index|[
name|i
index|]
operator|!=
literal|null
condition|)
block|{
name|StringTokenizer
name|st
init|=
operator|new
name|StringTokenizer
argument_list|(
name|arguments
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|quotesNeeded
operator|=
name|st
operator|.
name|countTokens
argument_list|()
operator|>
literal|1
expr_stmt|;
block|}
if|if
condition|(
name|quotesNeeded
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|"\""
argument_list|)
expr_stmt|;
block|}
name|buf
operator|.
name|append
argument_list|(
name|arguments
index|[
name|i
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|quotesNeeded
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|"\""
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|buf
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|?
name|buf
operator|.
name|toString
argument_list|()
else|:
literal|""
return|;
block|}
comment|/**      * Determines if the threads collecting the forked process' stdout/stderr      * should be joined.      *       * @param flag boolean indicating if threads should be joined      */
specifier|public
name|void
name|joinErrOut
parameter_list|(
name|boolean
name|flag
parameter_list|)
block|{
name|this
operator|.
name|joinErrOut
operator|=
name|flag
expr_stmt|;
block|}
specifier|public
name|int
name|execute
parameter_list|()
block|{
return|return
name|execute
argument_list|(
name|DEFAULT_TIMEOUT
argument_list|)
return|;
block|}
comment|/**      * Executes the process. If the process has not completed after the      * specified amount of seconds, it is killed.      *       * @param timeout the timeout in seconds      * @throws ForkedCommandException if process execution fails for some reason      *             or if the timeout has expired and the process was killed      */
specifier|public
name|int
name|execute
parameter_list|(
name|int
name|timeout
parameter_list|)
block|{
if|if
condition|(
literal|null
operator|==
name|arguments
operator|||
name|arguments
operator|.
name|length
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|ForkedCommandException
argument_list|(
operator|new
name|Message
argument_list|(
literal|"NO_ARGUMENTS_EXC"
argument_list|,
name|LOG
argument_list|)
argument_list|)
throw|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isLoggable
argument_list|(
name|Level
operator|.
name|FINE
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|fine
argument_list|(
literal|"Executing command: "
operator|+
name|this
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|Runtime
name|rt
init|=
name|Runtime
operator|.
name|getRuntime
argument_list|()
decl_stmt|;
if|if
condition|(
name|environment
operator|==
literal|null
condition|)
block|{
name|proc
operator|=
name|rt
operator|.
name|exec
argument_list|(
name|arguments
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|StringBuffer
name|msg
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isLoggable
argument_list|(
name|Level
operator|.
name|FINE
argument_list|)
condition|)
block|{
name|msg
operator|=
operator|new
name|StringBuffer
argument_list|()
expr_stmt|;
name|msg
operator|.
name|append
argument_list|(
literal|"Process environment: "
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|environment
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|msg
operator|.
name|append
argument_list|(
name|environment
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|msg
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|fine
argument_list|(
name|msg
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|proc
operator|=
name|rt
operator|.
name|exec
argument_list|(
name|arguments
argument_list|,
name|environment
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|ForkedCommandException
argument_list|(
operator|new
name|Message
argument_list|(
literal|"EXECUTE_EXC"
argument_list|,
name|LOG
argument_list|,
name|this
argument_list|)
argument_list|,
name|ex
argument_list|)
throw|;
block|}
comment|// catch process stderr/stdout
name|ForkedCommandStreamHandler
name|cmdOut
init|=
operator|new
name|ForkedCommandStreamHandler
argument_list|(
name|proc
operator|.
name|getInputStream
argument_list|()
argument_list|,
name|outputStream
operator|==
literal|null
condition|?
name|System
operator|.
name|out
else|:
name|outputStream
argument_list|)
decl_stmt|;
name|ForkedCommandStreamHandler
name|cmdErr
init|=
operator|new
name|ForkedCommandStreamHandler
argument_list|(
name|proc
operator|.
name|getErrorStream
argument_list|()
argument_list|,
name|errorStream
operator|==
literal|null
condition|?
name|System
operator|.
name|err
else|:
name|errorStream
argument_list|)
decl_stmt|;
name|cmdErr
operator|.
name|start
argument_list|()
expr_stmt|;
name|cmdOut
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// now wait for the process on our own thread
name|start
argument_list|()
expr_stmt|;
comment|// kill process after timeout
try|try
block|{
if|if
condition|(
name|timeout
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isLoggable
argument_list|(
name|Level
operator|.
name|FINE
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|fine
argument_list|(
literal|"Waiting "
operator|+
name|timeout
operator|+
literal|" seconds for process to complete"
argument_list|)
expr_stmt|;
block|}
name|join
argument_list|(
name|timeout
operator|*
literal|1000
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|LOG
operator|.
name|isLoggable
argument_list|(
name|Level
operator|.
name|FINE
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|fine
argument_list|(
literal|"Waiting for process to complete"
argument_list|)
expr_stmt|;
block|}
name|join
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|completed
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isLoggable
argument_list|(
name|Level
operator|.
name|FINE
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|fine
argument_list|(
literal|"Process completed in time"
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|proc
operator|.
name|destroy
argument_list|()
expr_stmt|;
name|killed
operator|=
literal|true
expr_stmt|;
name|LOG
operator|.
name|fine
argument_list|(
literal|"Process timed out and was killed"
argument_list|)
expr_stmt|;
block|}
comment|// wait for the streams threads to finish if necessary
if|if
condition|(
name|joinErrOut
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isLoggable
argument_list|(
name|Level
operator|.
name|FINE
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting a further 10 seconds for process "
operator|+
literal|" stdout/stderr streams to be flushed"
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|cmdErr
operator|.
name|join
argument_list|(
literal|10
operator|*
literal|1000
argument_list|)
expr_stmt|;
name|cmdOut
operator|.
name|join
argument_list|(
literal|10
operator|*
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ex
parameter_list|)
block|{
comment|// silently ignore
block|}
block|}
block|}
if|if
condition|(
name|killed
condition|)
block|{
throw|throw
operator|new
name|ForkedCommandException
argument_list|(
operator|new
name|Message
argument_list|(
literal|"TIMEOUT_EXC"
argument_list|,
name|LOG
argument_list|,
name|timeout
argument_list|)
argument_list|)
throw|;
block|}
name|int
name|exitVal
init|=
name|proc
operator|.
name|exitValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isLoggable
argument_list|(
name|Level
operator|.
name|FINE
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|fine
argument_list|(
literal|"Process exited with value: "
operator|+
name|exitVal
argument_list|)
expr_stmt|;
block|}
return|return
name|exitVal
return|;
block|}
comment|/**      * Implements the run method for the thread on which the process is      * executed.      */
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|proc
operator|.
name|waitFor
argument_list|()
expr_stmt|;
name|completed
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ex
parameter_list|)
block|{
comment|// ignore this one
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setOutputStream
parameter_list|(
name|PrintStream
name|os
parameter_list|)
block|{
name|outputStream
operator|=
name|os
expr_stmt|;
block|}
specifier|public
name|void
name|setErrorStream
parameter_list|(
name|PrintStream
name|es
parameter_list|)
block|{
name|errorStream
operator|=
name|es
expr_stmt|;
block|}
block|}
end_class

begin_class
class|class
name|ForkedCommandStreamHandler
extends|extends
name|Thread
block|{
specifier|private
specifier|final
name|InputStream
name|is
decl_stmt|;
specifier|private
specifier|final
name|PrintStream
name|ps
decl_stmt|;
name|ForkedCommandStreamHandler
parameter_list|(
name|InputStream
name|i
parameter_list|,
name|PrintStream
name|p
parameter_list|)
block|{
name|is
operator|=
name|i
expr_stmt|;
name|ps
operator|=
name|p
expr_stmt|;
block|}
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|InputStreamReader
name|isr
init|=
operator|new
name|InputStreamReader
argument_list|(
name|is
argument_list|)
decl_stmt|;
name|BufferedReader
name|br
init|=
operator|new
name|BufferedReader
argument_list|(
name|isr
argument_list|)
decl_stmt|;
name|String
name|line
init|=
name|br
operator|.
name|readLine
argument_list|()
decl_stmt|;
while|while
condition|(
name|line
operator|!=
literal|null
condition|)
block|{
name|ps
operator|.
name|println
argument_list|(
name|line
argument_list|)
expr_stmt|;
name|line
operator|=
name|br
operator|.
name|readLine
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
comment|// ignore
block|}
block|}
block|}
end_class

end_unit

