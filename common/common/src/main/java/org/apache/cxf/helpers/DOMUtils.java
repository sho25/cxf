begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilderFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|ParserConfigurationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|OutputKeys
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|Transformer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|TransformerException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|TransformerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|dom
operator|.
name|DOMSource
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|stream
operator|.
name|StreamResult
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|stream
operator|.
name|StreamSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NamedNodeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|EntityResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|InputSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_comment
comment|/**  * Few simple utils to read DOM. This is originally from the Jakarta Commons  * Modeler.  *   * @author Costin Manolache  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|DOMUtils
block|{
specifier|static
specifier|final
name|DocumentBuilderFactory
name|FACTORY
init|=
name|DocumentBuilderFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
specifier|static
name|DocumentBuilder
name|builder
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|XMLNAMESPACE
init|=
literal|"xmlns"
decl_stmt|;
specifier|private
name|DOMUtils
parameter_list|()
block|{     }
specifier|private
specifier|static
specifier|synchronized
name|DocumentBuilder
name|getBuilder
parameter_list|()
throws|throws
name|ParserConfigurationException
block|{
if|if
condition|(
name|builder
operator|==
literal|null
condition|)
block|{
name|FACTORY
operator|.
name|setNamespaceAware
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|builder
operator|=
name|FACTORY
operator|.
name|newDocumentBuilder
argument_list|()
expr_stmt|;
block|}
return|return
name|builder
return|;
block|}
comment|/**      * Get the trimed text content of a node or null if there is no text      */
specifier|public
specifier|static
name|String
name|getContent
parameter_list|(
name|Node
name|n
parameter_list|)
block|{
if|if
condition|(
name|n
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Node
name|n1
init|=
name|DOMUtils
operator|.
name|getChild
argument_list|(
name|n
argument_list|,
name|Node
operator|.
name|TEXT_NODE
argument_list|)
decl_stmt|;
if|if
condition|(
name|n1
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|n1
operator|.
name|getNodeValue
argument_list|()
operator|.
name|trim
argument_list|()
return|;
block|}
comment|/**      * Get the raw text content of a node or null if there is no text      */
specifier|public
specifier|static
name|String
name|getRawContent
parameter_list|(
name|Node
name|n
parameter_list|)
block|{
if|if
condition|(
name|n
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Node
name|n1
init|=
name|DOMUtils
operator|.
name|getChild
argument_list|(
name|n
argument_list|,
name|Node
operator|.
name|TEXT_NODE
argument_list|)
decl_stmt|;
if|if
condition|(
name|n1
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|n1
operator|.
name|getNodeValue
argument_list|()
return|;
block|}
comment|/**      * Get the first element child.      *       * @param parent lookup direct childs      * @param name name of the element. If null return the first element.      */
specifier|public
specifier|static
name|Node
name|getChild
parameter_list|(
name|Node
name|parent
parameter_list|,
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|parent
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Node
name|first
init|=
name|parent
operator|.
name|getFirstChild
argument_list|()
decl_stmt|;
if|if
condition|(
name|first
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
for|for
control|(
name|Node
name|node
init|=
name|first
init|;
name|node
operator|!=
literal|null
condition|;
name|node
operator|=
name|node
operator|.
name|getNextSibling
argument_list|()
control|)
block|{
comment|// System.out.println("getNode: " + name + " " +
comment|// node.getNodeName());
if|if
condition|(
name|node
operator|.
name|getNodeType
argument_list|()
operator|!=
name|Node
operator|.
name|ELEMENT_NODE
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|name
operator|!=
literal|null
operator|&&
name|name
operator|.
name|equals
argument_list|(
name|node
operator|.
name|getNodeName
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|node
return|;
block|}
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
return|return
name|node
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|public
specifier|static
name|String
name|getAttribute
parameter_list|(
name|Node
name|element
parameter_list|,
name|String
name|attName
parameter_list|)
block|{
name|NamedNodeMap
name|attrs
init|=
name|element
operator|.
name|getAttributes
argument_list|()
decl_stmt|;
if|if
condition|(
name|attrs
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Node
name|attN
init|=
name|attrs
operator|.
name|getNamedItem
argument_list|(
name|attName
argument_list|)
decl_stmt|;
if|if
condition|(
name|attN
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|attN
operator|.
name|getNodeValue
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|String
name|getAttribute
parameter_list|(
name|Element
name|element
parameter_list|,
name|QName
name|attName
parameter_list|)
block|{
return|return
name|element
operator|.
name|getAttributeNS
argument_list|(
name|attName
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
name|attName
operator|.
name|getLocalPart
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|void
name|setAttribute
parameter_list|(
name|Node
name|node
parameter_list|,
name|String
name|attName
parameter_list|,
name|String
name|val
parameter_list|)
block|{
name|NamedNodeMap
name|attributes
init|=
name|node
operator|.
name|getAttributes
argument_list|()
decl_stmt|;
name|Node
name|attNode
init|=
name|node
operator|.
name|getOwnerDocument
argument_list|()
operator|.
name|createAttribute
argument_list|(
name|attName
argument_list|)
decl_stmt|;
name|attNode
operator|.
name|setNodeValue
argument_list|(
name|val
argument_list|)
expr_stmt|;
name|attributes
operator|.
name|setNamedItem
argument_list|(
name|attNode
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|removeAttribute
parameter_list|(
name|Node
name|node
parameter_list|,
name|String
name|attName
parameter_list|)
block|{
name|NamedNodeMap
name|attributes
init|=
name|node
operator|.
name|getAttributes
argument_list|()
decl_stmt|;
name|attributes
operator|.
name|removeNamedItem
argument_list|(
name|attName
argument_list|)
expr_stmt|;
block|}
comment|/**      * Set or replace the text value      */
specifier|public
specifier|static
name|void
name|setText
parameter_list|(
name|Node
name|node
parameter_list|,
name|String
name|val
parameter_list|)
block|{
name|Node
name|chld
init|=
name|DOMUtils
operator|.
name|getChild
argument_list|(
name|node
argument_list|,
name|Node
operator|.
name|TEXT_NODE
argument_list|)
decl_stmt|;
if|if
condition|(
name|chld
operator|==
literal|null
condition|)
block|{
name|Node
name|textN
init|=
name|node
operator|.
name|getOwnerDocument
argument_list|()
operator|.
name|createTextNode
argument_list|(
name|val
argument_list|)
decl_stmt|;
name|node
operator|.
name|appendChild
argument_list|(
name|textN
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// change the value
name|chld
operator|.
name|setNodeValue
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
comment|/**      * Find the first direct child with a given attribute.      *       * @param parent      * @param elemName name of the element, or null for any      * @param attName attribute we're looking for      * @param attVal attribute value or null if we just want any      */
specifier|public
specifier|static
name|Node
name|findChildWithAtt
parameter_list|(
name|Node
name|parent
parameter_list|,
name|String
name|elemName
parameter_list|,
name|String
name|attName
parameter_list|,
name|String
name|attVal
parameter_list|)
block|{
name|Node
name|child
init|=
name|DOMUtils
operator|.
name|getChild
argument_list|(
name|parent
argument_list|,
name|Node
operator|.
name|ELEMENT_NODE
argument_list|)
decl_stmt|;
if|if
condition|(
name|attVal
operator|==
literal|null
condition|)
block|{
while|while
condition|(
name|child
operator|!=
literal|null
operator|&&
operator|(
name|elemName
operator|==
literal|null
operator|||
name|elemName
operator|.
name|equals
argument_list|(
name|child
operator|.
name|getNodeName
argument_list|()
argument_list|)
operator|)
operator|&&
name|DOMUtils
operator|.
name|getAttribute
argument_list|(
name|child
argument_list|,
name|attName
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|child
operator|=
name|getNext
argument_list|(
name|child
argument_list|,
name|elemName
argument_list|,
name|Node
operator|.
name|ELEMENT_NODE
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
while|while
condition|(
name|child
operator|!=
literal|null
operator|&&
operator|(
name|elemName
operator|==
literal|null
operator|||
name|elemName
operator|.
name|equals
argument_list|(
name|child
operator|.
name|getNodeName
argument_list|()
argument_list|)
operator|)
operator|&&
operator|!
name|attVal
operator|.
name|equals
argument_list|(
name|DOMUtils
operator|.
name|getAttribute
argument_list|(
name|child
argument_list|,
name|attName
argument_list|)
argument_list|)
condition|)
block|{
name|child
operator|=
name|getNext
argument_list|(
name|child
argument_list|,
name|elemName
argument_list|,
name|Node
operator|.
name|ELEMENT_NODE
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|child
return|;
block|}
comment|/**      * Get the first child's content ( ie it's included TEXT node ).      */
specifier|public
specifier|static
name|String
name|getChildContent
parameter_list|(
name|Node
name|parent
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|Node
name|first
init|=
name|parent
operator|.
name|getFirstChild
argument_list|()
decl_stmt|;
if|if
condition|(
name|first
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
for|for
control|(
name|Node
name|node
init|=
name|first
init|;
name|node
operator|!=
literal|null
condition|;
name|node
operator|=
name|node
operator|.
name|getNextSibling
argument_list|()
control|)
block|{
comment|// System.out.println("getNode: " + name + " " +
comment|// node.getNodeName());
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
name|node
operator|.
name|getNodeName
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getContent
argument_list|(
name|node
argument_list|)
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|public
specifier|static
name|QName
name|getElementQName
parameter_list|(
name|Element
name|el
parameter_list|)
block|{
return|return
operator|new
name|QName
argument_list|(
name|el
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
name|el
operator|.
name|getLocalName
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Get the first direct child with a given type      */
specifier|public
specifier|static
name|Element
name|getFirstElement
parameter_list|(
name|Node
name|parent
parameter_list|)
block|{
name|Node
name|n
init|=
name|parent
operator|.
name|getFirstChild
argument_list|()
decl_stmt|;
while|while
condition|(
name|n
operator|!=
literal|null
operator|&&
name|Node
operator|.
name|ELEMENT_NODE
operator|!=
name|n
operator|.
name|getNodeType
argument_list|()
condition|)
block|{
name|n
operator|=
name|n
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|n
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|(
name|Element
operator|)
name|n
return|;
block|}
specifier|public
specifier|static
name|Element
name|getNextElement
parameter_list|(
name|Element
name|el
parameter_list|)
block|{
name|Node
name|nd
init|=
name|el
operator|.
name|getNextSibling
argument_list|()
decl_stmt|;
while|while
condition|(
name|nd
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|nd
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|ELEMENT_NODE
condition|)
block|{
return|return
operator|(
name|Element
operator|)
name|nd
return|;
block|}
name|nd
operator|=
name|nd
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
specifier|static
name|Element
name|getFirstChildWithName
parameter_list|(
name|Element
name|parent
parameter_list|,
name|QName
name|q
parameter_list|)
block|{
name|String
name|ns
init|=
name|q
operator|.
name|getNamespaceURI
argument_list|()
decl_stmt|;
name|String
name|lp
init|=
name|q
operator|.
name|getLocalPart
argument_list|()
decl_stmt|;
return|return
name|getFirstChildWithName
argument_list|(
name|parent
argument_list|,
name|ns
argument_list|,
name|lp
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Element
name|getFirstChildWithName
parameter_list|(
name|Element
name|parent
parameter_list|,
name|String
name|ns
parameter_list|,
name|String
name|lp
parameter_list|)
block|{
name|Node
name|n
init|=
name|parent
operator|.
name|getFirstChild
argument_list|()
decl_stmt|;
while|while
condition|(
name|n
operator|!=
literal|null
operator|&&
operator|!
name|ns
operator|.
name|equals
argument_list|(
name|n
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
operator|&&
operator|!
name|lp
operator|.
name|equals
argument_list|(
name|n
operator|.
name|getLocalName
argument_list|()
argument_list|)
condition|)
block|{
name|n
operator|=
name|n
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
block|}
return|return
operator|(
name|Element
operator|)
name|n
return|;
block|}
comment|/**      * Get the first direct child with a given type      */
specifier|public
specifier|static
name|Node
name|getChild
parameter_list|(
name|Node
name|parent
parameter_list|,
name|int
name|type
parameter_list|)
block|{
name|Node
name|n
init|=
name|parent
operator|.
name|getFirstChild
argument_list|()
decl_stmt|;
while|while
condition|(
name|n
operator|!=
literal|null
operator|&&
name|type
operator|!=
name|n
operator|.
name|getNodeType
argument_list|()
condition|)
block|{
name|n
operator|=
name|n
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|n
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|n
return|;
block|}
comment|/**      * Get the next sibling with the same name and type      */
specifier|public
specifier|static
name|Node
name|getNext
parameter_list|(
name|Node
name|current
parameter_list|)
block|{
name|String
name|name
init|=
name|current
operator|.
name|getNodeName
argument_list|()
decl_stmt|;
name|int
name|type
init|=
name|current
operator|.
name|getNodeType
argument_list|()
decl_stmt|;
return|return
name|getNext
argument_list|(
name|current
argument_list|,
name|name
argument_list|,
name|type
argument_list|)
return|;
block|}
comment|/**      * Return the next sibling with a given name and type      */
specifier|public
specifier|static
name|Node
name|getNext
parameter_list|(
name|Node
name|current
parameter_list|,
name|String
name|name
parameter_list|,
name|int
name|type
parameter_list|)
block|{
name|Node
name|first
init|=
name|current
operator|.
name|getNextSibling
argument_list|()
decl_stmt|;
if|if
condition|(
name|first
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
for|for
control|(
name|Node
name|node
init|=
name|first
init|;
name|node
operator|!=
literal|null
condition|;
name|node
operator|=
name|node
operator|.
name|getNextSibling
argument_list|()
control|)
block|{
if|if
condition|(
name|type
operator|>=
literal|0
operator|&&
name|node
operator|.
name|getNodeType
argument_list|()
operator|!=
name|type
condition|)
block|{
continue|continue;
block|}
comment|// System.out.println("getNode: " + name + " " +
comment|// node.getNodeName());
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
return|return
name|node
return|;
block|}
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
name|node
operator|.
name|getNodeName
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|node
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|public
specifier|static
class|class
name|NullResolver
implements|implements
name|EntityResolver
block|{
specifier|public
name|InputSource
name|resolveEntity
parameter_list|(
name|String
name|publicId
parameter_list|,
name|String
name|systemId
parameter_list|)
throws|throws
name|SAXException
throws|,
name|IOException
block|{
return|return
operator|new
name|InputSource
argument_list|(
operator|new
name|StringReader
argument_list|(
literal|""
argument_list|)
argument_list|)
return|;
block|}
block|}
comment|/**      * Read XML as DOM.      */
specifier|public
specifier|static
name|Document
name|readXml
parameter_list|(
name|InputStream
name|is
parameter_list|)
throws|throws
name|SAXException
throws|,
name|IOException
throws|,
name|ParserConfigurationException
block|{
name|DocumentBuilderFactory
name|dbf
init|=
name|DocumentBuilderFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|dbf
operator|.
name|setValidating
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|dbf
operator|.
name|setIgnoringComments
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|dbf
operator|.
name|setIgnoringElementContentWhitespace
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|dbf
operator|.
name|setNamespaceAware
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// dbf.setCoalescing(true);
comment|// dbf.setExpandEntityReferences(true);
name|DocumentBuilder
name|db
init|=
literal|null
decl_stmt|;
name|db
operator|=
name|dbf
operator|.
name|newDocumentBuilder
argument_list|()
expr_stmt|;
name|db
operator|.
name|setEntityResolver
argument_list|(
operator|new
name|NullResolver
argument_list|()
argument_list|)
expr_stmt|;
comment|// db.setErrorHandler( new MyErrorHandler());
return|return
name|db
operator|.
name|parse
argument_list|(
name|is
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Document
name|readXml
parameter_list|(
name|StreamSource
name|is
parameter_list|)
throws|throws
name|SAXException
throws|,
name|IOException
throws|,
name|ParserConfigurationException
block|{
name|DocumentBuilderFactory
name|dbf
init|=
name|DocumentBuilderFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|dbf
operator|.
name|setValidating
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|dbf
operator|.
name|setIgnoringComments
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|dbf
operator|.
name|setIgnoringElementContentWhitespace
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|dbf
operator|.
name|setNamespaceAware
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// dbf.setCoalescing(true);
comment|// dbf.setExpandEntityReferences(true);
name|DocumentBuilder
name|db
init|=
literal|null
decl_stmt|;
name|db
operator|=
name|dbf
operator|.
name|newDocumentBuilder
argument_list|()
expr_stmt|;
name|db
operator|.
name|setEntityResolver
argument_list|(
operator|new
name|NullResolver
argument_list|()
argument_list|)
expr_stmt|;
comment|// db.setErrorHandler( new MyErrorHandler());
name|InputSource
name|is2
init|=
operator|new
name|InputSource
argument_list|()
decl_stmt|;
name|is2
operator|.
name|setSystemId
argument_list|(
name|is
operator|.
name|getSystemId
argument_list|()
argument_list|)
expr_stmt|;
name|is2
operator|.
name|setByteStream
argument_list|(
name|is
operator|.
name|getInputStream
argument_list|()
argument_list|)
expr_stmt|;
name|is2
operator|.
name|setCharacterStream
argument_list|(
name|is
operator|.
name|getReader
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|db
operator|.
name|parse
argument_list|(
name|is2
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|void
name|writeXml
parameter_list|(
name|Node
name|n
parameter_list|,
name|OutputStream
name|os
parameter_list|)
throws|throws
name|TransformerException
block|{
name|TransformerFactory
name|tf
init|=
name|TransformerFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
comment|// identity
name|Transformer
name|t
init|=
name|tf
operator|.
name|newTransformer
argument_list|()
decl_stmt|;
name|t
operator|.
name|setOutputProperty
argument_list|(
name|OutputKeys
operator|.
name|INDENT
argument_list|,
literal|"yes"
argument_list|)
expr_stmt|;
name|t
operator|.
name|transform
argument_list|(
operator|new
name|DOMSource
argument_list|(
name|n
argument_list|)
argument_list|,
operator|new
name|StreamResult
argument_list|(
name|os
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|DocumentBuilder
name|createDocumentBuilder
parameter_list|()
block|{
try|try
block|{
return|return
name|FACTORY
operator|.
name|newDocumentBuilder
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|ParserConfigurationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Couldn't find a DOM parser."
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|Document
name|createDocument
parameter_list|()
block|{
try|try
block|{
return|return
name|getBuilder
argument_list|()
operator|.
name|newDocument
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|ParserConfigurationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Couldn't find a DOM parser."
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|String
name|getPrefixRecursive
parameter_list|(
name|Element
name|el
parameter_list|,
name|String
name|ns
parameter_list|)
block|{
name|String
name|prefix
init|=
name|getPrefix
argument_list|(
name|el
argument_list|,
name|ns
argument_list|)
decl_stmt|;
if|if
condition|(
name|prefix
operator|==
literal|null
operator|&&
name|el
operator|.
name|getParentNode
argument_list|()
operator|instanceof
name|Element
condition|)
block|{
name|prefix
operator|=
name|getPrefixRecursive
argument_list|(
operator|(
name|Element
operator|)
name|el
operator|.
name|getParentNode
argument_list|()
argument_list|,
name|ns
argument_list|)
expr_stmt|;
block|}
return|return
name|prefix
return|;
block|}
specifier|public
specifier|static
name|String
name|getPrefix
parameter_list|(
name|Element
name|el
parameter_list|,
name|String
name|ns
parameter_list|)
block|{
name|NamedNodeMap
name|atts
init|=
name|el
operator|.
name|getAttributes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|atts
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Node
name|node
init|=
name|atts
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|name
init|=
name|node
operator|.
name|getNodeName
argument_list|()
decl_stmt|;
if|if
condition|(
name|ns
operator|.
name|equals
argument_list|(
name|node
operator|.
name|getNodeValue
argument_list|()
argument_list|)
operator|&&
operator|(
name|name
operator|!=
literal|null
operator|&&
operator|(
name|XMLNAMESPACE
operator|.
name|equals
argument_list|(
name|name
argument_list|)
operator|||
name|name
operator|.
name|startsWith
argument_list|(
name|XMLNAMESPACE
operator|+
literal|":"
argument_list|)
operator|)
operator|)
condition|)
block|{
return|return
name|node
operator|.
name|getPrefix
argument_list|()
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|public
specifier|static
name|String
name|createNamespace
parameter_list|(
name|Element
name|el
parameter_list|,
name|String
name|ns
parameter_list|)
block|{
name|String
name|p
init|=
literal|"ns1"
decl_stmt|;
name|int
name|i
init|=
literal|1
decl_stmt|;
while|while
condition|(
name|getPrefix
argument_list|(
name|el
argument_list|,
name|ns
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|p
operator|=
literal|"ns"
operator|+
name|i
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
name|el
operator|.
name|setAttribute
argument_list|(
name|XMLNAMESPACE
operator|+
literal|":"
operator|+
name|p
argument_list|,
name|ns
argument_list|)
expr_stmt|;
return|return
name|p
return|;
block|}
comment|/**      * Searches the given element including it's parent elements      * for a matching namspace decleration.      * @param el element to search for namespace definitions      * @param searchPrefix the prefix we are searching for      * @return the namespace if found.      */
specifier|public
specifier|static
name|String
name|getNamespace
parameter_list|(
name|Element
name|el
parameter_list|,
name|String
name|searchPrefix
parameter_list|)
block|{
name|NamedNodeMap
name|atts
init|=
name|el
operator|.
name|getAttributes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|atts
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Node
name|currentAttribute
init|=
name|atts
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|currentLocalName
init|=
name|currentAttribute
operator|.
name|getLocalName
argument_list|()
decl_stmt|;
name|String
name|currentPrefix
init|=
name|currentAttribute
operator|.
name|getPrefix
argument_list|()
decl_stmt|;
if|if
condition|(
name|searchPrefix
operator|.
name|equals
argument_list|(
name|currentLocalName
argument_list|)
operator|&&
name|XMLNAMESPACE
operator|.
name|equals
argument_list|(
name|currentPrefix
argument_list|)
condition|)
block|{
return|return
name|currentAttribute
operator|.
name|getNodeValue
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|searchPrefix
argument_list|)
operator|&&
name|XMLNAMESPACE
operator|.
name|equals
argument_list|(
name|currentLocalName
argument_list|)
operator|&&
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|currentPrefix
argument_list|)
condition|)
block|{
return|return
name|currentAttribute
operator|.
name|getNodeValue
argument_list|()
return|;
block|}
block|}
name|Node
name|parent
init|=
name|el
operator|.
name|getParentNode
argument_list|()
decl_stmt|;
if|if
condition|(
name|parent
operator|instanceof
name|Element
condition|)
block|{
return|return
name|getNamespace
argument_list|(
operator|(
name|Element
operator|)
name|parent
argument_list|,
name|searchPrefix
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

