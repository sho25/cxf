begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|xmlschema
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|Source
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|InputSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|ValidationEventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaElement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|extensions
operator|.
name|ExtensionRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|resolver
operator|.
name|URIResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|utils
operator|.
name|NamespaceMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|utils
operator|.
name|NamespacePrefixList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|utils
operator|.
name|TargetNamespaceValidator
import|;
end_import

begin_comment
comment|/**  * Wrapper class for XmlSchemaCollection that deals with various quirks and bugs.  * One bug is WSCOMMONS-272.  */
end_comment

begin_class
specifier|public
class|class
name|SchemaCollection
block|{
specifier|private
specifier|static
specifier|final
name|Method
name|GET_ELEMENT_BY_NAME_METHOD
decl_stmt|;
static|static
block|{
name|Method
name|m
init|=
literal|null
decl_stmt|;
try|try
block|{
name|m
operator|=
name|XmlSchema
operator|.
name|class
operator|.
name|getMethod
argument_list|(
literal|"getElementByName"
argument_list|,
operator|new
name|Class
index|[]
block|{
name|String
operator|.
name|class
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|//ignore
block|}
name|GET_ELEMENT_BY_NAME_METHOD
operator|=
name|m
expr_stmt|;
block|}
specifier|private
name|XmlSchemaCollection
name|schemaCollection
decl_stmt|;
specifier|public
name|SchemaCollection
parameter_list|()
block|{
name|this
argument_list|(
operator|new
name|XmlSchemaCollection
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|SchemaCollection
parameter_list|(
name|XmlSchemaCollection
name|col
parameter_list|)
block|{
name|schemaCollection
operator|=
name|col
expr_stmt|;
name|col
operator|.
name|getExtReg
argument_list|()
operator|.
name|setDefaultExtensionDeserializer
argument_list|(
operator|new
name|FixedExtensionDeserializer
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|schemaCollection
operator|.
name|getNamespaceContext
argument_list|()
operator|==
literal|null
condition|)
block|{
comment|//      an empty prefix map avoids extra checks for null.
name|schemaCollection
operator|.
name|setNamespaceContext
argument_list|(
operator|new
name|NamespaceMap
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|XmlSchemaCollection
name|getXmlSchemaCollection
parameter_list|()
block|{
return|return
name|schemaCollection
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
return|return
name|schemaCollection
operator|.
name|equals
argument_list|(
name|obj
argument_list|)
return|;
block|}
specifier|public
name|XmlSchemaElement
name|getElementByQName
parameter_list|(
name|QName
name|qname
parameter_list|)
block|{
return|return
name|schemaCollection
operator|.
name|getElementByQName
argument_list|(
name|qname
argument_list|)
return|;
block|}
specifier|public
name|ExtensionRegistry
name|getExtReg
parameter_list|()
block|{
return|return
name|schemaCollection
operator|.
name|getExtReg
argument_list|()
return|;
block|}
specifier|public
name|NamespacePrefixList
name|getNamespaceContext
parameter_list|()
block|{
return|return
name|schemaCollection
operator|.
name|getNamespaceContext
argument_list|()
return|;
block|}
specifier|public
name|XmlSchemaType
name|getTypeByQName
parameter_list|(
name|QName
name|schemaTypeName
parameter_list|)
block|{
return|return
name|schemaCollection
operator|.
name|getTypeByQName
argument_list|(
name|schemaTypeName
argument_list|)
return|;
block|}
specifier|public
name|XmlSchema
index|[]
name|getXmlSchema
parameter_list|(
name|String
name|systemId
parameter_list|)
block|{
return|return
name|schemaCollection
operator|.
name|getXmlSchema
argument_list|(
name|systemId
argument_list|)
return|;
block|}
specifier|public
name|XmlSchema
index|[]
name|getXmlSchemas
parameter_list|()
block|{
return|return
name|schemaCollection
operator|.
name|getXmlSchemas
argument_list|()
return|;
block|}
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|schemaCollection
operator|.
name|hashCode
argument_list|()
return|;
block|}
specifier|public
name|void
name|init
parameter_list|()
block|{
name|schemaCollection
operator|.
name|init
argument_list|()
expr_stmt|;
block|}
specifier|public
name|XmlSchema
name|read
parameter_list|(
name|Document
name|doc
parameter_list|,
name|String
name|uri
parameter_list|,
name|ValidationEventHandler
name|veh
parameter_list|,
name|TargetNamespaceValidator
name|validator
parameter_list|)
block|{
return|return
name|schemaCollection
operator|.
name|read
argument_list|(
name|doc
argument_list|,
name|uri
argument_list|,
name|veh
argument_list|,
name|validator
argument_list|)
return|;
block|}
specifier|public
name|XmlSchema
name|read
parameter_list|(
name|Document
name|doc
parameter_list|,
name|String
name|uri
parameter_list|,
name|ValidationEventHandler
name|veh
parameter_list|)
block|{
return|return
name|schemaCollection
operator|.
name|read
argument_list|(
name|doc
argument_list|,
name|uri
argument_list|,
name|veh
argument_list|)
return|;
block|}
specifier|public
name|XmlSchema
name|read
parameter_list|(
name|Document
name|doc
parameter_list|,
name|ValidationEventHandler
name|veh
parameter_list|)
block|{
return|return
name|schemaCollection
operator|.
name|read
argument_list|(
name|doc
argument_list|,
name|veh
argument_list|)
return|;
block|}
specifier|public
name|XmlSchema
name|read
parameter_list|(
name|Element
name|elem
parameter_list|,
name|String
name|uri
parameter_list|)
block|{
return|return
name|schemaCollection
operator|.
name|read
argument_list|(
name|elem
argument_list|,
name|uri
argument_list|)
return|;
block|}
specifier|public
name|XmlSchema
name|read
parameter_list|(
name|Element
name|elem
parameter_list|)
block|{
return|return
name|schemaCollection
operator|.
name|read
argument_list|(
name|elem
argument_list|)
return|;
block|}
specifier|public
name|XmlSchema
name|read
parameter_list|(
name|InputSource
name|inputSource
parameter_list|,
name|ValidationEventHandler
name|veh
parameter_list|)
block|{
return|return
name|schemaCollection
operator|.
name|read
argument_list|(
name|inputSource
argument_list|,
name|veh
argument_list|)
return|;
block|}
specifier|public
name|XmlSchema
name|read
parameter_list|(
name|Reader
name|r
parameter_list|,
name|ValidationEventHandler
name|veh
parameter_list|)
block|{
return|return
name|schemaCollection
operator|.
name|read
argument_list|(
name|r
argument_list|,
name|veh
argument_list|)
return|;
block|}
specifier|public
name|XmlSchema
name|read
parameter_list|(
name|Source
name|source
parameter_list|,
name|ValidationEventHandler
name|veh
parameter_list|)
block|{
return|return
name|schemaCollection
operator|.
name|read
argument_list|(
name|source
argument_list|,
name|veh
argument_list|)
return|;
block|}
specifier|public
name|void
name|setBaseUri
parameter_list|(
name|String
name|baseUri
parameter_list|)
block|{
name|schemaCollection
operator|.
name|setBaseUri
argument_list|(
name|baseUri
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setExtReg
parameter_list|(
name|ExtensionRegistry
name|extReg
parameter_list|)
block|{
name|schemaCollection
operator|.
name|setExtReg
argument_list|(
name|extReg
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setNamespaceContext
parameter_list|(
name|NamespacePrefixList
name|namespaceContext
parameter_list|)
block|{
name|schemaCollection
operator|.
name|setNamespaceContext
argument_list|(
name|namespaceContext
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setSchemaResolver
parameter_list|(
name|URIResolver
name|schemaResolver
parameter_list|)
block|{
name|schemaCollection
operator|.
name|setSchemaResolver
argument_list|(
name|schemaResolver
argument_list|)
expr_stmt|;
block|}
comment|/**      * This function is not part of the XmlSchema API. Who knows why?      * @param namespaceURI targetNamespace      * @return schema, or null.      */
specifier|public
name|XmlSchema
name|getSchemaByTargetNamespace
parameter_list|(
name|String
name|namespaceURI
parameter_list|)
block|{
for|for
control|(
name|XmlSchema
name|schema
range|:
name|schemaCollection
operator|.
name|getXmlSchemas
argument_list|()
control|)
block|{
if|if
condition|(
name|schema
operator|.
name|getTargetNamespace
argument_list|()
operator|.
name|equals
argument_list|(
name|namespaceURI
argument_list|)
condition|)
block|{
return|return
name|schema
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|XmlSchema
name|getSchemaForElement
parameter_list|(
name|QName
name|name
parameter_list|)
block|{
for|for
control|(
name|XmlSchema
name|schema
range|:
name|schemaCollection
operator|.
name|getXmlSchemas
argument_list|()
control|)
block|{
if|if
condition|(
name|name
operator|.
name|getNamespaceURI
argument_list|()
operator|.
name|equals
argument_list|(
name|schema
operator|.
name|getTargetNamespace
argument_list|()
argument_list|)
condition|)
block|{
comment|//for XmlSchema 1.4, we should use:
comment|//schema.getElementByName(name.getLocalPart()) != null
comment|//but that doesn't exist in 1.3 so for now, use reflection
try|try
block|{
if|if
condition|(
name|GET_ELEMENT_BY_NAME_METHOD
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|GET_ELEMENT_BY_NAME_METHOD
operator|.
name|invoke
argument_list|(
name|schema
argument_list|,
operator|new
name|Object
index|[]
block|{
name|name
operator|.
name|getLocalPart
argument_list|()
block|}
block|)
operator|!=
literal|null
block|)
block|{
return|return
name|schema
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|schema
operator|.
name|getElementByName
argument_list|(
name|name
argument_list|)
operator|!=
literal|null
condition|)
block|{
return|return
name|schema
return|;
block|}
block|}
catch|catch
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
name|ex
parameter_list|)
block|{
comment|//ignore
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|ex
parameter_list|)
block|{
comment|//ignore
block|}
block|}
block|}
end_class

begin_return
return|return
literal|null
return|;
end_return

begin_comment
unit|}
comment|/**      * This is a really ugly trick to get around a bug or oversight in XmlSchema, which is that      * there is no way to programmatically construct an XmlSchema instance that ends up cataloged      * in a collection. If there is a fix to WSCOMMONS-272, this can go away.      * @param namespaceURI TNS for new schema.      * @return new schema      */
end_comment

begin_function
unit|public
name|XmlSchema
name|newXmlSchemaInCollection
parameter_list|(
name|String
name|namespaceURI
parameter_list|)
block|{
name|StringBuffer
name|tinyXmlSchemaDocument
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|tinyXmlSchemaDocument
operator|.
name|append
argument_list|(
literal|"<xsd:schema xmlns:xsd='http://www.w3.org/2001/XMLSchema' "
argument_list|)
expr_stmt|;
name|tinyXmlSchemaDocument
operator|.
name|append
argument_list|(
literal|"targetNamespace='"
operator|+
name|namespaceURI
operator|+
literal|"'/>"
argument_list|)
expr_stmt|;
name|StringReader
name|reader
init|=
operator|new
name|StringReader
argument_list|(
name|tinyXmlSchemaDocument
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|schemaCollection
operator|.
name|read
argument_list|(
name|reader
argument_list|,
operator|new
name|ValidationEventHandler
argument_list|()
block|{ }
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**      * Validate that a qualified name points to some namespace in the schema.      * @param qname      */
end_comment

begin_function
specifier|public
name|void
name|validateQNameNamespace
parameter_list|(
name|QName
name|qname
parameter_list|)
block|{
comment|// astonishingly, xmlSchemaCollection has no accessor by target URL.
if|if
condition|(
literal|""
operator|.
name|equals
argument_list|(
name|qname
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
condition|)
block|{
return|return;
comment|// references to the 'unqualified' namespace are OK even if there is no schema for it.
block|}
for|for
control|(
name|XmlSchema
name|schema
range|:
name|schemaCollection
operator|.
name|getXmlSchemas
argument_list|()
control|)
block|{
if|if
condition|(
name|schema
operator|.
name|getTargetNamespace
argument_list|()
operator|.
name|equals
argument_list|(
name|qname
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
condition|)
block|{
return|return;
block|}
block|}
throw|throw
operator|new
name|InvalidXmlSchemaReferenceException
argument_list|(
name|qname
operator|+
literal|" refers to unknown namespace."
argument_list|)
throw|;
block|}
end_function

begin_function
specifier|public
name|void
name|validateElementName
parameter_list|(
name|QName
name|referrer
parameter_list|,
name|QName
name|elementQName
parameter_list|)
block|{
name|XmlSchemaElement
name|element
init|=
name|schemaCollection
operator|.
name|getElementByQName
argument_list|(
name|elementQName
argument_list|)
decl_stmt|;
if|if
condition|(
name|element
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|InvalidXmlSchemaReferenceException
argument_list|(
name|referrer
operator|+
literal|" references non-existent element "
operator|+
name|elementQName
argument_list|)
throw|;
block|}
block|}
end_function

begin_function
specifier|public
name|void
name|validateTypeName
parameter_list|(
name|QName
name|referrer
parameter_list|,
name|QName
name|typeQName
parameter_list|)
block|{
name|XmlSchemaType
name|type
init|=
name|schemaCollection
operator|.
name|getTypeByQName
argument_list|(
name|typeQName
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|InvalidXmlSchemaReferenceException
argument_list|(
name|referrer
operator|+
literal|" references non-existent type "
operator|+
name|typeQName
argument_list|)
throw|;
block|}
block|}
end_function

begin_function
specifier|public
name|void
name|addGlobalElementToSchema
parameter_list|(
name|XmlSchemaElement
name|element
parameter_list|)
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
name|XmlSchema
name|schema
init|=
name|getSchemaByTargetNamespace
argument_list|(
name|element
operator|.
name|getQName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|schema
operator|==
literal|null
condition|)
block|{
name|schema
operator|=
name|newXmlSchemaInCollection
argument_list|(
name|element
operator|.
name|getQName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|schema
operator|.
name|getItems
argument_list|()
operator|.
name|add
argument_list|(
name|element
argument_list|)
expr_stmt|;
comment|// believe it or not, it is up to us to do both of these adds!
name|schema
operator|.
name|getElements
argument_list|()
operator|.
name|add
argument_list|(
name|element
operator|.
name|getQName
argument_list|()
argument_list|,
name|element
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|public
specifier|static
name|void
name|addGlobalElementToSchema
parameter_list|(
name|XmlSchema
name|schema
parameter_list|,
name|XmlSchemaElement
name|element
parameter_list|)
block|{
synchronized|synchronized
init|(
name|schema
init|)
block|{
name|schema
operator|.
name|getItems
argument_list|()
operator|.
name|add
argument_list|(
name|element
argument_list|)
expr_stmt|;
comment|// believe it or not, it is up to us to do both of these adds!
name|schema
operator|.
name|getElements
argument_list|()
operator|.
name|add
argument_list|(
name|element
operator|.
name|getQName
argument_list|()
argument_list|,
name|element
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|public
specifier|static
name|void
name|addGlobalTypeToSchema
parameter_list|(
name|XmlSchema
name|schema
parameter_list|,
name|XmlSchemaType
name|type
parameter_list|)
block|{
synchronized|synchronized
init|(
name|schema
init|)
block|{
name|schema
operator|.
name|getItems
argument_list|()
operator|.
name|add
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|schema
operator|.
name|addType
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
block|}
end_function

unit|}
end_unit

