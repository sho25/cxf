begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|XMLConstants
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|NamespaceContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_class
specifier|public
specifier|final
class|class
name|MapNamespaceContext
implements|implements
name|NamespaceContext
block|{
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|namespaces
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Node
name|targetNode
decl_stmt|;
specifier|public
name|MapNamespaceContext
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
specifier|public
name|MapNamespaceContext
parameter_list|(
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|ns
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|namespaces
operator|=
name|ns
expr_stmt|;
block|}
specifier|public
name|MapNamespaceContext
parameter_list|(
specifier|final
name|Node
name|node
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|targetNode
operator|=
name|node
expr_stmt|;
block|}
specifier|public
name|void
name|setTargetNode
parameter_list|(
specifier|final
name|Node
name|node
parameter_list|)
block|{
name|this
operator|.
name|targetNode
operator|=
name|node
expr_stmt|;
block|}
specifier|public
name|void
name|addNamespace
parameter_list|(
specifier|final
name|String
name|prefix
parameter_list|,
specifier|final
name|String
name|namespaceURI
parameter_list|)
block|{
name|this
operator|.
name|namespaces
operator|.
name|put
argument_list|(
name|prefix
argument_list|,
name|namespaceURI
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addNamespaces
parameter_list|(
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|ns
parameter_list|)
block|{
name|this
operator|.
name|namespaces
operator|.
name|putAll
argument_list|(
name|ns
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getNamespaceURI
parameter_list|(
name|String
name|prefix
parameter_list|)
block|{
if|if
condition|(
literal|null
operator|==
name|prefix
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Null prefix to getNamespaceURI"
argument_list|)
throw|;
block|}
if|if
condition|(
name|XMLConstants
operator|.
name|XML_NS_PREFIX
operator|.
name|equals
argument_list|(
name|prefix
argument_list|)
condition|)
block|{
return|return
name|XMLConstants
operator|.
name|XML_NS_URI
return|;
block|}
if|if
condition|(
name|XMLConstants
operator|.
name|XMLNS_ATTRIBUTE
operator|.
name|equals
argument_list|(
name|prefix
argument_list|)
condition|)
block|{
return|return
name|XMLConstants
operator|.
name|XMLNS_ATTRIBUTE_NS_URI
return|;
block|}
comment|// if we have a target node, facts-on-the-ground in its parent tree take precedence.
if|if
condition|(
name|targetNode
operator|!=
literal|null
condition|)
block|{
name|String
name|uri
init|=
name|DOMUtils
operator|.
name|getNamespace
argument_list|(
name|targetNode
argument_list|,
name|prefix
argument_list|)
decl_stmt|;
if|if
condition|(
name|uri
operator|!=
literal|null
condition|)
block|{
return|return
name|uri
return|;
block|}
block|}
return|return
name|namespaces
operator|.
name|get
argument_list|(
name|prefix
argument_list|)
return|;
block|}
specifier|public
name|String
name|getPrefix
parameter_list|(
name|String
name|namespaceURI
parameter_list|)
block|{
if|if
condition|(
name|namespaceURI
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Null namespace to getPrefix"
argument_list|)
throw|;
block|}
if|if
condition|(
name|XMLConstants
operator|.
name|XML_NS_URI
operator|.
name|equals
argument_list|(
name|namespaceURI
argument_list|)
condition|)
block|{
return|return
name|XMLConstants
operator|.
name|XML_NS_PREFIX
return|;
block|}
if|if
condition|(
name|XMLConstants
operator|.
name|XMLNS_ATTRIBUTE_NS_URI
operator|.
name|equals
argument_list|(
name|namespaceURI
argument_list|)
condition|)
block|{
return|return
name|XMLConstants
operator|.
name|XMLNS_ATTRIBUTE
return|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|e
range|:
name|namespaces
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|equals
argument_list|(
name|namespaceURI
argument_list|)
condition|)
block|{
return|return
name|e
operator|.
name|getKey
argument_list|()
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|Iterator
name|getPrefixes
parameter_list|(
name|String
name|namespaceURI
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getUsedNamespaces
parameter_list|()
block|{
return|return
name|namespaces
return|;
block|}
block|}
end_class

end_unit

