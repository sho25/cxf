begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|xjc
operator|.
name|ts
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|configuration
operator|.
name|foo
operator|.
name|Foo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|configuration
operator|.
name|foo
operator|.
name|TpAddress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|configuration
operator|.
name|foo
operator|.
name|TpAddressPresentation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|ToStringTest
extends|extends
name|Assert
block|{
annotation|@
name|Test
specifier|public
name|void
name|testFooToStringOverride
parameter_list|()
throws|throws
name|Exception
block|{
name|Foo
name|foo
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|configuration
operator|.
name|foo
operator|.
name|ObjectFactory
argument_list|()
operator|.
name|createFoo
argument_list|()
decl_stmt|;
name|Method
name|method
init|=
name|foo
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"toString"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"toString is overridden"
argument_list|,
name|foo
operator|.
name|getClass
argument_list|()
argument_list|,
name|method
operator|.
name|getDeclaringClass
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|fooS
init|=
name|foo
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"contains null"
argument_list|,
name|fooS
operator|.
name|indexOf
argument_list|(
literal|"null"
argument_list|)
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddressToStringOverride
parameter_list|()
throws|throws
name|Exception
block|{
name|TpAddress
name|foo
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|configuration
operator|.
name|foo
operator|.
name|ObjectFactory
argument_list|()
operator|.
name|createTpAddress
argument_list|()
decl_stmt|;
name|Method
name|method
init|=
name|foo
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"toString"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"toString is overridden"
argument_list|,
name|foo
operator|.
name|getClass
argument_list|()
argument_list|,
name|method
operator|.
name|getDeclaringClass
argument_list|()
argument_list|)
expr_stmt|;
name|TpAddressPresentation
name|value
init|=
name|TpAddressPresentation
operator|.
name|P_ADDRESS_PRESENTATION_ALLOWED
decl_stmt|;
name|foo
operator|.
name|setPresentation
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|String
name|fooS
init|=
name|foo
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"contains null"
argument_list|,
name|fooS
operator|.
name|indexOf
argument_list|(
literal|"null"
argument_list|)
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"contains P_ADDRESS_PRESENTATION_ALLOWED"
argument_list|,
name|fooS
operator|.
name|indexOf
argument_list|(
literal|"P_ADDRESS_PRESENTATION_ALLOWED"
argument_list|)
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

