begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|xjc
operator|.
name|dv
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|DatatypeConverter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|adapters
operator|.
name|HexBinaryAdapter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|NamespaceContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ErrorHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|codemodel
operator|.
name|ClassType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|codemodel
operator|.
name|JConditional
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|codemodel
operator|.
name|JDefinedClass
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|codemodel
operator|.
name|JDocComment
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|codemodel
operator|.
name|JExpr
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|codemodel
operator|.
name|JExpression
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|codemodel
operator|.
name|JFieldRef
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|codemodel
operator|.
name|JFieldVar
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|codemodel
operator|.
name|JMethod
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|codemodel
operator|.
name|JOp
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|codemodel
operator|.
name|JType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|tools
operator|.
name|xjc
operator|.
name|Options
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|tools
operator|.
name|xjc
operator|.
name|outline
operator|.
name|ClassOutline
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|tools
operator|.
name|xjc
operator|.
name|outline
operator|.
name|FieldOutline
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|tools
operator|.
name|xjc
operator|.
name|outline
operator|.
name|Outline
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|tools
operator|.
name|xjc
operator|.
name|util
operator|.
name|NamespaceContextAdapter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|xml
operator|.
name|xsom
operator|.
name|XSAttributeDecl
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|xml
operator|.
name|xsom
operator|.
name|XSAttributeUse
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|xml
operator|.
name|xsom
operator|.
name|XSElementDecl
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|xml
operator|.
name|xsom
operator|.
name|XSParticle
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|xml
operator|.
name|xsom
operator|.
name|XSTerm
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|xml
operator|.
name|xsom
operator|.
name|XSType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|xml
operator|.
name|xsom
operator|.
name|XmlString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_comment
comment|/**  * Modifies the JAXB code model to initialize fields mapped from schema elements   * with their default value.  */
end_comment

begin_class
specifier|public
class|class
name|DefaultValuePlugin
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|DefaultValuePlugin
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
name|DefaultValuePlugin
parameter_list|()
block|{     }
specifier|public
name|String
name|getOptionName
parameter_list|()
block|{
return|return
literal|"Xdv"
return|;
block|}
specifier|public
name|String
name|getUsage
parameter_list|()
block|{
return|return
literal|"  -Xdv                 : Initialize fields mapped from elements with their default values"
return|;
block|}
specifier|private
name|boolean
name|containsDefaultValue
parameter_list|(
name|Outline
name|outline
parameter_list|,
name|FieldOutline
name|field
parameter_list|)
block|{
name|ClassOutline
name|fClass
init|=
literal|null
decl_stmt|;
for|for
control|(
name|ClassOutline
name|classOutline
range|:
name|outline
operator|.
name|getClasses
argument_list|()
control|)
block|{
if|if
condition|(
name|classOutline
operator|.
name|implClass
operator|==
name|field
operator|.
name|getRawType
argument_list|()
condition|)
block|{
name|fClass
operator|=
name|classOutline
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|fClass
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
name|FieldOutline
name|f
range|:
name|fClass
operator|.
name|getDeclaredFields
argument_list|()
control|)
block|{
if|if
condition|(
name|f
operator|.
name|getPropertyInfo
argument_list|()
operator|.
name|getSchemaComponent
argument_list|()
operator|instanceof
name|XSParticle
condition|)
block|{
name|XSParticle
name|particle
init|=
operator|(
name|XSParticle
operator|)
name|f
operator|.
name|getPropertyInfo
argument_list|()
operator|.
name|getSchemaComponent
argument_list|()
decl_stmt|;
name|XSTerm
name|term
init|=
name|particle
operator|.
name|getTerm
argument_list|()
decl_stmt|;
if|if
condition|(
name|term
operator|.
name|isElementDecl
argument_list|()
operator|&&
name|term
operator|.
name|asElementDecl
argument_list|()
operator|.
name|getDefaultValue
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|run
parameter_list|(
name|Outline
name|outline
parameter_list|,
name|Options
name|opt
parameter_list|,
name|ErrorHandler
name|errorHandler
parameter_list|)
block|{
name|LOG
operator|.
name|fine
argument_list|(
literal|"Running default value plugin."
argument_list|)
expr_stmt|;
for|for
control|(
name|ClassOutline
name|co
range|:
name|outline
operator|.
name|getClasses
argument_list|()
control|)
block|{
for|for
control|(
name|FieldOutline
name|f
range|:
name|co
operator|.
name|getDeclaredFields
argument_list|()
control|)
block|{
comment|// Use XML schema object model to determine if field is mapped
comment|// from an element (attributes default values are handled
comment|// natively) and get its default value.
name|XmlString
name|xmlDefaultValue
init|=
literal|null
decl_stmt|;
name|XSType
name|xsType
init|=
literal|null
decl_stmt|;
name|boolean
name|isElement
init|=
literal|false
decl_stmt|;
name|boolean
name|isRequiredAttr
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|f
operator|.
name|getPropertyInfo
argument_list|()
operator|.
name|getSchemaComponent
argument_list|()
operator|instanceof
name|XSParticle
condition|)
block|{
name|XSParticle
name|particle
init|=
operator|(
name|XSParticle
operator|)
name|f
operator|.
name|getPropertyInfo
argument_list|()
operator|.
name|getSchemaComponent
argument_list|()
decl_stmt|;
name|XSTerm
name|term
init|=
name|particle
operator|.
name|getTerm
argument_list|()
decl_stmt|;
name|XSElementDecl
name|element
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|term
operator|.
name|isElementDecl
argument_list|()
condition|)
block|{
name|element
operator|=
name|particle
operator|.
name|getTerm
argument_list|()
operator|.
name|asElementDecl
argument_list|()
expr_stmt|;
name|xmlDefaultValue
operator|=
name|element
operator|.
name|getDefaultValue
argument_list|()
expr_stmt|;
name|xsType
operator|=
name|element
operator|.
name|getType
argument_list|()
expr_stmt|;
name|isElement
operator|=
literal|true
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|f
operator|.
name|getPropertyInfo
argument_list|()
operator|.
name|getSchemaComponent
argument_list|()
operator|instanceof
name|XSAttributeUse
condition|)
block|{
name|XSAttributeUse
name|attributeUse
init|=
operator|(
name|XSAttributeUse
operator|)
name|f
operator|.
name|getPropertyInfo
argument_list|()
operator|.
name|getSchemaComponent
argument_list|()
decl_stmt|;
name|XSAttributeDecl
name|decl
init|=
name|attributeUse
operator|.
name|getDecl
argument_list|()
decl_stmt|;
name|xmlDefaultValue
operator|=
name|decl
operator|.
name|getDefaultValue
argument_list|()
expr_stmt|;
name|xsType
operator|=
name|decl
operator|.
name|getType
argument_list|()
expr_stmt|;
name|isRequiredAttr
operator|=
name|attributeUse
operator|.
name|isRequired
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|xsType
operator|!=
literal|null
operator|&&
name|xsType
operator|.
name|isComplexType
argument_list|()
operator|&&
name|containsDefaultValue
argument_list|(
name|outline
argument_list|,
name|f
argument_list|)
condition|)
block|{
name|String
name|varName
init|=
name|f
operator|.
name|getPropertyInfo
argument_list|()
operator|.
name|getName
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|JFieldVar
name|var
init|=
name|co
operator|.
name|implClass
operator|.
name|fields
argument_list|()
operator|.
name|get
argument_list|(
name|varName
argument_list|)
decl_stmt|;
if|if
condition|(
name|var
operator|!=
literal|null
condition|)
block|{
name|co
operator|.
name|implClass
operator|.
name|removeField
argument_list|(
name|var
argument_list|)
expr_stmt|;
name|JFieldVar
name|newVar
init|=
name|co
operator|.
name|implClass
operator|.
name|field
argument_list|(
name|var
operator|.
name|mods
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|,
name|var
operator|.
name|type
argument_list|()
argument_list|,
name|var
operator|.
name|name
argument_list|()
argument_list|,
name|JExpr
operator|.
name|_new
argument_list|(
name|f
operator|.
name|getRawType
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|newVar
operator|.
name|javadoc
argument_list|()
operator|.
name|append
argument_list|(
name|var
operator|.
name|javadoc
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|JExpression
name|dvExpr
init|=
literal|null
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|xmlDefaultValue
operator|&&
literal|null
operator|!=
name|xmlDefaultValue
operator|.
name|value
condition|)
block|{
name|dvExpr
operator|=
name|getDefaultValueExpression
argument_list|(
name|f
argument_list|,
name|co
argument_list|,
name|outline
argument_list|,
name|xsType
argument_list|,
name|isElement
argument_list|,
name|xmlDefaultValue
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|null
operator|==
name|dvExpr
operator|&&
operator|!
name|isElement
operator|&&
operator|!
name|isRequiredAttr
operator|&&
name|xsType
operator|!=
literal|null
operator|&&
name|xsType
operator|.
name|getOwnerSchema
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
literal|"http://www.w3.org/2001/XMLSchema"
operator|.
name|equals
argument_list|(
name|xsType
operator|.
name|getOwnerSchema
argument_list|()
operator|.
name|getTargetNamespace
argument_list|()
argument_list|)
condition|)
block|{
comment|//non-primitive attribute, may still be able to convert it, but need to do
comment|//a bunch more checks and changes to setters and isSet and such
name|dvExpr
operator|=
name|getDefaultValueExpression
argument_list|(
name|f
argument_list|,
name|co
argument_list|,
name|outline
argument_list|,
name|xsType
argument_list|,
name|isElement
argument_list|,
name|xmlDefaultValue
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|updateSetter
argument_list|(
name|co
argument_list|,
name|f
argument_list|,
name|co
operator|.
name|implClass
argument_list|)
expr_stmt|;
name|updateGetter
argument_list|(
name|co
argument_list|,
name|f
argument_list|,
name|co
operator|.
name|implClass
argument_list|,
name|dvExpr
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|null
operator|==
name|dvExpr
condition|)
block|{
continue|continue;
block|}
else|else
block|{
name|updateGetter
argument_list|(
name|co
argument_list|,
name|f
argument_list|,
name|co
operator|.
name|implClass
argument_list|,
name|dvExpr
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
literal|true
return|;
block|}
name|JExpression
name|getDefaultValueExpression
parameter_list|(
name|FieldOutline
name|f
parameter_list|,
name|ClassOutline
name|co
parameter_list|,
name|Outline
name|outline
parameter_list|,
name|XSType
name|xsType
parameter_list|,
name|boolean
name|isElement
parameter_list|,
name|XmlString
name|xmlDefaultValue
parameter_list|,
name|boolean
name|unbox
parameter_list|)
block|{
name|JType
name|type
init|=
name|f
operator|.
name|getRawType
argument_list|()
decl_stmt|;
name|String
name|typeName
init|=
name|type
operator|.
name|fullName
argument_list|()
decl_stmt|;
name|String
name|defaultValue
init|=
name|xmlDefaultValue
operator|==
literal|null
condition|?
literal|null
else|:
name|xmlDefaultValue
operator|.
name|value
decl_stmt|;
if|if
condition|(
name|defaultValue
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|JExpression
name|dv
init|=
literal|null
decl_stmt|;
if|if
condition|(
literal|"java.lang.Boolean"
operator|.
name|equals
argument_list|(
name|typeName
argument_list|)
operator|&&
name|isElement
condition|)
block|{
name|dv
operator|=
name|JExpr
operator|.
name|direct
argument_list|(
name|Boolean
operator|.
name|valueOf
argument_list|(
name|defaultValue
argument_list|)
condition|?
literal|"Boolean.TRUE"
else|:
literal|"Boolean.FALSE"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"java.lang.Byte"
operator|.
name|equals
argument_list|(
name|typeName
argument_list|)
operator|&&
name|isElement
condition|)
block|{
name|dv
operator|=
name|JExpr
operator|.
name|_new
argument_list|(
name|type
argument_list|)
operator|.
name|arg
argument_list|(
name|JExpr
operator|.
name|cast
argument_list|(
name|type
operator|.
name|unboxify
argument_list|()
argument_list|,
name|JExpr
operator|.
name|lit
argument_list|(
operator|new
name|Byte
argument_list|(
name|Short
operator|.
name|valueOf
argument_list|(
name|defaultValue
argument_list|)
operator|.
name|byteValue
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"java.lang.Double"
operator|.
name|equals
argument_list|(
name|typeName
argument_list|)
operator|&&
name|isElement
condition|)
block|{
name|dv
operator|=
name|JExpr
operator|.
name|_new
argument_list|(
name|type
argument_list|)
operator|.
name|arg
argument_list|(
name|JExpr
operator|.
name|lit
argument_list|(
operator|new
name|Double
argument_list|(
name|Double
operator|.
name|valueOf
argument_list|(
name|defaultValue
argument_list|)
operator|.
name|doubleValue
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"java.lang.Float"
operator|.
name|equals
argument_list|(
name|typeName
argument_list|)
operator|&&
name|isElement
condition|)
block|{
name|dv
operator|=
name|JExpr
operator|.
name|_new
argument_list|(
name|type
argument_list|)
operator|.
name|arg
argument_list|(
name|JExpr
operator|.
name|lit
argument_list|(
operator|new
name|Float
argument_list|(
name|Float
operator|.
name|valueOf
argument_list|(
name|defaultValue
argument_list|)
operator|.
name|floatValue
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"java.lang.Integer"
operator|.
name|equals
argument_list|(
name|typeName
argument_list|)
operator|&&
name|isElement
condition|)
block|{
name|dv
operator|=
name|JExpr
operator|.
name|_new
argument_list|(
name|type
argument_list|)
operator|.
name|arg
argument_list|(
name|JExpr
operator|.
name|lit
argument_list|(
operator|new
name|Integer
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|defaultValue
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"java.lang.Long"
operator|.
name|equals
argument_list|(
name|typeName
argument_list|)
operator|&&
name|isElement
condition|)
block|{
name|dv
operator|=
name|JExpr
operator|.
name|_new
argument_list|(
name|type
argument_list|)
operator|.
name|arg
argument_list|(
name|JExpr
operator|.
name|lit
argument_list|(
operator|new
name|Long
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|defaultValue
argument_list|)
operator|.
name|longValue
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"java.lang.Short"
operator|.
name|equals
argument_list|(
name|typeName
argument_list|)
operator|&&
name|isElement
condition|)
block|{
name|dv
operator|=
name|JExpr
operator|.
name|_new
argument_list|(
name|type
argument_list|)
operator|.
name|arg
argument_list|(
name|JExpr
operator|.
name|cast
argument_list|(
name|type
operator|.
name|unboxify
argument_list|()
argument_list|,
name|JExpr
operator|.
name|lit
argument_list|(
operator|new
name|Short
argument_list|(
name|Short
operator|.
name|valueOf
argument_list|(
name|defaultValue
argument_list|)
operator|.
name|shortValue
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"java.lang.String"
operator|.
name|equals
argument_list|(
name|type
operator|.
name|fullName
argument_list|()
argument_list|)
operator|&&
name|isElement
condition|)
block|{
name|dv
operator|=
name|JExpr
operator|.
name|lit
argument_list|(
name|defaultValue
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"java.math.BigInteger"
operator|.
name|equals
argument_list|(
name|type
operator|.
name|fullName
argument_list|()
argument_list|)
operator|&&
name|isElement
condition|)
block|{
name|dv
operator|=
name|JExpr
operator|.
name|_new
argument_list|(
name|type
argument_list|)
operator|.
name|arg
argument_list|(
name|JExpr
operator|.
name|lit
argument_list|(
name|defaultValue
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"java.math.BigDecimal"
operator|.
name|equals
argument_list|(
name|type
operator|.
name|fullName
argument_list|()
argument_list|)
operator|&&
name|isElement
condition|)
block|{
name|dv
operator|=
name|JExpr
operator|.
name|_new
argument_list|(
name|type
argument_list|)
operator|.
name|arg
argument_list|(
name|JExpr
operator|.
name|lit
argument_list|(
name|defaultValue
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"byte[]"
operator|.
name|equals
argument_list|(
name|type
operator|.
name|fullName
argument_list|()
argument_list|)
operator|&&
name|xsType
operator|.
name|isSimpleType
argument_list|()
operator|&&
name|isElement
condition|)
block|{
while|while
condition|(
operator|!
literal|"anySimpleType"
operator|.
name|equals
argument_list|(
name|xsType
operator|.
name|getBaseType
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|xsType
operator|=
name|xsType
operator|.
name|getBaseType
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
literal|"base64Binary"
operator|.
name|equals
argument_list|(
name|xsType
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|dv
operator|=
name|outline
operator|.
name|getCodeModel
argument_list|()
operator|.
name|ref
argument_list|(
name|DatatypeConverter
operator|.
name|class
argument_list|)
operator|.
name|staticInvoke
argument_list|(
literal|"parseBase64Binary"
argument_list|)
operator|.
name|arg
argument_list|(
name|defaultValue
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"hexBinary"
operator|.
name|equals
argument_list|(
name|xsType
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|dv
operator|=
name|JExpr
operator|.
name|_new
argument_list|(
name|outline
operator|.
name|getCodeModel
argument_list|()
operator|.
name|ref
argument_list|(
name|HexBinaryAdapter
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|invoke
argument_list|(
literal|"unmarshal"
argument_list|)
operator|.
name|arg
argument_list|(
name|defaultValue
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
literal|"javax.xml.namespace.QName"
operator|.
name|equals
argument_list|(
name|typeName
argument_list|)
condition|)
block|{
name|NamespaceContext
name|nsc
init|=
operator|new
name|NamespaceContextAdapter
argument_list|(
name|xmlDefaultValue
argument_list|)
decl_stmt|;
name|QName
name|qn
init|=
name|DatatypeConverter
operator|.
name|parseQName
argument_list|(
name|xmlDefaultValue
operator|.
name|value
argument_list|,
name|nsc
argument_list|)
decl_stmt|;
name|dv
operator|=
name|JExpr
operator|.
name|_new
argument_list|(
name|outline
operator|.
name|getCodeModel
argument_list|()
operator|.
name|ref
argument_list|(
name|QName
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
name|qn
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
operator|.
name|arg
argument_list|(
name|qn
operator|.
name|getLocalPart
argument_list|()
argument_list|)
operator|.
name|arg
argument_list|(
name|qn
operator|.
name|getPrefix
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"javax.xml.datatype.Duration"
operator|.
name|equals
argument_list|(
name|typeName
argument_list|)
condition|)
block|{
name|dv
operator|=
name|outline
operator|.
name|getCodeModel
argument_list|()
operator|.
name|ref
argument_list|(
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|jaxb
operator|.
name|DatatypeFactory
operator|.
name|class
argument_list|)
operator|.
name|staticInvoke
argument_list|(
literal|"createDuration"
argument_list|)
operator|.
name|arg
argument_list|(
name|defaultValue
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|instanceof
name|JDefinedClass
condition|)
block|{
name|JDefinedClass
name|cls
init|=
operator|(
name|JDefinedClass
operator|)
name|type
decl_stmt|;
if|if
condition|(
name|cls
operator|.
name|getClassType
argument_list|()
operator|==
name|ClassType
operator|.
name|ENUM
condition|)
block|{
name|dv
operator|=
name|cls
operator|.
name|staticInvoke
argument_list|(
literal|"fromValue"
argument_list|)
operator|.
name|arg
argument_list|(
name|defaultValue
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|unbox
condition|)
block|{
name|typeName
operator|=
name|type
operator|.
name|unboxify
argument_list|()
operator|.
name|fullName
argument_list|()
expr_stmt|;
if|if
condition|(
literal|"int"
operator|.
name|equals
argument_list|(
name|typeName
argument_list|)
condition|)
block|{
name|dv
operator|=
name|JExpr
operator|.
name|lit
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|defaultValue
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"long"
operator|.
name|equals
argument_list|(
name|typeName
argument_list|)
condition|)
block|{
name|dv
operator|=
name|JExpr
operator|.
name|lit
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|defaultValue
argument_list|)
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"short"
operator|.
name|equals
argument_list|(
name|typeName
argument_list|)
condition|)
block|{
name|dv
operator|=
name|JExpr
operator|.
name|lit
argument_list|(
name|Short
operator|.
name|valueOf
argument_list|(
name|defaultValue
argument_list|)
operator|.
name|shortValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"boolean"
operator|.
name|equals
argument_list|(
name|typeName
argument_list|)
condition|)
block|{
name|dv
operator|=
name|JExpr
operator|.
name|lit
argument_list|(
name|Boolean
operator|.
name|valueOf
argument_list|(
name|defaultValue
argument_list|)
operator|.
name|booleanValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"double"
operator|.
name|equals
argument_list|(
name|typeName
argument_list|)
condition|)
block|{
name|dv
operator|=
name|JExpr
operator|.
name|lit
argument_list|(
name|Double
operator|.
name|valueOf
argument_list|(
name|defaultValue
argument_list|)
operator|.
name|doubleValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"float"
operator|.
name|equals
argument_list|(
name|typeName
argument_list|)
condition|)
block|{
name|dv
operator|=
name|JExpr
operator|.
name|lit
argument_list|(
name|Float
operator|.
name|valueOf
argument_list|(
name|defaultValue
argument_list|)
operator|.
name|floatValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"byte"
operator|.
name|equals
argument_list|(
name|typeName
argument_list|)
condition|)
block|{
name|dv
operator|=
name|JExpr
operator|.
name|lit
argument_list|(
name|Byte
operator|.
name|valueOf
argument_list|(
name|defaultValue
argument_list|)
operator|.
name|byteValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|dv
operator|=
name|getDefaultValueExpression
argument_list|(
name|f
argument_list|,
name|co
argument_list|,
name|outline
argument_list|,
name|xsType
argument_list|,
literal|true
argument_list|,
name|xmlDefaultValue
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
comment|// TODO: GregorianCalendar, ...
return|return
name|dv
return|;
block|}
specifier|private
name|void
name|updateGetter
parameter_list|(
name|ClassOutline
name|co
parameter_list|,
name|FieldOutline
name|fo
parameter_list|,
name|JDefinedClass
name|dc
parameter_list|,
name|JExpression
name|dvExpr
parameter_list|,
name|boolean
name|remapRet
parameter_list|)
block|{
name|String
name|fieldName
init|=
name|fo
operator|.
name|getPropertyInfo
argument_list|()
operator|.
name|getName
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|JType
name|type
init|=
name|fo
operator|.
name|getRawType
argument_list|()
decl_stmt|;
name|String
name|typeName
init|=
name|type
operator|.
name|fullName
argument_list|()
decl_stmt|;
name|String
name|getterName
init|=
operator|(
literal|"java.lang.Boolean"
operator|.
name|equals
argument_list|(
name|typeName
argument_list|)
condition|?
literal|"is"
else|:
literal|"get"
operator|)
operator|+
name|fo
operator|.
name|getPropertyInfo
argument_list|()
operator|.
name|getName
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|JMethod
name|method
init|=
name|dc
operator|.
name|getMethod
argument_list|(
name|getterName
argument_list|,
operator|new
name|JType
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|JDocComment
name|doc
init|=
name|method
operator|.
name|javadoc
argument_list|()
decl_stmt|;
name|int
name|mods
init|=
name|method
operator|.
name|mods
argument_list|()
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|JType
name|mtype
init|=
name|method
operator|.
name|type
argument_list|()
decl_stmt|;
if|if
condition|(
name|remapRet
condition|)
block|{
name|mtype
operator|=
name|mtype
operator|.
name|unboxify
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isLoggable
argument_list|(
name|Level
operator|.
name|FINE
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|fine
argument_list|(
literal|"Updating getter: "
operator|+
name|getterName
argument_list|)
expr_stmt|;
block|}
comment|// remove existing method and define new one
name|dc
operator|.
name|methods
argument_list|()
operator|.
name|remove
argument_list|(
name|method
argument_list|)
expr_stmt|;
name|method
operator|=
name|dc
operator|.
name|method
argument_list|(
name|mods
argument_list|,
name|mtype
argument_list|,
name|getterName
argument_list|)
expr_stmt|;
name|method
operator|.
name|javadoc
argument_list|()
operator|.
name|append
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|JFieldRef
name|fr
init|=
name|JExpr
operator|.
name|ref
argument_list|(
name|fieldName
argument_list|)
decl_stmt|;
if|if
condition|(
name|dvExpr
operator|!=
literal|null
condition|)
block|{
name|JExpression
name|test
init|=
name|JOp
operator|.
name|eq
argument_list|(
name|JExpr
operator|.
name|_null
argument_list|()
argument_list|,
name|fr
argument_list|)
decl_stmt|;
name|JConditional
name|jc
init|=
name|method
operator|.
name|body
argument_list|()
operator|.
name|_if
argument_list|(
name|test
argument_list|)
decl_stmt|;
name|jc
operator|.
name|_then
argument_list|()
operator|.
name|_return
argument_list|(
name|dvExpr
argument_list|)
expr_stmt|;
name|jc
operator|.
name|_else
argument_list|()
operator|.
name|_return
argument_list|(
name|fr
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|method
operator|.
name|body
argument_list|()
operator|.
name|_return
argument_list|(
name|fr
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|updateSetter
parameter_list|(
name|ClassOutline
name|co
parameter_list|,
name|FieldOutline
name|fo
parameter_list|,
name|JDefinedClass
name|dc
parameter_list|)
block|{
name|String
name|fieldName
init|=
name|fo
operator|.
name|getPropertyInfo
argument_list|()
operator|.
name|getName
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|JType
name|type
init|=
name|fo
operator|.
name|getRawType
argument_list|()
decl_stmt|;
name|String
name|typeName
init|=
name|type
operator|.
name|fullName
argument_list|()
decl_stmt|;
name|String
name|getterName
init|=
operator|(
literal|"java.lang.Boolean"
operator|.
name|equals
argument_list|(
name|typeName
argument_list|)
condition|?
literal|"is"
else|:
literal|"get"
operator|)
operator|+
name|fo
operator|.
name|getPropertyInfo
argument_list|()
operator|.
name|getName
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|JMethod
name|method
init|=
name|dc
operator|.
name|getMethod
argument_list|(
name|getterName
argument_list|,
operator|new
name|JType
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|JType
name|mtype
init|=
name|method
operator|.
name|type
argument_list|()
decl_stmt|;
name|String
name|setterName
init|=
literal|"set"
operator|+
name|fo
operator|.
name|getPropertyInfo
argument_list|()
operator|.
name|getName
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|method
operator|=
name|dc
operator|.
name|getMethod
argument_list|(
name|setterName
argument_list|,
operator|new
name|JType
index|[]
block|{
name|mtype
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isLoggable
argument_list|(
name|Level
operator|.
name|FINE
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|fine
argument_list|(
literal|"Updating setter: "
operator|+
name|setterName
argument_list|)
expr_stmt|;
block|}
name|JDocComment
name|doc
init|=
name|method
operator|.
name|javadoc
argument_list|()
decl_stmt|;
comment|// remove existing method and define new one
name|dc
operator|.
name|methods
argument_list|()
operator|.
name|remove
argument_list|(
name|method
argument_list|)
expr_stmt|;
name|int
name|mods
init|=
name|method
operator|.
name|mods
argument_list|()
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|mtype
operator|=
name|mtype
operator|.
name|unboxify
argument_list|()
expr_stmt|;
name|method
operator|=
name|dc
operator|.
name|method
argument_list|(
name|mods
argument_list|,
name|method
operator|.
name|type
argument_list|()
argument_list|,
name|setterName
argument_list|)
expr_stmt|;
name|method
operator|.
name|javadoc
argument_list|()
operator|.
name|append
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|method
operator|.
name|param
argument_list|(
name|mtype
argument_list|,
literal|"value"
argument_list|)
expr_stmt|;
name|JFieldRef
name|fr
init|=
name|JExpr
operator|.
name|ref
argument_list|(
name|fieldName
argument_list|)
decl_stmt|;
name|method
operator|.
name|body
argument_list|()
operator|.
name|assign
argument_list|(
name|fr
argument_list|,
name|JExpr
operator|.
name|ref
argument_list|(
literal|"value"
argument_list|)
argument_list|)
expr_stmt|;
name|method
operator|=
name|dc
operator|.
name|method
argument_list|(
name|mods
argument_list|,
name|method
operator|.
name|type
argument_list|()
argument_list|,
literal|"unset"
operator|+
name|fo
operator|.
name|getPropertyInfo
argument_list|()
operator|.
name|getName
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|method
operator|.
name|body
argument_list|()
operator|.
name|assign
argument_list|(
name|fr
argument_list|,
name|JExpr
operator|.
name|_null
argument_list|()
argument_list|)
expr_stmt|;
name|method
operator|=
name|dc
operator|.
name|getMethod
argument_list|(
literal|"isSet"
operator|+
name|fo
operator|.
name|getPropertyInfo
argument_list|()
operator|.
name|getName
argument_list|(
literal|true
argument_list|)
argument_list|,
operator|new
name|JType
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|method
operator|!=
literal|null
condition|)
block|{
comment|//move to end
name|dc
operator|.
name|methods
argument_list|()
operator|.
name|remove
argument_list|(
name|method
argument_list|)
expr_stmt|;
name|dc
operator|.
name|methods
argument_list|()
operator|.
name|add
argument_list|(
name|method
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

