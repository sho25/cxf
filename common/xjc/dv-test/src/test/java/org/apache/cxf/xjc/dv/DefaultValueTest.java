begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|xjc
operator|.
name|dv
package|;
end_package

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigInteger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|DatatypeConverter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|adapters
operator|.
name|HexBinaryAdapter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|configuration
operator|.
name|foo
operator|.
name|Foo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|jaxme
operator|.
name|impl
operator|.
name|DatatypeConverterImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|DefaultValueTest
extends|extends
name|Assert
block|{
annotation|@
name|Test
specifier|public
name|void
name|testFooDefaultValues
parameter_list|()
throws|throws
name|Exception
block|{
name|DatatypeConverter
operator|.
name|setDatatypeConverter
argument_list|(
operator|new
name|DatatypeConverterImpl
argument_list|()
argument_list|)
expr_stmt|;
name|Foo
name|foo
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|configuration
operator|.
name|foo
operator|.
name|ObjectFactory
argument_list|()
operator|.
name|createFoo
argument_list|()
decl_stmt|;
comment|// verify default values
name|assertAttributeValuesWithoutDefault
argument_list|(
name|foo
argument_list|)
expr_stmt|;
name|assertDefaultAttributeValues
argument_list|(
name|foo
argument_list|)
expr_stmt|;
name|assertDefaultElementValues
argument_list|(
name|foo
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertDefaultAttributeValues
parameter_list|(
name|Foo
name|foo
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Unexpected value for attribute stringAttr"
argument_list|,
literal|"hello"
argument_list|,
name|foo
operator|.
name|getStringAttr
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Unexpected value for attribute booleanAttr"
argument_list|,
name|foo
operator|.
name|isBooleanAttr
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected value for attribute integerAttr"
argument_list|,
operator|new
name|BigInteger
argument_list|(
literal|"111"
argument_list|)
argument_list|,
name|foo
operator|.
name|getIntegerAttr
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected value for attribute intAttr"
argument_list|,
literal|112
argument_list|,
name|foo
operator|.
name|getIntAttr
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected value for attribute longAttr"
argument_list|,
literal|113L
argument_list|,
name|foo
operator|.
name|getLongAttr
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected value for attribute shortAttr"
argument_list|,
literal|114
argument_list|,
name|foo
operator|.
name|getShortAttr
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected value for attribute decimalAttr"
argument_list|,
operator|new
name|BigDecimal
argument_list|(
literal|"115"
argument_list|)
argument_list|,
name|foo
operator|.
name|getDecimalAttr
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected value for attribute floatAttr"
argument_list|,
operator|new
name|Float
argument_list|(
literal|116F
argument_list|)
argument_list|,
operator|new
name|Float
argument_list|(
name|foo
operator|.
name|getFloatAttr
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected value for attribute doubleAttr"
argument_list|,
operator|new
name|Double
argument_list|(
literal|117D
argument_list|)
argument_list|,
operator|new
name|Double
argument_list|(
name|foo
operator|.
name|getDoubleAttr
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected value for attribute byteAttr"
argument_list|,
literal|118
argument_list|,
name|foo
operator|.
name|getByteAttr
argument_list|()
argument_list|)
expr_stmt|;
name|byte
index|[]
name|expected
init|=
name|DatatypeConverter
operator|.
name|parseBase64Binary
argument_list|(
literal|"wxyz"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|effective
init|=
name|foo
operator|.
name|getBase64BinaryAttr
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected value for attribute base64BinaryAttr"
argument_list|,
name|expected
operator|.
name|length
argument_list|,
name|effective
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expected
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
literal|"Unexpected value for attribute base64BinaryAttr"
argument_list|,
name|expected
index|[
name|i
index|]
argument_list|,
name|effective
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|expected
operator|=
operator|new
name|HexBinaryAdapter
argument_list|()
operator|.
name|unmarshal
argument_list|(
literal|"aaaa"
argument_list|)
expr_stmt|;
name|effective
operator|=
name|foo
operator|.
name|getHexBinaryAttr
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected value for attribute hexBinaryAttr"
argument_list|,
name|expected
operator|.
name|length
argument_list|,
name|effective
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expected
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
literal|"Unexpected value for attribute hexBinaryAttr"
argument_list|,
name|expected
index|[
name|i
index|]
argument_list|,
name|effective
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|QName
name|qn
init|=
name|foo
operator|.
name|getQnameAttr
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected value for attribute qnameAttr"
argument_list|,
literal|"http://www.w3.org/2001/XMLSchema"
argument_list|,
name|qn
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected value for attribute qnameAttr"
argument_list|,
literal|"schema"
argument_list|,
name|qn
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected value for attribute unsignedIntAttr"
argument_list|,
literal|119L
argument_list|,
name|foo
operator|.
name|getUnsignedIntAttr
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected value for attribute unsignedShortAttr"
argument_list|,
literal|120
argument_list|,
name|foo
operator|.
name|getUnsignedShortAttr
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected value for attribute unsignedByteAttr"
argument_list|,
literal|121
argument_list|,
name|foo
operator|.
name|getUnsignedByteAttr
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected value for attribute durationAttr"
argument_list|,
literal|3
argument_list|,
name|foo
operator|.
name|getDurationAttr
argument_list|()
operator|.
name|getSeconds
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected value for attribute durationAttr"
argument_list|,
literal|0
argument_list|,
name|foo
operator|.
name|getDurationAttr
argument_list|()
operator|.
name|getHours
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * @param foo      */
specifier|private
name|void
name|assertAttributeValuesWithoutDefault
parameter_list|(
name|Foo
name|foo
parameter_list|)
block|{
name|assertNull
argument_list|(
literal|"Unexpected value for attribute stringAttrNoDefault"
argument_list|,
name|foo
operator|.
name|getStringAttrNoDefault
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"Unexpected value for attribute booleanAttrNoDefault"
argument_list|,
name|foo
operator|.
name|isBooleanAttrNoDefault
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"Unexpected value for attribute integerAttrNoDefault"
argument_list|,
name|foo
operator|.
name|getIntegerAttrNoDefault
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"Unexpected value for attribute intAttrNoDefault"
argument_list|,
name|foo
operator|.
name|getIntAttrNoDefault
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"Unexpected value for attribute longAttrNoDefault"
argument_list|,
name|foo
operator|.
name|getLongAttrNoDefault
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"Unexpected value for attribute shortAttrNoDefault"
argument_list|,
name|foo
operator|.
name|getShortAttrNoDefault
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"Unexpected value for attribute decimalAttrNoDefault"
argument_list|,
name|foo
operator|.
name|getDecimalAttrNoDefault
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"Unexpected value for attribute floatAttrNoDefault"
argument_list|,
name|foo
operator|.
name|getFloatAttrNoDefault
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"Unexpected value for attribute doubleAttrNoDefault"
argument_list|,
name|foo
operator|.
name|getDoubleAttrNoDefault
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"Unexpected value for attribute byteAttrNoDefault"
argument_list|,
name|foo
operator|.
name|getByteAttrNoDefault
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"Unexpected value for attribute base64BinaryAttrNoDefault"
argument_list|,
name|foo
operator|.
name|getBase64BinaryAttrNoDefault
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"Unexpected value for attribute hexBinaryAttrNoDefault"
argument_list|,
name|foo
operator|.
name|getHexBinaryAttrNoDefault
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"Unexpected value for attribute qnameAttrNoDefault"
argument_list|,
name|foo
operator|.
name|getQnameAttrNoDefault
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"Unexpected value for attribute unsignedIntAttrNoDefault"
argument_list|,
name|foo
operator|.
name|getUnsignedIntAttrNoDefault
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"Unexpected value for attribute unsignedShortAttrNoDefault"
argument_list|,
name|foo
operator|.
name|getUnsignedShortAttrNoDefault
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"Unexpected value for attribute unsignedByteAttrNoDefault"
argument_list|,
name|foo
operator|.
name|getUnsignedByteAttrNoDefault
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"Unexpected value for attribute durationAttrNoDefault"
argument_list|,
name|foo
operator|.
name|getDurationAttrNoDefault
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertDefaultElementValues
parameter_list|(
name|Foo
name|foo
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Unexpected value for element pageColor.background"
argument_list|,
literal|"red"
argument_list|,
name|foo
operator|.
name|getPageColor
argument_list|()
operator|.
name|getBackground
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected value for element pageColor.foreground"
argument_list|,
literal|"blue"
argument_list|,
name|foo
operator|.
name|getPageColor
argument_list|()
operator|.
name|getForeground
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected value for element driving"
argument_list|,
literal|"LeftTurn"
argument_list|,
name|foo
operator|.
name|getDriving
argument_list|()
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected value for element stringElem"
argument_list|,
literal|"hello"
argument_list|,
name|foo
operator|.
name|getStringElem
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Unexpected value for element booleanElem"
argument_list|,
name|foo
operator|.
name|isBooleanElem
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected value for element integerElem"
argument_list|,
operator|new
name|BigInteger
argument_list|(
literal|"11"
argument_list|)
argument_list|,
name|foo
operator|.
name|getIntegerElem
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected value for element intElem"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|12
argument_list|)
argument_list|,
name|foo
operator|.
name|getIntElem
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected value for element longElem"
argument_list|,
operator|new
name|Long
argument_list|(
literal|13L
argument_list|)
argument_list|,
name|foo
operator|.
name|getLongElem
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected value for element shortElem"
argument_list|,
operator|new
name|Short
argument_list|(
operator|(
name|short
operator|)
literal|14
argument_list|)
argument_list|,
name|foo
operator|.
name|getShortElem
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected value for element decimalElem"
argument_list|,
operator|new
name|BigDecimal
argument_list|(
literal|"15"
argument_list|)
argument_list|,
name|foo
operator|.
name|getDecimalElem
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected value for element floatElem"
argument_list|,
operator|new
name|Float
argument_list|(
literal|16F
argument_list|)
argument_list|,
name|foo
operator|.
name|getFloatElem
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected value for element doubleElem"
argument_list|,
operator|new
name|Double
argument_list|(
literal|17D
argument_list|)
argument_list|,
name|foo
operator|.
name|getDoubleElem
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected value for element byteElem"
argument_list|,
operator|new
name|Byte
argument_list|(
operator|(
name|byte
operator|)
literal|18
argument_list|)
argument_list|,
name|foo
operator|.
name|getByteElem
argument_list|()
argument_list|)
expr_stmt|;
name|byte
index|[]
name|expected
init|=
name|DatatypeConverter
operator|.
name|parseBase64Binary
argument_list|(
literal|"abcdefgh"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|effective
init|=
name|foo
operator|.
name|getBase64BinaryElem
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected value for element base64BinaryElem"
argument_list|,
name|expected
operator|.
name|length
argument_list|,
name|effective
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expected
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
literal|"Unexpected value for element base64BinaryElem"
argument_list|,
name|expected
index|[
name|i
index|]
argument_list|,
name|effective
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|expected
operator|=
operator|new
name|HexBinaryAdapter
argument_list|()
operator|.
name|unmarshal
argument_list|(
literal|"ffff"
argument_list|)
expr_stmt|;
name|effective
operator|=
name|foo
operator|.
name|getHexBinaryElem
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected value for element hexBinaryElem"
argument_list|,
name|expected
operator|.
name|length
argument_list|,
name|effective
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expected
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
literal|"Unexpected value for element hexBinaryElem"
argument_list|,
name|expected
index|[
name|i
index|]
argument_list|,
name|effective
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|QName
name|qn
init|=
name|foo
operator|.
name|getQnameElem
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected value for element qnameElem"
argument_list|,
literal|"http://www.w3.org/2001/XMLSchema"
argument_list|,
name|qn
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected value for element qnameElem"
argument_list|,
literal|"string"
argument_list|,
name|qn
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected value for element unsignedIntElem"
argument_list|,
operator|new
name|Long
argument_list|(
literal|19L
argument_list|)
argument_list|,
name|foo
operator|.
name|getUnsignedIntElem
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected value for element unsignedShortElem"
argument_list|,
operator|new
name|Integer
argument_list|(
literal|20
argument_list|)
argument_list|,
name|foo
operator|.
name|getUnsignedShortElem
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected value for element unsignedByteElem"
argument_list|,
operator|new
name|Short
argument_list|(
operator|(
name|short
operator|)
literal|21
argument_list|)
argument_list|,
name|foo
operator|.
name|getUnsignedByteElem
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected value for element durationElem"
argument_list|,
literal|0
argument_list|,
name|foo
operator|.
name|getDurationElem
argument_list|()
operator|.
name|getSeconds
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected value for element durationElem"
argument_list|,
literal|3
argument_list|,
name|foo
operator|.
name|getDurationElem
argument_list|()
operator|.
name|getHours
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

