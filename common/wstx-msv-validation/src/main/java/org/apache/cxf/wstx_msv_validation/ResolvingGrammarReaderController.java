begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|wstx_msv_validation
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|InputSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|Locator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|msv
operator|.
name|reader
operator|.
name|GrammarReaderController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_comment
comment|/**  * Catch error messages and resolve schema locations.   */
end_comment

begin_class
specifier|public
class|class
name|ResolvingGrammarReaderController
implements|implements
name|GrammarReaderController
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|ResolvingGrammarReaderController
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|InputSource
argument_list|>
name|sources
decl_stmt|;
specifier|public
name|ResolvingGrammarReaderController
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|InputSource
argument_list|>
name|sources
parameter_list|)
block|{
name|this
operator|.
name|sources
operator|=
name|sources
expr_stmt|;
block|}
specifier|public
name|void
name|error
parameter_list|(
name|Locator
index|[]
name|locs
parameter_list|,
name|String
name|msg
parameter_list|,
name|Exception
name|nestedException
parameter_list|)
block|{
comment|/* perhaps throw ? */
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|SEVERE
argument_list|,
name|msg
argument_list|,
name|nestedException
argument_list|)
expr_stmt|;
for|for
control|(
name|Locator
name|loc
range|:
name|locs
control|)
block|{
name|LOG
operator|.
name|severe
argument_list|(
literal|"in "
operator|+
name|loc
operator|.
name|getSystemId
argument_list|()
operator|+
literal|" "
operator|+
name|loc
operator|.
name|getLineNumber
argument_list|()
operator|+
literal|":"
operator|+
name|loc
operator|.
name|getColumnNumber
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|warning
parameter_list|(
name|Locator
index|[]
name|locs
parameter_list|,
name|String
name|errorMessage
parameter_list|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
name|errorMessage
argument_list|)
expr_stmt|;
for|for
control|(
name|Locator
name|loc
range|:
name|locs
control|)
block|{
name|LOG
operator|.
name|warning
argument_list|(
literal|"in "
operator|+
name|loc
operator|.
name|getSystemId
argument_list|()
operator|+
literal|" "
operator|+
name|loc
operator|.
name|getLineNumber
argument_list|()
operator|+
literal|":"
operator|+
name|loc
operator|.
name|getColumnNumber
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|InputSource
name|resolveEntity
parameter_list|(
name|String
name|publicId
parameter_list|,
name|String
name|systemId
parameter_list|)
throws|throws
name|SAXException
throws|,
name|IOException
block|{
comment|// CXF never trucks with publicId's.
return|return
name|sources
operator|.
name|get
argument_list|(
name|systemId
argument_list|)
return|;
block|}
block|}
end_class

end_unit

