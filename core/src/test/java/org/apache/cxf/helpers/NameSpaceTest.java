begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
specifier|public
class|class
name|NameSpaceTest
block|{
specifier|private
specifier|static
specifier|final
name|String
name|MY_URL1
init|=
literal|"http://test.apache.org/testurl1"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|MY_URL2
init|=
literal|"http://test.apache.org/testurl2"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|MY_CUSTOM_URL
init|=
literal|"http://test.apache.org/custom-prefix-url"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|MY_OWN_PREFIX
init|=
literal|"myown-prefix"
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testNSStackOperations
parameter_list|()
throws|throws
name|Exception
block|{
name|NSStack
name|nsStackObj
init|=
operator|new
name|NSStack
argument_list|()
decl_stmt|;
name|nsStackObj
operator|.
name|push
argument_list|()
expr_stmt|;
name|nsStackObj
operator|.
name|add
argument_list|(
name|MY_URL1
argument_list|)
expr_stmt|;
name|nsStackObj
operator|.
name|add
argument_list|(
name|MY_OWN_PREFIX
argument_list|,
name|MY_CUSTOM_URL
argument_list|)
expr_stmt|;
name|nsStackObj
operator|.
name|add
argument_list|(
name|MY_URL2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|MY_URL1
argument_list|,
name|nsStackObj
operator|.
name|getURI
argument_list|(
literal|"ns1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|MY_CUSTOM_URL
argument_list|,
name|nsStackObj
operator|.
name|getURI
argument_list|(
name|MY_OWN_PREFIX
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|MY_URL2
argument_list|,
name|nsStackObj
operator|.
name|getURI
argument_list|(
literal|"ns2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|nsStackObj
operator|.
name|getURI
argument_list|(
literal|"non-existent-prefix"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ns2"
argument_list|,
name|nsStackObj
operator|.
name|getPrefix
argument_list|(
name|MY_URL2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|MY_OWN_PREFIX
argument_list|,
name|nsStackObj
operator|.
name|getPrefix
argument_list|(
name|MY_CUSTOM_URL
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ns1"
argument_list|,
name|nsStackObj
operator|.
name|getPrefix
argument_list|(
name|MY_URL1
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|nsStackObj
operator|.
name|getPrefix
argument_list|(
literal|"non-existent-prefix"
argument_list|)
argument_list|)
expr_stmt|;
name|nsStackObj
operator|.
name|pop
argument_list|()
expr_stmt|;
name|assertNull
argument_list|(
name|nsStackObj
operator|.
name|getPrefix
argument_list|(
literal|"non-existent-prefix"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|nsStackObj
operator|.
name|getPrefix
argument_list|(
name|MY_CUSTOM_URL
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNSDeclOperaions
parameter_list|()
throws|throws
name|Exception
block|{
name|NSDecl
name|nsDecl1
init|=
operator|new
name|NSDecl
argument_list|(
name|MY_OWN_PREFIX
argument_list|,
name|MY_CUSTOM_URL
argument_list|)
decl_stmt|;
name|NSDecl
name|nsDecl2
init|=
operator|new
name|NSDecl
argument_list|(
literal|"ns2"
argument_list|,
name|MY_URL2
argument_list|)
decl_stmt|;
name|NSDecl
name|nsDecl3
init|=
operator|new
name|NSDecl
argument_list|(
name|MY_OWN_PREFIX
argument_list|,
name|MY_CUSTOM_URL
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|nsDecl2
operator|.
name|equals
argument_list|(
name|nsDecl1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|nsDecl3
operator|.
name|equals
argument_list|(
name|nsDecl1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

