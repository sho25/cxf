begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|bus
operator|.
name|extension
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
specifier|public
class|class
name|TextExtensionFragmentParserTest
extends|extends
name|Assert
block|{
annotation|@
name|Test
specifier|public
name|void
name|testGetExtensions
parameter_list|()
throws|throws
name|IOException
block|{
name|InputStream
name|is
init|=
name|TextExtensionFragmentParserTest
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"extension2.txt"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Extension
argument_list|>
name|extensions
init|=
operator|new
name|TextExtensionFragmentParser
argument_list|(
literal|null
argument_list|)
operator|.
name|getExtensions
argument_list|(
name|is
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected number of Extension elements."
argument_list|,
literal|3
argument_list|,
name|extensions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Extension
name|e
init|=
name|extensions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Extension is deferred."
argument_list|,
operator|!
name|e
operator|.
name|isDeferred
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected class name."
argument_list|,
literal|"org.apache.cxf.foo.FooImpl"
argument_list|,
name|e
operator|.
name|getClassname
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected number of namespace elements."
argument_list|,
literal|0
argument_list|,
name|e
operator|.
name|getNamespaces
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|=
name|extensions
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Extension is not deferred."
argument_list|,
name|e
operator|.
name|isDeferred
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected implementation class name."
argument_list|,
literal|"java.lang.Boolean"
argument_list|,
name|e
operator|.
name|getClassname
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"Interface should be null"
argument_list|,
name|e
operator|.
name|getInterfaceName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected number of namespace elements."
argument_list|,
literal|0
argument_list|,
name|e
operator|.
name|getNamespaces
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

