begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|workqueue
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|RejectedExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|Condition
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|AutomaticWorkQueueTest
extends|extends
name|Assert
block|{
specifier|public
specifier|static
specifier|final
name|int
name|UNBOUNDED_MAX_QUEUE_SIZE
init|=
operator|-
literal|1
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|UNBOUNDED_HIGH_WATER_MARK
init|=
operator|-
literal|1
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|UNBOUNDED_LOW_WATER_MARK
init|=
operator|-
literal|1
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|INITIAL_SIZE
init|=
literal|2
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_MAX_QUEUE_SIZE
init|=
literal|10
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_HIGH_WATER_MARK
init|=
literal|10
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_LOW_WATER_MARK
init|=
literal|1
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|long
name|DEFAULT_DEQUEUE_TIMEOUT
init|=
literal|2
operator|*
literal|60
operator|*
literal|1000L
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|TIMEOUT
init|=
literal|100
decl_stmt|;
name|AutomaticWorkQueueImpl
name|workqueue
decl_stmt|;
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|workqueue
operator|!=
literal|null
condition|)
block|{
name|workqueue
operator|.
name|shutdown
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|workqueue
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUnboundedConstructor
parameter_list|()
block|{
name|workqueue
operator|=
operator|new
name|AutomaticWorkQueueImpl
argument_list|(
name|UNBOUNDED_MAX_QUEUE_SIZE
argument_list|,
name|INITIAL_SIZE
argument_list|,
name|UNBOUNDED_HIGH_WATER_MARK
argument_list|,
name|UNBOUNDED_LOW_WATER_MARK
argument_list|,
name|DEFAULT_DEQUEUE_TIMEOUT
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|workqueue
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|AutomaticWorkQueueImpl
operator|.
name|DEFAULT_MAX_QUEUE_SIZE
argument_list|,
name|workqueue
operator|.
name|getMaxSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|UNBOUNDED_HIGH_WATER_MARK
argument_list|,
name|workqueue
operator|.
name|getHighWaterMark
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|UNBOUNDED_LOW_WATER_MARK
argument_list|,
name|workqueue
operator|.
name|getLowWaterMark
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testConstructor
parameter_list|()
block|{
name|workqueue
operator|=
operator|new
name|AutomaticWorkQueueImpl
argument_list|(
name|DEFAULT_MAX_QUEUE_SIZE
argument_list|,
name|INITIAL_SIZE
argument_list|,
name|DEFAULT_HIGH_WATER_MARK
argument_list|,
name|DEFAULT_LOW_WATER_MARK
argument_list|,
name|DEFAULT_DEQUEUE_TIMEOUT
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|workqueue
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DEFAULT_MAX_QUEUE_SIZE
argument_list|,
name|workqueue
operator|.
name|getMaxSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DEFAULT_HIGH_WATER_MARK
argument_list|,
name|workqueue
operator|.
name|getHighWaterMark
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DEFAULT_LOW_WATER_MARK
argument_list|,
name|workqueue
operator|.
name|getLowWaterMark
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEnqueueWithTimeout
parameter_list|()
throws|throws
name|Exception
block|{
name|workqueue
operator|=
operator|new
name|AutomaticWorkQueueImpl
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|,
name|DEFAULT_DEQUEUE_TIMEOUT
argument_list|)
expr_stmt|;
specifier|final
name|Object
name|lock
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
name|int
name|x
init|=
literal|0
decl_stmt|;
try|try
block|{
synchronized|synchronized
init|(
name|lock
init|)
block|{
for|for
control|(
name|x
operator|=
literal|0
init|;
name|x
operator|<
literal|6
condition|;
name|x
operator|++
control|)
block|{
name|workqueue
operator|.
name|execute
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
synchronized|synchronized
init|(
name|lock
init|)
block|{
comment|//just need to wait until all the runnables are created and enqueued and such.
block|}
block|}
block|}
argument_list|,
literal|50
argument_list|)
expr_stmt|;
block|}
block|}
name|fail
argument_list|(
literal|"Should have failed with a RejectedExecutionException as 5th should not be queuable"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RejectedExecutionException
name|rex
parameter_list|)
block|{
comment|// Just to fix the test error in a slow CI windows box
name|assertTrue
argument_list|(
literal|"Expect RejectedExecutionException when the work queue is full."
argument_list|,
name|x
operator|<=
literal|4
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEnqueue
parameter_list|()
block|{
name|workqueue
operator|=
operator|new
name|AutomaticWorkQueueImpl
argument_list|(
name|DEFAULT_MAX_QUEUE_SIZE
argument_list|,
name|INITIAL_SIZE
argument_list|,
name|DEFAULT_HIGH_WATER_MARK
argument_list|,
name|DEFAULT_LOW_WATER_MARK
argument_list|,
name|DEFAULT_DEQUEUE_TIMEOUT
argument_list|)
expr_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// ignore
block|}
comment|// We haven't enqueued anything yet, so should be zero
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|workqueue
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|workqueue
operator|.
name|getPoolSize
argument_list|()
argument_list|)
expr_stmt|;
comment|// Check that no threads are working yet, as we haven't enqueued
comment|// anything yet.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|workqueue
operator|.
name|getActiveCount
argument_list|()
argument_list|)
expr_stmt|;
name|workqueue
operator|.
name|execute
argument_list|(
operator|new
name|TestWorkItem
argument_list|()
argument_list|,
name|TIMEOUT
argument_list|)
expr_stmt|;
comment|// Don't check the PoolSize as different JDK return different value
comment|//assertEquals(INITIAL_SIZE, workqueue.getPoolSize());
comment|// Give threads a chance to dequeue (5sec max)
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|workqueue
operator|.
name|getSize
argument_list|()
operator|!=
literal|0
operator|&&
name|i
operator|++
operator|<
literal|50
condition|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
comment|// ignore
block|}
block|}
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|workqueue
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEnqueueImmediate
parameter_list|()
block|{
name|workqueue
operator|=
operator|new
name|AutomaticWorkQueueImpl
argument_list|(
name|DEFAULT_MAX_QUEUE_SIZE
argument_list|,
name|INITIAL_SIZE
argument_list|,
name|DEFAULT_HIGH_WATER_MARK
argument_list|,
name|DEFAULT_LOW_WATER_MARK
argument_list|,
name|DEFAULT_DEQUEUE_TIMEOUT
argument_list|)
expr_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// ignore
block|}
comment|// We haven't enqueued anything yet, so should there shouldn't be
comment|// any items on the queue, the thread pool should still be the
comment|// initial size and no threads should be working
comment|//
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|workqueue
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|workqueue
operator|.
name|getPoolSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|workqueue
operator|.
name|getActiveCount
argument_list|()
argument_list|)
expr_stmt|;
name|BlockingWorkItem
index|[]
name|workItems
init|=
operator|new
name|BlockingWorkItem
index|[
name|DEFAULT_HIGH_WATER_MARK
index|]
decl_stmt|;
name|BlockingWorkItem
index|[]
name|fillers
init|=
operator|new
name|BlockingWorkItem
index|[
name|DEFAULT_MAX_QUEUE_SIZE
index|]
decl_stmt|;
try|try
block|{
comment|// fill up the queue, then exhaust the thread pool
comment|//
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|DEFAULT_HIGH_WATER_MARK
condition|;
name|i
operator|++
control|)
block|{
name|workItems
index|[
name|i
index|]
operator|=
operator|new
name|BlockingWorkItem
argument_list|()
expr_stmt|;
try|try
block|{
name|workqueue
operator|.
name|execute
argument_list|(
name|workItems
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RejectedExecutionException
name|ex
parameter_list|)
block|{
name|fail
argument_list|(
literal|"failed on item["
operator|+
name|i
operator|+
literal|"] with: "
operator|+
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
name|int
name|max
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|workqueue
operator|.
name|getActiveCount
argument_list|()
operator|<
name|DEFAULT_HIGH_WATER_MARK
operator|&&
name|workqueue
operator|.
name|getSize
argument_list|()
operator|>
literal|0
operator|&&
name|max
operator|<
literal|10
condition|)
block|{
try|try
block|{
comment|//wait up to a second for all the threads to start and grab items
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|max
operator|++
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ex
parameter_list|)
block|{
comment|// ignore
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|DEFAULT_MAX_QUEUE_SIZE
condition|;
name|i
operator|++
control|)
block|{
name|fillers
index|[
name|i
index|]
operator|=
operator|new
name|BlockingWorkItem
argument_list|()
expr_stmt|;
try|try
block|{
name|workqueue
operator|.
name|execute
argument_list|(
name|fillers
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RejectedExecutionException
name|ex
parameter_list|)
block|{
name|fail
argument_list|(
literal|"failed on filler["
operator|+
name|i
operator|+
literal|"] with: "
operator|+
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
comment|// give threads a chance to start executing the work items
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|250
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ex
parameter_list|)
block|{
comment|// ignore
block|}
name|assertTrue
argument_list|(
name|workqueue
operator|.
name|toString
argument_list|()
argument_list|,
name|workqueue
operator|.
name|isFull
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|workqueue
operator|.
name|toString
argument_list|()
argument_list|,
name|DEFAULT_HIGH_WATER_MARK
argument_list|,
name|workqueue
operator|.
name|getPoolSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|workqueue
operator|.
name|toString
argument_list|()
argument_list|,
name|DEFAULT_HIGH_WATER_MARK
argument_list|,
name|workqueue
operator|.
name|getActiveCount
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|workqueue
operator|.
name|execute
argument_list|(
operator|new
name|BlockingWorkItem
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"workitem should not have been accepted."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RejectedExecutionException
name|ex
parameter_list|)
block|{
comment|// ignore
block|}
comment|// unblock one work item and allow thread to dequeue next item
name|workItems
index|[
literal|0
index|]
operator|.
name|unblock
argument_list|()
expr_stmt|;
name|boolean
name|accepted
init|=
literal|false
decl_stmt|;
name|workItems
index|[
literal|0
index|]
operator|=
operator|new
name|BlockingWorkItem
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|20
operator|&&
operator|!
name|accepted
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ex
parameter_list|)
block|{
comment|// ignore
block|}
try|try
block|{
name|workqueue
operator|.
name|execute
argument_list|(
name|workItems
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|accepted
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RejectedExecutionException
name|ex
parameter_list|)
block|{
comment|// ignore
block|}
block|}
name|assertTrue
argument_list|(
name|accepted
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|DEFAULT_HIGH_WATER_MARK
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|workItems
index|[
name|i
index|]
operator|!=
literal|null
condition|)
block|{
name|workItems
index|[
name|i
index|]
operator|.
name|unblock
argument_list|()
expr_stmt|;
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|DEFAULT_MAX_QUEUE_SIZE
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|fillers
index|[
name|i
index|]
operator|!=
literal|null
condition|)
block|{
name|fillers
index|[
name|i
index|]
operator|.
name|unblock
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDeadLockEnqueueLoads
parameter_list|()
block|{
name|workqueue
operator|=
operator|new
name|AutomaticWorkQueueImpl
argument_list|(
literal|500
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|,
name|DEFAULT_DEQUEUE_TIMEOUT
argument_list|)
expr_stmt|;
name|DeadLockThread
name|dead
init|=
operator|new
name|DeadLockThread
argument_list|(
name|workqueue
argument_list|,
literal|200
argument_list|,
literal|10L
argument_list|)
decl_stmt|;
name|checkDeadLock
argument_list|(
name|dead
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNonDeadLockEnqueueLoads
parameter_list|()
block|{
name|workqueue
operator|=
operator|new
name|AutomaticWorkQueueImpl
argument_list|(
name|UNBOUNDED_MAX_QUEUE_SIZE
argument_list|,
name|INITIAL_SIZE
argument_list|,
name|UNBOUNDED_HIGH_WATER_MARK
argument_list|,
name|UNBOUNDED_LOW_WATER_MARK
argument_list|,
name|DEFAULT_DEQUEUE_TIMEOUT
argument_list|)
expr_stmt|;
name|DeadLockThread
name|dead
init|=
operator|new
name|DeadLockThread
argument_list|(
name|workqueue
argument_list|,
literal|200
argument_list|)
decl_stmt|;
name|checkDeadLock
argument_list|(
name|dead
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSchedule
parameter_list|()
throws|throws
name|Exception
block|{
name|workqueue
operator|=
operator|new
name|AutomaticWorkQueueImpl
argument_list|(
name|UNBOUNDED_MAX_QUEUE_SIZE
argument_list|,
name|INITIAL_SIZE
argument_list|,
name|UNBOUNDED_HIGH_WATER_MARK
argument_list|,
name|UNBOUNDED_LOW_WATER_MARK
argument_list|,
name|DEFAULT_DEQUEUE_TIMEOUT
argument_list|)
expr_stmt|;
specifier|final
name|Lock
name|runLock
init|=
operator|new
name|ReentrantLock
argument_list|()
decl_stmt|;
specifier|final
name|Condition
name|runCondition
init|=
name|runLock
operator|.
name|newCondition
argument_list|()
decl_stmt|;
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|Runnable
name|doNothing
init|=
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
name|runLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|runCondition
operator|.
name|signal
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|runLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
name|workqueue
operator|.
name|schedule
argument_list|(
name|doNothing
argument_list|,
literal|5000
argument_list|)
expr_stmt|;
name|runLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|runCondition
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|runLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"expected delay"
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
operator|>=
literal|4950
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testThreadPoolShrink
parameter_list|()
block|{
name|workqueue
operator|=
operator|new
name|AutomaticWorkQueueImpl
argument_list|(
name|UNBOUNDED_MAX_QUEUE_SIZE
argument_list|,
literal|20
argument_list|,
literal|20
argument_list|,
literal|10
argument_list|,
literal|100L
argument_list|)
expr_stmt|;
name|DeadLockThread
name|dead
init|=
operator|new
name|DeadLockThread
argument_list|(
name|workqueue
argument_list|,
literal|1000
argument_list|,
literal|5L
argument_list|)
decl_stmt|;
name|checkDeadLock
argument_list|(
name|dead
argument_list|)
expr_stmt|;
comment|// Give threads a chance to dequeue (5sec max)
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|workqueue
operator|.
name|getPoolSize
argument_list|()
operator|>
literal|10
operator|&&
name|i
operator|++
operator|<
literal|50
condition|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
comment|// ignore
block|}
block|}
comment|//        if (System.getProperty("java.version").startsWith("1.6")
comment|//            || System.getProperty("java.vendor").startsWith("IBM")) {
comment|//            // ThreadPoolExecutor in 1.6 is broken.  The size can get below
comment|//            // the low watermark.  Oddly, this also appears to happen with
comment|//            // the ibm jdk.
name|assertTrue
argument_list|(
name|workqueue
operator|.
name|getLowWaterMark
argument_list|()
operator|>=
name|workqueue
operator|.
name|getPoolSize
argument_list|()
argument_list|)
expr_stmt|;
comment|//        } else {
comment|//            assertEquals(workqueue.getLowWaterMark(), workqueue.getPoolSize());
comment|//        }
block|}
annotation|@
name|Test
specifier|public
name|void
name|testThreadPoolShrinkUnbounded
parameter_list|()
throws|throws
name|Exception
block|{
name|workqueue
operator|=
operator|new
name|AutomaticWorkQueueImpl
argument_list|(
name|UNBOUNDED_MAX_QUEUE_SIZE
argument_list|,
name|INITIAL_SIZE
argument_list|,
name|UNBOUNDED_HIGH_WATER_MARK
argument_list|,
name|DEFAULT_LOW_WATER_MARK
argument_list|,
literal|100L
argument_list|)
expr_stmt|;
name|DeadLockThread
name|dead
init|=
operator|new
name|DeadLockThread
argument_list|(
name|workqueue
argument_list|,
literal|1000
argument_list|,
literal|5L
argument_list|)
decl_stmt|;
name|checkDeadLock
argument_list|(
name|dead
argument_list|)
expr_stmt|;
comment|// Give threads a chance to dequeue (5sec max)
name|int
name|i
init|=
literal|0
decl_stmt|;
name|int
name|last
init|=
name|workqueue
operator|.
name|getPoolSize
argument_list|()
decl_stmt|;
while|while
condition|(
name|workqueue
operator|.
name|getPoolSize
argument_list|()
operator|>
name|DEFAULT_LOW_WATER_MARK
operator|&&
name|i
operator|++
operator|<
literal|50
condition|)
block|{
if|if
condition|(
name|last
operator|!=
name|workqueue
operator|.
name|getPoolSize
argument_list|()
condition|)
block|{
name|last
operator|=
name|workqueue
operator|.
name|getPoolSize
argument_list|()
expr_stmt|;
name|i
operator|=
literal|0
expr_stmt|;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
name|int
name|sz
init|=
name|workqueue
operator|.
name|getPoolSize
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"threads_total(): "
operator|+
name|sz
argument_list|,
name|workqueue
operator|.
name|getPoolSize
argument_list|()
operator|<=
name|DEFAULT_LOW_WATER_MARK
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testShutdown
parameter_list|()
block|{
name|workqueue
operator|=
operator|new
name|AutomaticWorkQueueImpl
argument_list|(
name|DEFAULT_MAX_QUEUE_SIZE
argument_list|,
name|INITIAL_SIZE
argument_list|,
name|INITIAL_SIZE
argument_list|,
name|INITIAL_SIZE
argument_list|,
literal|500
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|workqueue
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|DeadLockThread
name|dead
init|=
operator|new
name|DeadLockThread
argument_list|(
name|workqueue
argument_list|,
literal|10
argument_list|,
literal|5L
argument_list|)
decl_stmt|;
name|dead
operator|.
name|start
argument_list|()
expr_stmt|;
name|checkCompleted
argument_list|(
name|dead
argument_list|)
expr_stmt|;
name|workqueue
operator|.
name|shutdown
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// Give threads a chance to shutdown (1 sec max)
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|20
operator|&&
operator|(
name|workqueue
operator|.
name|getSize
argument_list|()
operator|>
literal|0
operator|||
name|workqueue
operator|.
name|getPoolSize
argument_list|()
operator|>
literal|0
operator|)
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|250
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
comment|// ignore
block|}
block|}
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|workqueue
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|workqueue
operator|.
name|getPoolSize
argument_list|()
argument_list|)
expr_stmt|;
comment|//already shutdown
name|workqueue
operator|=
literal|null
expr_stmt|;
block|}
specifier|private
name|void
name|checkCompleted
parameter_list|(
name|DeadLockThread
name|dead
parameter_list|)
block|{
name|int
name|oldCompleted
init|=
literal|0
decl_stmt|;
name|int
name|newCompleted
init|=
literal|0
decl_stmt|;
name|int
name|noProgressCount
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|!
name|dead
operator|.
name|isFinished
argument_list|()
condition|)
block|{
name|newCompleted
operator|=
name|dead
operator|.
name|getWorkItemCompletedCount
argument_list|()
expr_stmt|;
if|if
condition|(
name|newCompleted
operator|>
name|oldCompleted
condition|)
block|{
name|oldCompleted
operator|=
name|newCompleted
expr_stmt|;
name|noProgressCount
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
comment|// No reduction in the completion count so it may be deadlocked,
comment|// allow thread to make no progress for 5 time-slices before
comment|// assuming a deadlock has occurred
comment|//
if|if
condition|(
name|oldCompleted
operator|!=
literal|0
operator|&&
operator|++
name|noProgressCount
operator|>
literal|5
condition|)
block|{
name|fail
argument_list|(
literal|"No reduction in threads in 1.25 secs: \n"
operator|+
literal|"oldCompleted: "
operator|+
name|oldCompleted
operator|+
literal|"\nof "
operator|+
name|dead
operator|.
name|getWorkItemCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|250
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
comment|// ignore
block|}
block|}
block|}
specifier|private
name|void
name|checkDeadLock
parameter_list|(
name|DeadLockThread
name|dead
parameter_list|)
block|{
name|dead
operator|.
name|start
argument_list|()
expr_stmt|;
name|checkCompleted
argument_list|(
name|dead
argument_list|)
expr_stmt|;
block|}
specifier|public
class|class
name|TestWorkItem
implements|implements
name|Runnable
block|{
name|String
name|name
decl_stmt|;
name|long
name|worktime
decl_stmt|;
name|Callback
name|callback
decl_stmt|;
specifier|public
name|TestWorkItem
parameter_list|()
block|{
name|this
argument_list|(
literal|"WI"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|TestWorkItem
parameter_list|(
name|String
name|n
parameter_list|)
block|{
name|this
argument_list|(
name|n
argument_list|,
name|DeadLockThread
operator|.
name|DEFAULT_WORK_TIME
argument_list|)
expr_stmt|;
block|}
specifier|public
name|TestWorkItem
parameter_list|(
name|String
name|n
parameter_list|,
name|long
name|wt
parameter_list|)
block|{
name|this
argument_list|(
name|n
argument_list|,
name|wt
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|TestWorkItem
parameter_list|(
name|String
name|n
parameter_list|,
name|long
name|wt
parameter_list|,
name|Callback
name|c
parameter_list|)
block|{
name|name
operator|=
name|n
expr_stmt|;
name|worktime
operator|=
name|wt
expr_stmt|;
name|callback
operator|=
name|c
expr_stmt|;
block|}
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|worktime
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
comment|// ignore
return|return;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|callback
operator|!=
literal|null
condition|)
block|{
name|callback
operator|.
name|workItemCompleted
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"[TestWorkItem:name="
operator|+
name|name
operator|+
literal|"]"
return|;
block|}
block|}
specifier|public
class|class
name|BlockingWorkItem
implements|implements
name|Runnable
block|{
specifier|private
name|boolean
name|unblocked
decl_stmt|;
specifier|public
name|void
name|run
parameter_list|()
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
while|while
condition|(
operator|!
name|unblocked
condition|)
block|{
try|try
block|{
name|wait
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
comment|// ignore
block|}
block|}
block|}
block|}
name|void
name|unblock
parameter_list|()
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
name|unblocked
operator|=
literal|true
expr_stmt|;
name|notify
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|public
interface|interface
name|Callback
block|{
name|void
name|workItemCompleted
parameter_list|(
name|String
name|name
parameter_list|)
function_decl|;
block|}
specifier|public
class|class
name|DeadLockThread
extends|extends
name|Thread
implements|implements
name|Callback
block|{
specifier|public
specifier|static
specifier|final
name|long
name|DEFAULT_WORK_TIME
init|=
literal|10L
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_WORK_ITEMS
init|=
literal|200
decl_stmt|;
name|AutomaticWorkQueueImpl
name|workqueue
decl_stmt|;
name|int
name|nWorkItems
decl_stmt|;
name|int
name|nWorkItemsCompleted
decl_stmt|;
name|long
name|worktime
decl_stmt|;
name|long
name|finishTime
decl_stmt|;
name|long
name|startTime
decl_stmt|;
specifier|public
name|DeadLockThread
parameter_list|(
name|AutomaticWorkQueueImpl
name|wq
parameter_list|)
block|{
name|this
argument_list|(
name|wq
argument_list|,
name|DEFAULT_WORK_ITEMS
argument_list|,
name|DEFAULT_WORK_TIME
argument_list|)
expr_stmt|;
block|}
specifier|public
name|DeadLockThread
parameter_list|(
name|AutomaticWorkQueueImpl
name|wq
parameter_list|,
name|int
name|nwi
parameter_list|)
block|{
name|this
argument_list|(
name|wq
argument_list|,
name|nwi
argument_list|,
name|DEFAULT_WORK_TIME
argument_list|)
expr_stmt|;
block|}
specifier|public
name|DeadLockThread
parameter_list|(
name|AutomaticWorkQueueImpl
name|wq
parameter_list|,
name|int
name|nwi
parameter_list|,
name|long
name|wt
parameter_list|)
block|{
name|workqueue
operator|=
name|wq
expr_stmt|;
name|nWorkItems
operator|=
name|nwi
expr_stmt|;
name|worktime
operator|=
name|wt
expr_stmt|;
block|}
specifier|public
specifier|synchronized
name|boolean
name|isFinished
parameter_list|()
block|{
return|return
name|nWorkItemsCompleted
operator|==
name|nWorkItems
return|;
block|}
specifier|public
specifier|synchronized
name|void
name|workItemCompleted
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|nWorkItemsCompleted
operator|++
expr_stmt|;
if|if
condition|(
name|isFinished
argument_list|()
condition|)
block|{
name|finishTime
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|int
name|getWorkItemCount
parameter_list|()
block|{
return|return
name|nWorkItems
return|;
block|}
specifier|public
name|long
name|worktime
parameter_list|()
block|{
return|return
name|worktime
return|;
block|}
specifier|public
specifier|synchronized
name|int
name|getWorkItemCompletedCount
parameter_list|()
block|{
return|return
name|nWorkItemsCompleted
return|;
block|}
specifier|public
name|long
name|finishTime
parameter_list|()
block|{
return|return
name|finishTime
return|;
block|}
specifier|public
name|long
name|duration
parameter_list|()
block|{
return|return
name|finishTime
operator|-
name|startTime
return|;
block|}
specifier|public
name|void
name|run
parameter_list|()
block|{
name|startTime
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nWorkItems
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
name|workqueue
operator|.
name|execute
argument_list|(
operator|new
name|TestWorkItem
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|,
name|worktime
argument_list|,
name|this
argument_list|)
argument_list|,
name|TIMEOUT
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RejectedExecutionException
name|ex
parameter_list|)
block|{
comment|// ignore
block|}
block|}
while|while
condition|(
operator|!
name|isFinished
argument_list|()
condition|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|worktime
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
comment|// ignore
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

