begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|configuration
operator|.
name|jsse
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|SSLContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|configuration
operator|.
name|security
operator|.
name|FiltersType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
specifier|public
class|class
name|SSLUtilsTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|testDefaultCipherSuitesFilterExcluded
parameter_list|()
throws|throws
name|Exception
block|{
name|SSLContext
name|sslContext
init|=
name|SSLContext
operator|.
name|getInstance
argument_list|(
literal|"TLS"
argument_list|)
decl_stmt|;
name|sslContext
operator|.
name|init
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
operator|new
name|java
operator|.
name|security
operator|.
name|SecureRandom
argument_list|()
argument_list|)
expr_stmt|;
name|FiltersType
name|filtersType
init|=
operator|new
name|FiltersType
argument_list|()
decl_stmt|;
name|filtersType
operator|.
name|getInclude
argument_list|()
operator|.
name|add
argument_list|(
literal|".*_AES_.*"
argument_list|)
expr_stmt|;
name|String
index|[]
name|supportedCipherSuites
init|=
name|sslContext
operator|.
name|getSocketFactory
argument_list|()
operator|.
name|getSupportedCipherSuites
argument_list|()
decl_stmt|;
name|String
index|[]
name|filteredCipherSuites
init|=
name|SSLUtils
operator|.
name|getFilteredCiphersuites
argument_list|(
name|filtersType
argument_list|,
name|supportedCipherSuites
argument_list|,
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|SSLUtilsTest
operator|.
name|class
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|filteredCipherSuites
operator|.
name|length
operator|>
literal|0
argument_list|)
expr_stmt|;
comment|// Check we have no anon/EXPORT/NULL/etc ciphersuites
name|assertFalse
argument_list|(
name|Arrays
operator|.
name|stream
argument_list|(
name|filteredCipherSuites
argument_list|)
operator|.
name|anyMatch
argument_list|(
name|c
lambda|->
name|c
operator|.
name|matches
argument_list|(
literal|".*NULL|anon|EXPORT|DES|MD5|CBC|RC4.*"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testExclusionFilter
parameter_list|()
throws|throws
name|Exception
block|{
name|SSLContext
name|sslContext
init|=
name|SSLContext
operator|.
name|getInstance
argument_list|(
literal|"TLS"
argument_list|)
decl_stmt|;
name|sslContext
operator|.
name|init
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
operator|new
name|java
operator|.
name|security
operator|.
name|SecureRandom
argument_list|()
argument_list|)
expr_stmt|;
name|FiltersType
name|filtersType
init|=
operator|new
name|FiltersType
argument_list|()
decl_stmt|;
name|filtersType
operator|.
name|getInclude
argument_list|()
operator|.
name|add
argument_list|(
literal|".*_SHA384"
argument_list|)
expr_stmt|;
name|filtersType
operator|.
name|getExclude
argument_list|()
operator|.
name|add
argument_list|(
literal|".*_SHA256"
argument_list|)
expr_stmt|;
name|String
index|[]
name|supportedCipherSuites
init|=
name|sslContext
operator|.
name|getSocketFactory
argument_list|()
operator|.
name|getSupportedCipherSuites
argument_list|()
decl_stmt|;
name|String
index|[]
name|filteredCipherSuites
init|=
name|SSLUtils
operator|.
name|getFilteredCiphersuites
argument_list|(
name|filtersType
argument_list|,
name|supportedCipherSuites
argument_list|,
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|SSLUtilsTest
operator|.
name|class
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|filteredCipherSuites
operator|.
name|length
operator|>
literal|0
argument_list|)
expr_stmt|;
comment|// Check we have no SHA-256 ciphersuites
name|assertFalse
argument_list|(
name|Arrays
operator|.
name|stream
argument_list|(
name|filteredCipherSuites
argument_list|)
operator|.
name|anyMatch
argument_list|(
name|c
lambda|->
name|c
operator|.
name|matches
argument_list|(
literal|".*_SHA256"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInclusionFilter
parameter_list|()
throws|throws
name|Exception
block|{
name|SSLContext
name|sslContext
init|=
name|SSLContext
operator|.
name|getInstance
argument_list|(
literal|"TLS"
argument_list|)
decl_stmt|;
name|sslContext
operator|.
name|init
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
operator|new
name|java
operator|.
name|security
operator|.
name|SecureRandom
argument_list|()
argument_list|)
expr_stmt|;
name|FiltersType
name|filtersType
init|=
operator|new
name|FiltersType
argument_list|()
decl_stmt|;
name|filtersType
operator|.
name|getInclude
argument_list|()
operator|.
name|add
argument_list|(
literal|".*_SHA256"
argument_list|)
expr_stmt|;
name|String
index|[]
name|supportedCipherSuites
init|=
name|sslContext
operator|.
name|getSocketFactory
argument_list|()
operator|.
name|getSupportedCipherSuites
argument_list|()
decl_stmt|;
name|String
index|[]
name|filteredCipherSuites
init|=
name|SSLUtils
operator|.
name|getFilteredCiphersuites
argument_list|(
name|filtersType
argument_list|,
name|supportedCipherSuites
argument_list|,
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|SSLUtilsTest
operator|.
name|class
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|filteredCipherSuites
operator|.
name|length
operator|>
literal|0
argument_list|)
expr_stmt|;
comment|// Check we have SHA-256 ciphersuites
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|stream
argument_list|(
name|filteredCipherSuites
argument_list|)
operator|.
name|anyMatch
argument_list|(
name|c
lambda|->
name|c
operator|.
name|matches
argument_list|(
literal|".*_SHA256"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

