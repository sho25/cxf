begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|security
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|invoker
operator|.
name|MethodDispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|BindingOperationInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|OperationInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|EasyMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_class
specifier|public
class|class
name|OperationInfoAuthorizingInterceptorTest
extends|extends
name|SimpleAuthorizingInterceptorTest
block|{
annotation|@
name|Before
annotation|@
name|Override
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|Exchange
name|ex
init|=
name|setUpExchange
argument_list|()
decl_stmt|;
name|Service
name|service
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|Service
operator|.
name|class
argument_list|)
decl_stmt|;
name|ex
operator|.
name|put
argument_list|(
name|Service
operator|.
name|class
argument_list|,
name|service
argument_list|)
expr_stmt|;
name|MethodDispatcher
name|md
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|MethodDispatcher
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|service
operator|.
name|get
argument_list|(
name|MethodDispatcher
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
name|md
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|BindingOperationInfo
name|boi
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|BindingOperationInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|ex
operator|.
name|put
argument_list|(
name|BindingOperationInfo
operator|.
name|class
argument_list|,
name|boi
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|md
operator|.
name|getMethod
argument_list|(
name|boi
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|OperationInfo
name|opinfo
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|OperationInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|opinfo
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|new
name|QName
argument_list|(
literal|"urn:test"
argument_list|,
literal|"echo"
argument_list|)
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|boi
operator|.
name|getOperationInfo
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
name|opinfo
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|replay
argument_list|(
name|service
argument_list|,
name|md
argument_list|,
name|boi
argument_list|,
name|opinfo
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|SimpleAuthorizingInterceptor
name|createSimpleAuthorizingInterceptor
parameter_list|()
block|{
return|return
operator|new
name|OperationInfoAuthorizingInterceptor
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|protected
name|SimpleAuthorizingInterceptor
name|createSimpleAuthorizingInterceptorWithDenyRoles
parameter_list|(
specifier|final
name|String
name|role
parameter_list|)
block|{
return|return
operator|new
name|OperationInfoAuthorizingInterceptor
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getDenyRoles
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
name|Collections
operator|.
name|singletonList
argument_list|(
name|role
argument_list|)
return|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

