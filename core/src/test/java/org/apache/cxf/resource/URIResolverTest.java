begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|resource
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
specifier|public
class|class
name|URIResolverTest
block|{
specifier|private
name|URIResolver
name|uriResolver
decl_stmt|;
specifier|private
name|URL
name|resourceURL
init|=
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"resources/helloworld.bpr"
argument_list|)
decl_stmt|;
specifier|private
name|Throwable
name|checkingThreadThrowable
decl_stmt|;
comment|// assumes single-thread test execution
annotation|@
name|Test
specifier|public
name|void
name|testJARProtocol
parameter_list|()
throws|throws
name|Exception
block|{
name|uriResolver
operator|=
operator|new
name|URIResolver
argument_list|()
expr_stmt|;
name|byte
index|[]
name|barray
init|=
operator|new
name|byte
index|[]
block|{
literal|0
block|}
decl_stmt|;
name|byte
index|[]
name|barray2
init|=
operator|new
name|byte
index|[]
block|{
literal|1
block|}
decl_stmt|;
name|String
name|uriStr
init|=
literal|"jar:"
operator|+
name|resourceURL
operator|.
name|toString
argument_list|()
operator|+
literal|"!/wsdl/hello_world.wsdl"
decl_stmt|;
comment|// Check standard Java API's work with "jar:"
name|URL
name|jarURL
init|=
operator|new
name|URL
argument_list|(
name|uriStr
argument_list|)
decl_stmt|;
name|InputStream
name|is
init|=
name|jarURL
operator|.
name|openStream
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|is
argument_list|)
expr_stmt|;
name|barray
operator|=
operator|new
name|byte
index|[
name|is
operator|.
name|available
argument_list|()
index|]
expr_stmt|;
name|is
operator|.
name|read
argument_list|(
name|barray
argument_list|)
expr_stmt|;
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
name|uriResolver
operator|.
name|resolve
argument_list|(
literal|"baseUriStr"
argument_list|,
name|uriStr
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|InputStream
name|is2
init|=
name|uriResolver
operator|.
name|getInputStream
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|is2
argument_list|)
expr_stmt|;
name|barray2
operator|=
operator|new
name|byte
index|[
name|is2
operator|.
name|available
argument_list|()
index|]
expr_stmt|;
name|is2
operator|.
name|read
argument_list|(
name|barray2
argument_list|)
expr_stmt|;
name|is2
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|IOUtils
operator|.
name|newStringFromBytes
argument_list|(
name|barray
argument_list|)
argument_list|,
name|IOUtils
operator|.
name|newStringFromBytes
argument_list|(
name|barray2
argument_list|)
argument_list|)
expr_stmt|;
name|resolveWithCheckingClassloader
argument_list|(
name|uriResolver
argument_list|,
literal|"baseUriStr"
argument_list|,
name|uriStr
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|resolveWithCheckingClassloaderInConstructor
argument_list|(
literal|"baseUriStr"
argument_list|,
name|uriStr
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testJARResolver
parameter_list|()
throws|throws
name|Exception
block|{
name|uriResolver
operator|=
operator|new
name|URIResolver
argument_list|()
expr_stmt|;
name|String
name|uriStr
init|=
literal|"jar:"
operator|+
name|resourceURL
operator|.
name|toString
argument_list|()
operator|+
literal|"!/wsdl/hello_world.wsdl"
decl_stmt|;
name|URL
name|jarURL
init|=
operator|new
name|URL
argument_list|(
name|uriStr
argument_list|)
decl_stmt|;
name|InputStream
name|is
init|=
name|jarURL
operator|.
name|openStream
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|is
argument_list|)
expr_stmt|;
name|String
name|uriStr2
init|=
literal|"jar:"
operator|+
name|resourceURL
operator|.
name|toString
argument_list|()
operator|+
literal|"!/wsdl/hello_world_2.wsdl"
decl_stmt|;
name|URL
name|jarURL2
init|=
operator|new
name|URL
argument_list|(
name|uriStr2
argument_list|)
decl_stmt|;
name|InputStream
name|is2
init|=
name|jarURL2
operator|.
name|openStream
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|is2
argument_list|)
expr_stmt|;
name|uriResolver
operator|.
name|resolve
argument_list|(
name|uriStr
argument_list|,
literal|"hello_world_2.wsdl"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|InputStream
name|is3
init|=
name|uriResolver
operator|.
name|getInputStream
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|is3
argument_list|)
expr_stmt|;
name|resolveWithCheckingClassloader
argument_list|(
name|uriResolver
argument_list|,
name|uriStr
argument_list|,
literal|"hello_world_2.wsdl"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|resolveWithCheckingClassloaderInConstructor
argument_list|(
name|uriStr
argument_list|,
literal|"hello_world_2.wsdl"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testJARResolveBaseAndAbsolute
parameter_list|()
throws|throws
name|Exception
block|{
name|uriResolver
operator|=
operator|new
name|URIResolver
argument_list|()
expr_stmt|;
name|String
name|baseUriStr
init|=
literal|"jar:"
operator|+
name|resourceURL
operator|.
name|toString
argument_list|()
operator|+
literal|"!/wsdl/hello_world.wsdl"
decl_stmt|;
name|URL
name|jarURL
init|=
operator|new
name|URL
argument_list|(
name|baseUriStr
argument_list|)
decl_stmt|;
name|InputStream
name|is
init|=
name|jarURL
operator|.
name|openStream
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|is
argument_list|)
expr_stmt|;
name|String
name|uriStr
init|=
literal|"jar:"
operator|+
name|resourceURL
operator|.
name|toString
argument_list|()
operator|+
literal|"!/wsdl/hello_world_2.wsdl"
decl_stmt|;
name|URL
name|jarURL2
init|=
operator|new
name|URL
argument_list|(
name|uriStr
argument_list|)
decl_stmt|;
name|InputStream
name|is2
init|=
name|jarURL2
operator|.
name|openStream
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|is2
argument_list|)
expr_stmt|;
name|resolveWithCheckingClassloader
argument_list|(
name|uriResolver
argument_list|,
name|baseUriStr
argument_list|,
name|uriStr
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|resolveWithCheckingClassloaderInConstructor
argument_list|(
name|baseUriStr
argument_list|,
name|uriStr
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testResolveRelativeFile
parameter_list|()
throws|throws
name|Exception
block|{
name|URIResolver
name|wsdlResolver
init|=
operator|new
name|URIResolver
argument_list|()
decl_stmt|;
comment|// resolve the wsdl
name|wsdlResolver
operator|.
name|resolve
argument_list|(
literal|null
argument_list|,
literal|"wsdl/foo.wsdl"
argument_list|,
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|wsdlResolver
operator|.
name|isResolved
argument_list|()
argument_list|)
expr_stmt|;
comment|// get the base uri from the resolved wsdl location
name|String
name|baseUri
init|=
name|wsdlResolver
operator|.
name|getURI
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
comment|// resolve the schema using relative location
name|String
name|schemaLocation
init|=
literal|"../schemas/configuration/bar.xsd"
decl_stmt|;
name|URIResolver
name|xsdResolver
init|=
operator|new
name|URIResolver
argument_list|()
decl_stmt|;
name|xsdResolver
operator|.
name|resolve
argument_list|(
name|baseUri
argument_list|,
name|schemaLocation
argument_list|,
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|xsdResolver
operator|.
name|getInputStream
argument_list|()
argument_list|)
expr_stmt|;
name|resolveWithCheckingClassloader
argument_list|(
name|xsdResolver
argument_list|,
name|baseUri
argument_list|,
name|schemaLocation
argument_list|,
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|resolveWithCheckingClassloaderInConstructor
argument_list|(
name|baseUri
argument_list|,
name|schemaLocation
argument_list|,
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
comment|// resolve the schema using relative location with base uri fragment
name|xsdResolver
operator|=
operator|new
name|URIResolver
argument_list|()
expr_stmt|;
name|xsdResolver
operator|.
name|resolve
argument_list|(
name|baseUri
operator|+
literal|"#type2"
argument_list|,
name|schemaLocation
argument_list|,
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|xsdResolver
operator|.
name|getInputStream
argument_list|()
argument_list|)
expr_stmt|;
name|resolveWithCheckingClassloader
argument_list|(
name|xsdResolver
argument_list|,
name|baseUri
operator|+
literal|"#type2"
argument_list|,
name|schemaLocation
argument_list|,
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|resolveWithCheckingClassloaderInConstructor
argument_list|(
name|baseUri
operator|+
literal|"#type2"
argument_list|,
name|schemaLocation
argument_list|,
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testResolvePathWithSpace
parameter_list|()
throws|throws
name|Exception
block|{
name|URIResolver
name|wsdlResolver
init|=
operator|new
name|URIResolver
argument_list|()
decl_stmt|;
comment|// resolve the wsdl
name|wsdlResolver
operator|.
name|resolve
argument_list|(
literal|null
argument_list|,
literal|"wsdl/foo.wsdl"
argument_list|,
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|wsdlResolver
operator|.
name|isResolved
argument_list|()
argument_list|)
expr_stmt|;
comment|// get the base uri from the resolved wsdl location
name|String
name|baseUri
init|=
name|wsdlResolver
operator|.
name|getURI
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
comment|// resolve the schema using relative location
name|String
name|schemaLocation
init|=
literal|"../schemas/configuration/folder with spaces/bar.xsd"
decl_stmt|;
name|URIResolver
name|xsdResolver
init|=
operator|new
name|URIResolver
argument_list|()
decl_stmt|;
name|xsdResolver
operator|.
name|resolve
argument_list|(
name|baseUri
argument_list|,
name|schemaLocation
argument_list|,
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|xsdResolver
operator|.
name|getInputStream
argument_list|()
argument_list|)
expr_stmt|;
name|resolveWithCheckingClassloader
argument_list|(
name|xsdResolver
argument_list|,
name|baseUri
argument_list|,
name|schemaLocation
argument_list|,
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|resolveWithCheckingClassloaderInConstructor
argument_list|(
name|baseUri
argument_list|,
name|schemaLocation
argument_list|,
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
comment|// resolve the schema using relative location with base uri fragment
name|xsdResolver
operator|=
operator|new
name|URIResolver
argument_list|()
expr_stmt|;
name|xsdResolver
operator|.
name|resolve
argument_list|(
name|baseUri
operator|+
literal|"#type2"
argument_list|,
name|schemaLocation
argument_list|,
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|xsdResolver
operator|.
name|getInputStream
argument_list|()
argument_list|)
expr_stmt|;
name|resolveWithCheckingClassloader
argument_list|(
name|xsdResolver
argument_list|,
name|baseUri
operator|+
literal|"#type2"
argument_list|,
name|schemaLocation
argument_list|,
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|resolveWithCheckingClassloaderInConstructor
argument_list|(
name|baseUri
operator|+
literal|"#type2"
argument_list|,
name|schemaLocation
argument_list|,
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBasePathWithSpace
parameter_list|()
throws|throws
name|Exception
block|{
name|URIResolver
name|wsdlResolver
init|=
operator|new
name|URIResolver
argument_list|()
decl_stmt|;
comment|// resolve the wsdl
name|wsdlResolver
operator|.
name|resolve
argument_list|(
literal|null
argument_list|,
literal|"wsdl/folder with spaces/foo.wsdl"
argument_list|,
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|wsdlResolver
operator|.
name|isResolved
argument_list|()
argument_list|)
expr_stmt|;
name|resolveWithCheckingClassloader
argument_list|(
name|wsdlResolver
argument_list|,
literal|null
argument_list|,
literal|"wsdl/folder with spaces/foo.wsdl"
argument_list|,
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|resolveWithCheckingClassloaderInConstructor
argument_list|(
literal|null
argument_list|,
literal|"wsdl/folder with spaces/foo.wsdl"
argument_list|,
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBasePathWithEncodedSpace
parameter_list|()
throws|throws
name|Exception
block|{
name|URIResolver
name|wsdlResolver
init|=
operator|new
name|URIResolver
argument_list|()
decl_stmt|;
comment|// resolve the wsdl
name|wsdlResolver
operator|.
name|resolve
argument_list|(
literal|null
argument_list|,
literal|"wsdl/folder%20with%20spaces/foo.wsdl"
argument_list|,
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|wsdlResolver
operator|.
name|isResolved
argument_list|()
argument_list|)
expr_stmt|;
name|resolveWithCheckingClassloader
argument_list|(
name|wsdlResolver
argument_list|,
literal|null
argument_list|,
literal|"wsdl/folder%20with%20spaces/foo.wsdl"
argument_list|,
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|resolveWithCheckingClassloaderInConstructor
argument_list|(
literal|null
argument_list|,
literal|"wsdl/folder%20with%20spaces/foo.wsdl"
argument_list|,
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|resolveWithCheckingClassloader
parameter_list|(
name|URIResolver
name|resolver
parameter_list|,
name|String
name|baseUriStr
parameter_list|,
name|String
name|uriStr
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|callingCls
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|checkingThreadThrowable
operator|=
literal|null
expr_stmt|;
name|Runnable
name|operation
init|=
parameter_list|()
lambda|->
block|{
try|try
block|{
name|resolver
operator|.
name|resolve
argument_list|(
name|baseUriStr
argument_list|,
name|uriStr
argument_list|,
name|callingCls
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|checkingThreadThrowable
operator|=
name|t
expr_stmt|;
block|}
name|assertNotNull
argument_list|(
name|resolver
operator|.
name|getInputStream
argument_list|()
argument_list|)
expr_stmt|;
block|}
decl_stmt|;
name|Thread
name|thread
init|=
operator|new
name|Thread
argument_list|(
name|operation
argument_list|)
decl_stmt|;
name|thread
operator|.
name|setContextClassLoader
argument_list|(
operator|new
name|CheckingClassLoader
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|thread
operator|.
name|start
argument_list|()
expr_stmt|;
name|thread
operator|.
name|join
argument_list|(
literal|10000
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"resolve operation did not finish in time"
argument_list|,
name|thread
operator|.
name|isAlive
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|checkingThreadThrowable
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|resolveWithCheckingClassloaderInConstructor
parameter_list|(
name|String
name|baseUriStr
parameter_list|,
name|String
name|uriStr
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|callingCls
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|checkingThreadThrowable
operator|=
literal|null
expr_stmt|;
name|Runnable
name|operation
init|=
parameter_list|()
lambda|->
block|{
name|URIResolver
name|resolver
init|=
literal|null
decl_stmt|;
try|try
block|{
name|resolver
operator|=
operator|new
name|URIResolver
argument_list|(
name|baseUriStr
argument_list|,
name|uriStr
argument_list|,
name|callingCls
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|checkingThreadThrowable
operator|=
name|t
expr_stmt|;
block|}
if|if
condition|(
name|resolver
operator|!=
literal|null
condition|)
block|{
name|assertNotNull
argument_list|(
name|resolver
operator|.
name|getInputStream
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|Thread
name|thread
init|=
operator|new
name|Thread
argument_list|(
name|operation
argument_list|)
decl_stmt|;
name|thread
operator|.
name|setContextClassLoader
argument_list|(
operator|new
name|CheckingClassLoader
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|thread
operator|.
name|start
argument_list|()
expr_stmt|;
name|thread
operator|.
name|join
argument_list|(
literal|10000
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"resolve operation did not finish in time"
argument_list|,
name|thread
operator|.
name|isAlive
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|checkingThreadThrowable
argument_list|)
expr_stmt|;
block|}
specifier|static
class|class
name|CheckingClassLoader
extends|extends
name|ClassLoader
block|{
name|CheckingClassLoader
parameter_list|(
name|ClassLoader
name|parent
parameter_list|)
block|{
name|super
argument_list|(
name|parent
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|URL
name|findResource
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|name
operator|!=
literal|null
operator|&&
name|name
operator|.
name|startsWith
argument_list|(
literal|"jar:file:"
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Suspicious resource name: "
operator|+
name|name
argument_list|)
throw|;
block|}
return|return
name|super
operator|.
name|findResource
argument_list|(
name|name
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

