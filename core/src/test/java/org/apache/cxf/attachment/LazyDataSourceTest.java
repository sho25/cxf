begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|attachment
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|activation
operator|.
name|DataHandler
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|activation
operator|.
name|DataSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_class
specifier|public
class|class
name|LazyDataSourceTest
block|{
specifier|private
specifier|static
specifier|final
name|String
name|ID_1
init|=
literal|"id1"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|ID_2
init|=
literal|"id2"
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testNoDataSource
parameter_list|()
throws|throws
name|Exception
block|{
name|DataSource
name|ds
init|=
operator|new
name|LazyDataSource
argument_list|(
name|ID_1
argument_list|,
name|Collections
operator|.
name|singleton
argument_list|(
operator|new
name|AttachmentImpl
argument_list|(
name|ID_1
argument_list|,
operator|new
name|DataHandler
argument_list|(
operator|(
name|DataSource
operator|)
literal|null
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|DataSource
name|getDataSource
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
block|}
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|ds
operator|.
name|getContentType
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|e
parameter_list|)
block|{
name|String
name|message
init|=
name|e
operator|.
name|getMessage
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|message
argument_list|,
name|message
operator|.
name|contains
argument_list|(
name|ID_1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNoAttachment
parameter_list|()
throws|throws
name|Exception
block|{
name|DataSource
name|ds
init|=
operator|new
name|LazyDataSource
argument_list|(
name|ID_1
argument_list|,
name|Collections
operator|.
name|singleton
argument_list|(
operator|new
name|AttachmentImpl
argument_list|(
name|ID_2
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|ds
operator|.
name|getName
argument_list|()
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|e
parameter_list|)
block|{
name|String
name|message
init|=
name|e
operator|.
name|getMessage
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|message
argument_list|,
name|message
operator|.
name|contains
argument_list|(
name|ID_1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|message
argument_list|,
name|message
operator|.
name|contains
argument_list|(
name|ID_2
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

