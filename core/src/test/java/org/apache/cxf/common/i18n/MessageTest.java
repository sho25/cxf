begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ResourceBundle
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertSame
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
specifier|public
class|class
name|MessageTest
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|MessageTest
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testMessageWithLoggerBundle
parameter_list|()
throws|throws
name|Exception
block|{
name|Message
name|msg
init|=
operator|new
name|Message
argument_list|(
literal|"SUB1_EXC"
argument_list|,
name|LOG
argument_list|,
operator|new
name|Object
index|[]
block|{
literal|1
block|}
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
literal|"unexpected resource bundle"
argument_list|,
name|LOG
operator|.
name|getResourceBundle
argument_list|()
argument_list|,
name|msg
operator|.
name|bundle
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"unexpected message string"
argument_list|,
literal|"subbed in 1 only"
argument_list|,
name|msg
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMessageWithExplicitBundle
parameter_list|()
throws|throws
name|Exception
block|{
name|ResourceBundle
name|bundle
init|=
name|BundleUtils
operator|.
name|getBundle
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
name|Message
name|msg
init|=
operator|new
name|Message
argument_list|(
literal|"SUB2_EXC"
argument_list|,
name|bundle
argument_list|,
operator|new
name|Object
index|[]
block|{
literal|3
block|,
literal|4
block|}
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
literal|"unexpected resource bundle"
argument_list|,
name|bundle
argument_list|,
name|msg
operator|.
name|bundle
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"unexpected message string"
argument_list|,
literal|"subbed in 4& 3"
argument_list|,
name|msg
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testExceptionIO
parameter_list|()
throws|throws
name|java
operator|.
name|lang
operator|.
name|Exception
block|{
name|ResourceBundle
name|bundle
init|=
name|BundleUtils
operator|.
name|getBundle
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
name|UncheckedException
name|ex
init|=
operator|new
name|UncheckedException
argument_list|(
operator|new
name|Message
argument_list|(
literal|"SUB2_EXC"
argument_list|,
name|bundle
argument_list|,
operator|new
name|Object
index|[]
block|{
literal|3
block|,
literal|4
block|}
argument_list|)
argument_list|)
decl_stmt|;
name|ByteArrayOutputStream
name|bout
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|ObjectOutputStream
name|out
init|=
operator|new
name|ObjectOutputStream
argument_list|(
name|bout
argument_list|)
decl_stmt|;
name|out
operator|.
name|writeObject
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|ByteArrayInputStream
name|bin
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|bout
operator|.
name|toByteArray
argument_list|()
argument_list|)
decl_stmt|;
name|ObjectInputStream
name|in
init|=
operator|new
name|ObjectInputStream
argument_list|(
name|bin
argument_list|)
decl_stmt|;
name|Object
name|o
init|=
name|in
operator|.
name|readObject
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|o
operator|instanceof
name|UncheckedException
argument_list|)
expr_stmt|;
name|UncheckedException
name|ex2
init|=
operator|(
name|UncheckedException
operator|)
name|o
decl_stmt|;
name|assertEquals
argument_list|(
literal|"subbed in 4& 3"
argument_list|,
name|ex2
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

