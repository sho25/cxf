begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|annotation
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|Annotation
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jws
operator|.
name|WebMethod
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jws
operator|.
name|WebService
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|ws
operator|.
name|WebServiceContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|EasyMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_class
specifier|public
class|class
name|AnnotationProcessorTest
block|{
name|AnnotatedGreeterImpl
name|greeterImpl
init|=
operator|new
name|AnnotatedGreeterImpl
argument_list|()
decl_stmt|;
name|AnnotationProcessor
name|processor
init|=
operator|new
name|AnnotationProcessor
argument_list|(
name|greeterImpl
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|Annotation
argument_list|>
argument_list|>
name|expectedAnnotations
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|AnnotationVisitor
name|visitor
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|AnnotationVisitor
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|EasyMock
operator|.
name|checkOrder
argument_list|(
name|visitor
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testVisitClass
parameter_list|()
block|{
name|expectedAnnotations
operator|.
name|add
argument_list|(
name|WebService
operator|.
name|class
argument_list|)
expr_stmt|;
name|prepareCommonExpectations
argument_list|(
name|visitor
argument_list|)
expr_stmt|;
name|visitor
operator|.
name|visitClass
argument_list|(
name|EasyMock
operator|.
name|eq
argument_list|(
name|AnnotatedGreeterImpl
operator|.
name|class
argument_list|)
argument_list|,
name|EasyMock
operator|.
name|isA
argument_list|(
name|WebService
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|runProcessor
argument_list|(
name|visitor
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testVisitField
parameter_list|()
throws|throws
name|Exception
block|{
name|Field
name|expectedField
init|=
name|AnnotatedGreeterImpl
operator|.
name|class
operator|.
name|getDeclaredField
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|expectedAnnotations
operator|.
name|add
argument_list|(
name|Resource
operator|.
name|class
argument_list|)
expr_stmt|;
name|prepareCommonExpectations
argument_list|(
name|visitor
argument_list|)
expr_stmt|;
name|visitor
operator|.
name|visitField
argument_list|(
name|EasyMock
operator|.
name|eq
argument_list|(
name|expectedField
argument_list|)
argument_list|,
name|EasyMock
operator|.
name|isA
argument_list|(
name|Resource
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|visitor
operator|.
name|visitMethod
argument_list|(
operator|(
name|Method
operator|)
name|EasyMock
operator|.
name|anyObject
argument_list|()
argument_list|,
operator|(
name|Annotation
operator|)
name|EasyMock
operator|.
name|anyObject
argument_list|()
argument_list|)
expr_stmt|;
name|runProcessor
argument_list|(
name|visitor
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testVisitMethod
parameter_list|()
throws|throws
name|Exception
block|{
name|Field
name|expectedField
init|=
name|AnnotatedGreeterImpl
operator|.
name|class
operator|.
name|getDeclaredField
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|Method
name|expectedMethod1
init|=
name|AnnotatedGreeterImpl
operator|.
name|class
operator|.
name|getDeclaredMethod
argument_list|(
literal|"sayHi"
argument_list|)
decl_stmt|;
name|Method
name|expectedMethod2
init|=
name|AnnotatedGreeterImpl
operator|.
name|class
operator|.
name|getDeclaredMethod
argument_list|(
literal|"sayHi"
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|Method
name|expectedMethod3
init|=
name|AnnotatedGreeterImpl
operator|.
name|class
operator|.
name|getDeclaredMethod
argument_list|(
literal|"greetMe"
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|Method
name|expectedMethod4
init|=
name|AnnotatedGreeterImpl
operator|.
name|class
operator|.
name|getDeclaredMethod
argument_list|(
literal|"setContext"
argument_list|,
name|WebServiceContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|Method
name|expectedMethod5
init|=
name|AnnotatedGreeterImpl
operator|.
name|class
operator|.
name|getDeclaredMethod
argument_list|(
literal|"greetMeOneWay"
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
name|expectedAnnotations
operator|.
name|add
argument_list|(
name|WebMethod
operator|.
name|class
argument_list|)
expr_stmt|;
name|expectedAnnotations
operator|.
name|add
argument_list|(
name|Resource
operator|.
name|class
argument_list|)
expr_stmt|;
name|prepareCommonExpectations
argument_list|(
name|visitor
argument_list|)
expr_stmt|;
name|visitor
operator|.
name|visitField
argument_list|(
name|EasyMock
operator|.
name|eq
argument_list|(
name|expectedField
argument_list|)
argument_list|,
name|EasyMock
operator|.
name|isA
argument_list|(
name|Resource
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|visitor
operator|.
name|visitMethod
argument_list|(
name|EasyMock
operator|.
name|eq
argument_list|(
name|expectedMethod1
argument_list|)
argument_list|,
name|EasyMock
operator|.
name|isA
argument_list|(
name|WebMethod
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|visitor
operator|.
name|visitMethod
argument_list|(
name|EasyMock
operator|.
name|eq
argument_list|(
name|expectedMethod2
argument_list|)
argument_list|,
name|EasyMock
operator|.
name|isA
argument_list|(
name|WebMethod
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|visitor
operator|.
name|visitMethod
argument_list|(
name|EasyMock
operator|.
name|eq
argument_list|(
name|expectedMethod3
argument_list|)
argument_list|,
name|EasyMock
operator|.
name|isA
argument_list|(
name|WebMethod
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|visitor
operator|.
name|visitMethod
argument_list|(
name|EasyMock
operator|.
name|eq
argument_list|(
name|expectedMethod4
argument_list|)
argument_list|,
name|EasyMock
operator|.
name|isA
argument_list|(
name|Resource
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|visitor
operator|.
name|visitMethod
argument_list|(
name|EasyMock
operator|.
name|eq
argument_list|(
name|expectedMethod5
argument_list|)
argument_list|,
name|EasyMock
operator|.
name|isA
argument_list|(
name|WebMethod
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|runProcessor
argument_list|(
name|visitor
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testProcessorInvalidConstructorArgs
parameter_list|()
block|{
try|try
block|{
operator|new
name|AnnotationProcessor
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"did not get expected argument"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|// happy
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testProcessorInvalidAcceptArg
parameter_list|()
block|{
try|try
block|{
name|processor
operator|.
name|accept
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"did not get expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|// happy
block|}
block|}
specifier|private
name|void
name|prepareCommonExpectations
parameter_list|(
name|AnnotationVisitor
name|v
parameter_list|)
block|{
name|v
operator|.
name|getTargetAnnotations
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|andReturn
argument_list|(
name|expectedAnnotations
argument_list|)
expr_stmt|;
name|v
operator|.
name|setTarget
argument_list|(
name|greeterImpl
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|runProcessor
parameter_list|(
name|AnnotationVisitor
name|v
parameter_list|)
block|{
name|EasyMock
operator|.
name|replay
argument_list|(
name|v
argument_list|)
expr_stmt|;
name|processor
operator|.
name|accept
argument_list|(
name|v
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|verify
argument_list|(
name|v
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

