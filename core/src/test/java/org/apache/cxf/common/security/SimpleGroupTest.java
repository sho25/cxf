begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|security
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
specifier|public
class|class
name|SimpleGroupTest
extends|extends
name|Assert
block|{
annotation|@
name|Test
specifier|public
name|void
name|testName
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"group"
argument_list|,
operator|new
name|SimpleGroup
argument_list|(
literal|"group"
argument_list|,
literal|"friend"
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"group"
argument_list|,
operator|new
name|SimpleGroup
argument_list|(
literal|"group"
argument_list|,
operator|new
name|SimplePrincipal
argument_list|(
literal|"friend"
argument_list|)
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIsMember
parameter_list|()
block|{
name|assertTrue
argument_list|(
operator|new
name|SimpleGroup
argument_list|(
literal|"group"
argument_list|,
literal|"friend"
argument_list|)
operator|.
name|isMember
argument_list|(
operator|new
name|SimplePrincipal
argument_list|(
literal|"friend"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
operator|new
name|SimpleGroup
argument_list|(
literal|"group"
argument_list|,
literal|"friend"
argument_list|)
operator|.
name|isMember
argument_list|(
operator|new
name|SimplePrincipal
argument_list|(
literal|"frogs"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddRemoveMembers
parameter_list|()
block|{
name|GroupPrincipal
name|group
init|=
operator|new
name|SimpleGroup
argument_list|(
literal|"group"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|group
operator|.
name|members
argument_list|()
operator|.
name|hasMoreElements
argument_list|()
argument_list|)
expr_stmt|;
name|group
operator|.
name|addMember
argument_list|(
operator|new
name|SimpleGroup
argument_list|(
literal|"group"
argument_list|,
literal|"friend"
argument_list|)
argument_list|)
expr_stmt|;
name|Enumeration
argument_list|<
name|?
extends|extends
name|Principal
argument_list|>
name|members
init|=
name|group
operator|.
name|members
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
operator|new
name|SimpleGroup
argument_list|(
literal|"group"
argument_list|,
literal|"friend"
argument_list|)
argument_list|,
name|members
operator|.
name|nextElement
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|members
operator|.
name|hasMoreElements
argument_list|()
argument_list|)
expr_stmt|;
name|group
operator|.
name|removeMember
argument_list|(
operator|new
name|SimpleGroup
argument_list|(
literal|"group"
argument_list|,
literal|"friend"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|group
operator|.
name|members
argument_list|()
operator|.
name|hasMoreElements
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

