begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|Client
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertSame
import|;
end_import

begin_class
specifier|public
class|class
name|ProxyClassLoaderCacheTest
block|{
specifier|private
specifier|final
name|ProxyClassLoaderCache
name|cache
init|=
operator|new
name|ProxyClassLoaderCache
argument_list|()
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testClassLoaderIdentical
parameter_list|()
throws|throws
name|Exception
block|{
name|ClassLoader
name|cl1
init|=
name|cache
operator|.
name|getProxyClassLoader
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
argument_list|,
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[]
block|{
name|Closeable
operator|.
name|class
operator|,
name|Client
operator|.
name|class
operator|,
name|HelloWorld
operator|.
name|class
block|}
block|)
function|;
name|ClassLoader
name|cl2
init|=
name|cache
operator|.
name|getProxyClassLoader
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
argument_list|,
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[]
block|{
name|Closeable
operator|.
name|class
operator|,
name|Client
operator|.
name|class
operator|,
name|HelloWorld
operator|.
name|class
block|}
block|)
class|;
end_class

begin_expr_stmt
name|assertSame
argument_list|(
name|cl1
argument_list|,
name|cl2
argument_list|)
expr_stmt|;
end_expr_stmt

begin_function
unit|}      @
name|Test
specifier|public
name|void
name|testClassLoaderIdenticalWithMultipleThreads
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Set
argument_list|<
name|ClassLoader
argument_list|>
name|clSet
init|=
name|Collections
operator|.
name|synchronizedSet
argument_list|(
operator|new
name|HashSet
argument_list|<>
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|CountDownLatch
name|countDownLatch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|50
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|50
condition|;
name|i
operator|++
control|)
block|{
operator|new
name|Thread
argument_list|(
parameter_list|()
lambda|->
block|{
try|try
block|{
name|clSet
operator|.
name|add
argument_list|(
name|cache
operator|.
name|getProxyClassLoader
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
argument_list|,
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[]
block|{
name|Closeable
operator|.
name|class
operator|,
name|Client
operator|.
name|class
operator|,
name|HelloWorld
operator|.
name|class
block|}
argument_list|)
block|)
empty_stmt|;
block|}
end_function

begin_finally
finally|finally
block|{
name|countDownLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
end_finally

begin_expr_stmt
unit|})
operator|.
name|start
argument_list|()
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|}         countDownLatch
operator|.
name|await
argument_list|()
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|assertSame
argument_list|(
literal|1
argument_list|,
name|clSet
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|}      interface
name|HelloWorld
block|{     }
end_expr_stmt

unit|}
end_unit

