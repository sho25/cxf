begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|attachment
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLDecoder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLEncoder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|activation
operator|.
name|CommandInfo
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|activation
operator|.
name|CommandMap
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|activation
operator|.
name|DataContentHandler
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|activation
operator|.
name|DataHandler
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|activation
operator|.
name|DataSource
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|activation
operator|.
name|FileDataSource
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|activation
operator|.
name|MailcapCommandMap
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|activation
operator|.
name|URLDataSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|HttpHeaderHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|Fault
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|io
operator|.
name|CachedOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Attachment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|MessageUtils
import|;
end_import

begin_class
specifier|public
specifier|final
class|class
name|AttachmentUtil
block|{
specifier|public
specifier|static
specifier|final
name|String
name|BODY_ATTACHMENT_ID
init|=
literal|"root.message@cxf.apache.org"
decl_stmt|;
specifier|private
specifier|static
specifier|volatile
name|int
name|counter
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|ATT_UUID
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Random
name|BOUND_RANDOM
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|CommandMap
name|DEFAULT_COMMAND_MAP
init|=
name|CommandMap
operator|.
name|getDefaultCommandMap
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|MailcapCommandMap
name|COMMAND_MAP
init|=
operator|new
name|EnhancedMailcapCommandMap
argument_list|()
decl_stmt|;
specifier|static
specifier|final
class|class
name|EnhancedMailcapCommandMap
extends|extends
name|MailcapCommandMap
block|{
annotation|@
name|Override
specifier|public
specifier|synchronized
name|DataContentHandler
name|createDataContentHandler
parameter_list|(
name|String
name|mimeType
parameter_list|)
block|{
name|DataContentHandler
name|dch
init|=
name|super
operator|.
name|createDataContentHandler
argument_list|(
name|mimeType
argument_list|)
decl_stmt|;
if|if
condition|(
name|dch
operator|==
literal|null
condition|)
block|{
name|dch
operator|=
name|DEFAULT_COMMAND_MAP
operator|.
name|createDataContentHandler
argument_list|(
name|mimeType
argument_list|)
expr_stmt|;
block|}
return|return
name|dch
return|;
block|}
annotation|@
name|Override
specifier|public
name|DataContentHandler
name|createDataContentHandler
parameter_list|(
name|String
name|mimeType
parameter_list|,
name|DataSource
name|ds
parameter_list|)
block|{
name|DataContentHandler
name|dch
init|=
name|super
operator|.
name|createDataContentHandler
argument_list|(
name|mimeType
argument_list|)
decl_stmt|;
if|if
condition|(
name|dch
operator|==
literal|null
condition|)
block|{
name|dch
operator|=
name|DEFAULT_COMMAND_MAP
operator|.
name|createDataContentHandler
argument_list|(
name|mimeType
argument_list|,
name|ds
argument_list|)
expr_stmt|;
block|}
return|return
name|dch
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|CommandInfo
index|[]
name|getAllCommands
parameter_list|(
name|String
name|mimeType
parameter_list|)
block|{
name|CommandInfo
index|[]
name|commands
init|=
name|super
operator|.
name|getAllCommands
argument_list|(
name|mimeType
argument_list|)
decl_stmt|;
name|CommandInfo
index|[]
name|defaultCommands
init|=
name|DEFAULT_COMMAND_MAP
operator|.
name|getAllCommands
argument_list|(
name|mimeType
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|CommandInfo
argument_list|>
name|cmdList
init|=
operator|new
name|ArrayList
argument_list|<
name|CommandInfo
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|commands
argument_list|)
argument_list|)
decl_stmt|;
comment|// Add CommandInfo which does not exist in current command map.
for|for
control|(
name|CommandInfo
name|defCmdInfo
range|:
name|defaultCommands
control|)
block|{
name|String
name|defCmdName
init|=
name|defCmdInfo
operator|.
name|getCommandName
argument_list|()
decl_stmt|;
name|boolean
name|cmdNameExist
init|=
literal|false
decl_stmt|;
for|for
control|(
name|CommandInfo
name|cmdInfo
range|:
name|commands
control|)
block|{
if|if
condition|(
name|cmdInfo
operator|.
name|getCommandName
argument_list|()
operator|.
name|equals
argument_list|(
name|defCmdName
argument_list|)
condition|)
block|{
name|cmdNameExist
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|cmdNameExist
condition|)
block|{
name|cmdList
operator|.
name|add
argument_list|(
name|defCmdInfo
argument_list|)
expr_stmt|;
block|}
block|}
name|CommandInfo
index|[]
name|allCommandArray
init|=
operator|new
name|CommandInfo
index|[
literal|0
index|]
decl_stmt|;
return|return
name|cmdList
operator|.
name|toArray
argument_list|(
name|allCommandArray
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|CommandInfo
name|getCommand
parameter_list|(
name|String
name|mimeType
parameter_list|,
name|String
name|cmdName
parameter_list|)
block|{
name|CommandInfo
name|cmdInfo
init|=
name|super
operator|.
name|getCommand
argument_list|(
name|mimeType
argument_list|,
name|cmdName
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmdInfo
operator|==
literal|null
condition|)
block|{
name|cmdInfo
operator|=
name|DEFAULT_COMMAND_MAP
operator|.
name|getCommand
argument_list|(
name|mimeType
argument_list|,
name|cmdName
argument_list|)
expr_stmt|;
block|}
return|return
name|cmdInfo
return|;
block|}
comment|/**          * Merge current mime types and default mime types.          */
annotation|@
name|Override
specifier|public
specifier|synchronized
name|String
index|[]
name|getMimeTypes
parameter_list|()
block|{
name|String
index|[]
name|mimeTypes
init|=
name|super
operator|.
name|getMimeTypes
argument_list|()
decl_stmt|;
name|String
index|[]
name|defMimeTypes
init|=
name|DEFAULT_COMMAND_MAP
operator|.
name|getMimeTypes
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|mimeTypeSet
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|mimeTypeSet
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|mimeTypes
argument_list|)
argument_list|)
expr_stmt|;
name|mimeTypeSet
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|defMimeTypes
argument_list|)
argument_list|)
expr_stmt|;
name|String
index|[]
name|mimeArray
init|=
operator|new
name|String
index|[
literal|0
index|]
decl_stmt|;
return|return
name|mimeTypeSet
operator|.
name|toArray
argument_list|(
name|mimeArray
argument_list|)
return|;
block|}
block|}
specifier|private
name|AttachmentUtil
parameter_list|()
block|{      }
static|static
block|{
name|COMMAND_MAP
operator|.
name|addMailcap
argument_list|(
literal|"image/*;;x-java-content-handler="
operator|+
name|ImageDataContentHandler
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|CommandMap
name|getCommandMap
parameter_list|()
block|{
return|return
name|COMMAND_MAP
return|;
block|}
specifier|public
specifier|static
name|boolean
name|isMtomEnabled
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
name|Object
name|prop
init|=
name|message
operator|.
name|getContextualProperty
argument_list|(
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
operator|.
name|MTOM_ENABLED
argument_list|)
decl_stmt|;
return|return
name|MessageUtils
operator|.
name|isTrue
argument_list|(
name|prop
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|void
name|setStreamedAttachmentProperties
parameter_list|(
name|Message
name|message
parameter_list|,
name|CachedOutputStream
name|bos
parameter_list|)
throws|throws
name|IOException
block|{
name|Object
name|directory
init|=
name|message
operator|.
name|getContextualProperty
argument_list|(
name|AttachmentDeserializer
operator|.
name|ATTACHMENT_DIRECTORY
argument_list|)
decl_stmt|;
if|if
condition|(
name|directory
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|directory
operator|instanceof
name|File
condition|)
block|{
name|bos
operator|.
name|setOutputDir
argument_list|(
operator|(
name|File
operator|)
name|directory
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|bos
operator|.
name|setOutputDir
argument_list|(
operator|new
name|File
argument_list|(
operator|(
name|String
operator|)
name|directory
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|Object
name|threshold
init|=
name|message
operator|.
name|getContextualProperty
argument_list|(
name|AttachmentDeserializer
operator|.
name|ATTACHMENT_MEMORY_THRESHOLD
argument_list|)
decl_stmt|;
if|if
condition|(
name|threshold
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|threshold
operator|instanceof
name|Long
condition|)
block|{
name|bos
operator|.
name|setThreshold
argument_list|(
operator|(
name|Long
operator|)
name|threshold
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|bos
operator|.
name|setThreshold
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
operator|(
name|String
operator|)
name|threshold
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|bos
operator|.
name|setThreshold
argument_list|(
name|AttachmentDeserializer
operator|.
name|THRESHOLD
argument_list|)
expr_stmt|;
block|}
name|Object
name|maxSize
init|=
name|message
operator|.
name|getContextualProperty
argument_list|(
name|AttachmentDeserializer
operator|.
name|ATTACHMENT_MAX_SIZE
argument_list|)
decl_stmt|;
if|if
condition|(
name|maxSize
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|maxSize
operator|instanceof
name|Long
condition|)
block|{
name|bos
operator|.
name|setMaxSize
argument_list|(
operator|(
name|Long
operator|)
name|maxSize
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|bos
operator|.
name|setMaxSize
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
operator|(
name|String
operator|)
name|maxSize
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
name|String
name|createContentID
parameter_list|(
name|String
name|ns
parameter_list|)
throws|throws
name|UnsupportedEncodingException
block|{
comment|// tend to change
name|String
name|cid
init|=
literal|"cxf.apache.org"
decl_stmt|;
name|String
name|name
init|=
name|ATT_UUID
operator|+
literal|"-"
operator|+
name|String
operator|.
name|valueOf
argument_list|(
operator|++
name|counter
argument_list|)
decl_stmt|;
if|if
condition|(
name|ns
operator|!=
literal|null
operator|&&
operator|(
name|ns
operator|.
name|length
argument_list|()
operator|>
literal|0
operator|)
condition|)
block|{
try|try
block|{
name|URI
name|uri
init|=
operator|new
name|URI
argument_list|(
name|ns
argument_list|)
decl_stmt|;
name|String
name|host
init|=
name|uri
operator|.
name|toURL
argument_list|()
operator|.
name|getHost
argument_list|()
decl_stmt|;
name|cid
operator|=
name|host
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|cid
operator|=
name|ns
expr_stmt|;
block|}
block|}
return|return
name|URLEncoder
operator|.
name|encode
argument_list|(
name|name
argument_list|,
literal|"UTF-8"
argument_list|)
operator|+
literal|"@"
operator|+
name|URLEncoder
operator|.
name|encode
argument_list|(
name|cid
argument_list|,
literal|"UTF-8"
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|getUniqueBoundaryValue
parameter_list|()
block|{
comment|//generate a random UUID.
comment|//we don't need the cryptographically secure random uuid that
comment|//UUID.randomUUID() will produce.  Thus, use a faster
comment|//pseudo-random thing
name|long
name|leastSigBits
init|=
literal|0
decl_stmt|;
name|long
name|mostSigBits
init|=
literal|0
decl_stmt|;
synchronized|synchronized
init|(
name|BOUND_RANDOM
init|)
block|{
name|mostSigBits
operator|=
name|BOUND_RANDOM
operator|.
name|nextLong
argument_list|()
expr_stmt|;
name|leastSigBits
operator|=
name|BOUND_RANDOM
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
name|mostSigBits
operator|&=
literal|0xFFFFFFFFFFFF0FFFL
expr_stmt|;
comment|//clear version
name|mostSigBits
operator||=
literal|0x0000000000004000L
expr_stmt|;
comment|//set version
name|leastSigBits
operator|&=
literal|0x3FFFFFFFFFFFFFFFL
expr_stmt|;
comment|//clear the variant
name|leastSigBits
operator||=
literal|0x8000000000000000L
expr_stmt|;
comment|//set to IETF variant
name|UUID
name|result
init|=
operator|new
name|UUID
argument_list|(
name|mostSigBits
argument_list|,
name|leastSigBits
argument_list|)
decl_stmt|;
return|return
literal|"uuid:"
operator|+
name|result
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|String
name|getAttachmentPartHeader
parameter_list|(
name|Attachment
name|att
parameter_list|)
block|{
name|StringBuilder
name|buffer
init|=
operator|new
name|StringBuilder
argument_list|(
literal|200
argument_list|)
decl_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|HttpHeaderHelper
operator|.
name|getHeaderKey
argument_list|(
name|HttpHeaderHelper
operator|.
name|CONTENT_TYPE
argument_list|)
operator|+
literal|": "
operator|+
name|att
operator|.
name|getDataHandler
argument_list|()
operator|.
name|getContentType
argument_list|()
operator|+
literal|";\r\n"
argument_list|)
expr_stmt|;
if|if
condition|(
name|att
operator|.
name|isXOP
argument_list|()
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|"Content-Transfer-Encoding: binary\r\n"
argument_list|)
expr_stmt|;
block|}
name|String
name|id
init|=
name|att
operator|.
name|getId
argument_list|()
decl_stmt|;
if|if
condition|(
name|id
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|'<'
condition|)
block|{
name|id
operator|=
name|id
operator|.
name|substring
argument_list|(
literal|1
argument_list|,
name|id
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|buffer
operator|.
name|append
argument_list|(
literal|"Content-ID:<"
operator|+
name|id
operator|+
literal|">\r\n\r\n"
argument_list|)
expr_stmt|;
return|return
name|buffer
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|DataHandler
argument_list|>
name|getDHMap
parameter_list|(
name|Collection
argument_list|<
name|Attachment
argument_list|>
name|attachments
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|DataHandler
argument_list|>
name|dataHandlers
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|attachments
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|attachments
operator|instanceof
name|LazyAttachmentCollection
condition|)
block|{
name|dataHandlers
operator|=
operator|(
operator|(
name|LazyAttachmentCollection
operator|)
name|attachments
operator|)
operator|.
name|createDataHandlerMap
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|//preserve the order of iteration
name|dataHandlers
operator|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|DataHandler
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|Attachment
name|attachment
range|:
name|attachments
control|)
block|{
name|dataHandlers
operator|.
name|put
argument_list|(
name|attachment
operator|.
name|getId
argument_list|()
argument_list|,
name|attachment
operator|.
name|getDataHandler
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|dataHandlers
operator|==
literal|null
condition|?
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|DataHandler
argument_list|>
argument_list|()
else|:
name|dataHandlers
return|;
block|}
specifier|public
specifier|static
name|String
name|cleanContentId
parameter_list|(
name|String
name|id
parameter_list|)
block|{
if|if
condition|(
name|id
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|id
operator|.
name|startsWith
argument_list|(
literal|"<"
argument_list|)
condition|)
block|{
comment|// strip<>
name|id
operator|=
name|id
operator|.
name|substring
argument_list|(
literal|1
argument_list|,
name|id
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
comment|// strip cid:
if|if
condition|(
name|id
operator|.
name|startsWith
argument_list|(
literal|"cid:"
argument_list|)
condition|)
block|{
name|id
operator|=
name|id
operator|.
name|substring
argument_list|(
literal|4
argument_list|)
expr_stmt|;
block|}
comment|// urldecode. Is this bad even without cid:? What does decode do with malformed %-signs, anyhow?
try|try
block|{
name|id
operator|=
name|URLDecoder
operator|.
name|decode
argument_list|(
name|id
argument_list|,
literal|"UTF-8"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
comment|//ignore, keep id as is
block|}
block|}
if|if
condition|(
name|id
operator|==
literal|null
condition|)
block|{
comment|//no Content-ID, set cxf default ID
name|id
operator|=
literal|"root.message@cxf.apache.org"
expr_stmt|;
block|}
return|return
name|id
return|;
block|}
specifier|static
name|String
name|getHeaderValue
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|v
parameter_list|)
block|{
if|if
condition|(
name|v
operator|!=
literal|null
operator|&&
name|v
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
return|return
name|v
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|static
name|String
name|getHeaderValue
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|v
parameter_list|,
name|String
name|delim
parameter_list|)
block|{
if|if
condition|(
name|v
operator|!=
literal|null
operator|&&
name|v
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|StringBuilder
name|b
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|s
range|:
name|v
control|)
block|{
if|if
condition|(
name|b
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|b
operator|.
name|append
argument_list|(
name|delim
argument_list|)
expr_stmt|;
block|}
name|b
operator|.
name|append
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
return|return
name|b
operator|.
name|toString
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|static
name|String
name|getHeader
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|headers
parameter_list|,
name|String
name|h
parameter_list|)
block|{
return|return
name|getHeaderValue
argument_list|(
name|headers
operator|.
name|get
argument_list|(
name|h
argument_list|)
argument_list|)
return|;
block|}
specifier|static
name|String
name|getHeader
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|headers
parameter_list|,
name|String
name|h
parameter_list|,
name|String
name|delim
parameter_list|)
block|{
return|return
name|getHeaderValue
argument_list|(
name|headers
operator|.
name|get
argument_list|(
name|h
argument_list|)
argument_list|,
name|delim
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Attachment
name|createAttachment
parameter_list|(
name|InputStream
name|stream
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|headers
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|id
init|=
name|cleanContentId
argument_list|(
name|getHeader
argument_list|(
name|headers
argument_list|,
literal|"Content-ID"
argument_list|)
argument_list|)
decl_stmt|;
name|AttachmentImpl
name|att
init|=
operator|new
name|AttachmentImpl
argument_list|(
name|id
argument_list|)
decl_stmt|;
specifier|final
name|String
name|ct
init|=
name|getHeader
argument_list|(
name|headers
argument_list|,
literal|"Content-Type"
argument_list|)
decl_stmt|;
name|String
name|cd
init|=
name|getHeader
argument_list|(
name|headers
argument_list|,
literal|"Content-Disposition"
argument_list|)
decl_stmt|;
name|String
name|fileName
init|=
name|getContentDispositionFileName
argument_list|(
name|cd
argument_list|)
decl_stmt|;
name|String
name|encoding
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|e
range|:
name|headers
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|name
init|=
name|e
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"Content-Transfer-Encoding"
argument_list|)
condition|)
block|{
name|encoding
operator|=
name|getHeader
argument_list|(
name|headers
argument_list|,
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"binary"
operator|.
name|equalsIgnoreCase
argument_list|(
name|encoding
argument_list|)
condition|)
block|{
name|att
operator|.
name|setXOP
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
name|att
operator|.
name|setHeader
argument_list|(
name|name
argument_list|,
name|getHeaderValue
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|encoding
operator|==
literal|null
condition|)
block|{
name|encoding
operator|=
literal|"binary"
expr_stmt|;
block|}
name|DataSource
name|source
init|=
operator|new
name|AttachmentDataSource
argument_list|(
name|ct
argument_list|,
name|decode
argument_list|(
name|stream
argument_list|,
name|encoding
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|fileName
argument_list|)
condition|)
block|{
operator|(
operator|(
name|AttachmentDataSource
operator|)
name|source
operator|)
operator|.
name|setName
argument_list|(
name|fileName
argument_list|)
expr_stmt|;
block|}
name|att
operator|.
name|setDataHandler
argument_list|(
operator|new
name|DataHandler
argument_list|(
name|source
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|att
return|;
block|}
specifier|static
name|String
name|getContentDispositionFileName
parameter_list|(
name|String
name|cd
parameter_list|)
block|{
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|cd
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|//TODO: save ContentDisposition directly
return|return
operator|new
name|ContentDisposition
argument_list|(
name|cd
argument_list|)
operator|.
name|getParameter
argument_list|(
literal|"filename"
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|InputStream
name|decode
parameter_list|(
name|InputStream
name|in
parameter_list|,
name|String
name|encoding
parameter_list|)
throws|throws
name|IOException
block|{
name|encoding
operator|=
name|encoding
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
comment|// some encodings are just pass-throughs, with no real decoding.
if|if
condition|(
literal|"binary"
operator|.
name|equals
argument_list|(
name|encoding
argument_list|)
operator|||
literal|"7bit"
operator|.
name|equals
argument_list|(
name|encoding
argument_list|)
operator|||
literal|"8bit"
operator|.
name|equals
argument_list|(
name|encoding
argument_list|)
condition|)
block|{
return|return
name|in
return|;
block|}
elseif|else
if|if
condition|(
literal|"base64"
operator|.
name|equals
argument_list|(
name|encoding
argument_list|)
condition|)
block|{
return|return
operator|new
name|Base64DecoderStream
argument_list|(
name|in
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
literal|"quoted-printable"
operator|.
name|equals
argument_list|(
name|encoding
argument_list|)
condition|)
block|{
return|return
operator|new
name|QuotedPrintableDecoderStream
argument_list|(
name|in
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unknown encoding "
operator|+
name|encoding
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|boolean
name|isTypeSupported
parameter_list|(
name|String
name|contentType
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|types
parameter_list|)
block|{
if|if
condition|(
name|contentType
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|contentType
operator|=
name|contentType
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|s
range|:
name|types
control|)
block|{
if|if
condition|(
name|contentType
operator|.
name|indexOf
argument_list|(
name|s
argument_list|)
operator|!=
operator|-
literal|1
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|public
specifier|static
name|Attachment
name|createMtomAttachment
parameter_list|(
name|boolean
name|isXop
parameter_list|,
name|String
name|mimeType
parameter_list|,
name|String
name|elementNS
parameter_list|,
name|byte
index|[]
name|data
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|,
name|int
name|threshold
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isXop
operator|||
name|length
operator|<=
name|threshold
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|mimeType
operator|==
literal|null
condition|)
block|{
name|mimeType
operator|=
literal|"application/octet-stream"
expr_stmt|;
block|}
name|ByteDataSource
name|source
init|=
operator|new
name|ByteDataSource
argument_list|(
name|data
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
decl_stmt|;
name|source
operator|.
name|setContentType
argument_list|(
name|mimeType
argument_list|)
expr_stmt|;
name|DataHandler
name|handler
init|=
operator|new
name|DataHandler
argument_list|(
name|source
argument_list|)
decl_stmt|;
name|String
name|id
decl_stmt|;
try|try
block|{
name|id
operator|=
name|AttachmentUtil
operator|.
name|createContentID
argument_list|(
name|elementNS
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|Fault
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|AttachmentImpl
name|att
init|=
operator|new
name|AttachmentImpl
argument_list|(
name|id
argument_list|,
name|handler
argument_list|)
decl_stmt|;
name|att
operator|.
name|setXOP
argument_list|(
name|isXop
argument_list|)
expr_stmt|;
return|return
name|att
return|;
block|}
specifier|public
specifier|static
name|Attachment
name|createMtomAttachmentFromDH
parameter_list|(
name|boolean
name|isXop
parameter_list|,
name|DataHandler
name|handler
parameter_list|,
name|String
name|elementNS
parameter_list|,
name|int
name|threshold
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isXop
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// The following is just wrong. Even if the DataHandler has a stream, we should still
comment|// apply the threshold.
try|try
block|{
name|DataSource
name|ds
init|=
name|handler
operator|.
name|getDataSource
argument_list|()
decl_stmt|;
if|if
condition|(
name|ds
operator|instanceof
name|FileDataSource
condition|)
block|{
name|FileDataSource
name|fds
init|=
operator|(
name|FileDataSource
operator|)
name|ds
decl_stmt|;
name|File
name|file
init|=
name|fds
operator|.
name|getFile
argument_list|()
decl_stmt|;
if|if
condition|(
name|file
operator|.
name|length
argument_list|()
operator|<
name|threshold
condition|)
block|{
return|return
literal|null
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|ds
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"ObjectDataSource"
argument_list|)
condition|)
block|{
name|Object
name|o
init|=
name|handler
operator|.
name|getContent
argument_list|()
decl_stmt|;
if|if
condition|(
name|o
operator|instanceof
name|String
operator|&&
operator|(
operator|(
name|String
operator|)
name|o
operator|)
operator|.
name|length
argument_list|()
operator|<
name|threshold
condition|)
block|{
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
name|o
operator|instanceof
name|byte
index|[]
operator|&&
operator|(
operator|(
name|byte
index|[]
operator|)
name|o
operator|)
operator|.
name|length
operator|<
name|threshold
condition|)
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e1
parameter_list|)
block|{
comment|//      ignore, just do the normal attachment thing
block|}
name|String
name|id
decl_stmt|;
try|try
block|{
name|id
operator|=
name|AttachmentUtil
operator|.
name|createContentID
argument_list|(
name|elementNS
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|Fault
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|AttachmentImpl
name|att
init|=
operator|new
name|AttachmentImpl
argument_list|(
name|id
argument_list|,
name|handler
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|handler
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
comment|//set Content-Disposition attachment header if filename isn't null
name|String
name|file
init|=
name|handler
operator|.
name|getName
argument_list|()
decl_stmt|;
name|File
name|f
init|=
operator|new
name|File
argument_list|(
name|file
argument_list|)
decl_stmt|;
if|if
condition|(
name|f
operator|.
name|exists
argument_list|()
operator|&&
name|f
operator|.
name|isFile
argument_list|()
condition|)
block|{
name|file
operator|=
name|f
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
name|att
operator|.
name|setHeader
argument_list|(
literal|"Content-Disposition"
argument_list|,
literal|"attachment;name=\""
operator|+
name|file
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
name|att
operator|.
name|setXOP
argument_list|(
name|isXop
argument_list|)
expr_stmt|;
return|return
name|att
return|;
block|}
specifier|public
specifier|static
name|DataSource
name|getAttachmentDataSource
parameter_list|(
name|String
name|contentId
parameter_list|,
name|Collection
argument_list|<
name|Attachment
argument_list|>
name|atts
parameter_list|)
block|{
comment|// Is this right? - DD
if|if
condition|(
name|contentId
operator|.
name|startsWith
argument_list|(
literal|"cid:"
argument_list|)
condition|)
block|{
try|try
block|{
name|contentId
operator|=
name|URLDecoder
operator|.
name|decode
argument_list|(
name|contentId
operator|.
name|substring
argument_list|(
literal|4
argument_list|)
argument_list|,
literal|"UTF-8"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|ue
parameter_list|)
block|{
name|contentId
operator|=
name|contentId
operator|.
name|substring
argument_list|(
literal|4
argument_list|)
expr_stmt|;
block|}
return|return
name|loadDataSource
argument_list|(
name|contentId
argument_list|,
name|atts
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|contentId
operator|.
name|indexOf
argument_list|(
literal|"://"
argument_list|)
operator|==
operator|-
literal|1
condition|)
block|{
return|return
name|loadDataSource
argument_list|(
name|contentId
argument_list|,
name|atts
argument_list|)
return|;
block|}
else|else
block|{
try|try
block|{
return|return
operator|new
name|URLDataSource
argument_list|(
operator|new
name|URL
argument_list|(
name|contentId
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|Fault
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
specifier|private
specifier|static
name|DataSource
name|loadDataSource
parameter_list|(
name|String
name|contentId
parameter_list|,
name|Collection
argument_list|<
name|Attachment
argument_list|>
name|atts
parameter_list|)
block|{
return|return
operator|new
name|LazyDataSource
argument_list|(
name|contentId
argument_list|,
name|atts
argument_list|)
return|;
block|}
block|}
end_class

end_unit

