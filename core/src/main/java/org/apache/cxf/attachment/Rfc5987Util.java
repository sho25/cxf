begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|attachment
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_comment
comment|/**  * Utility for encoding and decoding values according to RFC 5987. Assumes the  * caller already knows the encoding scheme for the value.  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|Rfc5987Util
block|{
specifier|private
specifier|static
specifier|final
name|Pattern
name|ENCODED_VALUE_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"%[0-9a-f]{2}|\\S"
argument_list|,
name|Pattern
operator|.
name|CASE_INSENSITIVE
argument_list|)
decl_stmt|;
specifier|private
name|Rfc5987Util
parameter_list|()
block|{      }
specifier|public
specifier|static
name|String
name|encode
parameter_list|(
specifier|final
name|String
name|s
parameter_list|)
throws|throws
name|UnsupportedEncodingException
block|{
return|return
name|encode
argument_list|(
name|s
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
operator|.
name|name
argument_list|()
argument_list|)
return|;
block|}
comment|// http://stackoverflow.com/questions/11302361/ (continued next line)
comment|// handling-filename-parameters-with-spaces-via-rfc-5987-results-in-in-filenam
specifier|public
specifier|static
name|String
name|encode
parameter_list|(
specifier|final
name|String
name|s
parameter_list|,
name|String
name|encoding
parameter_list|)
throws|throws
name|UnsupportedEncodingException
block|{
specifier|final
name|byte
index|[]
name|rawBytes
init|=
name|s
operator|.
name|getBytes
argument_list|(
name|encoding
argument_list|)
decl_stmt|;
specifier|final
name|int
name|len
init|=
name|rawBytes
operator|.
name|length
decl_stmt|;
specifier|final
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
name|len
operator|<<
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|char
index|[]
name|digits
init|=
block|{
literal|'0'
block|,
literal|'1'
block|,
literal|'2'
block|,
literal|'3'
block|,
literal|'4'
block|,
literal|'5'
block|,
literal|'6'
block|,
literal|'7'
block|,
literal|'8'
block|,
literal|'9'
block|,
literal|'a'
block|,
literal|'b'
block|,
literal|'c'
block|,
literal|'d'
block|,
literal|'e'
block|,
literal|'f'
block|}
decl_stmt|;
specifier|final
name|byte
index|[]
name|attributeChars
init|=
block|{
literal|'!'
block|,
literal|'#'
block|,
literal|'$'
block|,
literal|'&'
block|,
literal|'+'
block|,
literal|'-'
block|,
literal|'.'
block|,
literal|'0'
block|,
literal|'1'
block|,
literal|'2'
block|,
literal|'3'
block|,
literal|'4'
block|,
literal|'5'
block|,
literal|'6'
block|,
literal|'7'
block|,
literal|'8'
block|,
literal|'9'
block|,
literal|'A'
block|,
literal|'B'
block|,
literal|'C'
block|,
literal|'D'
block|,
literal|'E'
block|,
literal|'F'
block|,
literal|'G'
block|,
literal|'H'
block|,
literal|'I'
block|,
literal|'J'
block|,
literal|'K'
block|,
literal|'L'
block|,
literal|'M'
block|,
literal|'N'
block|,
literal|'O'
block|,
literal|'P'
block|,
literal|'Q'
block|,
literal|'R'
block|,
literal|'S'
block|,
literal|'T'
block|,
literal|'U'
block|,
literal|'V'
block|,
literal|'W'
block|,
literal|'X'
block|,
literal|'Y'
block|,
literal|'Z'
block|,
literal|'^'
block|,
literal|'_'
block|,
literal|'`'
block|,
literal|'a'
block|,
literal|'b'
block|,
literal|'c'
block|,
literal|'d'
block|,
literal|'e'
block|,
literal|'f'
block|,
literal|'g'
block|,
literal|'h'
block|,
literal|'i'
block|,
literal|'j'
block|,
literal|'k'
block|,
literal|'l'
block|,
literal|'m'
block|,
literal|'n'
block|,
literal|'o'
block|,
literal|'p'
block|,
literal|'q'
block|,
literal|'r'
block|,
literal|'s'
block|,
literal|'t'
block|,
literal|'u'
block|,
literal|'v'
block|,
literal|'w'
block|,
literal|'x'
block|,
literal|'y'
block|,
literal|'z'
block|,
literal|'|'
block|,
literal|'~'
block|}
decl_stmt|;
for|for
control|(
specifier|final
name|byte
name|b
range|:
name|rawBytes
control|)
block|{
if|if
condition|(
name|Arrays
operator|.
name|binarySearch
argument_list|(
name|attributeChars
argument_list|,
name|b
argument_list|)
operator|>=
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
operator|(
name|char
operator|)
name|b
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
literal|'%'
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|digits
index|[
literal|0x0f
operator|&
operator|(
name|b
operator|>>>
literal|4
operator|)
index|]
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|digits
index|[
name|b
operator|&
literal|0x0f
index|]
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|String
name|decode
parameter_list|(
name|String
name|s
parameter_list|,
name|String
name|encoding
parameter_list|)
throws|throws
name|UnsupportedEncodingException
block|{
name|Matcher
name|matcher
init|=
name|ENCODED_VALUE_PATTERN
operator|.
name|matcher
argument_list|(
name|s
argument_list|)
decl_stmt|;
name|ByteArrayOutputStream
name|bos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
while|while
condition|(
name|matcher
operator|.
name|find
argument_list|()
condition|)
block|{
name|String
name|matched
init|=
name|matcher
operator|.
name|group
argument_list|()
decl_stmt|;
if|if
condition|(
name|matched
operator|.
name|startsWith
argument_list|(
literal|"%"
argument_list|)
condition|)
block|{
name|int
name|value
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|matched
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|16
argument_list|)
decl_stmt|;
name|bos
operator|.
name|write
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|bos
operator|.
name|write
argument_list|(
name|matched
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|String
argument_list|(
name|bos
operator|.
name|toByteArray
argument_list|()
argument_list|,
name|encoding
argument_list|)
return|;
block|}
block|}
end_class

end_unit

