begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|attachment
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_class
specifier|public
class|class
name|ContentDisposition
block|{
specifier|private
specifier|static
specifier|final
name|String
name|CD_HEADER_PARAMS_EXPRESSION
init|=
literal|"(([\\w]+( )?=( )?\"[^\"]+\")|([\\w]+( )?=( )?[^;]+))"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Pattern
name|CD_HEADER_PARAMS_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
name|CD_HEADER_PARAMS_EXPRESSION
argument_list|)
decl_stmt|;
specifier|private
name|String
name|value
decl_stmt|;
specifier|private
name|String
name|type
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|ContentDisposition
parameter_list|(
name|String
name|value
parameter_list|)
block|{
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
name|String
name|tempValue
init|=
name|value
decl_stmt|;
name|int
name|index
init|=
name|tempValue
operator|.
name|indexOf
argument_list|(
literal|';'
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|>
literal|0
operator|&&
operator|!
operator|(
name|tempValue
operator|.
name|indexOf
argument_list|(
literal|'='
argument_list|)
operator|<
name|index
operator|)
condition|)
block|{
name|type
operator|=
name|tempValue
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|index
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
name|tempValue
operator|=
name|tempValue
operator|.
name|substring
argument_list|(
name|index
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
name|Matcher
name|m
init|=
name|CD_HEADER_PARAMS_PATTERN
operator|.
name|matcher
argument_list|(
name|tempValue
argument_list|)
decl_stmt|;
while|while
condition|(
name|m
operator|.
name|find
argument_list|()
condition|)
block|{
name|String
index|[]
name|pair
init|=
name|m
operator|.
name|group
argument_list|()
operator|.
name|trim
argument_list|()
operator|.
name|split
argument_list|(
literal|"="
argument_list|)
decl_stmt|;
name|params
operator|.
name|put
argument_list|(
name|pair
index|[
literal|0
index|]
operator|.
name|trim
argument_list|()
argument_list|,
name|pair
operator|.
name|length
operator|==
literal|2
condition|?
name|pair
index|[
literal|1
index|]
operator|.
name|trim
argument_list|()
operator|.
name|replace
argument_list|(
literal|"\""
argument_list|,
literal|""
argument_list|)
else|:
literal|""
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|getType
parameter_list|()
block|{
return|return
name|type
return|;
block|}
specifier|public
name|String
name|getParameter
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|params
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getParameters
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|params
argument_list|)
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|value
return|;
block|}
block|}
end_class

end_unit

