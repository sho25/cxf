begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|attachment
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Graphics
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Image
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|MediaTracker
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|datatransfer
operator|.
name|DataFlavor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|datatransfer
operator|.
name|UnsupportedFlavorException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|image
operator|.
name|BufferedImage
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|activation
operator|.
name|ActivationDataFlavor
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|activation
operator|.
name|DataContentHandler
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|activation
operator|.
name|DataSource
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|imageio
operator|.
name|ImageIO
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|imageio
operator|.
name|ImageWriter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|imageio
operator|.
name|stream
operator|.
name|ImageOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|IOUtils
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
specifier|public
class|class
name|ImageDataContentHandler
implements|implements
name|DataContentHandler
block|{
specifier|private
specifier|static
specifier|final
name|DataFlavor
index|[]
name|FLAVORS
decl_stmt|;
static|static
block|{
name|String
index|[]
name|types
init|=
name|ImageIO
operator|.
name|getReaderMIMETypes
argument_list|()
decl_stmt|;
name|FLAVORS
operator|=
operator|new
name|DataFlavor
index|[
name|types
operator|.
name|length
index|]
expr_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|type
range|:
name|types
control|)
block|{
name|FLAVORS
index|[
name|i
operator|++
index|]
operator|=
operator|new
name|ActivationDataFlavor
argument_list|(
name|Image
operator|.
name|class
argument_list|,
name|type
argument_list|,
literal|"Image"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|ImageDataContentHandler
parameter_list|()
block|{      }
specifier|public
name|Object
name|getContent
parameter_list|(
name|DataSource
name|ds
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|ImageIO
operator|.
name|read
argument_list|(
name|ds
operator|.
name|getInputStream
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|Object
name|getTransferData
parameter_list|(
name|DataFlavor
name|df
parameter_list|,
name|DataSource
name|ds
parameter_list|)
throws|throws
name|UnsupportedFlavorException
throws|,
name|IOException
block|{
for|for
control|(
name|DataFlavor
name|f
range|:
name|FLAVORS
control|)
block|{
if|if
condition|(
name|f
operator|.
name|equals
argument_list|(
name|df
argument_list|)
condition|)
block|{
return|return
name|getContent
argument_list|(
name|ds
argument_list|)
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|DataFlavor
index|[]
name|getTransferDataFlavors
parameter_list|()
block|{
return|return
name|FLAVORS
return|;
block|}
specifier|public
name|void
name|writeTo
parameter_list|(
name|Object
name|obj
parameter_list|,
name|String
name|mimeType
parameter_list|,
name|OutputStream
name|os
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|obj
operator|instanceof
name|Image
condition|)
block|{
name|Iterator
argument_list|<
name|ImageWriter
argument_list|>
name|writers
init|=
name|ImageIO
operator|.
name|getImageWritersByMIMEType
argument_list|(
name|mimeType
argument_list|)
decl_stmt|;
if|if
condition|(
name|writers
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|ImageWriter
name|writer
init|=
name|writers
operator|.
name|next
argument_list|()
decl_stmt|;
name|BufferedImage
name|bimg
init|=
name|convertToBufferedImage
argument_list|(
operator|(
name|Image
operator|)
name|obj
argument_list|)
decl_stmt|;
name|ImageOutputStream
name|out
init|=
name|ImageIO
operator|.
name|createImageOutputStream
argument_list|(
name|os
argument_list|)
decl_stmt|;
name|writer
operator|.
name|setOutput
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|bimg
argument_list|)
expr_stmt|;
name|writer
operator|.
name|dispose
argument_list|()
expr_stmt|;
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
return|return;
block|}
block|}
elseif|else
if|if
condition|(
name|obj
operator|instanceof
name|byte
index|[]
condition|)
block|{
name|os
operator|.
name|write
argument_list|(
operator|(
name|byte
index|[]
operator|)
name|obj
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|obj
operator|instanceof
name|InputStream
condition|)
block|{
name|IOUtils
operator|.
name|copyAndCloseInput
argument_list|(
operator|(
name|InputStream
operator|)
name|obj
argument_list|,
name|os
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|obj
operator|instanceof
name|File
condition|)
block|{
name|FileInputStream
name|file
init|=
operator|new
name|FileInputStream
argument_list|(
operator|(
name|File
operator|)
name|obj
argument_list|)
decl_stmt|;
name|IOUtils
operator|.
name|copyAndCloseInput
argument_list|(
name|file
argument_list|,
name|os
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Attachment type not spported "
operator|+
name|obj
operator|.
name|getClass
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
name|BufferedImage
name|convertToBufferedImage
parameter_list|(
name|Image
name|image
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|image
operator|instanceof
name|BufferedImage
condition|)
block|{
return|return
operator|(
name|BufferedImage
operator|)
name|image
return|;
block|}
comment|// Wait until the image is completely loaded
name|MediaTracker
name|tracker
init|=
operator|new
name|MediaTracker
argument_list|(
operator|new
name|Component
argument_list|()
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|977142547536262901L
decl_stmt|;
block|}
argument_list|)
decl_stmt|;
name|tracker
operator|.
name|addImage
argument_list|(
name|image
argument_list|,
literal|0
argument_list|)
expr_stmt|;
try|try
block|{
name|tracker
operator|.
name|waitForAll
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|IOException
name|ioe
init|=
operator|new
name|IOException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
decl_stmt|;
name|ioe
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
name|ioe
throw|;
block|}
comment|// Create a BufferedImage so we can write it out later
name|BufferedImage
name|bufImage
init|=
operator|new
name|BufferedImage
argument_list|(
name|image
operator|.
name|getWidth
argument_list|(
literal|null
argument_list|)
argument_list|,
name|image
operator|.
name|getHeight
argument_list|(
literal|null
argument_list|)
argument_list|,
name|BufferedImage
operator|.
name|TYPE_INT_ARGB
argument_list|)
decl_stmt|;
name|Graphics
name|g
init|=
name|bufImage
operator|.
name|createGraphics
argument_list|()
decl_stmt|;
name|g
operator|.
name|drawImage
argument_list|(
name|image
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|g
operator|.
name|dispose
argument_list|()
expr_stmt|;
return|return
name|bufImage
return|;
block|}
block|}
end_class

end_unit

