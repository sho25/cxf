begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|attachment
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_class
specifier|public
class|class
name|QuotedPrintableDecoderStream
extends|extends
name|InputStream
block|{
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|ENCODING_TABLE
init|=
block|{
operator|(
name|byte
operator|)
literal|'0'
block|,
operator|(
name|byte
operator|)
literal|'1'
block|,
operator|(
name|byte
operator|)
literal|'2'
block|,
operator|(
name|byte
operator|)
literal|'3'
block|,
operator|(
name|byte
operator|)
literal|'4'
block|,
operator|(
name|byte
operator|)
literal|'5'
block|,
operator|(
name|byte
operator|)
literal|'6'
block|,
operator|(
name|byte
operator|)
literal|'7'
block|,
operator|(
name|byte
operator|)
literal|'8'
block|,
operator|(
name|byte
operator|)
literal|'9'
block|,
operator|(
name|byte
operator|)
literal|'A'
block|,
operator|(
name|byte
operator|)
literal|'B'
block|,
operator|(
name|byte
operator|)
literal|'C'
block|,
operator|(
name|byte
operator|)
literal|'D'
block|,
operator|(
name|byte
operator|)
literal|'E'
block|,
operator|(
name|byte
operator|)
literal|'F'
block|}
decl_stmt|;
comment|/*      * set up the decoding table.      */
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|DECODING_TABLE
init|=
operator|new
name|byte
index|[
literal|128
index|]
decl_stmt|;
static|static
block|{
comment|// initialize the decoding table
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ENCODING_TABLE
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|DECODING_TABLE
index|[
name|ENCODING_TABLE
index|[
name|i
index|]
index|]
operator|=
operator|(
name|byte
operator|)
name|i
expr_stmt|;
block|}
block|}
specifier|private
name|int
name|deferredWhitespace
decl_stmt|;
specifier|private
name|int
name|cachedCharacter
init|=
operator|-
literal|1
decl_stmt|;
specifier|private
specifier|final
name|InputStream
name|in
decl_stmt|;
specifier|public
name|QuotedPrintableDecoderStream
parameter_list|(
name|InputStream
name|is
parameter_list|)
block|{
name|this
operator|.
name|in
operator|=
name|is
expr_stmt|;
block|}
specifier|private
name|int
name|decodeNonspaceChar
parameter_list|(
name|int
name|ch
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|ch
operator|!=
literal|'='
condition|)
block|{
return|return
name|ch
return|;
block|}
comment|// we need to get two characters after the quotation marker
name|byte
index|[]
name|b
init|=
operator|new
name|byte
index|[
literal|2
index|]
decl_stmt|;
if|if
condition|(
name|in
operator|.
name|read
argument_list|(
name|b
argument_list|)
operator|<
literal|2
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Truncated quoted printable data"
argument_list|)
throw|;
block|}
if|if
condition|(
name|b
index|[
literal|0
index|]
operator|==
literal|'\r'
condition|)
block|{
comment|// we've found an encoded carriage return. The next char needs to be a newline
if|if
condition|(
name|b
index|[
literal|1
index|]
operator|!=
literal|'\n'
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Invalid quoted printable encoding"
argument_list|)
throw|;
block|}
comment|// this was a soft linebreak inserted by the encoding. We just toss this away
comment|// on decode. We need to return something, so recurse and decode the next.
return|return
name|read
argument_list|()
return|;
block|}
comment|// this is a hex pair we need to convert back to a single byte.
name|b
index|[
literal|0
index|]
operator|=
name|DECODING_TABLE
index|[
name|b
index|[
literal|0
index|]
index|]
expr_stmt|;
name|b
index|[
literal|1
index|]
operator|=
name|DECODING_TABLE
index|[
name|b
index|[
literal|1
index|]
index|]
expr_stmt|;
return|return
operator|(
name|b
index|[
literal|0
index|]
operator|<<
literal|4
operator|)
operator||
name|b
index|[
literal|1
index|]
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|read
parameter_list|()
throws|throws
name|IOException
block|{
comment|// we potentially need to scan over spans of whitespace characters to determine if they're real
comment|// we just return blanks until the count goes to zero.
if|if
condition|(
name|deferredWhitespace
operator|>
literal|0
condition|)
block|{
name|deferredWhitespace
operator|--
expr_stmt|;
return|return
literal|' '
return|;
block|}
comment|// we may have needed to scan ahead to find the first non-blank character, which we would store here.
comment|// hand that back once we're done with the blanks.
if|if
condition|(
name|cachedCharacter
operator|!=
operator|-
literal|1
condition|)
block|{
name|int
name|result
init|=
name|cachedCharacter
decl_stmt|;
name|cachedCharacter
operator|=
operator|-
literal|1
expr_stmt|;
return|return
name|result
return|;
block|}
name|int
name|ch
init|=
name|in
operator|.
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
name|ch
operator|!=
literal|' '
condition|)
block|{
return|return
name|decodeNonspaceChar
argument_list|(
name|ch
argument_list|)
return|;
block|}
comment|// space characters are a pain. We need to scan ahead until we find a non-space character.
comment|// if the character is a line terminator, we need to discard the blanks.
comment|// scan forward, counting the characters.
while|while
condition|(
operator|(
name|ch
operator|=
name|in
operator|.
name|read
argument_list|()
operator|)
operator|==
literal|' '
condition|)
block|{
name|deferredWhitespace
operator|++
expr_stmt|;
block|}
comment|// is this a lineend at the current location?
if|if
condition|(
name|ch
operator|==
operator|-
literal|1
operator|||
name|ch
operator|==
literal|'\r'
operator|||
name|ch
operator|==
literal|'\n'
condition|)
block|{
comment|// those blanks we so zealously counted up don't really exist. Clear out the counter.
name|deferredWhitespace
operator|=
literal|0
expr_stmt|;
comment|// return the real significant character now.
return|return
name|ch
return|;
block|}
comment|// remember this character for later, after we've used up the deferred blanks.
name|cachedCharacter
operator|=
name|decodeNonspaceChar
argument_list|(
name|ch
argument_list|)
expr_stmt|;
comment|// return this space. We did not include this one in the deferred count, so we're right in sync.
return|return
literal|' '
return|;
block|}
block|}
end_class

end_unit

