begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_comment
comment|/**  * Abstraction of Message Addressing Properties.  */
end_comment

begin_class
specifier|public
class|class
name|AddressingProperties
block|{
specifier|private
name|EndpointReferenceType
name|to
decl_stmt|;
specifier|private
name|AttributedURIType
name|toURIType
decl_stmt|;
specifier|private
name|EndpointReferenceType
name|from
decl_stmt|;
specifier|private
name|AttributedURIType
name|messageID
decl_stmt|;
specifier|private
name|EndpointReferenceType
name|replyTo
decl_stmt|;
specifier|private
name|EndpointReferenceType
name|faultTo
decl_stmt|;
specifier|private
name|RelatesToType
name|relatesTo
decl_stmt|;
specifier|private
name|AttributedURIType
name|action
decl_stmt|;
specifier|private
name|String
name|namespaceURI
decl_stmt|;
specifier|private
name|QName
name|duplicate
decl_stmt|;
specifier|private
name|List
argument_list|<
name|QName
argument_list|>
name|mustUnderstand
decl_stmt|;
specifier|private
name|boolean
name|isRequired
decl_stmt|;
comment|/**      * Constructor, defaults to 2005/08 namespace.      */
specifier|public
name|AddressingProperties
parameter_list|()
block|{
name|this
argument_list|(
name|Names
operator|.
name|WSA_NAMESPACE_NAME
argument_list|)
expr_stmt|;
block|}
comment|/**      * Constructor.      *      * @param uri the namespace URI      */
specifier|public
name|AddressingProperties
parameter_list|(
name|String
name|uri
parameter_list|)
block|{
name|namespaceURI
operator|=
name|uri
expr_stmt|;
block|}
specifier|public
name|EndpointReferenceType
name|getToEndpointReference
parameter_list|()
block|{
return|return
name|to
return|;
block|}
comment|/**      * Accessor for the<b>To</b> property.      * @return To property      */
specifier|public
name|AttributedURIType
name|getTo
parameter_list|()
block|{
if|if
condition|(
name|toURIType
operator|==
literal|null
condition|)
block|{
return|return
literal|null
operator|!=
name|to
condition|?
name|to
operator|.
name|getAddress
argument_list|()
else|:
literal|null
return|;
block|}
return|return
name|toURIType
return|;
block|}
comment|/**      * Mutator for the<b>To</b> property.      * @param t new value for To property      */
specifier|public
name|void
name|setTo
parameter_list|(
name|AttributedURIType
name|t
parameter_list|)
block|{
name|toURIType
operator|=
name|t
expr_stmt|;
block|}
comment|/**      * Mutator for the<b>To</b> property.      * @param epr new value for To property      */
specifier|public
name|void
name|setTo
parameter_list|(
name|EndpointReferenceType
name|epr
parameter_list|)
block|{
name|to
operator|=
name|epr
expr_stmt|;
name|toURIType
operator|=
literal|null
expr_stmt|;
block|}
comment|/**      * Accessor for the<b>From</b> property.      * @return current value of From property      */
specifier|public
name|EndpointReferenceType
name|getFrom
parameter_list|()
block|{
return|return
name|from
return|;
block|}
comment|/**      * Mutator for the<b>From</b> property.      * @param epr new value for From property      */
specifier|public
name|void
name|setFrom
parameter_list|(
name|EndpointReferenceType
name|epr
parameter_list|)
block|{
name|from
operator|=
name|epr
expr_stmt|;
block|}
comment|/**      * Accessor for the<b>MessageID</b> property.      * @return current value of MessageID property      */
specifier|public
name|AttributedURIType
name|getMessageID
parameter_list|()
block|{
return|return
name|messageID
return|;
block|}
comment|/**      * Mutator for the<b>MessageID</b> property.      * @param iri new value for MessageTo property      */
specifier|public
name|void
name|setMessageID
parameter_list|(
name|AttributedURIType
name|iri
parameter_list|)
block|{
name|messageID
operator|=
name|iri
expr_stmt|;
block|}
comment|/**      * Accessor for the<b>ReplyTo</b> property.      * @return current value of ReplyTo property      */
specifier|public
name|EndpointReferenceType
name|getReplyTo
parameter_list|()
block|{
return|return
name|replyTo
return|;
block|}
comment|/**      * Mutator for the<b>ReplyTo</b> property.      * @param ref new value for ReplyTo property      */
specifier|public
name|void
name|setReplyTo
parameter_list|(
name|EndpointReferenceType
name|ref
parameter_list|)
block|{
name|replyTo
operator|=
name|ref
expr_stmt|;
block|}
comment|/**      * Accessor for the<b>FaultTo</b> property.      * @return current value of FaultTo property      */
specifier|public
name|EndpointReferenceType
name|getFaultTo
parameter_list|()
block|{
return|return
name|faultTo
return|;
block|}
comment|/**      * Mutator for the<b>FaultTo</b> property.      * @param ref new value for FaultTo property      */
specifier|public
name|void
name|setFaultTo
parameter_list|(
name|EndpointReferenceType
name|ref
parameter_list|)
block|{
name|faultTo
operator|=
name|ref
expr_stmt|;
block|}
comment|/**      * Accessor for the<b>RelatesTo</b> property.      * @return current value of RelatesTo property      */
specifier|public
name|RelatesToType
name|getRelatesTo
parameter_list|()
block|{
return|return
name|relatesTo
return|;
block|}
comment|/**      * Mutator for the<b>RelatesTo</b> property.      * @param rel new value for RelatesTo property      */
specifier|public
name|void
name|setRelatesTo
parameter_list|(
name|RelatesToType
name|rel
parameter_list|)
block|{
name|relatesTo
operator|=
name|rel
expr_stmt|;
block|}
comment|/**      * Accessor for the<b>Action</b> property.      * @return current value of Action property      */
specifier|public
name|AttributedURIType
name|getAction
parameter_list|()
block|{
return|return
name|action
return|;
block|}
comment|/**      * Mutator for the<b>Action</b> property.      * @param iri new value for Action property      */
specifier|public
name|void
name|setAction
parameter_list|(
name|AttributedURIType
name|iri
parameter_list|)
block|{
name|action
operator|=
name|iri
expr_stmt|;
block|}
comment|/**      * @return WS-Addressing namespace URI      */
specifier|public
name|String
name|getNamespaceURI
parameter_list|()
block|{
return|return
name|namespaceURI
return|;
block|}
comment|/**      * Used to specify a different WS-Addressing namespace URI,      * so as to cause MAPs to be exposed (i.e. encoded in externalized      * message with a different WS-Addressing version).      */
specifier|public
name|void
name|exposeAs
parameter_list|(
name|String
name|uri
parameter_list|)
block|{
name|namespaceURI
operator|=
name|uri
expr_stmt|;
block|}
specifier|public
name|void
name|setDuplicate
parameter_list|(
name|QName
name|dup
parameter_list|)
block|{
name|duplicate
operator|=
name|dup
expr_stmt|;
block|}
specifier|public
name|QName
name|getDuplicate
parameter_list|()
block|{
return|return
name|duplicate
return|;
block|}
specifier|public
name|List
argument_list|<
name|QName
argument_list|>
name|getMustUnderstand
parameter_list|()
block|{
if|if
condition|(
name|mustUnderstand
operator|==
literal|null
condition|)
block|{
name|mustUnderstand
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
block|}
return|return
name|mustUnderstand
return|;
block|}
specifier|public
name|boolean
name|isRequired
parameter_list|()
block|{
return|return
name|isRequired
return|;
block|}
specifier|public
name|void
name|setRequired
parameter_list|(
name|boolean
name|b
parameter_list|)
block|{
name|isRequired
operator|=
name|b
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|'['
argument_list|)
expr_stmt|;
if|if
condition|(
literal|null
operator|!=
name|messageID
condition|)
block|{
if|if
condition|(
name|buf
operator|.
name|length
argument_list|()
operator|>
literal|1
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|buf
operator|.
name|append
argument_list|(
literal|"MessageId: "
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|messageID
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|null
operator|!=
name|action
condition|)
block|{
if|if
condition|(
name|buf
operator|.
name|length
argument_list|()
operator|>
literal|1
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|buf
operator|.
name|append
argument_list|(
literal|"Action: "
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|action
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|null
operator|!=
name|to
condition|)
block|{
if|if
condition|(
name|buf
operator|.
name|length
argument_list|()
operator|>
literal|1
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|buf
operator|.
name|append
argument_list|(
literal|"To: "
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|to
operator|.
name|getAddress
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|null
operator|!=
name|replyTo
condition|)
block|{
name|AttributedURIType
name|address
init|=
name|replyTo
operator|.
name|getAddress
argument_list|()
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|address
condition|)
block|{
if|if
condition|(
name|buf
operator|.
name|length
argument_list|()
operator|>
literal|1
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|buf
operator|.
name|append
argument_list|(
literal|"ReplyTo: "
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|address
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
literal|null
operator|!=
name|faultTo
condition|)
block|{
name|AttributedURIType
name|address
init|=
name|faultTo
operator|.
name|getAddress
argument_list|()
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|address
condition|)
block|{
if|if
condition|(
name|buf
operator|.
name|length
argument_list|()
operator|>
literal|1
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|buf
operator|.
name|append
argument_list|(
literal|"FaultTo: "
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|address
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
literal|null
operator|!=
name|relatesTo
condition|)
block|{
if|if
condition|(
name|buf
operator|.
name|length
argument_list|()
operator|>
literal|1
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|buf
operator|.
name|append
argument_list|(
literal|"RelatesTo: "
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|relatesTo
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|buf
operator|.
name|append
argument_list|(
literal|']'
argument_list|)
expr_stmt|;
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|AddressingProperties
name|createCompatibleResponseProperties
parameter_list|()
block|{
return|return
operator|new
name|AddressingProperties
argument_list|(
name|getNamespaceURI
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

