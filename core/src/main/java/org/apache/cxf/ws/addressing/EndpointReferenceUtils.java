begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|ref
operator|.
name|Reference
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|ref
operator|.
name|SoftReference
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|XMLConstants
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBElement
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|Marshaller
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamWriter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|Source
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|dom
operator|.
name|DOMResult
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|dom
operator|.
name|DOMSource
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|stream
operator|.
name|StreamSource
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|validation
operator|.
name|Schema
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|validation
operator|.
name|SchemaFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|ls
operator|.
name|LSInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|ls
operator|.
name|LSResourceResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|InputSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|Bus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|BusFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|jaxb
operator|.
name|JAXBContextCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|xmlschema
operator|.
name|LSInputImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|EndpointResolverRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|Server
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|ServerRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|LoadingByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|resource
operator|.
name|ExtendedURIResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|resource
operator|.
name|ResourceManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|SchemaInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|ServiceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|staxutils
operator|.
name|StaxUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|staxutils
operator|.
name|W3CDOMStreamWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|Destination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|MultiplexDestination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|wsdl
operator|.
name|AttributedQNameType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|wsdl
operator|.
name|ServiceNameType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchema
import|;
end_import

begin_comment
comment|/**  * Provides utility methods for obtaining endpoint references, wsdl definitions, etc.  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|EndpointReferenceUtils
block|{
comment|/**      * We want to load the schemas, including references to external schemas, into a SchemaFactory      * to validate. There seem to be bugs in resolving inter-schema references in Xerces, so even when we are      * handing the factory all the schemas, interrelated with&lt;import&gt; elements, we need      * to also hand over extra copies (!) as character images when requested.      *      * To do this, we use the DOM representation kept in the SchemaInfo. This has the bonus      * of benefiting from the use of the catalog resolver in there, which is missing from      * the code in here.      */
specifier|private
specifier|static
specifier|final
class|class
name|SchemaLSResourceResolver
implements|implements
name|LSResourceResolver
block|{
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|byte
index|[]
argument_list|>
name|schemas
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|done
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|ExtendedURIResolver
name|resolver
init|=
operator|new
name|ExtendedURIResolver
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Bus
name|bus
decl_stmt|;
specifier|private
name|SchemaLSResourceResolver
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|byte
index|[]
argument_list|>
name|schemas
parameter_list|,
name|Bus
name|b
parameter_list|)
block|{
name|this
operator|.
name|schemas
operator|=
name|schemas
expr_stmt|;
name|this
operator|.
name|bus
operator|=
name|b
expr_stmt|;
block|}
specifier|public
name|LSInput
name|resolveResource
parameter_list|(
name|String
name|type
parameter_list|,
name|String
name|namespaceURI
parameter_list|,
name|String
name|publicId
parameter_list|,
name|String
name|systemId
parameter_list|,
name|String
name|baseURI
parameter_list|)
block|{
name|String
name|newId
init|=
name|systemId
decl_stmt|;
if|if
condition|(
name|baseURI
operator|!=
literal|null
operator|&&
name|systemId
operator|!=
literal|null
condition|)
block|{
comment|//add additional systemId null check
try|try
block|{
name|URI
name|uri
init|=
operator|new
name|URI
argument_list|(
name|baseURI
argument_list|)
decl_stmt|;
name|uri
operator|=
name|uri
operator|.
name|resolve
argument_list|(
name|systemId
argument_list|)
expr_stmt|;
name|newId
operator|=
name|uri
operator|.
name|toString
argument_list|()
expr_stmt|;
if|if
condition|(
name|newId
operator|.
name|equals
argument_list|(
name|systemId
argument_list|)
condition|)
block|{
name|URL
name|url
init|=
operator|new
name|URL
argument_list|(
name|baseURI
argument_list|)
decl_stmt|;
name|url
operator|=
operator|new
name|URL
argument_list|(
name|url
argument_list|,
name|systemId
argument_list|)
expr_stmt|;
name|newId
operator|=
name|url
operator|.
name|toExternalForm
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|//ignore - systemId not a valid URI
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
comment|//ignore - baseURI not a valid URI
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|e
parameter_list|)
block|{
comment|//ignore - baseURI or systemId not a URL either
block|}
block|}
name|LSInputImpl
name|impl
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|done
operator|.
name|contains
argument_list|(
name|newId
operator|+
literal|":"
operator|+
name|namespaceURI
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|schemas
operator|.
name|containsKey
argument_list|(
name|newId
operator|+
literal|":"
operator|+
name|namespaceURI
argument_list|)
condition|)
block|{
name|byte
index|[]
name|ds
init|=
name|schemas
operator|.
name|remove
argument_list|(
name|newId
operator|+
literal|":"
operator|+
name|namespaceURI
argument_list|)
decl_stmt|;
name|impl
operator|=
name|createInput
argument_list|(
name|newId
argument_list|,
name|ds
argument_list|)
expr_stmt|;
name|done
operator|.
name|add
argument_list|(
name|newId
operator|+
literal|":"
operator|+
name|namespaceURI
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|impl
operator|==
literal|null
operator|&&
name|schemas
operator|.
name|containsKey
argument_list|(
name|newId
operator|+
literal|":null"
argument_list|)
condition|)
block|{
name|byte
index|[]
name|ds
init|=
name|schemas
operator|.
name|get
argument_list|(
name|newId
operator|+
literal|":null"
argument_list|)
decl_stmt|;
name|impl
operator|=
name|createInput
argument_list|(
name|newId
argument_list|,
name|ds
argument_list|)
expr_stmt|;
name|done
operator|.
name|add
argument_list|(
name|newId
operator|+
literal|":"
operator|+
name|namespaceURI
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|impl
operator|==
literal|null
operator|&&
name|bus
operator|!=
literal|null
operator|&&
name|systemId
operator|!=
literal|null
condition|)
block|{
name|ResourceManager
name|rm
init|=
name|bus
operator|.
name|getExtension
argument_list|(
name|ResourceManager
operator|.
name|class
argument_list|)
decl_stmt|;
name|URL
name|url
init|=
name|rm
operator|==
literal|null
condition|?
literal|null
else|:
name|rm
operator|.
name|resolveResource
argument_list|(
name|systemId
argument_list|,
name|URL
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|url
operator|!=
literal|null
condition|)
block|{
name|newId
operator|=
name|url
operator|.
name|toString
argument_list|()
expr_stmt|;
if|if
condition|(
name|done
operator|.
name|contains
argument_list|(
name|newId
operator|+
literal|":"
operator|+
name|namespaceURI
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|schemas
operator|.
name|containsKey
argument_list|(
name|newId
operator|+
literal|":"
operator|+
name|namespaceURI
argument_list|)
condition|)
block|{
name|byte
index|[]
name|ds
init|=
name|schemas
operator|.
name|remove
argument_list|(
name|newId
operator|+
literal|":"
operator|+
name|namespaceURI
argument_list|)
decl_stmt|;
name|impl
operator|=
name|createInput
argument_list|(
name|newId
argument_list|,
name|ds
argument_list|)
expr_stmt|;
name|done
operator|.
name|add
argument_list|(
name|newId
operator|+
literal|":"
operator|+
name|namespaceURI
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|impl
operator|==
literal|null
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|byte
index|[]
argument_list|>
name|ent
range|:
name|schemas
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|ent
operator|.
name|getKey
argument_list|()
operator|.
name|endsWith
argument_list|(
name|systemId
operator|+
literal|":"
operator|+
name|namespaceURI
argument_list|)
condition|)
block|{
name|schemas
operator|.
name|remove
argument_list|(
name|ent
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|impl
operator|=
name|createInput
argument_list|(
name|newId
argument_list|,
name|ent
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|done
operator|.
name|add
argument_list|(
name|newId
operator|+
literal|":"
operator|+
name|namespaceURI
argument_list|)
expr_stmt|;
return|return
name|impl
return|;
block|}
block|}
comment|// there can be multiple includes on the same namespace. This scenario is not envisioned yet.
comment|// hence the filename part is included as well.
if|if
condition|(
name|systemId
operator|!=
literal|null
condition|)
block|{
name|String
name|systemIdFileName
init|=
name|systemId
operator|.
name|substring
argument_list|(
name|systemId
operator|.
name|lastIndexOf
argument_list|(
literal|'/'
argument_list|)
operator|+
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|byte
index|[]
argument_list|>
name|ent
range|:
name|schemas
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|ent
operator|.
name|getKey
argument_list|()
operator|.
name|endsWith
argument_list|(
name|systemIdFileName
operator|+
literal|":"
operator|+
name|namespaceURI
argument_list|)
condition|)
block|{
name|schemas
operator|.
name|remove
argument_list|(
name|ent
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|impl
operator|=
name|createInput
argument_list|(
name|newId
argument_list|,
name|ent
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|done
operator|.
name|add
argument_list|(
name|newId
operator|+
literal|":"
operator|+
name|namespaceURI
argument_list|)
expr_stmt|;
return|return
name|impl
return|;
block|}
block|}
block|}
comment|// handle case where given systemId is null (so that
comment|// direct key lookup fails) by scanning through map
comment|// searching for a namespace match
if|if
condition|(
name|namespaceURI
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|byte
index|[]
argument_list|>
name|ent
range|:
name|schemas
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|ent
operator|.
name|getKey
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|":"
operator|+
name|namespaceURI
argument_list|)
condition|)
block|{
name|schemas
operator|.
name|remove
argument_list|(
name|ent
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|impl
operator|=
name|createInput
argument_list|(
name|newId
argument_list|,
name|ent
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|done
operator|.
name|add
argument_list|(
name|newId
operator|+
literal|":"
operator|+
name|namespaceURI
argument_list|)
expr_stmt|;
return|return
name|impl
return|;
block|}
block|}
block|}
comment|//REVIST - we need to get catalogs in here somehow  :-(
if|if
condition|(
name|systemId
operator|==
literal|null
condition|)
block|{
name|systemId
operator|=
name|publicId
expr_stmt|;
block|}
if|if
condition|(
name|systemId
operator|!=
literal|null
condition|)
block|{
name|InputSource
name|source
init|=
name|resolver
operator|.
name|resolve
argument_list|(
name|systemId
argument_list|,
name|baseURI
argument_list|)
decl_stmt|;
if|if
condition|(
name|source
operator|!=
literal|null
condition|)
block|{
name|impl
operator|=
operator|new
name|LSInputImpl
argument_list|()
expr_stmt|;
name|impl
operator|.
name|setByteStream
argument_list|(
name|source
operator|.
name|getByteStream
argument_list|()
argument_list|)
expr_stmt|;
name|impl
operator|.
name|setSystemId
argument_list|(
name|source
operator|.
name|getSystemId
argument_list|()
argument_list|)
expr_stmt|;
name|impl
operator|.
name|setPublicId
argument_list|(
name|source
operator|.
name|getPublicId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|warning
argument_list|(
literal|"Could not resolve Schema for "
operator|+
name|systemId
argument_list|)
expr_stmt|;
block|}
return|return
name|impl
return|;
block|}
specifier|private
name|LSInputImpl
name|createInput
parameter_list|(
name|String
name|newId
parameter_list|,
name|byte
index|[]
name|value
parameter_list|)
block|{
name|LSInputImpl
name|impl
init|=
operator|new
name|LSInputImpl
argument_list|()
decl_stmt|;
name|impl
operator|.
name|setSystemId
argument_list|(
name|newId
argument_list|)
expr_stmt|;
name|impl
operator|.
name|setBaseURI
argument_list|(
name|newId
argument_list|)
expr_stmt|;
name|impl
operator|.
name|setByteStream
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|impl
return|;
block|}
block|}
specifier|public
specifier|static
specifier|final
name|String
name|ANONYMOUS_ADDRESS
init|=
literal|"http://www.w3.org/2005/08/addressing/anonymous"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|EndpointReferenceUtils
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|NS_WSAW_2005
init|=
literal|"http://www.w3.org/2005/02/addressing/wsdl"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|WSDL_INSTANCE_NAMESPACE2
init|=
literal|"http://www.w3.org/2006/01/wsdl-instance"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|WSDL_INSTANCE_NAMESPACE
init|=
literal|"http://www.w3.org/ns/wsdl-instance"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|QName
name|WSA_WSDL_NAMESPACE_NS
init|=
operator|new
name|QName
argument_list|(
literal|"xmlns:"
operator|+
name|JAXWSAConstants
operator|.
name|WSAW_PREFIX
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|XML_SCHEMA_NAMESPACE
init|=
literal|"http://www.w3.org/2001/XMLSchema"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|XML_SCHEMA_NAMESPACE_PREFIX
init|=
literal|"xs"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|QName
name|XML_SCHEMA_NAMESPACE_NS
init|=
operator|new
name|QName
argument_list|(
literal|"xmlns:"
operator|+
name|XML_SCHEMA_NAMESPACE_PREFIX
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|XML_SCHEMA_INSTANCE_NAMESPACE
init|=
literal|"http://www.w3.org/2001/XMLSchema-instance"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|QName
name|WSDL_LOCATION2
init|=
operator|new
name|QName
argument_list|(
name|WSDL_INSTANCE_NAMESPACE2
argument_list|,
literal|"wsdlLocation"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|QName
name|WSDL_LOCATION
init|=
operator|new
name|QName
argument_list|(
name|WSDL_INSTANCE_NAMESPACE
argument_list|,
literal|"wsdlLocation"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|QName
name|XSI_TYPE
init|=
operator|new
name|QName
argument_list|(
name|XML_SCHEMA_INSTANCE_NAMESPACE
argument_list|,
literal|"type"
argument_list|,
literal|"xsi"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|wsdl
operator|.
name|ObjectFactory
name|WSA_WSDL_OBJECT_FACTORY
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|wsdl
operator|.
name|ObjectFactory
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Set
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|ADDRESSING_CLASSES
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|AtomicReference
argument_list|<
name|Reference
argument_list|<
name|JAXBContext
argument_list|>
argument_list|>
name|ADDRESSING_CONTEXT
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|(
operator|new
name|SoftReference
argument_list|<
name|JAXBContext
argument_list|>
argument_list|(
literal|null
argument_list|)
argument_list|)
decl_stmt|;
static|static
block|{
name|ADDRESSING_CLASSES
operator|.
name|add
argument_list|(
name|WSA_WSDL_OBJECT_FACTORY
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|ADDRESSING_CLASSES
operator|.
name|add
argument_list|(
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|ObjectFactory
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
specifier|private
name|EndpointReferenceUtils
parameter_list|()
block|{
comment|// Utility class - never constructed
block|}
comment|/**      * Sets the service and port name of the provided endpoint reference.      * @param ref the endpoint reference.      * @param serviceName the name of service.      * @param portName the port name.      */
specifier|public
specifier|static
name|void
name|setServiceAndPortName
parameter_list|(
name|EndpointReferenceType
name|ref
parameter_list|,
name|QName
name|serviceName
parameter_list|,
name|String
name|portName
parameter_list|)
block|{
if|if
condition|(
literal|null
operator|!=
name|serviceName
condition|)
block|{
name|JAXBElement
argument_list|<
name|ServiceNameType
argument_list|>
name|jaxbElement
init|=
name|getServiceNameType
argument_list|(
name|serviceName
argument_list|,
name|portName
argument_list|)
decl_stmt|;
name|MetadataType
name|mt
init|=
name|getSetMetadata
argument_list|(
name|ref
argument_list|)
decl_stmt|;
name|mt
operator|.
name|getAny
argument_list|()
operator|.
name|add
argument_list|(
name|jaxbElement
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|MetadataType
name|getSetMetadata
parameter_list|(
name|EndpointReferenceType
name|ref
parameter_list|)
block|{
name|MetadataType
name|mt
init|=
name|ref
operator|.
name|getMetadata
argument_list|()
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|mt
condition|)
block|{
name|mt
operator|=
operator|new
name|MetadataType
argument_list|()
expr_stmt|;
name|ref
operator|.
name|setMetadata
argument_list|(
name|mt
argument_list|)
expr_stmt|;
block|}
return|return
name|mt
return|;
block|}
specifier|public
specifier|static
name|JAXBElement
argument_list|<
name|ServiceNameType
argument_list|>
name|getServiceNameType
parameter_list|(
name|QName
name|serviceName
parameter_list|,
name|String
name|portName
parameter_list|)
block|{
name|ServiceNameType
name|serviceNameType
init|=
name|WSA_WSDL_OBJECT_FACTORY
operator|.
name|createServiceNameType
argument_list|()
decl_stmt|;
name|serviceNameType
operator|.
name|setValue
argument_list|(
name|serviceName
argument_list|)
expr_stmt|;
name|serviceNameType
operator|.
name|setEndpointName
argument_list|(
name|portName
argument_list|)
expr_stmt|;
name|serviceNameType
operator|.
name|getOtherAttributes
argument_list|()
operator|.
name|put
argument_list|(
name|WSA_WSDL_NAMESPACE_NS
argument_list|,
name|JAXWSAConstants
operator|.
name|NS_WSAW
argument_list|)
expr_stmt|;
name|serviceNameType
operator|.
name|getOtherAttributes
argument_list|()
operator|.
name|put
argument_list|(
name|XSI_TYPE
argument_list|,
name|JAXWSAConstants
operator|.
name|WSAW_PREFIX
operator|+
literal|":"
operator|+
name|serviceNameType
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|WSA_WSDL_OBJECT_FACTORY
operator|.
name|createServiceName
argument_list|(
name|serviceNameType
argument_list|)
return|;
block|}
comment|/**      * Gets the service name of the provided endpoint reference.      * @param ref the endpoint reference.      * @return the service name.      */
specifier|public
specifier|static
name|QName
name|getServiceName
parameter_list|(
name|EndpointReferenceType
name|ref
parameter_list|,
name|Bus
name|bus
parameter_list|)
block|{
name|MetadataType
name|metadata
init|=
name|ref
operator|.
name|getMetadata
argument_list|()
decl_stmt|;
if|if
condition|(
name|metadata
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
for|for
control|(
name|Object
name|obj
range|:
name|metadata
operator|.
name|getAny
argument_list|()
control|)
block|{
if|if
condition|(
name|obj
operator|instanceof
name|Element
condition|)
block|{
name|Node
name|node
init|=
operator|(
name|Element
operator|)
name|obj
decl_stmt|;
if|if
condition|(
operator|(
name|node
operator|.
name|getNamespaceURI
argument_list|()
operator|.
name|equals
argument_list|(
name|JAXWSAConstants
operator|.
name|NS_WSAW
argument_list|)
operator|||
name|node
operator|.
name|getNamespaceURI
argument_list|()
operator|.
name|equals
argument_list|(
name|NS_WSAW_2005
argument_list|)
operator|||
name|node
operator|.
name|getNamespaceURI
argument_list|()
operator|.
name|equals
argument_list|(
name|JAXWSAConstants
operator|.
name|NS_WSAM
argument_list|)
operator|)
operator|&&
literal|"ServiceName"
operator|.
name|equals
argument_list|(
name|node
operator|.
name|getLocalName
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|content
init|=
name|node
operator|.
name|getTextContent
argument_list|()
decl_stmt|;
name|String
name|namespaceURI
init|=
name|node
operator|.
name|getFirstChild
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
decl_stmt|;
name|String
name|service
init|=
name|content
decl_stmt|;
if|if
condition|(
name|content
operator|.
name|contains
argument_list|(
literal|":"
argument_list|)
condition|)
block|{
name|namespaceURI
operator|=
name|getNameSpaceUri
argument_list|(
name|node
argument_list|,
name|content
argument_list|,
name|namespaceURI
argument_list|)
expr_stmt|;
name|service
operator|=
name|getService
argument_list|(
name|content
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Node
name|nodeAttr
init|=
name|node
operator|.
name|getAttributes
argument_list|()
operator|.
name|getNamedItem
argument_list|(
literal|"xmlns"
argument_list|)
decl_stmt|;
name|namespaceURI
operator|=
name|nodeAttr
operator|.
name|getNodeValue
argument_list|()
expr_stmt|;
block|}
return|return
operator|new
name|QName
argument_list|(
name|namespaceURI
argument_list|,
name|service
argument_list|)
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|obj
operator|instanceof
name|JAXBElement
condition|)
block|{
name|Object
name|val
init|=
operator|(
operator|(
name|JAXBElement
argument_list|<
name|?
argument_list|>
operator|)
name|obj
operator|)
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|val
operator|instanceof
name|ServiceNameType
condition|)
block|{
return|return
operator|(
operator|(
name|ServiceNameType
operator|)
name|val
operator|)
operator|.
name|getValue
argument_list|()
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|obj
operator|instanceof
name|ServiceNameType
condition|)
block|{
return|return
operator|(
operator|(
name|ServiceNameType
operator|)
name|obj
operator|)
operator|.
name|getValue
argument_list|()
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Gets the port name of the provided endpoint reference.      * @param ref the endpoint reference.      * @return the port name.      */
specifier|public
specifier|static
name|String
name|getPortName
parameter_list|(
name|EndpointReferenceType
name|ref
parameter_list|)
block|{
name|MetadataType
name|metadata
init|=
name|ref
operator|.
name|getMetadata
argument_list|()
decl_stmt|;
if|if
condition|(
name|metadata
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Object
name|obj
range|:
name|metadata
operator|.
name|getAny
argument_list|()
control|)
block|{
if|if
condition|(
name|obj
operator|instanceof
name|Element
condition|)
block|{
name|Node
name|node
init|=
operator|(
name|Element
operator|)
name|obj
decl_stmt|;
if|if
condition|(
operator|(
name|node
operator|.
name|getNamespaceURI
argument_list|()
operator|.
name|equals
argument_list|(
name|JAXWSAConstants
operator|.
name|NS_WSAW
argument_list|)
operator|||
name|node
operator|.
name|getNamespaceURI
argument_list|()
operator|.
name|equals
argument_list|(
name|NS_WSAW_2005
argument_list|)
operator|||
name|node
operator|.
name|getNamespaceURI
argument_list|()
operator|.
name|equals
argument_list|(
name|JAXWSAConstants
operator|.
name|NS_WSAM
argument_list|)
operator|)
operator|&&
name|node
operator|.
name|getNodeName
argument_list|()
operator|.
name|contains
argument_list|(
literal|"ServiceName"
argument_list|)
condition|)
block|{
name|Node
name|item
init|=
name|node
operator|.
name|getAttributes
argument_list|()
operator|.
name|getNamedItem
argument_list|(
literal|"EndpointName"
argument_list|)
decl_stmt|;
return|return
name|item
operator|!=
literal|null
condition|?
name|item
operator|.
name|getTextContent
argument_list|()
else|:
literal|null
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|obj
operator|instanceof
name|JAXBElement
condition|)
block|{
name|Object
name|val
init|=
operator|(
operator|(
name|JAXBElement
argument_list|<
name|?
argument_list|>
operator|)
name|obj
operator|)
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|val
operator|instanceof
name|ServiceNameType
condition|)
block|{
return|return
operator|(
operator|(
name|ServiceNameType
operator|)
name|val
operator|)
operator|.
name|getEndpointName
argument_list|()
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|obj
operator|instanceof
name|ServiceNameType
condition|)
block|{
return|return
operator|(
operator|(
name|ServiceNameType
operator|)
name|obj
operator|)
operator|.
name|getEndpointName
argument_list|()
return|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|public
specifier|static
name|QName
name|getPortQName
parameter_list|(
name|EndpointReferenceType
name|ref
parameter_list|,
name|Bus
name|bus
parameter_list|)
block|{
name|QName
name|serviceName
init|=
name|getServiceName
argument_list|(
name|ref
argument_list|,
name|bus
argument_list|)
decl_stmt|;
return|return
operator|new
name|QName
argument_list|(
name|serviceName
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
name|getPortName
argument_list|(
name|ref
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|void
name|setPortName
parameter_list|(
name|EndpointReferenceType
name|ref
parameter_list|,
name|String
name|portName
parameter_list|)
block|{
name|MetadataType
name|metadata
init|=
name|ref
operator|.
name|getMetadata
argument_list|()
decl_stmt|;
if|if
condition|(
name|metadata
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Object
name|obj
range|:
name|metadata
operator|.
name|getAny
argument_list|()
control|)
block|{
if|if
condition|(
name|obj
operator|instanceof
name|Element
condition|)
block|{
name|Element
name|node
init|=
operator|(
name|Element
operator|)
name|obj
decl_stmt|;
if|if
condition|(
name|node
operator|.
name|getNodeName
argument_list|()
operator|.
name|contains
argument_list|(
literal|"ServiceName"
argument_list|)
operator|&&
operator|(
name|node
operator|.
name|getNamespaceURI
argument_list|()
operator|.
name|equals
argument_list|(
name|JAXWSAConstants
operator|.
name|NS_WSAW
argument_list|)
operator|||
name|node
operator|.
name|getNamespaceURI
argument_list|()
operator|.
name|equals
argument_list|(
name|NS_WSAW_2005
argument_list|)
operator|||
name|node
operator|.
name|getNamespaceURI
argument_list|()
operator|.
name|equals
argument_list|(
name|JAXWSAConstants
operator|.
name|NS_WSAM
argument_list|)
operator|)
condition|)
block|{
name|node
operator|.
name|setAttribute
argument_list|(
name|JAXWSAConstants
operator|.
name|WSAM_ENDPOINT_NAME
argument_list|,
name|portName
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|obj
operator|instanceof
name|JAXBElement
condition|)
block|{
name|Object
name|val
init|=
operator|(
operator|(
name|JAXBElement
argument_list|<
name|?
argument_list|>
operator|)
name|obj
operator|)
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|val
operator|instanceof
name|ServiceNameType
condition|)
block|{
operator|(
operator|(
name|ServiceNameType
operator|)
name|val
operator|)
operator|.
name|setEndpointName
argument_list|(
name|portName
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|obj
operator|instanceof
name|ServiceNameType
condition|)
block|{
operator|(
operator|(
name|ServiceNameType
operator|)
name|obj
operator|)
operator|.
name|setEndpointName
argument_list|(
name|portName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
specifier|static
name|void
name|setInterfaceName
parameter_list|(
name|EndpointReferenceType
name|ref
parameter_list|,
name|QName
name|portTypeName
parameter_list|)
block|{
if|if
condition|(
literal|null
operator|!=
name|portTypeName
condition|)
block|{
name|AttributedQNameType
name|interfaceNameType
init|=
name|WSA_WSDL_OBJECT_FACTORY
operator|.
name|createAttributedQNameType
argument_list|()
decl_stmt|;
name|interfaceNameType
operator|.
name|setValue
argument_list|(
name|portTypeName
argument_list|)
expr_stmt|;
name|interfaceNameType
operator|.
name|getOtherAttributes
argument_list|()
operator|.
name|put
argument_list|(
name|XML_SCHEMA_NAMESPACE_NS
argument_list|,
name|XML_SCHEMA_NAMESPACE
argument_list|)
expr_stmt|;
name|interfaceNameType
operator|.
name|getOtherAttributes
argument_list|()
operator|.
name|put
argument_list|(
name|XSI_TYPE
argument_list|,
name|XML_SCHEMA_NAMESPACE_PREFIX
operator|+
literal|":"
operator|+
name|portTypeName
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
name|JAXBElement
argument_list|<
name|AttributedQNameType
argument_list|>
name|jaxbElement
init|=
name|WSA_WSDL_OBJECT_FACTORY
operator|.
name|createInterfaceName
argument_list|(
name|interfaceNameType
argument_list|)
decl_stmt|;
name|MetadataType
name|mt
init|=
name|getSetMetadata
argument_list|(
name|ref
argument_list|)
decl_stmt|;
name|mt
operator|.
name|getAny
argument_list|()
operator|.
name|add
argument_list|(
name|jaxbElement
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|QName
name|getInterfaceName
parameter_list|(
name|EndpointReferenceType
name|ref
parameter_list|,
name|Bus
name|bus
parameter_list|)
block|{
name|MetadataType
name|metadata
init|=
name|ref
operator|.
name|getMetadata
argument_list|()
decl_stmt|;
if|if
condition|(
name|metadata
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
for|for
control|(
name|Object
name|obj
range|:
name|metadata
operator|.
name|getAny
argument_list|()
control|)
block|{
if|if
condition|(
name|obj
operator|instanceof
name|Element
condition|)
block|{
name|Node
name|node
init|=
operator|(
name|Element
operator|)
name|obj
decl_stmt|;
if|if
condition|(
operator|(
name|node
operator|.
name|getNamespaceURI
argument_list|()
operator|.
name|equals
argument_list|(
name|JAXWSAConstants
operator|.
name|NS_WSAW
argument_list|)
operator|||
name|node
operator|.
name|getNamespaceURI
argument_list|()
operator|.
name|equals
argument_list|(
name|JAXWSAConstants
operator|.
name|NS_WSAM
argument_list|)
operator|)
operator|&&
name|node
operator|.
name|getNodeName
argument_list|()
operator|.
name|contains
argument_list|(
literal|"InterfaceName"
argument_list|)
condition|)
block|{
name|String
name|content
init|=
name|node
operator|.
name|getTextContent
argument_list|()
decl_stmt|;
name|String
name|namespaceURI
init|=
name|node
operator|.
name|getFirstChild
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
decl_stmt|;
comment|//String service = content;
if|if
condition|(
name|content
operator|.
name|contains
argument_list|(
literal|":"
argument_list|)
condition|)
block|{
name|namespaceURI
operator|=
name|getNameSpaceUri
argument_list|(
name|node
argument_list|,
name|content
argument_list|,
name|namespaceURI
argument_list|)
expr_stmt|;
name|content
operator|=
name|getService
argument_list|(
name|content
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Node
name|nodeAttr
init|=
name|node
operator|.
name|getAttributes
argument_list|()
operator|.
name|getNamedItem
argument_list|(
literal|"xmlns"
argument_list|)
decl_stmt|;
name|namespaceURI
operator|=
name|nodeAttr
operator|.
name|getNodeValue
argument_list|()
expr_stmt|;
block|}
return|return
operator|new
name|QName
argument_list|(
name|namespaceURI
argument_list|,
name|content
argument_list|)
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|obj
operator|instanceof
name|JAXBElement
condition|)
block|{
name|Object
name|val
init|=
operator|(
operator|(
name|JAXBElement
argument_list|<
name|?
argument_list|>
operator|)
name|obj
operator|)
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|val
operator|instanceof
name|AttributedQNameType
condition|)
block|{
return|return
operator|(
operator|(
name|AttributedQNameType
operator|)
name|val
operator|)
operator|.
name|getValue
argument_list|()
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|obj
operator|instanceof
name|AttributedQNameType
condition|)
block|{
return|return
operator|(
operator|(
name|AttributedQNameType
operator|)
name|obj
operator|)
operator|.
name|getValue
argument_list|()
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|public
specifier|static
name|void
name|setWSDLLocation
parameter_list|(
name|EndpointReferenceType
name|ref
parameter_list|,
name|String
modifier|...
name|wsdlLocation
parameter_list|)
block|{
name|MetadataType
name|metadata
init|=
name|getSetMetadata
argument_list|(
name|ref
argument_list|)
decl_stmt|;
comment|//wsdlLocation attribute is a list of anyURI.
name|StringBuilder
name|strBuf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|str
range|:
name|wsdlLocation
control|)
block|{
name|strBuf
operator|.
name|append
argument_list|(
name|str
argument_list|)
expr_stmt|;
name|strBuf
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
block|}
name|metadata
operator|.
name|getOtherAttributes
argument_list|()
operator|.
name|put
argument_list|(
name|WSDL_LOCATION
argument_list|,
name|strBuf
operator|.
name|toString
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|String
name|getWSDLLocation
parameter_list|(
name|EndpointReferenceType
name|ref
parameter_list|)
block|{
name|String
name|wsdlLocation
init|=
literal|null
decl_stmt|;
name|MetadataType
name|metadata
init|=
name|ref
operator|.
name|getMetadata
argument_list|()
decl_stmt|;
if|if
condition|(
name|metadata
operator|!=
literal|null
condition|)
block|{
name|wsdlLocation
operator|=
name|metadata
operator|.
name|getOtherAttributes
argument_list|()
operator|.
name|get
argument_list|(
name|WSDL_LOCATION
argument_list|)
expr_stmt|;
if|if
condition|(
name|wsdlLocation
operator|==
literal|null
condition|)
block|{
name|wsdlLocation
operator|=
name|metadata
operator|.
name|getOtherAttributes
argument_list|()
operator|.
name|get
argument_list|(
name|WSDL_LOCATION2
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
literal|null
operator|==
name|wsdlLocation
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|wsdlLocation
return|;
block|}
comment|/**      * Sets the metadata on the provided endpoint reference.      * @param ref the endpoint reference.      * @param metadata the list of metadata source.      */
specifier|public
specifier|static
name|void
name|setMetadata
parameter_list|(
name|EndpointReferenceType
name|ref
parameter_list|,
name|List
argument_list|<
name|Source
argument_list|>
name|metadata
parameter_list|)
throws|throws
name|EndpointUtilsException
block|{
if|if
condition|(
literal|null
operator|!=
name|ref
condition|)
block|{
name|MetadataType
name|mt
init|=
name|getSetMetadata
argument_list|(
name|ref
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|anyList
init|=
name|mt
operator|.
name|getAny
argument_list|()
decl_stmt|;
try|try
block|{
for|for
control|(
name|Source
name|source
range|:
name|metadata
control|)
block|{
name|Node
name|node
init|=
literal|null
decl_stmt|;
name|boolean
name|doTransform
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|source
operator|instanceof
name|StreamSource
condition|)
block|{
name|StreamSource
name|ss
init|=
operator|(
name|StreamSource
operator|)
name|source
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|ss
operator|.
name|getInputStream
argument_list|()
operator|&&
literal|null
operator|==
name|ss
operator|.
name|getReader
argument_list|()
condition|)
block|{
name|setWSDLLocation
argument_list|(
name|ref
argument_list|,
name|ss
operator|.
name|getSystemId
argument_list|()
argument_list|)
expr_stmt|;
name|doTransform
operator|=
literal|false
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|source
operator|instanceof
name|DOMSource
condition|)
block|{
name|node
operator|=
operator|(
operator|(
name|DOMSource
operator|)
name|source
operator|)
operator|.
name|getNode
argument_list|()
expr_stmt|;
name|doTransform
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|doTransform
condition|)
block|{
name|DOMResult
name|domResult
init|=
operator|new
name|DOMResult
argument_list|()
decl_stmt|;
name|domResult
operator|.
name|setSystemId
argument_list|(
name|source
operator|.
name|getSystemId
argument_list|()
argument_list|)
expr_stmt|;
name|node
operator|=
name|StaxUtils
operator|.
name|read
argument_list|(
name|source
argument_list|)
expr_stmt|;
name|node
operator|=
name|domResult
operator|.
name|getNode
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
literal|null
operator|!=
name|node
condition|)
block|{
if|if
condition|(
name|node
operator|instanceof
name|Document
condition|)
block|{
try|try
block|{
operator|(
operator|(
name|Document
operator|)
name|node
operator|)
operator|.
name|setDocumentURI
argument_list|(
name|source
operator|.
name|getSystemId
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|//ignore - not DOM level 3
block|}
name|node
operator|=
name|node
operator|.
name|getFirstChild
argument_list|()
expr_stmt|;
block|}
while|while
condition|(
name|node
operator|.
name|getNodeType
argument_list|()
operator|!=
name|Node
operator|.
name|ELEMENT_NODE
condition|)
block|{
name|node
operator|=
name|node
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
block|}
name|anyList
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|XMLStreamException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|EndpointUtilsException
argument_list|(
operator|new
name|Message
argument_list|(
literal|"COULD_NOT_POPULATE_EPR"
argument_list|,
name|LOG
argument_list|)
argument_list|,
name|te
argument_list|)
throw|;
block|}
block|}
block|}
specifier|private
specifier|static
specifier|synchronized
name|Schema
name|createSchema
parameter_list|(
name|ServiceInfo
name|serviceInfo
parameter_list|,
name|Bus
name|b
parameter_list|)
block|{
if|if
condition|(
name|b
operator|==
literal|null
condition|)
block|{
name|b
operator|=
name|BusFactory
operator|.
name|getThreadDefaultBus
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|Schema
name|schema
init|=
name|serviceInfo
operator|.
name|getProperty
argument_list|(
name|Schema
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|Schema
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|schema
operator|==
literal|null
condition|)
block|{
name|SchemaFactory
name|factory
init|=
name|SchemaFactory
operator|.
name|newInstance
argument_list|(
name|XMLConstants
operator|.
name|W3C_XML_SCHEMA_NS_URI
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|byte
index|[]
argument_list|>
name|schemaSourcesMap
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Source
argument_list|>
name|schemaSourcesMap2
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|XMLStreamWriter
name|writer
init|=
literal|null
decl_stmt|;
try|try
block|{
for|for
control|(
name|SchemaInfo
name|si
range|:
name|serviceInfo
operator|.
name|getSchemas
argument_list|()
control|)
block|{
name|Element
name|el
init|=
name|si
operator|.
name|getElement
argument_list|()
decl_stmt|;
name|unsetReadonly
argument_list|(
name|el
argument_list|)
expr_stmt|;
name|String
name|baseURI
init|=
literal|null
decl_stmt|;
try|try
block|{
name|baseURI
operator|=
name|el
operator|.
name|getBaseURI
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|//ignore - not DOM level 3
block|}
if|if
condition|(
name|baseURI
operator|==
literal|null
condition|)
block|{
name|baseURI
operator|=
name|si
operator|.
name|getSystemId
argument_list|()
expr_stmt|;
block|}
name|DOMSource
name|ds
init|=
operator|new
name|DOMSource
argument_list|(
name|el
argument_list|,
name|baseURI
argument_list|)
decl_stmt|;
name|schemaSourcesMap2
operator|.
name|put
argument_list|(
name|si
operator|.
name|getSystemId
argument_list|()
operator|+
literal|":"
operator|+
name|si
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
name|ds
argument_list|)
expr_stmt|;
name|LoadingByteArrayOutputStream
name|out
init|=
operator|new
name|LoadingByteArrayOutputStream
argument_list|()
decl_stmt|;
name|writer
operator|=
name|StaxUtils
operator|.
name|createXMLStreamWriter
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|StaxUtils
operator|.
name|copy
argument_list|(
name|el
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|writer
operator|.
name|flush
argument_list|()
expr_stmt|;
name|schemaSourcesMap
operator|.
name|put
argument_list|(
name|si
operator|.
name|getSystemId
argument_list|()
operator|+
literal|":"
operator|+
name|si
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
name|out
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|XmlSchema
name|sch
range|:
name|serviceInfo
operator|.
name|getXmlSchemaCollection
argument_list|()
operator|.
name|getXmlSchemas
argument_list|()
control|)
block|{
if|if
condition|(
name|sch
operator|.
name|getSourceURI
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|schemaSourcesMap
operator|.
name|containsKey
argument_list|(
name|sch
operator|.
name|getSourceURI
argument_list|()
operator|+
literal|":"
operator|+
name|sch
operator|.
name|getTargetNamespace
argument_list|()
argument_list|)
condition|)
block|{
name|InputStream
name|ins
init|=
literal|null
decl_stmt|;
try|try
block|{
name|URL
name|url
init|=
operator|new
name|URL
argument_list|(
name|sch
operator|.
name|getSourceURI
argument_list|()
argument_list|)
decl_stmt|;
name|ins
operator|=
name|url
operator|.
name|openStream
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|//ignore, we'll just use what we have.  (though
comment|//bugs in XmlSchema could make this less useful)
block|}
name|LoadingByteArrayOutputStream
name|out
init|=
operator|new
name|LoadingByteArrayOutputStream
argument_list|()
decl_stmt|;
if|if
condition|(
name|ins
operator|==
literal|null
condition|)
block|{
name|sch
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|IOUtils
operator|.
name|copyAndCloseInput
argument_list|(
name|ins
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
name|schemaSourcesMap
operator|.
name|put
argument_list|(
name|sch
operator|.
name|getSourceURI
argument_list|()
operator|+
literal|":"
operator|+
name|sch
operator|.
name|getTargetNamespace
argument_list|()
argument_list|,
name|out
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
name|Source
name|source
init|=
operator|new
name|StreamSource
argument_list|(
name|out
operator|.
name|createInputStream
argument_list|()
argument_list|,
name|sch
operator|.
name|getSourceURI
argument_list|()
argument_list|)
decl_stmt|;
name|schemaSourcesMap2
operator|.
name|put
argument_list|(
name|sch
operator|.
name|getSourceURI
argument_list|()
operator|+
literal|":"
operator|+
name|sch
operator|.
name|getTargetNamespace
argument_list|()
argument_list|,
name|source
argument_list|)
expr_stmt|;
block|}
block|}
name|factory
operator|.
name|setResourceResolver
argument_list|(
operator|new
name|SchemaLSResourceResolver
argument_list|(
name|schemaSourcesMap
argument_list|,
name|b
argument_list|)
argument_list|)
expr_stmt|;
name|schema
operator|=
name|factory
operator|.
name|newSchema
argument_list|(
name|schemaSourcesMap2
operator|.
name|values
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|Source
index|[
name|schemaSourcesMap2
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|// Something not right with the schema from the wsdl.
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
literal|"SAXException for newSchema()"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
for|for
control|(
name|SchemaInfo
name|schemaInfo
range|:
name|serviceInfo
operator|.
name|getSchemas
argument_list|()
control|)
block|{
name|String
name|s
init|=
name|StaxUtils
operator|.
name|toString
argument_list|(
name|schemaInfo
operator|.
name|getElement
argument_list|()
argument_list|,
literal|4
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|INFO
argument_list|,
literal|"Schema for: "
operator|+
name|schemaInfo
operator|.
name|getNamespaceURI
argument_list|()
operator|+
literal|"\n"
operator|+
name|s
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
for|for
control|(
name|Source
name|src
range|:
name|schemaSourcesMap2
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|src
operator|instanceof
name|DOMSource
condition|)
block|{
name|Node
name|nd
init|=
operator|(
operator|(
name|DOMSource
operator|)
name|src
operator|)
operator|.
name|getNode
argument_list|()
decl_stmt|;
name|unsetReadonly
argument_list|(
name|nd
argument_list|)
expr_stmt|;
block|}
block|}
name|StaxUtils
operator|.
name|close
argument_list|(
name|writer
argument_list|)
expr_stmt|;
block|}
name|serviceInfo
operator|.
name|setProperty
argument_list|(
name|Schema
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|schema
argument_list|)
expr_stmt|;
block|}
return|return
name|schema
return|;
block|}
specifier|private
specifier|static
name|void
name|unsetReadonly
parameter_list|(
name|Node
name|nd
parameter_list|)
block|{
try|try
block|{
comment|//work around a bug in the version of Xerces that is in the JDK
comment|//that only allows the Element to be used to create a schema once.
name|nd
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"setReadOnly"
argument_list|,
name|Boolean
operator|.
name|TYPE
argument_list|,
name|Boolean
operator|.
name|TYPE
argument_list|)
operator|.
name|invoke
argument_list|(
name|nd
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
comment|//ignore
block|}
block|}
specifier|public
specifier|static
name|Schema
name|getSchema
parameter_list|(
name|ServiceInfo
name|serviceInfo
parameter_list|)
block|{
return|return
name|getSchema
argument_list|(
name|serviceInfo
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Schema
name|getSchema
parameter_list|(
name|ServiceInfo
name|serviceInfo
parameter_list|,
name|Bus
name|b
parameter_list|)
block|{
if|if
condition|(
name|serviceInfo
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Schema
name|schema
init|=
name|serviceInfo
operator|.
name|getProperty
argument_list|(
name|Schema
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|Schema
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|schema
operator|==
literal|null
operator|&&
operator|!
name|serviceInfo
operator|.
name|hasProperty
argument_list|(
name|Schema
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|".CHECKED"
argument_list|)
condition|)
block|{
try|try
block|{
synchronized|synchronized
init|(
name|serviceInfo
init|)
block|{
return|return
name|createSchema
argument_list|(
name|serviceInfo
argument_list|,
name|b
argument_list|)
return|;
block|}
block|}
finally|finally
block|{
name|serviceInfo
operator|.
name|setProperty
argument_list|(
name|Schema
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|".CHECKED"
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|schema
return|;
block|}
comment|/**      * Get the address from the provided endpoint reference.      * @param ref - the endpoint reference      * @return String the address of the endpoint      */
specifier|public
specifier|static
name|String
name|getAddress
parameter_list|(
name|EndpointReferenceType
name|ref
parameter_list|)
block|{
name|AttributedURIType
name|a
init|=
name|ref
operator|.
name|getAddress
argument_list|()
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|a
condition|)
block|{
return|return
name|a
operator|.
name|getValue
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Set the address of the provided endpoint reference.      * @param ref - the endpoint reference      * @param address - the address      */
specifier|public
specifier|static
name|void
name|setAddress
parameter_list|(
name|EndpointReferenceType
name|ref
parameter_list|,
name|String
name|address
parameter_list|)
block|{
name|AttributedURIType
name|a
init|=
operator|new
name|AttributedURIType
argument_list|()
decl_stmt|;
name|a
operator|.
name|setValue
argument_list|(
name|address
argument_list|)
expr_stmt|;
name|ref
operator|.
name|setAddress
argument_list|(
name|a
argument_list|)
expr_stmt|;
block|}
comment|/**      * Create an endpoint reference for the provided wsdl, service and portname.      * @param wsdlUrl - url of the wsdl that describes the service.      * @param serviceName - the<code>QName</code> of the service.      * @param portName - the name of the port.      * @return EndpointReferenceType - the endpoint reference      */
specifier|public
specifier|static
name|EndpointReferenceType
name|getEndpointReference
parameter_list|(
name|URL
name|wsdlUrl
parameter_list|,
name|QName
name|serviceName
parameter_list|,
name|String
name|portName
parameter_list|)
block|{
name|EndpointReferenceType
name|reference
init|=
operator|new
name|EndpointReferenceType
argument_list|()
decl_stmt|;
name|reference
operator|.
name|setMetadata
argument_list|(
operator|new
name|MetadataType
argument_list|()
argument_list|)
expr_stmt|;
name|setServiceAndPortName
argument_list|(
name|reference
argument_list|,
name|serviceName
argument_list|,
name|portName
argument_list|)
expr_stmt|;
name|setWSDLLocation
argument_list|(
name|reference
argument_list|,
name|wsdlUrl
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|reference
return|;
block|}
comment|/**      * Create a duplicate endpoint reference sharing all atributes      * @param ref the reference to duplicate      * @return EndpointReferenceType - the duplicate endpoint reference      */
specifier|public
specifier|static
name|EndpointReferenceType
name|duplicate
parameter_list|(
name|EndpointReferenceType
name|ref
parameter_list|)
block|{
name|EndpointReferenceType
name|reference
init|=
operator|new
name|EndpointReferenceType
argument_list|()
decl_stmt|;
name|reference
operator|.
name|setMetadata
argument_list|(
name|ref
operator|.
name|getMetadata
argument_list|()
argument_list|)
expr_stmt|;
name|reference
operator|.
name|getAny
argument_list|()
operator|.
name|addAll
argument_list|(
name|ref
operator|.
name|getAny
argument_list|()
argument_list|)
expr_stmt|;
name|reference
operator|.
name|setAddress
argument_list|(
name|ref
operator|.
name|getAddress
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|reference
return|;
block|}
comment|/**      * Create an endpoint reference for the provided address.      * @param address - address URI      * @return EndpointReferenceType - the endpoint reference      */
specifier|public
specifier|static
name|EndpointReferenceType
name|getEndpointReference
parameter_list|(
name|String
name|address
parameter_list|)
block|{
name|EndpointReferenceType
name|reference
init|=
operator|new
name|EndpointReferenceType
argument_list|()
decl_stmt|;
name|setAddress
argument_list|(
name|reference
argument_list|,
name|address
argument_list|)
expr_stmt|;
return|return
name|reference
return|;
block|}
specifier|public
specifier|static
name|EndpointReferenceType
name|getEndpointReference
parameter_list|(
name|AttributedURIType
name|address
parameter_list|)
block|{
name|EndpointReferenceType
name|reference
init|=
operator|new
name|EndpointReferenceType
argument_list|()
decl_stmt|;
name|reference
operator|.
name|setAddress
argument_list|(
name|address
argument_list|)
expr_stmt|;
return|return
name|reference
return|;
block|}
comment|/**      * Create an anonymous endpoint reference.      * @return EndpointReferenceType - the endpoint reference      */
specifier|public
specifier|static
name|EndpointReferenceType
name|getAnonymousEndpointReference
parameter_list|()
block|{
specifier|final
name|EndpointReferenceType
name|reference
init|=
operator|new
name|EndpointReferenceType
argument_list|()
decl_stmt|;
name|setAddress
argument_list|(
name|reference
argument_list|,
name|ANONYMOUS_ADDRESS
argument_list|)
expr_stmt|;
return|return
name|reference
return|;
block|}
comment|/**      * Resolve logical endpoint reference via the Bus EndpointResolverRegistry.      *      * @param logical the abstract EPR to resolve      * @return the resolved concrete EPR if appropriate, null otherwise      */
specifier|public
specifier|static
name|EndpointReferenceType
name|resolve
parameter_list|(
name|EndpointReferenceType
name|logical
parameter_list|,
name|Bus
name|bus
parameter_list|)
block|{
name|EndpointReferenceType
name|physical
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|bus
operator|!=
literal|null
condition|)
block|{
name|EndpointResolverRegistry
name|registry
init|=
name|bus
operator|.
name|getExtension
argument_list|(
name|EndpointResolverRegistry
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|registry
operator|!=
literal|null
condition|)
block|{
name|physical
operator|=
name|registry
operator|.
name|resolve
argument_list|(
name|logical
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|physical
operator|!=
literal|null
condition|?
name|physical
else|:
name|logical
return|;
block|}
comment|/**      * Renew logical endpoint reference via the Bus EndpointResolverRegistry.      *      * @param logical the original abstract EPR (if still available)      * @param physical the concrete EPR to renew      * @return the renewed concrete EPR if appropriate, null otherwise      */
specifier|public
specifier|static
name|EndpointReferenceType
name|renew
parameter_list|(
name|EndpointReferenceType
name|logical
parameter_list|,
name|EndpointReferenceType
name|physical
parameter_list|,
name|Bus
name|bus
parameter_list|)
block|{
name|EndpointReferenceType
name|renewed
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|bus
operator|!=
literal|null
condition|)
block|{
name|EndpointResolverRegistry
name|registry
init|=
name|bus
operator|.
name|getExtension
argument_list|(
name|EndpointResolverRegistry
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|registry
operator|!=
literal|null
condition|)
block|{
name|renewed
operator|=
name|registry
operator|.
name|renew
argument_list|(
name|logical
argument_list|,
name|physical
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|renewed
operator|!=
literal|null
condition|?
name|renewed
else|:
name|physical
return|;
block|}
comment|/**      * Mint logical endpoint reference via the Bus EndpointResolverRegistry.      *      * @param serviceName the given serviceName      * @return the newly minted EPR if appropriate, null otherwise      */
specifier|public
specifier|static
name|EndpointReferenceType
name|mint
parameter_list|(
name|QName
name|serviceName
parameter_list|,
name|Bus
name|bus
parameter_list|)
block|{
name|EndpointReferenceType
name|logical
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|bus
operator|!=
literal|null
condition|)
block|{
name|EndpointResolverRegistry
name|registry
init|=
name|bus
operator|.
name|getExtension
argument_list|(
name|EndpointResolverRegistry
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|registry
operator|!=
literal|null
condition|)
block|{
name|logical
operator|=
name|registry
operator|.
name|mint
argument_list|(
name|serviceName
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|logical
return|;
block|}
comment|/**      * Mint logical endpoint reference via the Bus EndpointResolverRegistry.      *      * @param physical the concrete template EPR      * @return the newly minted EPR if appropriate, null otherwise      */
specifier|public
specifier|static
name|EndpointReferenceType
name|mint
parameter_list|(
name|EndpointReferenceType
name|physical
parameter_list|,
name|Bus
name|bus
parameter_list|)
block|{
name|EndpointReferenceType
name|logical
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|bus
operator|!=
literal|null
condition|)
block|{
name|EndpointResolverRegistry
name|registry
init|=
name|bus
operator|.
name|getExtension
argument_list|(
name|EndpointResolverRegistry
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|registry
operator|!=
literal|null
condition|)
block|{
name|logical
operator|=
name|registry
operator|.
name|mint
argument_list|(
name|physical
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|logical
operator|!=
literal|null
condition|?
name|logical
else|:
name|physical
return|;
block|}
specifier|private
specifier|static
name|String
name|getNameSpaceUri
parameter_list|(
name|Node
name|node
parameter_list|,
name|String
name|content
parameter_list|,
name|String
name|namespaceURI
parameter_list|)
block|{
if|if
condition|(
name|namespaceURI
operator|==
literal|null
condition|)
block|{
name|namespaceURI
operator|=
name|node
operator|.
name|lookupNamespaceURI
argument_list|(
name|content
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|content
operator|.
name|indexOf
argument_list|(
literal|":"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|namespaceURI
return|;
block|}
specifier|private
specifier|static
name|String
name|getService
parameter_list|(
name|String
name|content
parameter_list|)
block|{
return|return
name|content
operator|.
name|substring
argument_list|(
name|content
operator|.
name|indexOf
argument_list|(
literal|":"
argument_list|)
operator|+
literal|1
argument_list|,
name|content
operator|.
name|length
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Obtain a multiplexed endpoint reference for the deployed service that contains the provided id      * @param serviceQName identified the target service      * @param portName identifies a particular port of the service, may be null      * @param id that must be embedded in the returned reference      * @param bus the current bus      * @return a new reference or null if the target destination does not support destination mutiplexing      */
specifier|public
specifier|static
name|EndpointReferenceType
name|getEndpointReferenceWithId
parameter_list|(
name|QName
name|serviceQName
parameter_list|,
name|String
name|portName
parameter_list|,
name|String
name|id
parameter_list|,
name|Bus
name|bus
parameter_list|)
block|{
name|EndpointReferenceType
name|epr
init|=
literal|null
decl_stmt|;
name|MultiplexDestination
name|destination
init|=
name|getMatchingMultiplexDestination
argument_list|(
name|serviceQName
argument_list|,
name|portName
argument_list|,
name|bus
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|destination
condition|)
block|{
name|epr
operator|=
name|destination
operator|.
name|getAddressWithId
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
return|return
name|epr
return|;
block|}
comment|/**      * Obtain the id String from the endpoint reference of the current dispatch.      * @param messageContext the current message context      * @return the id embedded in the current endpoint reference or null if not found      */
specifier|public
specifier|static
name|String
name|getEndpointReferenceId
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|messageContext
parameter_list|)
block|{
name|String
name|id
init|=
literal|null
decl_stmt|;
name|Destination
name|destination
init|=
operator|(
name|Destination
operator|)
name|messageContext
operator|.
name|get
argument_list|(
name|Destination
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|destination
operator|instanceof
name|MultiplexDestination
condition|)
block|{
name|id
operator|=
operator|(
operator|(
name|MultiplexDestination
operator|)
name|destination
operator|)
operator|.
name|getId
argument_list|(
name|messageContext
argument_list|)
expr_stmt|;
block|}
return|return
name|id
return|;
block|}
specifier|private
specifier|static
specifier|synchronized
name|JAXBContext
name|createContextForEPR
parameter_list|()
throws|throws
name|JAXBException
block|{
name|Reference
argument_list|<
name|JAXBContext
argument_list|>
name|rctx
init|=
name|ADDRESSING_CONTEXT
operator|.
name|get
argument_list|()
decl_stmt|;
name|JAXBContext
name|ctx
init|=
name|rctx
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|ctx
operator|==
literal|null
condition|)
block|{
name|ctx
operator|=
name|JAXBContextCache
operator|.
name|getCachedContextAndSchemas
argument_list|(
name|ADDRESSING_CLASSES
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
operator|.
name|getContext
argument_list|()
expr_stmt|;
name|ADDRESSING_CONTEXT
operator|.
name|set
argument_list|(
operator|new
name|SoftReference
argument_list|<
name|JAXBContext
argument_list|>
argument_list|(
name|ctx
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|ctx
return|;
block|}
specifier|private
specifier|static
name|JAXBContext
name|getJAXBContextForEPR
parameter_list|()
throws|throws
name|JAXBException
block|{
name|Reference
argument_list|<
name|JAXBContext
argument_list|>
name|rctx
init|=
name|ADDRESSING_CONTEXT
operator|.
name|get
argument_list|()
decl_stmt|;
name|JAXBContext
name|ctx
init|=
name|rctx
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|ctx
operator|==
literal|null
condition|)
block|{
name|ctx
operator|=
name|createContextForEPR
argument_list|()
expr_stmt|;
block|}
return|return
name|ctx
return|;
block|}
specifier|public
specifier|static
name|Source
name|convertToXML
parameter_list|(
name|EndpointReferenceType
name|epr
parameter_list|)
block|{
try|try
block|{
name|Marshaller
name|jm
init|=
name|getJAXBContextForEPR
argument_list|()
operator|.
name|createMarshaller
argument_list|()
decl_stmt|;
name|jm
operator|.
name|setProperty
argument_list|(
name|Marshaller
operator|.
name|JAXB_FRAGMENT
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QName
name|qname
init|=
operator|new
name|QName
argument_list|(
literal|"http://www.w3.org/2005/08/addressing"
argument_list|,
literal|"EndpointReference"
argument_list|)
decl_stmt|;
name|JAXBElement
argument_list|<
name|EndpointReferenceType
argument_list|>
name|jaxEle
init|=
operator|new
name|JAXBElement
argument_list|<>
argument_list|(
name|qname
argument_list|,
name|EndpointReferenceType
operator|.
name|class
argument_list|,
name|epr
argument_list|)
decl_stmt|;
name|W3CDOMStreamWriter
name|writer
init|=
operator|new
name|W3CDOMStreamWriter
argument_list|()
decl_stmt|;
name|jm
operator|.
name|marshal
argument_list|(
name|jaxEle
argument_list|,
name|writer
argument_list|)
expr_stmt|;
return|return
operator|new
name|DOMSource
argument_list|(
name|writer
operator|.
name|getDocument
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|JAXBException
name|e
parameter_list|)
block|{
comment|//ignore
block|}
return|return
literal|null
return|;
block|}
specifier|private
specifier|static
name|MultiplexDestination
name|getMatchingMultiplexDestination
parameter_list|(
name|QName
name|serviceQName
parameter_list|,
name|String
name|portName
parameter_list|,
name|Bus
name|bus
parameter_list|)
block|{
name|MultiplexDestination
name|destination
init|=
literal|null
decl_stmt|;
name|ServerRegistry
name|serverRegistry
init|=
name|bus
operator|.
name|getExtension
argument_list|(
name|ServerRegistry
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|serverRegistry
condition|)
block|{
name|List
argument_list|<
name|Server
argument_list|>
name|servers
init|=
name|serverRegistry
operator|.
name|getServers
argument_list|()
decl_stmt|;
for|for
control|(
name|Server
name|s
range|:
name|servers
control|)
block|{
name|QName
name|targetServiceQName
init|=
name|s
operator|.
name|getEndpoint
argument_list|()
operator|.
name|getEndpointInfo
argument_list|()
operator|.
name|getService
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|serviceQName
operator|.
name|equals
argument_list|(
name|targetServiceQName
argument_list|)
operator|&&
name|portNameMatches
argument_list|(
name|s
argument_list|,
name|portName
argument_list|)
condition|)
block|{
name|Destination
name|dest
init|=
name|s
operator|.
name|getDestination
argument_list|()
decl_stmt|;
if|if
condition|(
name|dest
operator|instanceof
name|MultiplexDestination
condition|)
block|{
name|destination
operator|=
operator|(
name|MultiplexDestination
operator|)
name|dest
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
literal|"Failed to locate service matching "
operator|+
name|serviceQName
operator|+
literal|", because the bus ServerRegistry extension provider is null"
argument_list|)
expr_stmt|;
block|}
return|return
name|destination
return|;
block|}
specifier|private
specifier|static
name|boolean
name|portNameMatches
parameter_list|(
name|Server
name|s
parameter_list|,
name|String
name|portName
parameter_list|)
block|{
name|boolean
name|ret
init|=
literal|false
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|portName
operator|||
name|portName
operator|.
name|equals
argument_list|(
name|s
operator|.
name|getEndpoint
argument_list|()
operator|.
name|getEndpointInfo
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
name|ret
return|;
block|}
block|}
end_class

end_unit

