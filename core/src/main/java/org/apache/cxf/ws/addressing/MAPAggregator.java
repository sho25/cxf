begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|phase
operator|.
name|AbstractPhaseInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|phase
operator|.
name|Phase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|phase
operator|.
name|PhaseInterceptor
import|;
end_import

begin_comment
comment|/**  * Logical Handler responsible for aggregating the Message Addressing   * Properties for outgoing messages.  */
end_comment

begin_class
specifier|public
class|class
name|MAPAggregator
extends|extends
name|AbstractPhaseInterceptor
argument_list|<
name|Message
argument_list|>
block|{
specifier|public
specifier|static
specifier|final
name|String
name|USING_ADDRESSING
init|=
name|MAPAggregator
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|".usingAddressing"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|ADDRESSING_DISABLED
init|=
name|MAPAggregator
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|".addressingDisabled"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DECOUPLED_DESTINATION
init|=
name|MAPAggregator
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|".decoupledDestination"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|ACTION_VERIFIED
init|=
name|MAPAggregator
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|".actionVerified"
decl_stmt|;
specifier|public
interface|interface
name|MAPAggregatorLoader
block|{
name|MAPAggregator
name|createImplementation
parameter_list|(
name|MAPAggregator
name|mag
parameter_list|)
function_decl|;
block|}
specifier|protected
name|MessageIdCache
name|messageIdCache
decl_stmt|;
specifier|protected
name|boolean
name|usingAddressingAdvisory
init|=
literal|true
decl_stmt|;
specifier|protected
name|boolean
name|addressingRequired
decl_stmt|;
specifier|protected
name|boolean
name|allowDuplicates
init|=
literal|true
decl_stmt|;
specifier|protected
name|WSAddressingFeature
operator|.
name|AddressingResponses
name|addressingResponses
init|=
name|WSAddressingFeature
operator|.
name|AddressingResponses
operator|.
name|ALL
decl_stmt|;
comment|/**      * The real implementation of the MAPAggregator interceptor      */
specifier|private
name|MAPAggregator
name|impl
decl_stmt|;
comment|/**      * Constructor.      */
specifier|public
name|MAPAggregator
parameter_list|()
block|{
name|super
argument_list|(
name|MAPAggregator
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|Phase
operator|.
name|PRE_LOGICAL
argument_list|)
expr_stmt|;
name|addBefore
argument_list|(
literal|"org.apache.cxf.interceptor.OneWayProcessorInterceptor"
argument_list|)
expr_stmt|;
block|}
comment|/**      * Indicates if duplicate messageIDs are allowed.      * @return true if duplicate messageIDs are allowed      */
specifier|public
name|boolean
name|allowDuplicates
parameter_list|()
block|{
if|if
condition|(
name|impl
operator|!=
literal|null
condition|)
block|{
return|return
name|impl
operator|.
name|allowDuplicates
argument_list|()
return|;
block|}
return|return
name|allowDuplicates
return|;
block|}
comment|/**      * Allows/disallows duplicate messageIdDs.        * @param ad whether duplicate messageIDs are allowed      */
specifier|public
name|void
name|setAllowDuplicates
parameter_list|(
name|boolean
name|ad
parameter_list|)
block|{
if|if
condition|(
name|impl
operator|!=
literal|null
condition|)
block|{
name|impl
operator|.
name|setAllowDuplicates
argument_list|(
name|ad
argument_list|)
expr_stmt|;
block|}
name|allowDuplicates
operator|=
name|ad
expr_stmt|;
block|}
comment|/**      * Whether the presence of the<wsaw:UsingAddressing> element      * in the WSDL is purely advisory, i.e. its absence doesn't prevent      * the encoding of WS-A headers.      *      * @return true if the presence of the<wsaw:UsingAddressing> element is       * advisory      */
specifier|public
name|boolean
name|isUsingAddressingAdvisory
parameter_list|()
block|{
if|if
condition|(
name|impl
operator|!=
literal|null
condition|)
block|{
return|return
name|impl
operator|.
name|isUsingAddressingAdvisory
argument_list|()
return|;
block|}
return|return
name|usingAddressingAdvisory
return|;
block|}
comment|/**      * Controls whether the presence of the<wsaw:UsingAddressing> element      * in the WSDL is purely advisory, i.e. its absence doesn't prevent      * the encoding of WS-A headers.      *      * @param advisory true if the presence of the<wsaw:UsingAddressing>      * element is to be advisory      */
specifier|public
name|void
name|setUsingAddressingAdvisory
parameter_list|(
name|boolean
name|advisory
parameter_list|)
block|{
if|if
condition|(
name|impl
operator|!=
literal|null
condition|)
block|{
name|impl
operator|.
name|setUsingAddressingAdvisory
argument_list|(
name|advisory
argument_list|)
expr_stmt|;
block|}
name|usingAddressingAdvisory
operator|=
name|advisory
expr_stmt|;
block|}
comment|/**      * Whether the use of addressing is completely required for this endpoint      *      * @return true if addressing is required      */
specifier|public
name|boolean
name|isAddressingRequired
parameter_list|()
block|{
if|if
condition|(
name|impl
operator|!=
literal|null
condition|)
block|{
return|return
name|impl
operator|.
name|addressingRequired
return|;
block|}
return|return
name|addressingRequired
return|;
block|}
comment|/**      * Sets whether the use of addressing is completely required for this endpoint      *      */
specifier|public
name|void
name|setAddressingRequired
parameter_list|(
name|boolean
name|required
parameter_list|)
block|{
if|if
condition|(
name|impl
operator|!=
literal|null
condition|)
block|{
name|impl
operator|.
name|setAddressingRequired
argument_list|(
name|required
argument_list|)
expr_stmt|;
block|}
name|addressingRequired
operator|=
name|required
expr_stmt|;
block|}
comment|/**      * Sets Addresing Response       *      */
specifier|public
name|void
name|setAddressingResponses
parameter_list|(
name|WSAddressingFeature
operator|.
name|AddressingResponses
name|responses
parameter_list|)
block|{
if|if
condition|(
name|impl
operator|!=
literal|null
condition|)
block|{
name|impl
operator|.
name|setAddressingResponses
argument_list|(
name|responses
argument_list|)
expr_stmt|;
block|}
name|addressingResponses
operator|=
name|responses
expr_stmt|;
block|}
comment|/**      * Returns the cache used to enforce duplicate message IDs when      * {@link #allowDuplicates()} returns {@code false}.      *      * @return the cache used to enforce duplicate message IDs      */
specifier|public
name|MessageIdCache
name|getMessageIdCache
parameter_list|()
block|{
if|if
condition|(
name|impl
operator|!=
literal|null
condition|)
block|{
return|return
name|impl
operator|.
name|getMessageIdCache
argument_list|()
return|;
block|}
return|return
name|messageIdCache
return|;
block|}
comment|/**      * Sets the cache used to enforce duplicate message IDs when      * {@link #allowDuplicates()} returns {@code false}.      *      * @param messageIdCache the cache to use      *      * @throws NullPointerException if {@code messageIdCache} is {@code null}      */
specifier|public
name|void
name|setMessageIdCache
parameter_list|(
name|MessageIdCache
name|messageIdCache
parameter_list|)
block|{
if|if
condition|(
name|messageIdCache
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"messageIdCache cannot be null."
argument_list|)
throw|;
block|}
if|if
condition|(
name|impl
operator|!=
literal|null
condition|)
block|{
name|impl
operator|.
name|setMessageIdCache
argument_list|(
name|messageIdCache
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|messageIdCache
operator|=
name|messageIdCache
expr_stmt|;
block|}
comment|/**      * Sets Addressing Response       *      */
specifier|public
name|WSAddressingFeature
operator|.
name|AddressingResponses
name|getAddressingResponses
parameter_list|()
block|{
if|if
condition|(
name|impl
operator|!=
literal|null
condition|)
block|{
return|return
name|impl
operator|.
name|getAddressingResponses
argument_list|()
return|;
block|}
return|return
name|addressingResponses
return|;
block|}
comment|/**      * Invoked for normal processing of inbound and outbound messages.      *      * @param message the current message      */
specifier|public
name|void
name|handleMessage
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
if|if
condition|(
name|impl
operator|==
literal|null
condition|)
block|{
comment|//load impl
name|MAPAggregatorLoader
name|loader
init|=
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|getBus
argument_list|()
operator|.
name|getExtension
argument_list|(
name|MAPAggregatorLoader
operator|.
name|class
argument_list|)
decl_stmt|;
name|impl
operator|=
name|loader
operator|.
name|createImplementation
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
name|impl
operator|.
name|handleMessage
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|handleFault
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
if|if
condition|(
name|impl
operator|!=
literal|null
condition|)
block|{
name|impl
operator|.
name|handleFault
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|Collection
argument_list|<
name|PhaseInterceptor
argument_list|<
name|?
extends|extends
name|Message
argument_list|>
argument_list|>
name|getAdditionalInterceptors
parameter_list|()
block|{
if|if
condition|(
name|impl
operator|!=
literal|null
condition|)
block|{
return|return
name|impl
operator|.
name|getAdditionalInterceptors
argument_list|()
return|;
block|}
return|return
name|super
operator|.
name|getAdditionalInterceptors
argument_list|()
return|;
block|}
block|}
end_class

end_unit

