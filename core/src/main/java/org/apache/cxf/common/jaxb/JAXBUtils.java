begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|jaxb
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|Annotation
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|ElementType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|Target
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Constructor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Proxy
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLClassLoader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|AccessController
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBElement
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|Marshaller
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|PropertyException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|SchemaOutputResolver
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|Unmarshaller
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlElement
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|attachment
operator|.
name|AttachmentMarshaller
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|attachment
operator|.
name|AttachmentUnmarshaller
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamReader
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamWriter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|Source
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|dom
operator|.
name|DOMResult
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|stream
operator|.
name|StreamResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|EntityResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|InputSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|classloader
operator|.
name|ClassLoaderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|ASMHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|ASMHelper
operator|.
name|ClassWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|ASMHelper
operator|.
name|FieldVisitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|ASMHelper
operator|.
name|Label
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|ASMHelper
operator|.
name|MethodVisitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|ASMHelper
operator|.
name|Opcodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|CachedClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|PackageUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|ProxyHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|ReflectionInvokationHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|ReflectionInvokationHandler
operator|.
name|WrapReturn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|ReflectionUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|SystemPropertyAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|xmlschema
operator|.
name|SchemaCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|JavaUtils
import|;
end_import

begin_class
specifier|public
specifier|final
class|class
name|JAXBUtils
block|{
specifier|public
specifier|static
specifier|final
name|String
name|JAXB_URI
init|=
literal|"http://java.sun.com/xml/ns/jaxb"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|JAXBUtils
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
enum|enum
name|IdentifierType
block|{
name|CLASS
block|,
name|INTERFACE
block|,
name|GETTER
block|,
name|SETTER
block|,
name|VARIABLE
block|,
name|CONSTANT
block|}
empty_stmt|;
specifier|private
specifier|static
specifier|final
name|char
index|[]
name|XML_NAME_PUNCTUATION_CHARS
init|=
operator|new
name|char
index|[]
block|{
comment|/* hyphen                       */
literal|'\u002D'
block|,
comment|/* period                       */
literal|'\u002E'
block|,
comment|/* colon                        */
literal|'\u003A'
block|,
comment|/* dot                          */
literal|'\u00B7'
block|,
comment|/* greek ano teleia             */
literal|'\u0387'
block|,
comment|/* arabic end of ayah           */
literal|'\u06DD'
block|,
comment|/* arabic start of rub el hizb  */
literal|'\u06DE'
block|,
comment|/* underscore                   */
literal|'\u005F'
block|,     }
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|XML_NAME_PUNCTUATION_STRING
init|=
operator|new
name|String
argument_list|(
name|XML_NAME_PUNCTUATION_CHARS
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|BUILTIN_DATATYPES_MAP
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|HOLDER_TYPES_MAP
decl_stmt|;
specifier|private
specifier|static
name|ClassLoader
name|jaxbXjcLoader
decl_stmt|;
specifier|private
specifier|static
specifier|volatile
name|Optional
argument_list|<
name|Object
argument_list|>
name|jaxbMinimumEscapeHandler
decl_stmt|;
specifier|private
specifier|static
specifier|volatile
name|Optional
argument_list|<
name|Object
argument_list|>
name|jaxbNoEscapeHandler
decl_stmt|;
static|static
block|{
name|BUILTIN_DATATYPES_MAP
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|BUILTIN_DATATYPES_MAP
operator|.
name|put
argument_list|(
literal|"string"
argument_list|,
literal|"java.lang.String"
argument_list|)
expr_stmt|;
name|BUILTIN_DATATYPES_MAP
operator|.
name|put
argument_list|(
literal|"integer"
argument_list|,
literal|"java.math.BigInteger"
argument_list|)
expr_stmt|;
name|BUILTIN_DATATYPES_MAP
operator|.
name|put
argument_list|(
literal|"int"
argument_list|,
literal|"int"
argument_list|)
expr_stmt|;
name|BUILTIN_DATATYPES_MAP
operator|.
name|put
argument_list|(
literal|"long"
argument_list|,
literal|"long"
argument_list|)
expr_stmt|;
name|BUILTIN_DATATYPES_MAP
operator|.
name|put
argument_list|(
literal|"short"
argument_list|,
literal|"short"
argument_list|)
expr_stmt|;
name|BUILTIN_DATATYPES_MAP
operator|.
name|put
argument_list|(
literal|"decimal"
argument_list|,
literal|"java.math.BigDecimal"
argument_list|)
expr_stmt|;
name|BUILTIN_DATATYPES_MAP
operator|.
name|put
argument_list|(
literal|"float"
argument_list|,
literal|"float"
argument_list|)
expr_stmt|;
name|BUILTIN_DATATYPES_MAP
operator|.
name|put
argument_list|(
literal|"double"
argument_list|,
literal|"double"
argument_list|)
expr_stmt|;
name|BUILTIN_DATATYPES_MAP
operator|.
name|put
argument_list|(
literal|"boolean"
argument_list|,
literal|"boolean"
argument_list|)
expr_stmt|;
name|BUILTIN_DATATYPES_MAP
operator|.
name|put
argument_list|(
literal|"byte"
argument_list|,
literal|"byte"
argument_list|)
expr_stmt|;
name|BUILTIN_DATATYPES_MAP
operator|.
name|put
argument_list|(
literal|"QName"
argument_list|,
literal|"javax.xml.namespace.QName"
argument_list|)
expr_stmt|;
name|BUILTIN_DATATYPES_MAP
operator|.
name|put
argument_list|(
literal|"dateTime"
argument_list|,
literal|"javax.xml.datatype.XMLGregorianCalendar"
argument_list|)
expr_stmt|;
name|BUILTIN_DATATYPES_MAP
operator|.
name|put
argument_list|(
literal|"base64Binary"
argument_list|,
literal|"byte[]"
argument_list|)
expr_stmt|;
name|BUILTIN_DATATYPES_MAP
operator|.
name|put
argument_list|(
literal|"hexBinary"
argument_list|,
literal|"byte[]"
argument_list|)
expr_stmt|;
name|BUILTIN_DATATYPES_MAP
operator|.
name|put
argument_list|(
literal|"unsignedInt"
argument_list|,
literal|"long"
argument_list|)
expr_stmt|;
name|BUILTIN_DATATYPES_MAP
operator|.
name|put
argument_list|(
literal|"unsignedShort"
argument_list|,
literal|"short"
argument_list|)
expr_stmt|;
name|BUILTIN_DATATYPES_MAP
operator|.
name|put
argument_list|(
literal|"unsignedByte"
argument_list|,
literal|"byte"
argument_list|)
expr_stmt|;
name|BUILTIN_DATATYPES_MAP
operator|.
name|put
argument_list|(
literal|"time"
argument_list|,
literal|"javax.xml.datatype.XMLGregorianCalendar"
argument_list|)
expr_stmt|;
name|BUILTIN_DATATYPES_MAP
operator|.
name|put
argument_list|(
literal|"date"
argument_list|,
literal|"javax.xml.datatype.XMLGregorianCalendar"
argument_list|)
expr_stmt|;
name|BUILTIN_DATATYPES_MAP
operator|.
name|put
argument_list|(
literal|"gYear"
argument_list|,
literal|"javax.xml.datatype.XMLGregorianCalendar"
argument_list|)
expr_stmt|;
name|BUILTIN_DATATYPES_MAP
operator|.
name|put
argument_list|(
literal|"gYearMonth"
argument_list|,
literal|"javax.xml.datatype.XMLGregorianCalendar"
argument_list|)
expr_stmt|;
name|BUILTIN_DATATYPES_MAP
operator|.
name|put
argument_list|(
literal|"gMonth"
argument_list|,
literal|"javax.xml.datatype.XMLGregorianCalendar"
argument_list|)
expr_stmt|;
name|BUILTIN_DATATYPES_MAP
operator|.
name|put
argument_list|(
literal|"gMonthDay"
argument_list|,
literal|"javax.xml.datatype.XMLGregorianCalendar"
argument_list|)
expr_stmt|;
name|BUILTIN_DATATYPES_MAP
operator|.
name|put
argument_list|(
literal|"gDay"
argument_list|,
literal|"javax.xml.datatype.XMLGregorianCalendar"
argument_list|)
expr_stmt|;
name|BUILTIN_DATATYPES_MAP
operator|.
name|put
argument_list|(
literal|"duration"
argument_list|,
literal|"javax.xml.datatype.Duration"
argument_list|)
expr_stmt|;
name|BUILTIN_DATATYPES_MAP
operator|.
name|put
argument_list|(
literal|"NOTATION"
argument_list|,
literal|"javax.xml.namespace.QName"
argument_list|)
expr_stmt|;
name|BUILTIN_DATATYPES_MAP
operator|.
name|put
argument_list|(
literal|"string"
argument_list|,
literal|"java.lang.String"
argument_list|)
expr_stmt|;
name|HOLDER_TYPES_MAP
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|HOLDER_TYPES_MAP
operator|.
name|put
argument_list|(
literal|"int"
argument_list|,
name|java
operator|.
name|lang
operator|.
name|Integer
operator|.
name|class
argument_list|)
expr_stmt|;
name|HOLDER_TYPES_MAP
operator|.
name|put
argument_list|(
literal|"long"
argument_list|,
name|java
operator|.
name|lang
operator|.
name|Long
operator|.
name|class
argument_list|)
expr_stmt|;
name|HOLDER_TYPES_MAP
operator|.
name|put
argument_list|(
literal|"short"
argument_list|,
name|java
operator|.
name|lang
operator|.
name|Short
operator|.
name|class
argument_list|)
expr_stmt|;
name|HOLDER_TYPES_MAP
operator|.
name|put
argument_list|(
literal|"float"
argument_list|,
name|java
operator|.
name|lang
operator|.
name|Float
operator|.
name|class
argument_list|)
expr_stmt|;
name|HOLDER_TYPES_MAP
operator|.
name|put
argument_list|(
literal|"double"
argument_list|,
name|java
operator|.
name|lang
operator|.
name|Double
operator|.
name|class
argument_list|)
expr_stmt|;
name|HOLDER_TYPES_MAP
operator|.
name|put
argument_list|(
literal|"boolean"
argument_list|,
name|java
operator|.
name|lang
operator|.
name|Boolean
operator|.
name|class
argument_list|)
expr_stmt|;
name|HOLDER_TYPES_MAP
operator|.
name|put
argument_list|(
literal|"byte"
argument_list|,
name|java
operator|.
name|lang
operator|.
name|Byte
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
comment|/**      * prevents instantiation      *      */
specifier|private
name|JAXBUtils
parameter_list|()
block|{     }
specifier|public
specifier|static
name|void
name|closeUnmarshaller
parameter_list|(
name|Unmarshaller
name|u
parameter_list|)
block|{
if|if
condition|(
name|u
operator|instanceof
name|Closeable
condition|)
block|{
comment|//need to do this to clear the ThreadLocal cache
comment|//see https://java.net/jira/browse/JAXB-1000
try|try
block|{
operator|(
operator|(
name|Closeable
operator|)
name|u
operator|)
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|//ignore
block|}
block|}
block|}
specifier|public
specifier|static
name|Object
name|unmarshall
parameter_list|(
name|JAXBContext
name|c
parameter_list|,
name|Element
name|e
parameter_list|)
throws|throws
name|JAXBException
block|{
name|Unmarshaller
name|u
init|=
name|c
operator|.
name|createUnmarshaller
argument_list|()
decl_stmt|;
try|try
block|{
name|u
operator|.
name|setEventHandler
argument_list|(
literal|null
argument_list|)
expr_stmt|;
return|return
name|u
operator|.
name|unmarshal
argument_list|(
name|e
argument_list|)
return|;
block|}
finally|finally
block|{
name|closeUnmarshaller
argument_list|(
name|u
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|JAXBElement
argument_list|<
name|T
argument_list|>
name|unmarshall
parameter_list|(
name|JAXBContext
name|c
parameter_list|,
name|Element
name|e
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|cls
parameter_list|)
throws|throws
name|JAXBException
block|{
name|Unmarshaller
name|u
init|=
name|c
operator|.
name|createUnmarshaller
argument_list|()
decl_stmt|;
try|try
block|{
name|u
operator|.
name|setEventHandler
argument_list|(
literal|null
argument_list|)
expr_stmt|;
return|return
name|u
operator|.
name|unmarshal
argument_list|(
name|e
argument_list|,
name|cls
argument_list|)
return|;
block|}
finally|finally
block|{
name|closeUnmarshaller
argument_list|(
name|u
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|Object
name|unmarshall
parameter_list|(
name|JAXBContext
name|c
parameter_list|,
name|Source
name|s
parameter_list|)
throws|throws
name|JAXBException
block|{
name|Unmarshaller
name|u
init|=
name|c
operator|.
name|createUnmarshaller
argument_list|()
decl_stmt|;
try|try
block|{
name|u
operator|.
name|setEventHandler
argument_list|(
literal|null
argument_list|)
expr_stmt|;
return|return
name|u
operator|.
name|unmarshal
argument_list|(
name|s
argument_list|)
return|;
block|}
finally|finally
block|{
name|closeUnmarshaller
argument_list|(
name|u
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|JAXBElement
argument_list|<
name|T
argument_list|>
name|unmarshall
parameter_list|(
name|JAXBContext
name|c
parameter_list|,
name|XMLStreamReader
name|reader
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|cls
parameter_list|)
throws|throws
name|JAXBException
block|{
name|Unmarshaller
name|u
init|=
name|c
operator|.
name|createUnmarshaller
argument_list|()
decl_stmt|;
try|try
block|{
name|u
operator|.
name|setEventHandler
argument_list|(
literal|null
argument_list|)
expr_stmt|;
return|return
name|u
operator|.
name|unmarshal
argument_list|(
name|reader
argument_list|,
name|cls
argument_list|)
return|;
block|}
finally|finally
block|{
name|closeUnmarshaller
argument_list|(
name|u
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|Object
name|unmarshall
parameter_list|(
name|JAXBContext
name|c
parameter_list|,
name|XMLStreamReader
name|reader
parameter_list|)
throws|throws
name|JAXBException
block|{
name|Unmarshaller
name|u
init|=
name|c
operator|.
name|createUnmarshaller
argument_list|()
decl_stmt|;
try|try
block|{
name|u
operator|.
name|setEventHandler
argument_list|(
literal|null
argument_list|)
expr_stmt|;
return|return
name|u
operator|.
name|unmarshal
argument_list|(
name|reader
argument_list|)
return|;
block|}
finally|finally
block|{
name|closeUnmarshaller
argument_list|(
name|u
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|String
name|builtInTypeToJavaType
parameter_list|(
name|String
name|type
parameter_list|)
block|{
return|return
name|BUILTIN_DATATYPES_MAP
operator|.
name|get
argument_list|(
name|type
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Class
argument_list|<
name|?
argument_list|>
name|holderClass
parameter_list|(
name|String
name|type
parameter_list|)
block|{
return|return
name|HOLDER_TYPES_MAP
operator|.
name|get
argument_list|(
name|type
argument_list|)
return|;
block|}
comment|/**      * Checks if the specified word is a Java keyword (as defined in JavaUtils).      *      * @param word the word to check.      * @return true if the word is a keyword.      * @see org.apache.cxf.helpers.JavaUtils      */
specifier|protected
specifier|static
name|boolean
name|isJavaKeyword
parameter_list|(
name|String
name|word
parameter_list|)
block|{
return|return
name|JavaUtils
operator|.
name|isJavaKeyword
argument_list|(
name|word
argument_list|)
return|;
block|}
comment|/**      * Generates a Java package name from a URI according to the      * algorithm outlined in JAXB 2.0.      *      * @param namespaceURI the namespace URI.      * @return the package name.      */
specifier|public
specifier|static
name|String
name|namespaceURIToPackage
parameter_list|(
name|String
name|namespaceURI
parameter_list|)
block|{
try|try
block|{
return|return
name|nameSpaceURIToPackage
argument_list|(
operator|new
name|URI
argument_list|(
name|namespaceURI
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|ex
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
comment|/**      * Generates a Java package name from a URI according to the      * algorithm outlined in Appendix D of JAXB (2.0+).      *      * @param uri the namespace URI.      * @return the package name.      */
specifier|public
specifier|static
name|String
name|nameSpaceURIToPackage
parameter_list|(
name|URI
name|uri
parameter_list|)
block|{
name|StringBuilder
name|packageName
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|String
name|authority
init|=
name|uri
operator|.
name|getAuthority
argument_list|()
decl_stmt|;
name|String
name|scheme
init|=
name|uri
operator|.
name|getScheme
argument_list|()
decl_stmt|;
if|if
condition|(
name|authority
operator|==
literal|null
operator|&&
literal|"urn"
operator|.
name|equals
argument_list|(
name|scheme
argument_list|)
condition|)
block|{
name|authority
operator|=
name|uri
operator|.
name|getSchemeSpecificPart
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
literal|null
operator|!=
name|authority
operator|&&
operator|!
literal|""
operator|.
name|equals
argument_list|(
name|authority
argument_list|)
condition|)
block|{
if|if
condition|(
literal|"urn"
operator|.
name|equals
argument_list|(
name|scheme
argument_list|)
condition|)
block|{
name|packageName
operator|.
name|append
argument_list|(
name|authority
argument_list|)
expr_stmt|;
comment|/* JAXB 2.2 D.5.1, Rule #5 */
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|packageName
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|packageName
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
operator|==
literal|'-'
condition|)
block|{
name|packageName
operator|.
name|setCharAt
argument_list|(
name|i
argument_list|,
literal|'.'
argument_list|)
expr_stmt|;
block|}
block|}
name|authority
operator|=
name|packageName
operator|.
name|toString
argument_list|()
expr_stmt|;
name|packageName
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|StringTokenizer
name|st
init|=
operator|new
name|StringTokenizer
argument_list|(
name|authority
argument_list|,
literal|":"
argument_list|)
decl_stmt|;
while|while
condition|(
name|st
operator|.
name|hasMoreTokens
argument_list|()
condition|)
block|{
name|String
name|token
init|=
name|st
operator|.
name|nextToken
argument_list|()
decl_stmt|;
if|if
condition|(
name|packageName
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|packageName
operator|.
name|insert
argument_list|(
literal|0
argument_list|,
literal|"."
argument_list|)
expr_stmt|;
name|packageName
operator|.
name|insert
argument_list|(
literal|0
argument_list|,
name|normalizePackageNamePart
argument_list|(
name|token
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|packageName
operator|.
name|insert
argument_list|(
literal|0
argument_list|,
name|token
argument_list|)
expr_stmt|;
block|}
block|}
name|authority
operator|=
name|packageName
operator|.
name|toString
argument_list|()
expr_stmt|;
name|packageName
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|StringTokenizer
name|st
init|=
operator|new
name|StringTokenizer
argument_list|(
name|authority
argument_list|,
literal|"."
argument_list|)
decl_stmt|;
if|if
condition|(
name|st
operator|.
name|hasMoreTokens
argument_list|()
condition|)
block|{
name|String
name|token
init|=
literal|null
decl_stmt|;
while|while
condition|(
name|st
operator|.
name|hasMoreTokens
argument_list|()
condition|)
block|{
name|token
operator|=
name|st
operator|.
name|nextToken
argument_list|()
expr_stmt|;
if|if
condition|(
name|packageName
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
if|if
condition|(
literal|"www"
operator|.
name|equals
argument_list|(
name|token
argument_list|)
condition|)
block|{
continue|continue;
block|}
block|}
else|else
block|{
name|packageName
operator|.
name|insert
argument_list|(
literal|0
argument_list|,
literal|"."
argument_list|)
expr_stmt|;
block|}
name|packageName
operator|.
name|insert
argument_list|(
literal|0
argument_list|,
name|normalizePackageNamePart
argument_list|(
name|token
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
operator|(
literal|"http"
operator|.
name|equalsIgnoreCase
argument_list|(
name|scheme
argument_list|)
operator|||
literal|"urn"
operator|.
name|equalsIgnoreCase
argument_list|(
name|scheme
argument_list|)
operator|)
condition|)
block|{
name|packageName
operator|.
name|insert
argument_list|(
literal|0
argument_list|,
literal|"."
argument_list|)
expr_stmt|;
name|packageName
operator|.
name|insert
argument_list|(
literal|0
argument_list|,
name|normalizePackageNamePart
argument_list|(
name|scheme
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|String
name|path
init|=
name|uri
operator|.
name|getPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|path
operator|==
literal|null
condition|)
block|{
name|path
operator|=
literal|""
expr_stmt|;
block|}
comment|/* JAXB 2.2 D.5.1 Rule 2 - remove trailing .??, .???, or .html only. */
name|int
name|index
init|=
name|path
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|<
literal|0
condition|)
block|{
name|index
operator|=
name|path
operator|.
name|length
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|String
name|ending
init|=
name|path
operator|.
name|substring
argument_list|(
name|index
operator|+
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|ending
operator|.
name|length
argument_list|()
operator|<
literal|2
operator|||
operator|(
name|ending
operator|.
name|length
argument_list|()
operator|>
literal|3
operator|&&
operator|!
literal|"html"
operator|.
name|equalsIgnoreCase
argument_list|(
name|ending
argument_list|)
operator|)
condition|)
block|{
name|index
operator|=
name|path
operator|.
name|length
argument_list|()
expr_stmt|;
block|}
block|}
name|StringTokenizer
name|st
init|=
operator|new
name|StringTokenizer
argument_list|(
name|path
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|index
argument_list|)
argument_list|,
literal|"/"
argument_list|)
decl_stmt|;
while|while
condition|(
name|st
operator|.
name|hasMoreTokens
argument_list|()
condition|)
block|{
name|String
name|token
init|=
name|st
operator|.
name|nextToken
argument_list|()
decl_stmt|;
if|if
condition|(
name|packageName
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|packageName
operator|.
name|append
argument_list|(
literal|'.'
argument_list|)
expr_stmt|;
block|}
name|packageName
operator|.
name|append
argument_list|(
name|normalizePackageNamePart
argument_list|(
name|token
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|packageName
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|String
name|normalizePackageNamePart
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|StringBuilder
name|sname
init|=
operator|new
name|StringBuilder
argument_list|(
name|name
operator|.
name|toLowerCase
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sname
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|sname
operator|.
name|setCharAt
argument_list|(
name|i
argument_list|,
name|Character
operator|.
name|toLowerCase
argument_list|(
name|sname
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sname
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|Character
operator|.
name|isJavaIdentifierPart
argument_list|(
name|sname
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
argument_list|)
condition|)
block|{
name|sname
operator|.
name|setCharAt
argument_list|(
name|i
argument_list|,
literal|'_'
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|isJavaKeyword
argument_list|(
name|sname
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
name|sname
operator|.
name|insert
argument_list|(
literal|0
argument_list|,
literal|'_'
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|Character
operator|.
name|isJavaIdentifierStart
argument_list|(
name|sname
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
argument_list|)
condition|)
block|{
name|sname
operator|.
name|insert
argument_list|(
literal|0
argument_list|,
literal|'_'
argument_list|)
expr_stmt|;
block|}
return|return
name|sname
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      * Converts an XML name to a Java identifier according to the mapping      * algorithm outlined in the JAXB specification      *      * @param name the XML name      * @return the Java identifier      */
specifier|public
specifier|static
name|String
name|nameToIdentifier
parameter_list|(
name|String
name|name
parameter_list|,
name|IdentifierType
name|type
parameter_list|)
block|{
if|if
condition|(
literal|null
operator|==
name|name
operator|||
name|name
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
name|name
return|;
block|}
comment|// algorithm will not change an XML name that is already a legal and
comment|// conventional (!) Java class, method, or constant identifier
name|boolean
name|legalIdentifier
init|=
literal|false
decl_stmt|;
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|boolean
name|hasUnderscore
init|=
literal|false
decl_stmt|;
name|legalIdentifier
operator|=
name|Character
operator|.
name|isJavaIdentifierStart
argument_list|(
name|buf
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|name
operator|.
name|length
argument_list|()
operator|&&
name|legalIdentifier
condition|;
name|i
operator|++
control|)
block|{
name|legalIdentifier
operator|&=
name|Character
operator|.
name|isJavaIdentifierPart
argument_list|(
name|buf
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|hasUnderscore
operator||=
literal|'_'
operator|==
name|buf
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
name|boolean
name|conventionalIdentifier
init|=
name|isConventionalIdentifier
argument_list|(
name|buf
argument_list|,
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|legalIdentifier
operator|&&
name|conventionalIdentifier
condition|)
block|{
if|if
condition|(
name|JAXBUtils
operator|.
name|isJavaKeyword
argument_list|(
name|name
argument_list|)
operator|&&
name|type
operator|==
name|IdentifierType
operator|.
name|VARIABLE
condition|)
block|{
name|name
operator|=
name|normalizePackageNamePart
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|hasUnderscore
operator|||
name|IdentifierType
operator|.
name|CLASS
operator|!=
name|type
condition|)
block|{
return|return
name|name
return|;
block|}
block|}
comment|// split into words
name|List
argument_list|<
name|String
argument_list|>
name|words
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|StringTokenizer
name|st
init|=
operator|new
name|StringTokenizer
argument_list|(
name|name
argument_list|,
name|XML_NAME_PUNCTUATION_STRING
argument_list|)
decl_stmt|;
while|while
condition|(
name|st
operator|.
name|hasMoreTokens
argument_list|()
condition|)
block|{
name|words
operator|.
name|add
argument_list|(
name|st
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|words
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|splitWord
argument_list|(
name|words
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
return|return
name|makeConventionalIdentifier
argument_list|(
name|words
argument_list|,
name|type
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|void
name|splitWord
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|words
parameter_list|,
name|int
name|listIndex
parameter_list|)
block|{
name|String
name|word
init|=
name|words
operator|.
name|get
argument_list|(
name|listIndex
argument_list|)
decl_stmt|;
if|if
condition|(
name|word
operator|.
name|length
argument_list|()
operator|<=
literal|1
condition|)
block|{
return|return;
block|}
name|int
name|index
init|=
name|listIndex
operator|+
literal|1
decl_stmt|;
name|StringBuilder
name|sword
init|=
operator|new
name|StringBuilder
argument_list|(
name|word
argument_list|)
decl_stmt|;
name|int
name|first
init|=
literal|0
decl_stmt|;
name|char
name|firstChar
init|=
name|sword
operator|.
name|charAt
argument_list|(
name|first
argument_list|)
decl_stmt|;
if|if
condition|(
name|Character
operator|.
name|isLowerCase
argument_list|(
name|firstChar
argument_list|)
condition|)
block|{
name|sword
operator|.
name|setCharAt
argument_list|(
name|first
argument_list|,
name|Character
operator|.
name|toUpperCase
argument_list|(
name|firstChar
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|int
name|i
init|=
literal|1
decl_stmt|;
while|while
condition|(
name|i
operator|<
name|sword
operator|.
name|length
argument_list|()
condition|)
block|{
if|if
condition|(
name|Character
operator|.
name|isDigit
argument_list|(
name|firstChar
argument_list|)
condition|)
block|{
while|while
condition|(
name|i
operator|<
name|sword
operator|.
name|length
argument_list|()
operator|&&
name|Character
operator|.
name|isDigit
argument_list|(
name|sword
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
argument_list|)
condition|)
block|{
name|i
operator|++
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|isCasedLetter
argument_list|(
name|firstChar
argument_list|)
condition|)
block|{
name|boolean
name|previousIsLower
init|=
name|Character
operator|.
name|isLowerCase
argument_list|(
name|firstChar
argument_list|)
decl_stmt|;
while|while
condition|(
name|i
operator|<
name|sword
operator|.
name|length
argument_list|()
operator|&&
name|isCasedLetter
argument_list|(
name|sword
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
argument_list|)
condition|)
block|{
if|if
condition|(
name|Character
operator|.
name|isUpperCase
argument_list|(
name|sword
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
argument_list|)
operator|&&
name|previousIsLower
condition|)
block|{
break|break;
block|}
name|previousIsLower
operator|=
name|Character
operator|.
name|isLowerCase
argument_list|(
name|sword
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// first must be a mark or an uncased letter
while|while
condition|(
name|i
operator|<
name|sword
operator|.
name|length
argument_list|()
operator|&&
operator|(
name|isMark
argument_list|(
name|sword
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
argument_list|)
operator|||
operator|!
name|isCasedLetter
argument_list|(
name|sword
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
argument_list|)
operator|)
condition|)
block|{
name|i
operator|++
expr_stmt|;
block|}
block|}
comment|// characters from first to i are all either
comment|// * digits
comment|// * upper or lower case letters, with only the first one an upper
comment|// * uncased letters or marks
name|String
name|newWord
init|=
name|sword
operator|.
name|substring
argument_list|(
name|first
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|words
operator|.
name|add
argument_list|(
name|index
argument_list|,
name|newWord
argument_list|)
expr_stmt|;
name|index
operator|++
expr_stmt|;
if|if
condition|(
name|i
operator|>=
name|sword
operator|.
name|length
argument_list|()
condition|)
block|{
break|break;
block|}
name|first
operator|=
name|i
expr_stmt|;
name|firstChar
operator|=
name|sword
operator|.
name|charAt
argument_list|(
name|first
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|index
operator|>
operator|(
name|listIndex
operator|+
literal|1
operator|)
condition|)
block|{
name|words
operator|.
name|remove
argument_list|(
name|listIndex
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|boolean
name|isMark
parameter_list|(
name|char
name|c
parameter_list|)
block|{
return|return
name|Character
operator|.
name|isJavaIdentifierPart
argument_list|(
name|c
argument_list|)
operator|&&
operator|!
name|Character
operator|.
name|isLetter
argument_list|(
name|c
argument_list|)
operator|&&
operator|!
name|Character
operator|.
name|isDigit
argument_list|(
name|c
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|boolean
name|isCasedLetter
parameter_list|(
name|char
name|c
parameter_list|)
block|{
return|return
name|Character
operator|.
name|isUpperCase
argument_list|(
name|c
argument_list|)
operator|||
name|Character
operator|.
name|isLowerCase
argument_list|(
name|c
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|boolean
name|isConventionalIdentifier
parameter_list|(
name|StringBuilder
name|buf
parameter_list|,
name|IdentifierType
name|type
parameter_list|)
block|{
if|if
condition|(
literal|null
operator|==
name|buf
operator|||
name|buf
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
name|boolean
name|result
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|IdentifierType
operator|.
name|CONSTANT
operator|==
name|type
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|buf
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|Character
operator|.
name|isLowerCase
argument_list|(
name|buf
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
name|result
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|IdentifierType
operator|.
name|VARIABLE
operator|==
name|type
condition|)
block|{
name|result
operator|=
name|Character
operator|.
name|isLowerCase
argument_list|(
name|buf
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|int
name|pos
init|=
literal|3
decl_stmt|;
if|if
condition|(
name|IdentifierType
operator|.
name|GETTER
operator|==
name|type
operator|&&
operator|!
operator|(
name|buf
operator|.
name|length
argument_list|()
operator|>=
name|pos
operator|&&
literal|"get"
operator|.
name|equals
argument_list|(
name|buf
operator|.
name|subSequence
argument_list|(
literal|0
argument_list|,
literal|3
argument_list|)
argument_list|)
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
name|IdentifierType
operator|.
name|SETTER
operator|==
name|type
operator|&&
operator|!
operator|(
name|buf
operator|.
name|length
argument_list|()
operator|>=
name|pos
operator|&&
literal|"set"
operator|.
name|equals
argument_list|(
name|buf
operator|.
name|subSequence
argument_list|(
literal|0
argument_list|,
literal|3
argument_list|)
argument_list|)
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
else|else
block|{
name|pos
operator|=
literal|0
expr_stmt|;
block|}
name|result
operator|=
name|Character
operator|.
name|isUpperCase
argument_list|(
name|buf
operator|.
name|charAt
argument_list|(
name|pos
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|private
specifier|static
name|String
name|makeConventionalIdentifier
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|words
parameter_list|,
name|IdentifierType
name|type
parameter_list|)
block|{
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|boolean
name|firstWord
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|IdentifierType
operator|.
name|GETTER
operator|==
name|type
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|"get"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|IdentifierType
operator|.
name|SETTER
operator|==
name|type
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|"set"
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|w
range|:
name|words
control|)
block|{
name|int
name|l
init|=
name|buf
operator|.
name|length
argument_list|()
decl_stmt|;
if|if
condition|(
name|l
operator|>
literal|0
operator|&&
name|IdentifierType
operator|.
name|CONSTANT
operator|==
name|type
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|'_'
argument_list|)
expr_stmt|;
name|l
operator|++
expr_stmt|;
block|}
name|buf
operator|.
name|append
argument_list|(
name|w
argument_list|)
expr_stmt|;
if|if
condition|(
name|IdentifierType
operator|.
name|CONSTANT
operator|==
name|type
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
name|l
init|;
name|i
operator|<
name|buf
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|Character
operator|.
name|isLowerCase
argument_list|(
name|buf
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
argument_list|)
condition|)
block|{
name|buf
operator|.
name|setCharAt
argument_list|(
name|i
argument_list|,
name|Character
operator|.
name|toUpperCase
argument_list|(
name|buf
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|IdentifierType
operator|.
name|VARIABLE
operator|==
name|type
condition|)
block|{
if|if
condition|(
name|firstWord
operator|&&
name|Character
operator|.
name|isUpperCase
argument_list|(
name|buf
operator|.
name|charAt
argument_list|(
name|l
argument_list|)
argument_list|)
condition|)
block|{
name|buf
operator|.
name|setCharAt
argument_list|(
name|l
argument_list|,
name|Character
operator|.
name|toLowerCase
argument_list|(
name|buf
operator|.
name|charAt
argument_list|(
name|l
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|firstWord
operator|&&
name|Character
operator|.
name|isLowerCase
argument_list|(
name|buf
operator|.
name|charAt
argument_list|(
name|l
argument_list|)
argument_list|)
condition|)
block|{
name|buf
operator|.
name|setCharAt
argument_list|(
name|l
argument_list|,
name|Character
operator|.
name|toUpperCase
argument_list|(
name|buf
operator|.
name|charAt
argument_list|(
name|l
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|firstWord
operator|=
literal|false
expr_stmt|;
block|}
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|Class
argument_list|<
name|?
argument_list|>
name|getValidClass
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|cls
parameter_list|)
block|{
if|if
condition|(
name|cls
operator|.
name|isEnum
argument_list|()
condition|)
block|{
return|return
name|cls
return|;
block|}
if|if
condition|(
name|cls
operator|.
name|isArray
argument_list|()
condition|)
block|{
return|return
name|cls
return|;
block|}
if|if
condition|(
name|cls
operator|==
name|Object
operator|.
name|class
operator|||
name|cls
operator|==
name|String
operator|.
name|class
operator|||
literal|"javax.xml.ws.Holder"
operator|.
name|equals
argument_list|(
name|cls
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|cls
operator|=
literal|null
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cls
operator|.
name|isPrimitive
argument_list|()
operator|||
name|cls
operator|.
name|isAnnotation
argument_list|()
condition|)
block|{
name|cls
operator|=
literal|null
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cls
operator|.
name|isInterface
argument_list|()
condition|)
block|{
return|return
name|cls
return|;
block|}
if|if
condition|(
name|cls
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
literal|"javax.xml.ws.wsaddressing.W3CEndpointReference"
operator|.
name|equals
argument_list|(
name|cls
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|cls
return|;
block|}
name|Constructor
argument_list|<
name|?
argument_list|>
name|cons
init|=
name|ReflectionUtil
operator|.
name|getDeclaredConstructor
argument_list|(
name|cls
argument_list|)
decl_stmt|;
if|if
condition|(
name|cons
operator|==
literal|null
condition|)
block|{
name|cons
operator|=
name|ReflectionUtil
operator|.
name|getConstructor
argument_list|(
name|cls
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cons
operator|==
literal|null
condition|)
block|{
name|cls
operator|=
literal|null
expr_stmt|;
block|}
block|}
return|return
name|cls
return|;
block|}
specifier|private
specifier|static
specifier|synchronized
name|ClassLoader
name|getXJCClassLoader
parameter_list|()
block|{
if|if
condition|(
name|jaxbXjcLoader
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|Class
operator|.
name|forName
argument_list|(
literal|"com.sun.tools.internal.xjc.api.XJC"
argument_list|)
expr_stmt|;
name|jaxbXjcLoader
operator|=
name|ClassLoader
operator|.
name|getSystemClassLoader
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|t2
parameter_list|)
block|{
comment|//couldn't find either, probably cause tools.jar isn't on
comment|//the classpath.   Let's see if we can find the tools jar
name|String
name|s
init|=
name|SystemPropertyAction
operator|.
name|getProperty
argument_list|(
literal|"java.home"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|s
argument_list|)
condition|)
block|{
name|File
name|home
init|=
operator|new
name|File
argument_list|(
name|s
argument_list|)
decl_stmt|;
name|File
name|jar
init|=
operator|new
name|File
argument_list|(
name|home
argument_list|,
literal|"lib/tools.jar"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|jar
operator|.
name|exists
argument_list|()
condition|)
block|{
name|jar
operator|=
operator|new
name|File
argument_list|(
name|home
argument_list|,
literal|"../lib/tools.jar"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|jar
operator|.
name|exists
argument_list|()
condition|)
block|{
try|try
block|{
name|jaxbXjcLoader
operator|=
operator|new
name|URLClassLoader
argument_list|(
operator|new
name|URL
index|[]
block|{
name|jar
operator|.
name|toURI
argument_list|()
operator|.
name|toURL
argument_list|()
block|}
argument_list|)
expr_stmt|;
name|Class
operator|.
name|forName
argument_list|(
literal|"com.sun.tools.internal.xjc.api.XJC"
argument_list|,
literal|false
argument_list|,
name|jaxbXjcLoader
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|jaxbXjcLoader
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
return|return
name|jaxbXjcLoader
return|;
block|}
specifier|public
specifier|static
name|Object
name|setNamespaceMapper
parameter_list|(
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|nspref
parameter_list|,
name|Marshaller
name|marshaller
parameter_list|)
throws|throws
name|PropertyException
block|{
name|Object
name|mapper
init|=
name|createNamespaceWrapper
argument_list|(
name|marshaller
operator|.
name|getClass
argument_list|()
argument_list|,
name|nspref
argument_list|)
decl_stmt|;
if|if
condition|(
name|mapper
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|marshaller
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|contains
argument_list|(
literal|".internal."
argument_list|)
condition|)
block|{
name|marshaller
operator|.
name|setProperty
argument_list|(
literal|"com.sun.xml.internal.bind.namespacePrefixMapper"
argument_list|,
name|mapper
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|marshaller
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|contains
argument_list|(
literal|"com.sun"
argument_list|)
condition|)
block|{
name|marshaller
operator|.
name|setProperty
argument_list|(
literal|"com.sun.xml.bind.namespacePrefixMapper"
argument_list|,
name|mapper
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|marshaller
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|contains
argument_list|(
literal|"eclipse"
argument_list|)
condition|)
block|{
name|marshaller
operator|.
name|setProperty
argument_list|(
literal|"eclipselink.namespace-prefix-mapper"
argument_list|,
name|mapper
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|mapper
return|;
block|}
specifier|public
specifier|static
name|BridgeWrapper
name|createBridge
parameter_list|(
name|Set
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|ctxClasses
parameter_list|,
name|QName
name|qname
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|refcls
parameter_list|,
name|Annotation
name|anns
index|[]
parameter_list|)
throws|throws
name|JAXBException
block|{
try|try
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|cls
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|refClass
decl_stmt|;
name|String
name|pkg
init|=
literal|"com.sun.xml.bind."
decl_stmt|;
try|try
block|{
name|cls
operator|=
name|Class
operator|.
name|forName
argument_list|(
literal|"com.sun.xml.bind.api.JAXBRIContext"
argument_list|)
expr_stmt|;
name|refClass
operator|=
name|Class
operator|.
name|forName
argument_list|(
name|pkg
operator|+
literal|"api.TypeReference"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
name|cls
operator|=
name|Class
operator|.
name|forName
argument_list|(
literal|"com.sun.xml.internal.bind.api.JAXBRIContext"
argument_list|,
literal|true
argument_list|,
name|getXJCClassLoader
argument_list|()
argument_list|)
expr_stmt|;
name|pkg
operator|=
literal|"com.sun.xml.internal.bind."
expr_stmt|;
name|refClass
operator|=
name|Class
operator|.
name|forName
argument_list|(
name|pkg
operator|+
literal|"api.TypeReference"
argument_list|,
literal|true
argument_list|,
name|getXJCClassLoader
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Object
name|ref
init|=
name|refClass
operator|.
name|getConstructor
argument_list|(
name|QName
operator|.
name|class
argument_list|,
name|Type
operator|.
name|class
argument_list|,
name|anns
operator|.
name|getClass
argument_list|()
argument_list|)
operator|.
name|newInstance
argument_list|(
name|qname
argument_list|,
name|refcls
argument_list|,
name|anns
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|typeRefs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|typeRefs
operator|.
name|add
argument_list|(
name|ref
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|clses
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|ctxClasses
argument_list|)
decl_stmt|;
name|clses
operator|.
name|add
argument_list|(
name|refClass
operator|.
name|getField
argument_list|(
literal|"type"
argument_list|)
operator|.
name|get
argument_list|(
name|ref
argument_list|)
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|refcls
operator|.
name|isInterface
argument_list|()
condition|)
block|{
name|clses
operator|.
name|add
argument_list|(
name|refcls
argument_list|)
expr_stmt|;
block|}
name|Object
name|ctx
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Method
name|m
range|:
name|cls
operator|.
name|getDeclaredMethods
argument_list|()
control|)
block|{
if|if
condition|(
literal|"newInstance"
operator|.
name|equals
argument_list|(
name|m
operator|.
name|getName
argument_list|()
argument_list|)
operator|&&
name|m
operator|.
name|getParameterTypes
argument_list|()
operator|.
name|length
operator|==
literal|6
condition|)
block|{
name|ctx
operator|=
name|m
operator|.
name|invoke
argument_list|(
literal|null
argument_list|,
name|clses
operator|.
name|toArray
argument_list|(
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[
literal|0
index|]
argument_list|)
argument_list|,
name|typeRefs
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|ctx
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|JAXBException
argument_list|(
literal|"No ctx found"
argument_list|)
throw|;
block|}
name|Object
name|bridge
init|=
name|ctx
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"createBridge"
argument_list|,
name|refClass
argument_list|)
operator|.
name|invoke
argument_list|(
name|ctx
argument_list|,
name|ref
argument_list|)
decl_stmt|;
return|return
name|ReflectionInvokationHandler
operator|.
name|createProxyWrapper
argument_list|(
name|bridge
argument_list|,
name|BridgeWrapper
operator|.
name|class
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|JAXBException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
specifier|public
interface|interface
name|BridgeWrapper
block|{
name|Object
name|unmarshal
parameter_list|(
name|XMLStreamReader
name|source
parameter_list|,
name|AttachmentUnmarshaller
name|am
parameter_list|)
throws|throws
name|JAXBException
function_decl|;
name|Object
name|unmarshal
parameter_list|(
name|InputStream
name|source
parameter_list|)
throws|throws
name|JAXBException
function_decl|;
name|Object
name|unmarshal
parameter_list|(
name|Node
name|source
parameter_list|,
name|AttachmentUnmarshaller
name|am
parameter_list|)
throws|throws
name|JAXBException
function_decl|;
name|void
name|marshal
parameter_list|(
name|Object
name|elValue
parameter_list|,
name|XMLStreamWriter
name|source
parameter_list|,
name|AttachmentMarshaller
name|m
parameter_list|)
throws|throws
name|JAXBException
function_decl|;
name|void
name|marshal
parameter_list|(
name|Object
name|elValue
parameter_list|,
name|StreamResult
name|s1
parameter_list|)
throws|throws
name|JAXBException
function_decl|;
name|void
name|marshal
parameter_list|(
name|Object
name|elValue
parameter_list|,
name|Node
name|source
parameter_list|,
name|AttachmentMarshaller
name|am
parameter_list|)
throws|throws
name|JAXBException
function_decl|;
block|}
specifier|public
specifier|static
name|SchemaCompiler
name|createSchemaCompiler
parameter_list|()
throws|throws
name|JAXBException
block|{
try|try
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|cls
decl_stmt|;
name|Object
name|sc
init|=
literal|null
decl_stmt|;
try|try
block|{
name|cls
operator|=
name|Class
operator|.
name|forName
argument_list|(
literal|"com.sun.tools.xjc.api.XJC"
argument_list|)
expr_stmt|;
name|sc
operator|=
name|cls
operator|.
name|getMethod
argument_list|(
literal|"createSchemaCompiler"
argument_list|)
operator|.
name|invoke
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|cls
operator|=
name|Class
operator|.
name|forName
argument_list|(
literal|"com.sun.tools.internal.xjc.api.XJC"
argument_list|,
literal|true
argument_list|,
name|getXJCClassLoader
argument_list|()
argument_list|)
expr_stmt|;
name|sc
operator|=
name|cls
operator|.
name|getMethod
argument_list|(
literal|"createSchemaCompiler"
argument_list|)
operator|.
name|invoke
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
return|return
name|ReflectionInvokationHandler
operator|.
name|createProxyWrapper
argument_list|(
name|sc
argument_list|,
name|SchemaCompiler
operator|.
name|class
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|JAXBException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|SchemaCompiler
name|createSchemaCompilerWithDefaultAllocator
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|allocatorSet
parameter_list|)
block|{
try|try
block|{
name|SchemaCompiler
name|compiler
init|=
name|JAXBUtils
operator|.
name|createSchemaCompiler
argument_list|()
decl_stmt|;
name|Object
name|allocator
init|=
name|ReflectionInvokationHandler
operator|.
name|createProxyWrapper
argument_list|(
operator|new
name|DefaultClassNameAllocator
argument_list|(
name|allocatorSet
argument_list|)
argument_list|,
name|JAXBUtils
operator|.
name|getParamClass
argument_list|(
name|compiler
argument_list|,
literal|"setClassNameAllocator"
argument_list|)
argument_list|)
decl_stmt|;
name|compiler
operator|.
name|setClassNameAllocator
argument_list|(
name|allocator
argument_list|)
expr_stmt|;
return|return
name|compiler
return|;
block|}
catch|catch
parameter_list|(
name|JAXBException
name|e1
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unable to create schema compiler"
argument_list|,
name|e1
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|void
name|logGeneratedClassNames
parameter_list|(
name|Logger
name|logger
parameter_list|,
name|JCodeModel
name|codeModel
parameter_list|)
block|{
if|if
condition|(
operator|!
name|logger
operator|.
name|isLoggable
argument_list|(
name|Level
operator|.
name|FINE
argument_list|)
condition|)
block|{
return|return;
block|}
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|JPackage
argument_list|>
name|itr
init|=
name|codeModel
operator|.
name|packages
argument_list|()
init|;
name|itr
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|JPackage
name|package1
init|=
name|itr
operator|.
name|next
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|JDefinedClass
argument_list|>
name|citr
init|=
name|package1
operator|.
name|classes
argument_list|()
init|;
name|citr
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
if|if
condition|(
operator|!
name|first
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|first
operator|=
literal|false
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|citr
operator|.
name|next
argument_list|()
operator|.
name|fullName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|logger
operator|.
name|log
argument_list|(
name|Level
operator|.
name|FINE
argument_list|,
literal|"Created classes: "
operator|+
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|getGeneratedClassNames
parameter_list|(
name|JCodeModel
name|codeModel
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|classes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|JPackage
argument_list|>
name|itr
init|=
name|codeModel
operator|.
name|packages
argument_list|()
init|;
name|itr
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|JPackage
name|package1
init|=
name|itr
operator|.
name|next
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|JDefinedClass
argument_list|>
name|citr
init|=
name|package1
operator|.
name|classes
argument_list|()
init|;
name|citr
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|classes
operator|.
name|add
argument_list|(
name|citr
operator|.
name|next
argument_list|()
operator|.
name|fullName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|classes
return|;
block|}
specifier|public
specifier|static
name|Object
name|createFileCodeWriter
parameter_list|(
name|File
name|f
parameter_list|)
throws|throws
name|JAXBException
block|{
return|return
name|createFileCodeWriter
argument_list|(
name|f
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
operator|.
name|name
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Object
name|createFileCodeWriter
parameter_list|(
name|File
name|f
parameter_list|,
name|String
name|encoding
parameter_list|)
throws|throws
name|JAXBException
block|{
try|try
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|cls
decl_stmt|;
try|try
block|{
name|cls
operator|=
name|Class
operator|.
name|forName
argument_list|(
literal|"com.sun.codemodel.writer.FileCodeWriter"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
name|cls
operator|=
name|Class
operator|.
name|forName
argument_list|(
literal|"com.sun.codemodel.internal.writer.FileCodeWriter"
argument_list|,
literal|true
argument_list|,
name|getXJCClassLoader
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|encoding
operator|!=
literal|null
condition|)
block|{
try|try
block|{
return|return
name|cls
operator|.
name|getConstructor
argument_list|(
name|File
operator|.
name|class
argument_list|,
name|String
operator|.
name|class
argument_list|)
operator|.
name|newInstance
argument_list|(
name|f
argument_list|,
name|encoding
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|// try a single argument constructor
block|}
block|}
return|return
name|cls
operator|.
name|getConstructor
argument_list|(
name|File
operator|.
name|class
argument_list|)
operator|.
name|newInstance
argument_list|(
name|f
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|JAXBException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|Class
argument_list|<
name|?
argument_list|>
name|getParamClass
parameter_list|(
name|SchemaCompiler
name|sc
parameter_list|,
name|String
name|method
parameter_list|)
block|{
name|Object
name|o
init|=
operator|(
operator|(
name|ReflectionInvokationHandler
operator|)
name|Proxy
operator|.
name|getInvocationHandler
argument_list|(
name|sc
argument_list|)
operator|)
operator|.
name|getTarget
argument_list|()
decl_stmt|;
for|for
control|(
name|Method
name|m
range|:
name|o
operator|.
name|getClass
argument_list|()
operator|.
name|getMethods
argument_list|()
control|)
block|{
if|if
condition|(
name|m
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|method
argument_list|)
operator|&&
name|m
operator|.
name|getParameterTypes
argument_list|()
operator|.
name|length
operator|==
literal|1
condition|)
block|{
return|return
name|m
operator|.
name|getParameterTypes
argument_list|()
index|[
literal|0
index|]
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|public
specifier|static
name|List
argument_list|<
name|DOMResult
argument_list|>
name|generateJaxbSchemas
parameter_list|(
name|JAXBContext
name|context
parameter_list|,
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|DOMResult
argument_list|>
name|builtIns
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|List
argument_list|<
name|DOMResult
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|context
operator|.
name|generateSchema
argument_list|(
operator|new
name|SchemaOutputResolver
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Result
name|createOutput
parameter_list|(
name|String
name|ns
parameter_list|,
name|String
name|file
parameter_list|)
throws|throws
name|IOException
block|{
name|DOMResult
name|result
init|=
operator|new
name|DOMResult
argument_list|()
decl_stmt|;
if|if
condition|(
name|builtIns
operator|.
name|containsKey
argument_list|(
name|ns
argument_list|)
condition|)
block|{
name|DOMResult
name|dr
init|=
name|builtIns
operator|.
name|get
argument_list|(
name|ns
argument_list|)
decl_stmt|;
name|result
operator|.
name|setSystemId
argument_list|(
name|dr
operator|.
name|getSystemId
argument_list|()
argument_list|)
expr_stmt|;
name|results
operator|.
name|add
argument_list|(
name|dr
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
name|result
operator|.
name|setSystemId
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|results
operator|.
name|add
argument_list|(
name|result
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|results
return|;
block|}
specifier|public
specifier|static
name|String
name|getPackageNamespace
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|cls
parameter_list|)
block|{
name|Package
name|p
init|=
name|cls
operator|.
name|getPackage
argument_list|()
decl_stmt|;
if|if
condition|(
name|p
operator|!=
literal|null
condition|)
block|{
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlSchema
name|schemaAnn
init|=
name|p
operator|.
name|getAnnotation
argument_list|(
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlSchema
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|schemaAnn
operator|!=
literal|null
condition|)
block|{
return|return
name|schemaAnn
operator|.
name|namespace
argument_list|()
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|public
specifier|static
name|void
name|scanPackages
parameter_list|(
name|Set
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|classes
parameter_list|,
name|Map
argument_list|<
name|Package
argument_list|,
name|CachedClass
argument_list|>
name|objectFactoryCache
parameter_list|)
block|{
name|scanPackages
argument_list|(
name|classes
argument_list|,
literal|null
argument_list|,
name|objectFactoryCache
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|scanPackages
parameter_list|(
name|Set
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|classes
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|extraClass
parameter_list|,
name|Map
argument_list|<
name|Package
argument_list|,
name|CachedClass
argument_list|>
name|objectFactoryCache
parameter_list|)
block|{
comment|// add user extra class into jaxb context
if|if
condition|(
name|extraClass
operator|!=
literal|null
operator|&&
name|extraClass
operator|.
name|length
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|Class
argument_list|<
name|?
argument_list|>
name|clz
range|:
name|extraClass
control|)
block|{
name|classes
operator|.
name|add
argument_list|(
name|clz
argument_list|)
expr_stmt|;
block|}
block|}
comment|// try and read any jaxb.index files that are with the other classes.
comment|// This should
comment|// allow loading of extra classes (such as subclasses for inheritance
comment|// reasons)
comment|// that are in the same package. Also check for ObjectFactory classes
name|Map
argument_list|<
name|String
argument_list|,
name|InputStream
argument_list|>
name|packages
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|ClassLoader
argument_list|>
name|packageLoaders
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|objectFactories
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Class
argument_list|<
name|?
argument_list|>
name|jcls
range|:
name|classes
control|)
block|{
name|String
name|pkgName
init|=
name|PackageUtils
operator|.
name|getPackageName
argument_list|(
name|jcls
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|packages
operator|.
name|containsKey
argument_list|(
name|pkgName
argument_list|)
condition|)
block|{
name|Package
name|pkg
init|=
name|jcls
operator|.
name|getPackage
argument_list|()
decl_stmt|;
name|packages
operator|.
name|put
argument_list|(
name|pkgName
argument_list|,
name|jcls
operator|.
name|getResourceAsStream
argument_list|(
literal|"jaxb.index"
argument_list|)
argument_list|)
expr_stmt|;
name|packageLoaders
operator|.
name|put
argument_list|(
name|pkgName
argument_list|,
name|getClassLoader
argument_list|(
name|jcls
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|objectFactoryClassName
init|=
name|pkgName
operator|+
literal|"."
operator|+
literal|"ObjectFactory"
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|ofactory
init|=
literal|null
decl_stmt|;
name|CachedClass
name|cachedFactory
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|pkg
operator|!=
literal|null
operator|&&
name|objectFactoryCache
operator|!=
literal|null
condition|)
block|{
synchronized|synchronized
init|(
name|objectFactoryCache
init|)
block|{
name|cachedFactory
operator|=
name|objectFactoryCache
operator|.
name|get
argument_list|(
name|pkg
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|cachedFactory
operator|!=
literal|null
condition|)
block|{
name|ofactory
operator|=
name|cachedFactory
operator|.
name|getCachedClass
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|ofactory
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|ofactory
operator|=
name|Class
operator|.
name|forName
argument_list|(
name|objectFactoryClassName
argument_list|,
literal|false
argument_list|,
name|getClassLoader
argument_list|(
name|jcls
argument_list|)
argument_list|)
expr_stmt|;
name|objectFactories
operator|.
name|add
argument_list|(
name|ofactory
argument_list|)
expr_stmt|;
name|addToObjectFactoryCache
argument_list|(
name|pkg
argument_list|,
name|ofactory
argument_list|,
name|objectFactoryCache
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
name|addToObjectFactoryCache
argument_list|(
name|pkg
argument_list|,
literal|null
argument_list|,
name|objectFactoryCache
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|objectFactories
operator|.
name|add
argument_list|(
name|ofactory
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|InputStream
argument_list|>
name|entry
range|:
name|packages
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|getValue
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|BufferedReader
name|reader
init|=
literal|null
decl_stmt|;
try|try
block|{
name|reader
operator|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|pkg
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|ClassLoader
name|loader
init|=
name|packageLoaders
operator|.
name|get
argument_list|(
name|pkg
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|pkg
argument_list|)
condition|)
block|{
name|pkg
operator|+=
literal|"."
expr_stmt|;
block|}
name|String
name|line
init|=
name|reader
operator|.
name|readLine
argument_list|()
decl_stmt|;
while|while
condition|(
name|line
operator|!=
literal|null
condition|)
block|{
name|line
operator|=
name|line
operator|.
name|trim
argument_list|()
expr_stmt|;
if|if
condition|(
name|line
operator|.
name|indexOf
argument_list|(
literal|"#"
argument_list|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|line
operator|=
name|line
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|line
operator|.
name|indexOf
argument_list|(
literal|"#"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|line
argument_list|)
condition|)
block|{
try|try
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|ncls
init|=
name|Class
operator|.
name|forName
argument_list|(
name|pkg
operator|+
name|line
argument_list|,
literal|false
argument_list|,
name|loader
argument_list|)
decl_stmt|;
name|classes
operator|.
name|add
argument_list|(
name|ncls
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// ignore
block|}
finally|finally
block|{
try|try
block|{
if|if
condition|(
name|reader
operator|!=
literal|null
condition|)
block|{
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
block|}
block|}
name|classes
operator|.
name|addAll
argument_list|(
name|objectFactories
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|ClassLoader
name|getClassLoader
parameter_list|(
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|)
block|{
specifier|final
name|SecurityManager
name|sm
init|=
name|System
operator|.
name|getSecurityManager
argument_list|()
decl_stmt|;
if|if
condition|(
name|sm
operator|!=
literal|null
condition|)
block|{
return|return
name|AccessController
operator|.
name|doPrivileged
argument_list|(
operator|new
name|PrivilegedAction
argument_list|<
name|ClassLoader
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ClassLoader
name|run
parameter_list|()
block|{
return|return
name|clazz
operator|.
name|getClassLoader
argument_list|()
return|;
block|}
block|}
argument_list|)
return|;
block|}
return|return
name|clazz
operator|.
name|getClassLoader
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|void
name|addToObjectFactoryCache
parameter_list|(
name|Package
name|objectFactoryPkg
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|ofactory
parameter_list|,
name|Map
argument_list|<
name|Package
argument_list|,
name|CachedClass
argument_list|>
name|objectFactoryCache
parameter_list|)
block|{
if|if
condition|(
name|objectFactoryPkg
operator|==
literal|null
operator|||
name|objectFactoryCache
operator|==
literal|null
condition|)
block|{
return|return;
block|}
synchronized|synchronized
init|(
name|objectFactoryCache
init|)
block|{
name|objectFactoryCache
operator|.
name|put
argument_list|(
name|objectFactoryPkg
argument_list|,
operator|new
name|CachedClass
argument_list|(
name|ofactory
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|DefaultClassNameAllocator
block|{
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|typesClassNames
decl_stmt|;
specifier|public
name|DefaultClassNameAllocator
parameter_list|()
block|{
name|this
argument_list|(
operator|new
name|HashSet
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|DefaultClassNameAllocator
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|set
parameter_list|)
block|{
name|typesClassNames
operator|=
name|set
expr_stmt|;
block|}
specifier|public
name|String
name|assignClassName
parameter_list|(
name|String
name|packageName
parameter_list|,
name|String
name|className
parameter_list|)
block|{
name|String
name|fullClassName
init|=
name|className
decl_stmt|;
name|String
name|fullPckClass
init|=
name|packageName
operator|+
literal|"."
operator|+
name|fullClassName
decl_stmt|;
name|int
name|cnt
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|typesClassNames
operator|.
name|contains
argument_list|(
name|fullPckClass
argument_list|)
condition|)
block|{
name|cnt
operator|++
expr_stmt|;
name|fullClassName
operator|=
name|className
operator|+
name|cnt
expr_stmt|;
name|fullPckClass
operator|=
name|packageName
operator|+
literal|"."
operator|+
name|fullClassName
expr_stmt|;
block|}
name|typesClassNames
operator|.
name|add
argument_list|(
name|fullPckClass
argument_list|)
expr_stmt|;
return|return
name|fullClassName
return|;
block|}
block|}
specifier|public
interface|interface
name|SchemaCompiler
block|{
name|void
name|setEntityResolver
parameter_list|(
name|EntityResolver
name|entityResolver
parameter_list|)
function_decl|;
name|void
name|setErrorListener
parameter_list|(
name|Object
name|elForRun
parameter_list|)
function_decl|;
name|void
name|setClassNameAllocator
parameter_list|(
name|Object
name|allocator
parameter_list|)
function_decl|;
annotation|@
name|WrapReturn
argument_list|(
name|S2JJAXBModel
operator|.
name|class
argument_list|)
name|S2JJAXBModel
name|bind
parameter_list|()
function_decl|;
name|void
name|parseSchema
parameter_list|(
name|InputSource
name|source
parameter_list|)
function_decl|;
name|void
name|parseSchema
parameter_list|(
name|String
name|key
parameter_list|,
name|Element
name|el
parameter_list|)
function_decl|;
name|void
name|parseSchema
parameter_list|(
name|String
name|key
parameter_list|,
name|XMLStreamReader
name|el
parameter_list|)
function_decl|;
annotation|@
name|WrapReturn
argument_list|(
name|Options
operator|.
name|class
argument_list|)
name|Options
name|getOptions
parameter_list|()
function_decl|;
block|}
specifier|public
interface|interface
name|S2JJAXBModel
block|{
annotation|@
name|WrapReturn
argument_list|(
name|JCodeModel
operator|.
name|class
argument_list|)
name|JCodeModel
name|generateCode
parameter_list|(
name|Object
name|object
parameter_list|,
name|Object
name|elForRun
parameter_list|)
function_decl|;
annotation|@
name|WrapReturn
argument_list|(
name|Mapping
operator|.
name|class
argument_list|)
name|Mapping
name|get
parameter_list|(
name|QName
name|qn
parameter_list|)
function_decl|;
annotation|@
name|WrapReturn
argument_list|(
name|TypeAndAnnotation
operator|.
name|class
argument_list|)
name|TypeAndAnnotation
name|getJavaType
parameter_list|(
name|QName
name|typeQName
parameter_list|)
function_decl|;
block|}
specifier|public
interface|interface
name|Mapping
block|{
annotation|@
name|WrapReturn
argument_list|(
name|TypeAndAnnotation
operator|.
name|class
argument_list|)
name|TypeAndAnnotation
name|getType
parameter_list|()
function_decl|;
block|}
specifier|public
interface|interface
name|TypeAndAnnotation
block|{
annotation|@
name|WrapReturn
argument_list|(
name|JType
operator|.
name|class
argument_list|)
name|JType
name|getTypeClass
parameter_list|()
function_decl|;
block|}
specifier|public
interface|interface
name|JType
block|{
name|boolean
name|isArray
parameter_list|()
function_decl|;
annotation|@
name|WrapReturn
argument_list|(
name|JType
operator|.
name|class
argument_list|)
name|JType
name|elementType
parameter_list|()
function_decl|;
name|boolean
name|isPrimitive
parameter_list|()
function_decl|;
name|String
name|binaryName
parameter_list|()
function_decl|;
name|String
name|fullName
parameter_list|()
function_decl|;
name|String
name|name
parameter_list|()
function_decl|;
annotation|@
name|WrapReturn
argument_list|(
name|value
operator|=
name|JType
operator|.
name|class
argument_list|,
name|iterator
operator|=
literal|true
argument_list|)
name|Iterator
argument_list|<
name|JType
argument_list|>
name|classes
parameter_list|()
function_decl|;
block|}
specifier|public
interface|interface
name|Options
block|{
name|void
name|addGrammar
parameter_list|(
name|InputSource
name|is
parameter_list|)
function_decl|;
name|void
name|addBindFile
parameter_list|(
name|InputSource
name|is
parameter_list|)
function_decl|;
name|void
name|parseArguments
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
function_decl|;
name|String
name|getBuildID
parameter_list|()
function_decl|;
block|}
specifier|public
interface|interface
name|JCodeModel
block|{
name|void
name|build
parameter_list|(
name|Object
name|writer
parameter_list|)
throws|throws
name|IOException
function_decl|;
annotation|@
name|WrapReturn
argument_list|(
name|value
operator|=
name|JPackage
operator|.
name|class
argument_list|,
name|iterator
operator|=
literal|true
argument_list|)
name|Iterator
argument_list|<
name|JPackage
argument_list|>
name|packages
parameter_list|()
function_decl|;
block|}
specifier|public
interface|interface
name|JPackage
block|{
name|String
name|name
parameter_list|()
function_decl|;
annotation|@
name|WrapReturn
argument_list|(
name|value
operator|=
name|JDefinedClass
operator|.
name|class
argument_list|,
name|iterator
operator|=
literal|true
argument_list|)
name|Iterator
argument_list|<
name|JDefinedClass
argument_list|>
name|classes
parameter_list|()
function_decl|;
block|}
specifier|public
interface|interface
name|JDefinedClass
block|{
name|String
name|name
parameter_list|()
function_decl|;
name|String
name|fullName
parameter_list|()
function_decl|;
block|}
specifier|public
specifier|static
name|boolean
name|isJAXB22
parameter_list|()
block|{
name|Target
name|t
init|=
name|XmlElement
operator|.
name|class
operator|.
name|getAnnotation
argument_list|(
name|Target
operator|.
name|class
argument_list|)
decl_stmt|;
comment|//JAXB 2.2 allows XmlElement on params.
for|for
control|(
name|ElementType
name|et
range|:
name|t
operator|.
name|value
argument_list|()
control|)
block|{
if|if
condition|(
name|et
operator|==
name|ElementType
operator|.
name|PARAMETER
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|private
specifier|static
specifier|synchronized
name|Object
name|createNamespaceWrapper
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|mcls
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
parameter_list|)
block|{
name|String
name|postFix
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|mcls
operator|.
name|getName
argument_list|()
operator|.
name|contains
argument_list|(
literal|"eclipse"
argument_list|)
condition|)
block|{
return|return
name|createEclipseNamespaceMapper
argument_list|(
name|mcls
argument_list|,
name|map
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|mcls
operator|.
name|getName
argument_list|()
operator|.
name|contains
argument_list|(
literal|".internal"
argument_list|)
condition|)
block|{
name|postFix
operator|=
literal|"Internal"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|mcls
operator|.
name|getName
argument_list|()
operator|.
name|contains
argument_list|(
literal|"com.sun"
argument_list|)
condition|)
block|{
name|postFix
operator|=
literal|"RI"
expr_stmt|;
block|}
name|ASMHelper
name|helper
init|=
operator|new
name|ASMHelper
argument_list|()
decl_stmt|;
name|String
name|className
init|=
literal|"org.apache.cxf.jaxb.NamespaceMapper"
decl_stmt|;
name|className
operator|+=
name|postFix
expr_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|cls
init|=
name|helper
operator|.
name|findClass
argument_list|(
name|className
argument_list|,
name|JAXBUtils
operator|.
name|class
argument_list|)
decl_stmt|;
name|Throwable
name|t
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|cls
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|ClassWriter
name|cw
init|=
name|helper
operator|.
name|createClassWriter
argument_list|()
decl_stmt|;
if|if
condition|(
name|cw
operator|!=
literal|null
condition|)
block|{
name|cls
operator|=
name|createNamespaceWrapperInternal
argument_list|(
name|helper
argument_list|,
name|cw
argument_list|,
name|postFix
argument_list|,
name|mcls
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|ex
parameter_list|)
block|{
comment|// continue
name|t
operator|=
name|ex
expr_stmt|;
block|}
block|}
if|if
condition|(
name|cls
operator|==
literal|null
operator|&&
operator|(
operator|!
name|mcls
operator|.
name|getName
argument_list|()
operator|.
name|contains
argument_list|(
literal|".internal."
argument_list|)
operator|&&
name|mcls
operator|.
name|getName
argument_list|()
operator|.
name|contains
argument_list|(
literal|"com.sun"
argument_list|)
operator|)
condition|)
block|{
try|try
block|{
name|cls
operator|=
name|ClassLoaderUtils
operator|.
name|loadClass
argument_list|(
literal|"org.apache.cxf.common.jaxb.NamespaceMapper"
argument_list|,
name|JAXBUtils
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex2
parameter_list|)
block|{
comment|// ignore
name|t
operator|=
name|ex2
expr_stmt|;
block|}
block|}
if|if
condition|(
name|cls
operator|!=
literal|null
condition|)
block|{
try|try
block|{
return|return
name|cls
operator|.
name|getConstructor
argument_list|(
name|Map
operator|.
name|class
argument_list|)
operator|.
name|newInstance
argument_list|(
name|map
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// ignore
name|t
operator|=
name|e
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|INFO
argument_list|,
literal|"Could not create a NamespaceMapper compatible with Marshaller class "
operator|+
name|mcls
operator|.
name|getName
argument_list|()
argument_list|,
name|t
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
comment|/*     // This is the "prototype" for the ASM generated class below     public static class MapNamespacePrefixMapper2         extends org.eclipse.persistence.internal.oxm.record.namespaces.MapNamespacePrefixMapper {          String[] nsctxt;          public MapNamespacePrefixMapper2(Map<String, String> foo) {             super(foo);         }         public String[] getPreDeclaredNamespaceUris() {             String[] sup = super.getPreDeclaredNamespaceUris();             if (nsctxt == null) {                 return sup;             }             List<String> s = new ArrayList<>(Arrays.asList(sup));             for (int x = 1; x< nsctxt.length; x = x + 2) {                 s.remove(nsctxt[x]);             }             return s.toArray(new String[s.size()]);         }         public void setContextualNamespaceDecls(String[] f) {             nsctxt = f;         }         public String[] getContextualNamespaceDecls() {             return nsctxt;         }     }     */
comment|//CHECKSTYLE:OFF
comment|//bunch of really long ASM based methods that cannot be shortened easily
specifier|private
specifier|static
name|Object
name|createEclipseNamespaceMapper
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|mcls
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
parameter_list|)
block|{
name|ASMHelper
name|helper
init|=
operator|new
name|ASMHelper
argument_list|()
decl_stmt|;
name|String
name|className
init|=
literal|"org.apache.cxf.jaxb.EclipseNamespaceMapper"
decl_stmt|;
name|String
name|slashedName
init|=
literal|"org/apache/cxf/jaxb/EclipseNamespaceMapper"
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|cls
init|=
name|helper
operator|.
name|findClass
argument_list|(
name|className
argument_list|,
name|JAXBUtils
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|cls
operator|==
literal|null
condition|)
block|{
name|ClassWriter
name|cw
init|=
name|helper
operator|.
name|createClassWriter
argument_list|()
decl_stmt|;
if|if
condition|(
name|cw
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|String
name|superName
init|=
literal|"org/eclipse/persistence/internal/oxm/record/namespaces/MapNamespacePrefixMapper"
decl_stmt|;
name|FieldVisitor
name|fv
decl_stmt|;
name|MethodVisitor
name|mv
decl_stmt|;
name|cw
operator|.
name|visit
argument_list|(
name|Opcodes
operator|.
name|V1_6
argument_list|,
name|Opcodes
operator|.
name|ACC_PUBLIC
operator|+
name|Opcodes
operator|.
name|ACC_FINAL
operator|+
name|Opcodes
operator|.
name|ACC_SUPER
argument_list|,
name|slashedName
argument_list|,
literal|null
argument_list|,
name|superName
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|cw
operator|.
name|visitSource
argument_list|(
literal|"EclipseNamespaceMapper.java"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fv
operator|=
name|cw
operator|.
name|visitField
argument_list|(
name|Opcodes
operator|.
name|ACC_PRIVATE
argument_list|,
literal|"nsctxt"
argument_list|,
literal|"[Ljava/lang/String;"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fv
operator|.
name|visitEnd
argument_list|()
expr_stmt|;
name|mv
operator|=
name|cw
operator|.
name|visitMethod
argument_list|(
name|Opcodes
operator|.
name|ACC_PUBLIC
argument_list|,
literal|"<init>"
argument_list|,
literal|"(Ljava/util/Map;)V"
argument_list|,
literal|"(Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;)V"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitCode
argument_list|()
expr_stmt|;
name|Label
name|l0
init|=
name|helper
operator|.
name|createLabel
argument_list|()
decl_stmt|;
name|mv
operator|.
name|visitLabel
argument_list|(
name|l0
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitVarInsn
argument_list|(
name|Opcodes
operator|.
name|ALOAD
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitVarInsn
argument_list|(
name|Opcodes
operator|.
name|ALOAD
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitMethodInsn
argument_list|(
name|Opcodes
operator|.
name|INVOKESPECIAL
argument_list|,
name|superName
argument_list|,
literal|"<init>"
argument_list|,
literal|"(Ljava/util/Map;)V"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Label
name|l1
init|=
name|helper
operator|.
name|createLabel
argument_list|()
decl_stmt|;
name|mv
operator|.
name|visitLabel
argument_list|(
name|l1
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitInsn
argument_list|(
name|Opcodes
operator|.
name|RETURN
argument_list|)
expr_stmt|;
name|Label
name|l2
init|=
name|helper
operator|.
name|createLabel
argument_list|()
decl_stmt|;
name|mv
operator|.
name|visitLabel
argument_list|(
name|l2
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitMaxs
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitEnd
argument_list|()
expr_stmt|;
name|mv
operator|=
name|cw
operator|.
name|visitMethod
argument_list|(
name|Opcodes
operator|.
name|ACC_PUBLIC
argument_list|,
literal|"setContextualNamespaceDecls"
argument_list|,
literal|"([Ljava/lang/String;)V"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitCode
argument_list|()
expr_stmt|;
name|l0
operator|=
name|helper
operator|.
name|createLabel
argument_list|()
expr_stmt|;
name|mv
operator|.
name|visitLabel
argument_list|(
name|l0
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitLineNumber
argument_list|(
literal|47
argument_list|,
name|l0
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitVarInsn
argument_list|(
name|Opcodes
operator|.
name|ALOAD
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitVarInsn
argument_list|(
name|Opcodes
operator|.
name|ALOAD
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitFieldInsn
argument_list|(
name|Opcodes
operator|.
name|PUTFIELD
argument_list|,
name|slashedName
argument_list|,
literal|"nsctxt"
argument_list|,
literal|"[Ljava/lang/String;"
argument_list|)
expr_stmt|;
name|l1
operator|=
name|helper
operator|.
name|createLabel
argument_list|()
expr_stmt|;
name|mv
operator|.
name|visitLabel
argument_list|(
name|l1
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitLineNumber
argument_list|(
literal|48
argument_list|,
name|l1
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitInsn
argument_list|(
name|Opcodes
operator|.
name|RETURN
argument_list|)
expr_stmt|;
name|l2
operator|=
name|helper
operator|.
name|createLabel
argument_list|()
expr_stmt|;
name|mv
operator|.
name|visitLabel
argument_list|(
name|l2
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitLocalVariable
argument_list|(
literal|"this"
argument_list|,
literal|"L"
operator|+
name|slashedName
operator|+
literal|";"
argument_list|,
literal|null
argument_list|,
name|l0
argument_list|,
name|l2
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitLocalVariable
argument_list|(
literal|"contextualNamespaceDecls"
argument_list|,
literal|"[Ljava/lang/String;"
argument_list|,
literal|null
argument_list|,
name|l0
argument_list|,
name|l2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitMaxs
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitEnd
argument_list|()
expr_stmt|;
name|mv
operator|=
name|cw
operator|.
name|visitMethod
argument_list|(
name|Opcodes
operator|.
name|ACC_PUBLIC
argument_list|,
literal|"getContextualNamespaceDecls"
argument_list|,
literal|"()[Ljava/lang/String;"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitCode
argument_list|()
expr_stmt|;
name|l0
operator|=
name|helper
operator|.
name|createLabel
argument_list|()
expr_stmt|;
name|mv
operator|.
name|visitLabel
argument_list|(
name|l0
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitLineNumber
argument_list|(
literal|51
argument_list|,
name|l0
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitVarInsn
argument_list|(
name|Opcodes
operator|.
name|ALOAD
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitFieldInsn
argument_list|(
name|Opcodes
operator|.
name|GETFIELD
argument_list|,
name|slashedName
argument_list|,
literal|"nsctxt"
argument_list|,
literal|"[Ljava/lang/String;"
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitInsn
argument_list|(
name|Opcodes
operator|.
name|ARETURN
argument_list|)
expr_stmt|;
name|l1
operator|=
name|helper
operator|.
name|createLabel
argument_list|()
expr_stmt|;
name|mv
operator|.
name|visitLabel
argument_list|(
name|l1
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitLocalVariable
argument_list|(
literal|"this"
argument_list|,
literal|"L"
operator|+
name|slashedName
operator|+
literal|";"
argument_list|,
literal|null
argument_list|,
name|l0
argument_list|,
name|l1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitMaxs
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitEnd
argument_list|()
expr_stmt|;
name|mv
operator|=
name|cw
operator|.
name|visitMethod
argument_list|(
name|Opcodes
operator|.
name|ACC_PUBLIC
argument_list|,
literal|"getPreDeclaredNamespaceUris"
argument_list|,
literal|"()[Ljava/lang/String;"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitCode
argument_list|()
expr_stmt|;
name|l0
operator|=
name|helper
operator|.
name|createLabel
argument_list|()
expr_stmt|;
name|mv
operator|.
name|visitLabel
argument_list|(
name|l0
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitLineNumber
argument_list|(
literal|1036
argument_list|,
name|l0
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitVarInsn
argument_list|(
name|Opcodes
operator|.
name|ALOAD
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitMethodInsn
argument_list|(
name|Opcodes
operator|.
name|INVOKESPECIAL
argument_list|,
name|superName
argument_list|,
literal|"getPreDeclaredNamespaceUris"
argument_list|,
literal|"()[Ljava/lang/String;"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitVarInsn
argument_list|(
name|Opcodes
operator|.
name|ASTORE
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|l1
operator|=
name|helper
operator|.
name|createLabel
argument_list|()
expr_stmt|;
name|mv
operator|.
name|visitLabel
argument_list|(
name|l1
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitLineNumber
argument_list|(
literal|1037
argument_list|,
name|l1
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitVarInsn
argument_list|(
name|Opcodes
operator|.
name|ALOAD
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitFieldInsn
argument_list|(
name|Opcodes
operator|.
name|GETFIELD
argument_list|,
name|slashedName
argument_list|,
literal|"nsctxt"
argument_list|,
literal|"[Ljava/lang/String;"
argument_list|)
expr_stmt|;
name|l2
operator|=
name|helper
operator|.
name|createLabel
argument_list|()
expr_stmt|;
name|mv
operator|.
name|visitJumpInsn
argument_list|(
name|Opcodes
operator|.
name|IFNONNULL
argument_list|,
name|l2
argument_list|)
expr_stmt|;
name|Label
name|l3
init|=
name|helper
operator|.
name|createLabel
argument_list|()
decl_stmt|;
name|mv
operator|.
name|visitLabel
argument_list|(
name|l3
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitLineNumber
argument_list|(
literal|1038
argument_list|,
name|l3
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitVarInsn
argument_list|(
name|Opcodes
operator|.
name|ALOAD
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitInsn
argument_list|(
name|Opcodes
operator|.
name|ARETURN
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitLabel
argument_list|(
name|l2
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitLineNumber
argument_list|(
literal|1040
argument_list|,
name|l2
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitFrame
argument_list|(
name|Opcodes
operator|.
name|F_APPEND
argument_list|,
literal|1
argument_list|,
operator|new
name|Object
index|[]
block|{
literal|"[Ljava/lang/String;"
block|}
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitTypeInsn
argument_list|(
name|Opcodes
operator|.
name|NEW
argument_list|,
literal|"java/util/ArrayList"
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitInsn
argument_list|(
name|Opcodes
operator|.
name|DUP
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitVarInsn
argument_list|(
name|Opcodes
operator|.
name|ALOAD
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitMethodInsn
argument_list|(
name|Opcodes
operator|.
name|INVOKESTATIC
argument_list|,
literal|"java/util/Arrays"
argument_list|,
literal|"asList"
argument_list|,
literal|"([Ljava/lang/Object;)Ljava/util/List;"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitMethodInsn
argument_list|(
name|Opcodes
operator|.
name|INVOKESPECIAL
argument_list|,
literal|"java/util/ArrayList"
argument_list|,
literal|"<init>"
argument_list|,
literal|"(Ljava/util/Collection;)V"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitVarInsn
argument_list|(
name|Opcodes
operator|.
name|ASTORE
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|Label
name|l4
init|=
name|helper
operator|.
name|createLabel
argument_list|()
decl_stmt|;
name|mv
operator|.
name|visitLabel
argument_list|(
name|l4
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitLineNumber
argument_list|(
literal|1041
argument_list|,
name|l4
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitInsn
argument_list|(
name|Opcodes
operator|.
name|ICONST_1
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitVarInsn
argument_list|(
name|Opcodes
operator|.
name|ISTORE
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|Label
name|l5
init|=
name|helper
operator|.
name|createLabel
argument_list|()
decl_stmt|;
name|mv
operator|.
name|visitLabel
argument_list|(
name|l5
argument_list|)
expr_stmt|;
name|Label
name|l6
init|=
name|helper
operator|.
name|createLabel
argument_list|()
decl_stmt|;
name|mv
operator|.
name|visitJumpInsn
argument_list|(
name|Opcodes
operator|.
name|GOTO
argument_list|,
name|l6
argument_list|)
expr_stmt|;
name|Label
name|l7
init|=
name|helper
operator|.
name|createLabel
argument_list|()
decl_stmt|;
name|mv
operator|.
name|visitLabel
argument_list|(
name|l7
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitLineNumber
argument_list|(
literal|1042
argument_list|,
name|l7
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitFrame
argument_list|(
name|Opcodes
operator|.
name|F_APPEND
argument_list|,
literal|2
argument_list|,
operator|new
name|Object
index|[]
block|{
literal|"java/util/List"
block|,
name|Opcodes
operator|.
name|INTEGER
block|}
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitVarInsn
argument_list|(
name|Opcodes
operator|.
name|ALOAD
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitVarInsn
argument_list|(
name|Opcodes
operator|.
name|ALOAD
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitFieldInsn
argument_list|(
name|Opcodes
operator|.
name|GETFIELD
argument_list|,
name|slashedName
argument_list|,
literal|"nsctxt"
argument_list|,
literal|"[Ljava/lang/String;"
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitVarInsn
argument_list|(
name|Opcodes
operator|.
name|ILOAD
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitInsn
argument_list|(
name|Opcodes
operator|.
name|AALOAD
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitMethodInsn
argument_list|(
name|Opcodes
operator|.
name|INVOKEINTERFACE
argument_list|,
literal|"java/util/List"
argument_list|,
literal|"remove"
argument_list|,
literal|"(Ljava/lang/Object;)Z"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitInsn
argument_list|(
name|Opcodes
operator|.
name|POP
argument_list|)
expr_stmt|;
name|Label
name|l8
init|=
name|helper
operator|.
name|createLabel
argument_list|()
decl_stmt|;
name|mv
operator|.
name|visitLabel
argument_list|(
name|l8
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitLineNumber
argument_list|(
literal|1041
argument_list|,
name|l8
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitIincInsn
argument_list|(
literal|3
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitLabel
argument_list|(
name|l6
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitFrame
argument_list|(
name|Opcodes
operator|.
name|F_SAME
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitVarInsn
argument_list|(
name|Opcodes
operator|.
name|ILOAD
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitVarInsn
argument_list|(
name|Opcodes
operator|.
name|ALOAD
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitFieldInsn
argument_list|(
name|Opcodes
operator|.
name|GETFIELD
argument_list|,
name|slashedName
argument_list|,
literal|"nsctxt"
argument_list|,
literal|"[Ljava/lang/String;"
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitInsn
argument_list|(
name|Opcodes
operator|.
name|ARRAYLENGTH
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitJumpInsn
argument_list|(
name|Opcodes
operator|.
name|IF_ICMPLT
argument_list|,
name|l7
argument_list|)
expr_stmt|;
name|Label
name|l9
init|=
name|helper
operator|.
name|createLabel
argument_list|()
decl_stmt|;
name|mv
operator|.
name|visitLabel
argument_list|(
name|l9
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitLineNumber
argument_list|(
literal|1044
argument_list|,
name|l9
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitVarInsn
argument_list|(
name|Opcodes
operator|.
name|ALOAD
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitVarInsn
argument_list|(
name|Opcodes
operator|.
name|ALOAD
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitMethodInsn
argument_list|(
name|Opcodes
operator|.
name|INVOKEINTERFACE
argument_list|,
literal|"java/util/List"
argument_list|,
literal|"size"
argument_list|,
literal|"()I"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitTypeInsn
argument_list|(
name|Opcodes
operator|.
name|ANEWARRAY
argument_list|,
literal|"java/lang/String"
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitMethodInsn
argument_list|(
name|Opcodes
operator|.
name|INVOKEINTERFACE
argument_list|,
literal|"java/util/List"
argument_list|,
literal|"toArray"
argument_list|,
literal|"([Ljava/lang/Object;)[Ljava/lang/Object;"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitTypeInsn
argument_list|(
name|Opcodes
operator|.
name|CHECKCAST
argument_list|,
literal|"[Ljava/lang/String;"
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitInsn
argument_list|(
name|Opcodes
operator|.
name|ARETURN
argument_list|)
expr_stmt|;
name|Label
name|l10
init|=
name|helper
operator|.
name|createLabel
argument_list|()
decl_stmt|;
name|mv
operator|.
name|visitLabel
argument_list|(
name|l10
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitLocalVariable
argument_list|(
literal|"this"
argument_list|,
literal|"L"
operator|+
name|slashedName
operator|+
literal|";"
argument_list|,
literal|null
argument_list|,
name|l0
argument_list|,
name|l10
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitLocalVariable
argument_list|(
literal|"sup"
argument_list|,
literal|"[Ljava/lang/String;"
argument_list|,
literal|null
argument_list|,
name|l1
argument_list|,
name|l10
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitLocalVariable
argument_list|(
literal|"s"
argument_list|,
literal|"Ljava/util/List;"
argument_list|,
literal|"Ljava/util/List<Ljava/lang/String;>;"
argument_list|,
name|l4
argument_list|,
name|l10
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitLocalVariable
argument_list|(
literal|"x"
argument_list|,
literal|"I"
argument_list|,
literal|null
argument_list|,
name|l5
argument_list|,
name|l9
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitMaxs
argument_list|(
literal|3
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitEnd
argument_list|()
expr_stmt|;
name|cw
operator|.
name|visitEnd
argument_list|()
expr_stmt|;
name|byte
index|[]
name|bts
init|=
name|cw
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|cls
operator|=
name|helper
operator|.
name|loadClass
argument_list|(
name|className
argument_list|,
name|mcls
argument_list|,
name|bts
argument_list|)
expr_stmt|;
block|}
try|try
block|{
return|return
name|cls
operator|.
name|getConstructor
argument_list|(
name|Map
operator|.
name|class
argument_list|)
operator|.
name|newInstance
argument_list|(
name|map
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
specifier|private
specifier|static
name|Class
argument_list|<
name|?
argument_list|>
name|createNamespaceWrapperInternal
parameter_list|(
name|ASMHelper
name|helper
parameter_list|,
name|ClassWriter
name|cw
parameter_list|,
name|String
name|postFix
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|ref
parameter_list|)
block|{
name|String
name|className
init|=
literal|"org.apache.cxf.jaxb.NamespaceMapper"
operator|+
name|postFix
decl_stmt|;
name|String
name|superName
init|=
literal|"com/sun/xml/"
operator|+
operator|(
literal|"RI"
operator|.
name|equals
argument_list|(
name|postFix
argument_list|)
condition|?
literal|""
else|:
literal|"internal/"
operator|)
operator|+
literal|"bind/marshaller/NamespacePrefixMapper"
decl_stmt|;
name|String
name|postFixedName
init|=
literal|"org/apache/cxf/jaxb/NamespaceMapper"
operator|+
name|postFix
decl_stmt|;
name|FieldVisitor
name|fv
decl_stmt|;
name|MethodVisitor
name|mv
decl_stmt|;
name|cw
operator|.
name|visit
argument_list|(
name|Opcodes
operator|.
name|V1_6
argument_list|,
name|Opcodes
operator|.
name|ACC_PUBLIC
operator|+
name|Opcodes
operator|.
name|ACC_FINAL
operator|+
name|Opcodes
operator|.
name|ACC_SUPER
argument_list|,
name|postFixedName
argument_list|,
literal|null
argument_list|,
name|superName
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|cw
operator|.
name|visitSource
argument_list|(
literal|"NamespaceMapper.java"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fv
operator|=
name|cw
operator|.
name|visitField
argument_list|(
name|Opcodes
operator|.
name|ACC_PRIVATE
operator|+
name|Opcodes
operator|.
name|ACC_FINAL
argument_list|,
literal|"nspref"
argument_list|,
literal|"Ljava/util/Map;"
argument_list|,
literal|"Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fv
operator|.
name|visitEnd
argument_list|()
expr_stmt|;
name|fv
operator|=
name|cw
operator|.
name|visitField
argument_list|(
name|Opcodes
operator|.
name|ACC_PRIVATE
argument_list|,
literal|"nsctxt"
argument_list|,
literal|"[Ljava/lang/String;"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fv
operator|.
name|visitEnd
argument_list|()
expr_stmt|;
name|fv
operator|=
name|cw
operator|.
name|visitField
argument_list|(
name|Opcodes
operator|.
name|ACC_PRIVATE
operator|+
name|Opcodes
operator|.
name|ACC_FINAL
operator|+
name|Opcodes
operator|.
name|ACC_STATIC
argument_list|,
literal|"EMPTY_STRING"
argument_list|,
literal|"[Ljava/lang/String;"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fv
operator|.
name|visitEnd
argument_list|()
expr_stmt|;
name|mv
operator|=
name|cw
operator|.
name|visitMethod
argument_list|(
name|Opcodes
operator|.
name|ACC_STATIC
argument_list|,
literal|"<clinit>"
argument_list|,
literal|"()V"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitCode
argument_list|()
expr_stmt|;
name|Label
name|l0
init|=
name|helper
operator|.
name|createLabel
argument_list|()
decl_stmt|;
name|mv
operator|.
name|visitLabel
argument_list|(
name|l0
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitLineNumber
argument_list|(
literal|30
argument_list|,
name|l0
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitInsn
argument_list|(
name|Opcodes
operator|.
name|ICONST_0
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitTypeInsn
argument_list|(
name|Opcodes
operator|.
name|ANEWARRAY
argument_list|,
literal|"java/lang/String"
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitFieldInsn
argument_list|(
name|Opcodes
operator|.
name|PUTSTATIC
argument_list|,
name|postFixedName
argument_list|,
literal|"EMPTY_STRING"
argument_list|,
literal|"[Ljava/lang/String;"
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitInsn
argument_list|(
name|Opcodes
operator|.
name|RETURN
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitMaxs
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitEnd
argument_list|()
expr_stmt|;
name|mv
operator|=
name|cw
operator|.
name|visitMethod
argument_list|(
name|Opcodes
operator|.
name|ACC_PUBLIC
argument_list|,
literal|"<init>"
argument_list|,
literal|"(Ljava/util/Map;)V"
argument_list|,
literal|"(Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;)V"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitCode
argument_list|()
expr_stmt|;
name|l0
operator|=
name|helper
operator|.
name|createLabel
argument_list|()
expr_stmt|;
name|mv
operator|.
name|visitLabel
argument_list|(
name|l0
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitLineNumber
argument_list|(
literal|32
argument_list|,
name|l0
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitVarInsn
argument_list|(
name|Opcodes
operator|.
name|ALOAD
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitMethodInsn
argument_list|(
name|Opcodes
operator|.
name|INVOKESPECIAL
argument_list|,
name|superName
argument_list|,
literal|"<init>"
argument_list|,
literal|"()V"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Label
name|l1
init|=
name|helper
operator|.
name|createLabel
argument_list|()
decl_stmt|;
name|mv
operator|.
name|visitLabel
argument_list|(
name|l1
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitLineNumber
argument_list|(
literal|29
argument_list|,
name|l1
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitVarInsn
argument_list|(
name|Opcodes
operator|.
name|ALOAD
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitFieldInsn
argument_list|(
name|Opcodes
operator|.
name|GETSTATIC
argument_list|,
name|postFixedName
argument_list|,
literal|"EMPTY_STRING"
argument_list|,
literal|"[Ljava/lang/String;"
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitFieldInsn
argument_list|(
name|Opcodes
operator|.
name|PUTFIELD
argument_list|,
name|postFixedName
argument_list|,
literal|"nsctxt"
argument_list|,
literal|"[Ljava/lang/String;"
argument_list|)
expr_stmt|;
name|Label
name|l2
init|=
name|helper
operator|.
name|createLabel
argument_list|()
decl_stmt|;
name|mv
operator|.
name|visitLabel
argument_list|(
name|l2
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitLineNumber
argument_list|(
literal|33
argument_list|,
name|l2
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitVarInsn
argument_list|(
name|Opcodes
operator|.
name|ALOAD
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitVarInsn
argument_list|(
name|Opcodes
operator|.
name|ALOAD
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitFieldInsn
argument_list|(
name|Opcodes
operator|.
name|PUTFIELD
argument_list|,
name|postFixedName
argument_list|,
literal|"nspref"
argument_list|,
literal|"Ljava/util/Map;"
argument_list|)
expr_stmt|;
name|Label
name|l3
init|=
name|helper
operator|.
name|createLabel
argument_list|()
decl_stmt|;
name|mv
operator|.
name|visitLabel
argument_list|(
name|l3
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitLineNumber
argument_list|(
literal|34
argument_list|,
name|l3
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitInsn
argument_list|(
name|Opcodes
operator|.
name|RETURN
argument_list|)
expr_stmt|;
name|Label
name|l4
init|=
name|helper
operator|.
name|createLabel
argument_list|()
decl_stmt|;
name|mv
operator|.
name|visitLabel
argument_list|(
name|l4
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitLocalVariable
argument_list|(
literal|"this"
argument_list|,
literal|"L"
operator|+
name|postFixedName
operator|+
literal|";"
argument_list|,
literal|null
argument_list|,
name|l0
argument_list|,
name|l4
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitLocalVariable
argument_list|(
literal|"nspref"
argument_list|,
literal|"Ljava/util/Map;"
argument_list|,
literal|"Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;"
argument_list|,
name|l0
argument_list|,
name|l4
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitMaxs
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitEnd
argument_list|()
expr_stmt|;
name|mv
operator|=
name|cw
operator|.
name|visitMethod
argument_list|(
name|Opcodes
operator|.
name|ACC_PUBLIC
argument_list|,
literal|"getPreferredPrefix"
argument_list|,
literal|"(Ljava/lang/String;Ljava/lang/String;Z)Ljava/lang/String;"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitCode
argument_list|()
expr_stmt|;
name|l0
operator|=
name|helper
operator|.
name|createLabel
argument_list|()
expr_stmt|;
name|mv
operator|.
name|visitLabel
argument_list|(
name|l0
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitLineNumber
argument_list|(
literal|39
argument_list|,
name|l0
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitVarInsn
argument_list|(
name|Opcodes
operator|.
name|ALOAD
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitFieldInsn
argument_list|(
name|Opcodes
operator|.
name|GETFIELD
argument_list|,
name|postFixedName
argument_list|,
literal|"nspref"
argument_list|,
literal|"Ljava/util/Map;"
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitVarInsn
argument_list|(
name|Opcodes
operator|.
name|ALOAD
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitMethodInsn
argument_list|(
name|Opcodes
operator|.
name|INVOKEINTERFACE
argument_list|,
literal|"java/util/Map"
argument_list|,
literal|"get"
argument_list|,
literal|"(Ljava/lang/Object;)Ljava/lang/Object;"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitTypeInsn
argument_list|(
name|Opcodes
operator|.
name|CHECKCAST
argument_list|,
literal|"java/lang/String"
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitVarInsn
argument_list|(
name|Opcodes
operator|.
name|ASTORE
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|l1
operator|=
name|helper
operator|.
name|createLabel
argument_list|()
expr_stmt|;
name|mv
operator|.
name|visitLabel
argument_list|(
name|l1
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitLineNumber
argument_list|(
literal|40
argument_list|,
name|l1
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitVarInsn
argument_list|(
name|Opcodes
operator|.
name|ALOAD
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|l2
operator|=
name|helper
operator|.
name|createLabel
argument_list|()
expr_stmt|;
name|mv
operator|.
name|visitJumpInsn
argument_list|(
name|Opcodes
operator|.
name|IFNULL
argument_list|,
name|l2
argument_list|)
expr_stmt|;
name|l3
operator|=
name|helper
operator|.
name|createLabel
argument_list|()
expr_stmt|;
name|mv
operator|.
name|visitLabel
argument_list|(
name|l3
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitLineNumber
argument_list|(
literal|41
argument_list|,
name|l3
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitVarInsn
argument_list|(
name|Opcodes
operator|.
name|ALOAD
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitInsn
argument_list|(
name|Opcodes
operator|.
name|ARETURN
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitLabel
argument_list|(
name|l2
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitLineNumber
argument_list|(
literal|43
argument_list|,
name|l2
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitFrame
argument_list|(
name|Opcodes
operator|.
name|F_APPEND
argument_list|,
literal|1
argument_list|,
operator|new
name|Object
index|[]
block|{
literal|"java/lang/String"
block|}
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitVarInsn
argument_list|(
name|Opcodes
operator|.
name|ALOAD
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitInsn
argument_list|(
name|Opcodes
operator|.
name|ARETURN
argument_list|)
expr_stmt|;
name|l4
operator|=
name|helper
operator|.
name|createLabel
argument_list|()
expr_stmt|;
name|mv
operator|.
name|visitLabel
argument_list|(
name|l4
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitLocalVariable
argument_list|(
literal|"this"
argument_list|,
literal|"L"
operator|+
name|postFixedName
operator|+
literal|";"
argument_list|,
literal|null
argument_list|,
name|l0
argument_list|,
name|l4
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitLocalVariable
argument_list|(
literal|"namespaceUri"
argument_list|,
literal|"Ljava/lang/String;"
argument_list|,
literal|null
argument_list|,
name|l0
argument_list|,
name|l4
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitLocalVariable
argument_list|(
literal|"suggestion"
argument_list|,
literal|"Ljava/lang/String;"
argument_list|,
literal|null
argument_list|,
name|l0
argument_list|,
name|l4
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitLocalVariable
argument_list|(
literal|"requirePrefix"
argument_list|,
literal|"Z"
argument_list|,
literal|null
argument_list|,
name|l0
argument_list|,
name|l4
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitLocalVariable
argument_list|(
literal|"prefix"
argument_list|,
literal|"Ljava/lang/String;"
argument_list|,
literal|null
argument_list|,
name|l1
argument_list|,
name|l4
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitMaxs
argument_list|(
literal|2
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitEnd
argument_list|()
expr_stmt|;
name|mv
operator|=
name|cw
operator|.
name|visitMethod
argument_list|(
name|Opcodes
operator|.
name|ACC_PUBLIC
argument_list|,
literal|"setContextualNamespaceDecls"
argument_list|,
literal|"([Ljava/lang/String;)V"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitCode
argument_list|()
expr_stmt|;
name|l0
operator|=
name|helper
operator|.
name|createLabel
argument_list|()
expr_stmt|;
name|mv
operator|.
name|visitLabel
argument_list|(
name|l0
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitLineNumber
argument_list|(
literal|47
argument_list|,
name|l0
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitVarInsn
argument_list|(
name|Opcodes
operator|.
name|ALOAD
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitVarInsn
argument_list|(
name|Opcodes
operator|.
name|ALOAD
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitFieldInsn
argument_list|(
name|Opcodes
operator|.
name|PUTFIELD
argument_list|,
name|postFixedName
argument_list|,
literal|"nsctxt"
argument_list|,
literal|"[Ljava/lang/String;"
argument_list|)
expr_stmt|;
name|l1
operator|=
name|helper
operator|.
name|createLabel
argument_list|()
expr_stmt|;
name|mv
operator|.
name|visitLabel
argument_list|(
name|l1
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitLineNumber
argument_list|(
literal|48
argument_list|,
name|l1
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitInsn
argument_list|(
name|Opcodes
operator|.
name|RETURN
argument_list|)
expr_stmt|;
name|l2
operator|=
name|helper
operator|.
name|createLabel
argument_list|()
expr_stmt|;
name|mv
operator|.
name|visitLabel
argument_list|(
name|l2
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitLocalVariable
argument_list|(
literal|"this"
argument_list|,
literal|"L"
operator|+
name|postFixedName
operator|+
literal|";"
argument_list|,
literal|null
argument_list|,
name|l0
argument_list|,
name|l2
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitLocalVariable
argument_list|(
literal|"contextualNamespaceDecls"
argument_list|,
literal|"[Ljava/lang/String;"
argument_list|,
literal|null
argument_list|,
name|l0
argument_list|,
name|l2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitMaxs
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitEnd
argument_list|()
expr_stmt|;
name|mv
operator|=
name|cw
operator|.
name|visitMethod
argument_list|(
name|Opcodes
operator|.
name|ACC_PUBLIC
argument_list|,
literal|"getContextualNamespaceDecls"
argument_list|,
literal|"()[Ljava/lang/String;"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitCode
argument_list|()
expr_stmt|;
name|l0
operator|=
name|helper
operator|.
name|createLabel
argument_list|()
expr_stmt|;
name|mv
operator|.
name|visitLabel
argument_list|(
name|l0
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitLineNumber
argument_list|(
literal|51
argument_list|,
name|l0
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitVarInsn
argument_list|(
name|Opcodes
operator|.
name|ALOAD
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitFieldInsn
argument_list|(
name|Opcodes
operator|.
name|GETFIELD
argument_list|,
name|postFixedName
argument_list|,
literal|"nsctxt"
argument_list|,
literal|"[Ljava/lang/String;"
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitInsn
argument_list|(
name|Opcodes
operator|.
name|ARETURN
argument_list|)
expr_stmt|;
name|l1
operator|=
name|helper
operator|.
name|createLabel
argument_list|()
expr_stmt|;
name|mv
operator|.
name|visitLabel
argument_list|(
name|l1
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitLocalVariable
argument_list|(
literal|"this"
argument_list|,
literal|"L"
operator|+
name|postFixedName
operator|+
literal|";"
argument_list|,
literal|null
argument_list|,
name|l0
argument_list|,
name|l1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitMaxs
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|mv
operator|.
name|visitEnd
argument_list|()
expr_stmt|;
name|cw
operator|.
name|visitEnd
argument_list|()
expr_stmt|;
name|byte
index|[]
name|bts
init|=
name|cw
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
return|return
name|helper
operator|.
name|loadClass
argument_list|(
name|className
argument_list|,
name|ref
argument_list|,
name|bts
argument_list|)
return|;
block|}
comment|//CHECKSTYLE:ON
specifier|public
specifier|static
name|JAXBContextProxy
name|createJAXBContextProxy
parameter_list|(
specifier|final
name|JAXBContext
name|ctx
parameter_list|)
block|{
return|return
name|createJAXBContextProxy
argument_list|(
name|ctx
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|JAXBContextProxy
name|createJAXBContextProxy
parameter_list|(
specifier|final
name|JAXBContext
name|ctx
parameter_list|,
specifier|final
name|SchemaCollection
name|collection
parameter_list|,
specifier|final
name|String
name|defaultNs
parameter_list|)
block|{
if|if
condition|(
name|ctx
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|contains
argument_list|(
literal|"com.sun."
argument_list|)
operator|||
name|collection
operator|==
literal|null
condition|)
block|{
return|return
name|ReflectionInvokationHandler
operator|.
name|createProxyWrapper
argument_list|(
name|ctx
argument_list|,
name|JAXBContextProxy
operator|.
name|class
argument_list|)
return|;
block|}
return|return
operator|new
name|SchemaCollectionContextProxy
argument_list|(
name|ctx
argument_list|,
name|collection
argument_list|,
name|defaultNs
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|JAXBBeanInfo
name|getBeanInfo
parameter_list|(
name|JAXBContextProxy
name|context
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|cls
parameter_list|)
block|{
name|Object
name|o
init|=
name|context
operator|.
name|getBeanInfo
argument_list|(
name|cls
argument_list|)
decl_stmt|;
if|if
condition|(
name|o
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|o
operator|instanceof
name|JAXBBeanInfo
condition|)
block|{
return|return
operator|(
name|JAXBBeanInfo
operator|)
name|o
return|;
block|}
return|return
name|ReflectionInvokationHandler
operator|.
name|createProxyWrapper
argument_list|(
name|o
argument_list|,
name|JAXBBeanInfo
operator|.
name|class
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|String
name|getPostfix
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|cls
parameter_list|)
block|{
name|String
name|className
init|=
name|cls
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|className
operator|.
name|contains
argument_list|(
literal|"com.sun.xml.internal"
argument_list|)
operator|||
name|className
operator|.
name|contains
argument_list|(
literal|"eclipse"
argument_list|)
condition|)
block|{
comment|//eclipse moxy accepts sun package CharacterEscapeHandler
return|return
literal|".internal"
return|;
block|}
elseif|else
if|if
condition|(
name|className
operator|.
name|contains
argument_list|(
literal|"com.sun.xml.bind"
argument_list|)
operator|||
name|className
operator|.
name|startsWith
argument_list|(
literal|"com.ibm.xml"
argument_list|)
condition|)
block|{
return|return
literal|""
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
specifier|static
name|void
name|setMinimumEscapeHandler
parameter_list|(
name|Marshaller
name|marshaller
parameter_list|)
block|{
if|if
condition|(
name|jaxbMinimumEscapeHandler
operator|==
literal|null
condition|)
block|{
name|jaxbMinimumEscapeHandler
operator|=
name|Optional
operator|.
name|ofNullable
argument_list|(
name|createMininumEscapeHandler
argument_list|(
name|marshaller
operator|.
name|getClass
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|jaxbMinimumEscapeHandler
operator|.
name|ifPresent
argument_list|(
name|p
lambda|->
name|setEscapeHandler
argument_list|(
name|marshaller
argument_list|,
name|p
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|setNoEscapeHandler
parameter_list|(
specifier|final
name|Marshaller
name|marshaller
parameter_list|)
block|{
if|if
condition|(
name|jaxbNoEscapeHandler
operator|==
literal|null
condition|)
block|{
name|jaxbNoEscapeHandler
operator|=
name|Optional
operator|.
name|ofNullable
argument_list|(
name|createNoEscapeHandler
argument_list|(
name|marshaller
operator|.
name|getClass
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|jaxbNoEscapeHandler
operator|.
name|ifPresent
argument_list|(
name|p
lambda|->
name|setEscapeHandler
argument_list|(
name|marshaller
argument_list|,
name|p
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|setEscapeHandler
parameter_list|(
name|Marshaller
name|marshaller
parameter_list|,
name|Object
name|escapeHandler
parameter_list|)
block|{
try|try
block|{
name|String
name|postFix
init|=
name|getPostfix
argument_list|(
name|marshaller
operator|.
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|postFix
operator|!=
literal|null
condition|)
block|{
name|marshaller
operator|.
name|setProperty
argument_list|(
literal|"com.sun.xml"
operator|+
name|postFix
operator|+
literal|".bind.characterEscapeHandler"
argument_list|,
name|escapeHandler
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|PropertyException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|INFO
argument_list|,
literal|"Failed to set MinumEscapeHandler to jaxb marshaller"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|Object
name|createMininumEscapeHandler
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|cls
parameter_list|)
block|{
return|return
name|createEscapeHandler
argument_list|(
name|cls
argument_list|,
literal|"MinimumEscapeHandler"
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Object
name|createNoEscapeHandler
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|cls
parameter_list|)
block|{
return|return
name|createEscapeHandler
argument_list|(
name|cls
argument_list|,
literal|"NoEscapeHandler"
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|Object
name|createEscapeHandler
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|cls
parameter_list|,
name|String
name|simpleClassName
parameter_list|)
block|{
try|try
block|{
name|String
name|postFix
init|=
name|getPostfix
argument_list|(
name|cls
argument_list|)
decl_stmt|;
if|if
condition|(
name|postFix
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
literal|"Failed to create"
operator|+
name|simpleClassName
operator|+
literal|" for unknown jaxb class:"
operator|+
name|cls
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|Class
argument_list|<
name|?
argument_list|>
name|handlerClass
init|=
name|ClassLoaderUtils
operator|.
name|loadClass
argument_list|(
literal|"com.sun.xml"
operator|+
name|postFix
operator|+
literal|".bind.marshaller."
operator|+
name|simpleClassName
argument_list|,
name|cls
argument_list|)
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|handlerInterface
init|=
name|ClassLoaderUtils
operator|.
name|loadClass
argument_list|(
literal|"com.sun.xml"
operator|+
name|postFix
operator|+
literal|".bind.marshaller.CharacterEscapeHandler"
argument_list|,
name|cls
argument_list|)
decl_stmt|;
name|Object
name|targetHandler
init|=
name|ReflectionUtil
operator|.
name|getDeclaredField
argument_list|(
name|handlerClass
argument_list|,
literal|"theInstance"
argument_list|)
operator|.
name|get
argument_list|(
literal|null
argument_list|)
decl_stmt|;
return|return
name|ProxyHelper
operator|.
name|getProxy
argument_list|(
name|cls
operator|.
name|getClassLoader
argument_list|()
argument_list|,
operator|new
name|Class
index|[]
block|{
name|handlerInterface
block|}
argument_list|,
operator|new
name|EscapeHandlerInvocationHandler
argument_list|(
name|targetHandler
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
literal|"NoEscapeHandler"
operator|.
name|equals
argument_list|(
name|simpleClassName
argument_list|)
condition|)
block|{
comment|//this class doesn't exist in JAXB 2.2 so expected
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|FINER
argument_list|,
literal|"Failed to create "
operator|+
name|simpleClassName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|INFO
argument_list|,
literal|"Failed to create "
operator|+
name|simpleClassName
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

