begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|ref
operator|.
name|WeakReference
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Constructor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|GenericArrayType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|ParameterizedType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|TypeVariable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|WildcardType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|classloader
operator|.
name|ClassLoaderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|ReflectionInvokationHandler
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|ReflectionInvokationHandler
operator|.
name|UnwrapParam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|ReflectionInvokationHandler
operator|.
name|WrapReturn
import|;
end_import

begin_class
specifier|public
class|class
name|ASMHelper
block|{
specifier|protected
specifier|static
specifier|final
name|Map
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|,
name|String
argument_list|>
name|PRIMITIVE_MAP
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|Map
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|,
name|String
argument_list|>
name|NONPRIMITIVE_MAP
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|Map
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|,
name|Integer
argument_list|>
name|PRIMITIVE_ZERO_MAP
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|Map
argument_list|<
name|ClassLoader
argument_list|,
name|WeakReference
argument_list|<
name|TypeHelperClassLoader
argument_list|>
argument_list|>
name|LOADER_MAP
init|=
operator|new
name|WeakIdentityHashMap
argument_list|<
name|ClassLoader
argument_list|,
name|WeakReference
argument_list|<
name|TypeHelperClassLoader
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|Map
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|,
name|WeakReference
argument_list|<
name|TypeHelperClassLoader
argument_list|>
argument_list|>
name|CLASS_MAP
init|=
operator|new
name|WeakIdentityHashMap
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|,
name|WeakReference
argument_list|<
name|TypeHelperClassLoader
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|protected
specifier|static
name|boolean
name|badASM
decl_stmt|;
specifier|private
specifier|static
name|Class
argument_list|<
name|?
argument_list|>
name|cwClass
decl_stmt|;
static|static
block|{
name|PRIMITIVE_MAP
operator|.
name|put
argument_list|(
name|Byte
operator|.
name|TYPE
argument_list|,
literal|"B"
argument_list|)
expr_stmt|;
name|PRIMITIVE_MAP
operator|.
name|put
argument_list|(
name|Boolean
operator|.
name|TYPE
argument_list|,
literal|"Z"
argument_list|)
expr_stmt|;
name|PRIMITIVE_MAP
operator|.
name|put
argument_list|(
name|Long
operator|.
name|TYPE
argument_list|,
literal|"J"
argument_list|)
expr_stmt|;
name|PRIMITIVE_MAP
operator|.
name|put
argument_list|(
name|Integer
operator|.
name|TYPE
argument_list|,
literal|"I"
argument_list|)
expr_stmt|;
name|PRIMITIVE_MAP
operator|.
name|put
argument_list|(
name|Short
operator|.
name|TYPE
argument_list|,
literal|"S"
argument_list|)
expr_stmt|;
name|PRIMITIVE_MAP
operator|.
name|put
argument_list|(
name|Character
operator|.
name|TYPE
argument_list|,
literal|"C"
argument_list|)
expr_stmt|;
name|PRIMITIVE_MAP
operator|.
name|put
argument_list|(
name|Float
operator|.
name|TYPE
argument_list|,
literal|"F"
argument_list|)
expr_stmt|;
name|PRIMITIVE_MAP
operator|.
name|put
argument_list|(
name|Double
operator|.
name|TYPE
argument_list|,
literal|"D"
argument_list|)
expr_stmt|;
name|NONPRIMITIVE_MAP
operator|.
name|put
argument_list|(
name|Byte
operator|.
name|TYPE
argument_list|,
name|Byte
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|"\\."
argument_list|,
literal|"/"
argument_list|)
argument_list|)
expr_stmt|;
name|NONPRIMITIVE_MAP
operator|.
name|put
argument_list|(
name|Boolean
operator|.
name|TYPE
argument_list|,
name|Boolean
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|"\\."
argument_list|,
literal|"/"
argument_list|)
argument_list|)
expr_stmt|;
name|NONPRIMITIVE_MAP
operator|.
name|put
argument_list|(
name|Long
operator|.
name|TYPE
argument_list|,
name|Long
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|"\\."
argument_list|,
literal|"/"
argument_list|)
argument_list|)
expr_stmt|;
name|NONPRIMITIVE_MAP
operator|.
name|put
argument_list|(
name|Integer
operator|.
name|TYPE
argument_list|,
name|Integer
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|"\\."
argument_list|,
literal|"/"
argument_list|)
argument_list|)
expr_stmt|;
name|NONPRIMITIVE_MAP
operator|.
name|put
argument_list|(
name|Short
operator|.
name|TYPE
argument_list|,
name|Short
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|"\\."
argument_list|,
literal|"/"
argument_list|)
argument_list|)
expr_stmt|;
name|NONPRIMITIVE_MAP
operator|.
name|put
argument_list|(
name|Character
operator|.
name|TYPE
argument_list|,
name|Character
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|"\\."
argument_list|,
literal|"/"
argument_list|)
argument_list|)
expr_stmt|;
name|NONPRIMITIVE_MAP
operator|.
name|put
argument_list|(
name|Float
operator|.
name|TYPE
argument_list|,
name|Float
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|"\\."
argument_list|,
literal|"/"
argument_list|)
argument_list|)
expr_stmt|;
name|NONPRIMITIVE_MAP
operator|.
name|put
argument_list|(
name|Double
operator|.
name|TYPE
argument_list|,
name|Double
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|"\\."
argument_list|,
literal|"/"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|tryClass
parameter_list|(
name|String
name|s
parameter_list|)
block|{
if|if
condition|(
name|cwClass
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|c2
init|=
name|ClassLoaderUtils
operator|.
name|loadClass
argument_list|(
name|s
argument_list|,
name|ASMHelper
operator|.
name|class
argument_list|)
decl_stmt|;
comment|//old versions don't have this, but we need it
name|Class
argument_list|<
name|?
argument_list|>
name|cls
init|=
name|ClassLoaderUtils
operator|.
name|loadClass
argument_list|(
name|c2
operator|.
name|getPackage
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|".MethodVisitor"
argument_list|,
name|c2
argument_list|)
decl_stmt|;
name|cls
operator|.
name|getMethod
argument_list|(
literal|"visitFrame"
argument_list|,
name|Integer
operator|.
name|TYPE
argument_list|,
name|Integer
operator|.
name|TYPE
argument_list|,
name|Object
index|[]
operator|.
expr|class
argument_list|,
name|Integer
operator|.
name|TYPE
argument_list|,
name|Object
index|[]
operator|.
expr|class
argument_list|)
expr_stmt|;
name|cwClass
operator|=
name|c2
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
comment|//ignore
block|}
block|}
block|}
specifier|private
specifier|static
name|Class
argument_list|<
name|?
argument_list|>
name|getASMClassWriterClass
parameter_list|()
block|{
comment|//force this to make sure the proper OSGi import is generated
return|return
name|org
operator|.
name|objectweb
operator|.
name|asm
operator|.
name|ClassWriter
operator|.
name|class
return|;
block|}
specifier|private
specifier|static
specifier|synchronized
name|Class
argument_list|<
name|?
argument_list|>
name|getASMClass
parameter_list|()
throws|throws
name|ClassNotFoundException
block|{
if|if
condition|(
name|cwClass
operator|==
literal|null
condition|)
block|{
comment|//try the "real" asm first, then the others
name|tryClass
argument_list|(
literal|"org.objectweb.asm.ClassWriter"
argument_list|)
expr_stmt|;
name|tryClass
argument_list|(
literal|"org.apache.xbean.asm5.ClassWriter"
argument_list|)
expr_stmt|;
name|tryClass
argument_list|(
literal|"org.apache.xbean.asm6.ClassWriter"
argument_list|)
expr_stmt|;
name|tryClass
argument_list|(
literal|"org.apache.xbean.asm4.ClassWriter"
argument_list|)
expr_stmt|;
name|tryClass
argument_list|(
literal|"org.apache.xbean.asm.ClassWriter"
argument_list|)
expr_stmt|;
name|tryClass
argument_list|(
literal|"org.springframework.asm.ClassWriter"
argument_list|)
expr_stmt|;
if|if
condition|(
name|cwClass
operator|==
literal|null
condition|)
block|{
name|cwClass
operator|=
name|getASMClassWriterClass
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|cwClass
return|;
block|}
specifier|public
specifier|static
class|class
name|Opcodes
block|{
comment|//CHECKSTYLE:OFF
comment|//Will use reflection to set these based on the package name and such
comment|//so we don't want them "final" or the compiler will optimize them out
comment|//to just "0" which we really don't want
specifier|public
specifier|static
name|int
name|ARETURN
init|=
literal|0
decl_stmt|;
specifier|public
specifier|static
name|int
name|ALOAD
init|=
literal|0
decl_stmt|;
specifier|public
specifier|static
name|int
name|IFNULL
init|=
literal|0
decl_stmt|;
specifier|public
specifier|static
name|int
name|CHECKCAST
init|=
literal|0
decl_stmt|;
specifier|public
specifier|static
name|int
name|INVOKEINTERFACE
init|=
literal|0
decl_stmt|;
specifier|public
specifier|static
name|int
name|GETFIELD
init|=
literal|0
decl_stmt|;
specifier|public
specifier|static
name|int
name|GETSTATIC
init|=
literal|0
decl_stmt|;
specifier|public
specifier|static
name|int
name|ASTORE
init|=
literal|0
decl_stmt|;
specifier|public
specifier|static
name|int
name|PUTFIELD
init|=
literal|0
decl_stmt|;
specifier|public
specifier|static
name|int
name|PUTSTATIC
init|=
literal|0
decl_stmt|;
specifier|public
specifier|static
name|int
name|RETURN
init|=
literal|0
decl_stmt|;
specifier|public
specifier|static
name|int
name|F_APPEND
init|=
literal|0
decl_stmt|;
specifier|public
specifier|static
name|int
name|F_SAME
init|=
literal|0
decl_stmt|;
specifier|public
specifier|static
name|int
name|F_SAME1
init|=
literal|0
decl_stmt|;
specifier|public
specifier|static
name|int
name|INVOKESPECIAL
init|=
literal|0
decl_stmt|;
specifier|public
specifier|static
name|int
name|ACC_PUBLIC
init|=
literal|0
decl_stmt|;
specifier|public
specifier|static
name|int
name|ACC_FINAL
init|=
literal|0
decl_stmt|;
specifier|public
specifier|static
name|int
name|ACC_SUPER
init|=
literal|0
decl_stmt|;
specifier|public
specifier|static
name|int
name|ACC_PRIVATE
init|=
literal|0
decl_stmt|;
specifier|public
specifier|static
name|int
name|ACC_STATIC
init|=
literal|0
decl_stmt|;
specifier|public
specifier|static
name|int
name|V1_5
init|=
literal|0
decl_stmt|;
specifier|public
specifier|static
name|int
name|V1_6
init|=
literal|0
decl_stmt|;
specifier|public
specifier|static
name|int
name|V1_7
init|=
literal|0
decl_stmt|;
specifier|public
specifier|static
name|int
name|ACC_ABSTRACT
init|=
literal|0
decl_stmt|;
specifier|public
specifier|static
name|int
name|ACC_INTERFACE
init|=
literal|0
decl_stmt|;
specifier|public
specifier|static
name|int
name|ACC_SYNTHETIC
init|=
literal|0
decl_stmt|;
specifier|public
specifier|static
name|int
name|ILOAD
init|=
literal|0
decl_stmt|;
specifier|public
specifier|static
name|int
name|ISTORE
init|=
literal|0
decl_stmt|;
specifier|public
specifier|static
name|int
name|AALOAD
init|=
literal|0
decl_stmt|;
specifier|public
specifier|static
name|int
name|ARRAYLENGTH
init|=
literal|0
decl_stmt|;
specifier|public
specifier|static
name|int
name|IRETURN
init|=
literal|0
decl_stmt|;
specifier|public
specifier|static
name|int
name|NEW
init|=
literal|0
decl_stmt|;
specifier|public
specifier|static
name|int
name|ANEWARRAY
init|=
literal|0
decl_stmt|;
specifier|public
specifier|static
name|int
name|DUP
init|=
literal|0
decl_stmt|;
specifier|public
specifier|static
name|int
name|ATHROW
init|=
literal|0
decl_stmt|;
specifier|public
specifier|static
name|int
name|INVOKEVIRTUAL
init|=
literal|0
decl_stmt|;
specifier|public
specifier|static
name|int
name|GOTO
init|=
literal|0
decl_stmt|;
specifier|public
specifier|static
name|int
name|POP
init|=
literal|0
decl_stmt|;
specifier|public
specifier|static
name|int
name|ACONST_NULL
init|=
literal|0
decl_stmt|;
specifier|public
specifier|static
name|int
name|IFNONNULL
init|=
literal|0
decl_stmt|;
specifier|public
specifier|static
name|int
name|SIPUSH
init|=
literal|0
decl_stmt|;
specifier|public
specifier|static
name|int
name|INVOKESTATIC
init|=
literal|0
decl_stmt|;
specifier|public
specifier|static
name|int
name|ICONST_0
decl_stmt|;
specifier|public
specifier|static
name|int
name|ICONST_1
decl_stmt|;
specifier|public
specifier|static
name|int
name|LCONST_0
decl_stmt|;
specifier|public
specifier|static
name|int
name|FCONST_0
decl_stmt|;
specifier|public
specifier|static
name|int
name|DCONST_0
decl_stmt|;
specifier|public
specifier|static
name|int
name|IF_ICMPLT
init|=
literal|0
decl_stmt|;
specifier|public
specifier|static
name|java
operator|.
name|lang
operator|.
name|Integer
name|INTEGER
decl_stmt|;
comment|//CHECKSTYLE:ON
static|static
block|{
try|try
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|cls
init|=
name|getASMClass
argument_list|()
decl_stmt|;
name|cls
operator|=
name|ClassLoaderUtils
operator|.
name|loadClass
argument_list|(
name|cls
operator|.
name|getPackage
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|".Opcodes"
argument_list|,
name|cls
argument_list|)
expr_stmt|;
for|for
control|(
name|Field
name|f1
range|:
name|Opcodes
operator|.
name|class
operator|.
name|getDeclaredFields
argument_list|()
control|)
block|{
name|Field
name|f
init|=
name|cls
operator|.
name|getDeclaredField
argument_list|(
name|f1
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|ReflectionUtil
operator|.
name|setAccessible
argument_list|(
name|f1
argument_list|)
operator|.
name|set
argument_list|(
literal|null
argument_list|,
name|ReflectionUtil
operator|.
name|setAccessible
argument_list|(
name|f
argument_list|)
operator|.
name|get
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
comment|//ignore
block|}
name|PRIMITIVE_ZERO_MAP
operator|.
name|put
argument_list|(
name|Byte
operator|.
name|TYPE
argument_list|,
name|Opcodes
operator|.
name|ICONST_0
argument_list|)
expr_stmt|;
name|PRIMITIVE_ZERO_MAP
operator|.
name|put
argument_list|(
name|Boolean
operator|.
name|TYPE
argument_list|,
name|Opcodes
operator|.
name|ICONST_0
argument_list|)
expr_stmt|;
name|PRIMITIVE_ZERO_MAP
operator|.
name|put
argument_list|(
name|Long
operator|.
name|TYPE
argument_list|,
name|Opcodes
operator|.
name|LCONST_0
argument_list|)
expr_stmt|;
name|PRIMITIVE_ZERO_MAP
operator|.
name|put
argument_list|(
name|Integer
operator|.
name|TYPE
argument_list|,
name|Opcodes
operator|.
name|ICONST_0
argument_list|)
expr_stmt|;
name|PRIMITIVE_ZERO_MAP
operator|.
name|put
argument_list|(
name|Short
operator|.
name|TYPE
argument_list|,
name|Opcodes
operator|.
name|ICONST_0
argument_list|)
expr_stmt|;
name|PRIMITIVE_ZERO_MAP
operator|.
name|put
argument_list|(
name|Character
operator|.
name|TYPE
argument_list|,
name|Opcodes
operator|.
name|ICONST_0
argument_list|)
expr_stmt|;
name|PRIMITIVE_ZERO_MAP
operator|.
name|put
argument_list|(
name|Float
operator|.
name|TYPE
argument_list|,
name|Opcodes
operator|.
name|FCONST_0
argument_list|)
expr_stmt|;
name|PRIMITIVE_ZERO_MAP
operator|.
name|put
argument_list|(
name|Double
operator|.
name|TYPE
argument_list|,
name|Opcodes
operator|.
name|DCONST_0
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
specifier|static
name|String
name|getMethodSignature
parameter_list|(
name|Method
name|m
parameter_list|)
block|{
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"("
argument_list|)
decl_stmt|;
for|for
control|(
name|Class
argument_list|<
name|?
argument_list|>
name|cl
range|:
name|m
operator|.
name|getParameterTypes
argument_list|()
control|)
block|{
name|buf
operator|.
name|append
argument_list|(
name|getClassCode
argument_list|(
name|cl
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|buf
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|getClassCode
argument_list|(
name|m
operator|.
name|getReturnType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|String
name|periodToSlashes
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|char
name|ch
index|[]
init|=
name|s
operator|.
name|toCharArray
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|ch
operator|.
name|length
condition|;
name|x
operator|++
control|)
block|{
if|if
condition|(
name|ch
index|[
name|x
index|]
operator|==
literal|'.'
condition|)
block|{
name|ch
index|[
name|x
index|]
operator|=
literal|'/'
expr_stmt|;
block|}
block|}
return|return
operator|new
name|String
argument_list|(
name|ch
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|getClassCode
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|cl
parameter_list|)
block|{
if|if
condition|(
name|cl
operator|==
name|Void
operator|.
name|TYPE
condition|)
block|{
return|return
literal|"V"
return|;
block|}
if|if
condition|(
name|cl
operator|.
name|isPrimitive
argument_list|()
condition|)
block|{
return|return
name|PRIMITIVE_MAP
operator|.
name|get
argument_list|(
name|cl
argument_list|)
return|;
block|}
if|if
condition|(
name|cl
operator|.
name|isArray
argument_list|()
condition|)
block|{
return|return
literal|"["
operator|+
name|getClassCode
argument_list|(
name|cl
operator|.
name|getComponentType
argument_list|()
argument_list|)
return|;
block|}
return|return
literal|"L"
operator|+
name|periodToSlashes
argument_list|(
name|cl
operator|.
name|getName
argument_list|()
argument_list|)
operator|+
literal|";"
return|;
block|}
specifier|public
specifier|static
name|String
name|getClassCode
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
name|type
parameter_list|)
block|{
if|if
condition|(
name|type
operator|instanceof
name|Class
condition|)
block|{
return|return
name|getClassCode
argument_list|(
operator|(
name|Class
argument_list|<
name|?
argument_list|>
operator|)
name|type
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|type
operator|instanceof
name|GenericArrayType
condition|)
block|{
name|GenericArrayType
name|at
init|=
operator|(
name|GenericArrayType
operator|)
name|type
decl_stmt|;
return|return
literal|"["
operator|+
name|getClassCode
argument_list|(
name|at
operator|.
name|getGenericComponentType
argument_list|()
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|type
operator|instanceof
name|TypeVariable
condition|)
block|{
name|TypeVariable
argument_list|<
name|?
argument_list|>
name|tv
init|=
operator|(
name|TypeVariable
argument_list|<
name|?
argument_list|>
operator|)
name|type
decl_stmt|;
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
index|[]
name|bounds
init|=
name|tv
operator|.
name|getBounds
argument_list|()
decl_stmt|;
if|if
condition|(
name|bounds
operator|!=
literal|null
operator|&&
name|bounds
operator|.
name|length
operator|==
literal|1
condition|)
block|{
return|return
name|getClassCode
argument_list|(
name|bounds
index|[
literal|0
index|]
argument_list|)
return|;
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unable to determine type for: "
operator|+
name|tv
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|type
operator|instanceof
name|ParameterizedType
condition|)
block|{
name|ParameterizedType
name|pt
init|=
operator|(
name|ParameterizedType
operator|)
name|type
decl_stmt|;
name|StringBuilder
name|a
init|=
operator|new
name|StringBuilder
argument_list|(
name|getClassCode
argument_list|(
name|pt
operator|.
name|getRawType
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|pt
operator|.
name|getRawType
argument_list|()
operator|.
name|equals
argument_list|(
name|Enum
operator|.
name|class
argument_list|)
condition|)
block|{
name|a
operator|.
name|setLength
argument_list|(
name|a
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|a
operator|.
name|append
argument_list|(
literal|'<'
argument_list|)
expr_stmt|;
for|for
control|(
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
name|t
range|:
name|pt
operator|.
name|getActualTypeArguments
argument_list|()
control|)
block|{
name|a
operator|.
name|append
argument_list|(
name|getClassCode
argument_list|(
name|t
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|a
operator|.
name|append
argument_list|(
literal|">;"
argument_list|)
expr_stmt|;
block|}
return|return
name|a
operator|.
name|toString
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|type
operator|instanceof
name|WildcardType
condition|)
block|{
name|WildcardType
name|wt
init|=
operator|(
name|WildcardType
operator|)
name|type
decl_stmt|;
name|StringBuilder
name|a
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
index|[]
name|lowBounds
init|=
name|wt
operator|.
name|getLowerBounds
argument_list|()
decl_stmt|;
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
index|[]
name|upBounds
init|=
name|wt
operator|.
name|getUpperBounds
argument_list|()
decl_stmt|;
for|for
control|(
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
name|t
range|:
name|upBounds
control|)
block|{
name|a
operator|.
name|append
argument_list|(
literal|"+"
argument_list|)
expr_stmt|;
name|a
operator|.
name|append
argument_list|(
name|getClassCode
argument_list|(
name|t
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
name|t
range|:
name|lowBounds
control|)
block|{
name|a
operator|.
name|append
argument_list|(
literal|"-"
argument_list|)
expr_stmt|;
name|a
operator|.
name|append
argument_list|(
name|getClassCode
argument_list|(
name|t
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|a
operator|.
name|toString
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|ClassWriter
name|createClassWriter
parameter_list|()
block|{
name|Object
name|newCw
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|badASM
condition|)
block|{
if|if
condition|(
name|cwClass
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|cwClass
operator|=
name|getASMClass
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|error
parameter_list|)
block|{
name|badASM
operator|=
literal|true
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"No ASM ClassWriterFound"
argument_list|,
name|error
argument_list|)
throw|;
block|}
block|}
try|try
block|{
comment|// ASM 1.5.x/2.x
name|Constructor
argument_list|<
name|?
argument_list|>
name|cons
init|=
name|cwClass
operator|.
name|getConstructor
argument_list|(
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[]
block|{
name|Boolean
operator|.
name|TYPE
block|}
block|)
empty_stmt|;
try|try
block|{
comment|// got constructor, now check if it's 1.x which is very
comment|// different from 2.x and 3.x
name|cwClass
operator|.
name|getMethod
argument_list|(
literal|"newConstInt"
argument_list|,
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[]
block|{
name|Integer
operator|.
name|TYPE
block|}
block|)
empty_stmt|;
comment|// newConstInt was removed in 2.x, if we get this far, we're
comment|// using 1.5.x,
comment|// set to null so we don't attempt to use it.
name|badASM
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|newCw
operator|=
name|cons
operator|.
name|newInstance
argument_list|(
operator|new
name|Object
index|[]
block|{
name|Boolean
operator|.
name|TRUE
block|}
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
comment|// ASM 3.x/4.x
try|try
block|{
name|Constructor
argument_list|<
name|?
argument_list|>
name|cons
init|=
name|cwClass
operator|.
name|getConstructor
argument_list|(
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[]
block|{
name|Integer
operator|.
name|TYPE
block|}
block|)
empty_stmt|;
name|int
name|i
init|=
name|cwClass
operator|.
name|getField
argument_list|(
literal|"COMPUTE_MAXS"
argument_list|)
operator|.
name|getInt
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|i
operator||=
name|cwClass
operator|.
name|getField
argument_list|(
literal|"COMPUTE_FRAMES"
argument_list|)
operator|.
name|getInt
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|newCw
operator|=
name|cons
operator|.
name|newInstance
argument_list|(
operator|new
name|Object
index|[]
block|{
name|Integer
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e1
parameter_list|)
block|{
comment|// ignore
block|}
block|}
end_class

begin_expr_stmt
unit|}         if
operator|(
name|newCw
operator|!=
literal|null
operator|)
block|{
return|return
name|ReflectionInvokationHandler
operator|.
name|createProxyWrapper
argument_list|(
name|newCw
argument_list|,
name|ClassWriter
operator|.
name|class
argument_list|)
return|;
block|}
end_expr_stmt

begin_return
return|return
literal|null
return|;
end_return

begin_function
unit|}       public
name|Class
argument_list|<
name|?
argument_list|>
name|loadClass
parameter_list|(
name|String
name|className
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|clz
parameter_list|,
name|byte
index|[]
name|bytes
parameter_list|)
block|{
name|TypeHelperClassLoader
name|loader
init|=
name|getTypeHelperClassLoader
argument_list|(
name|clz
argument_list|)
decl_stmt|;
synchronized|synchronized
init|(
name|loader
init|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|cls
init|=
name|loader
operator|.
name|lookupDefinedClass
argument_list|(
name|className
argument_list|)
decl_stmt|;
if|if
condition|(
name|cls
operator|==
literal|null
condition|)
block|{
return|return
name|loader
operator|.
name|defineClass
argument_list|(
name|className
argument_list|,
name|bytes
argument_list|)
return|;
block|}
return|return
name|cls
return|;
block|}
block|}
end_function

begin_function
specifier|public
name|Class
argument_list|<
name|?
argument_list|>
name|loadClass
parameter_list|(
name|String
name|className
parameter_list|,
name|ClassLoader
name|l
parameter_list|,
name|byte
index|[]
name|bytes
parameter_list|)
block|{
name|TypeHelperClassLoader
name|loader
init|=
name|getTypeHelperClassLoader
argument_list|(
name|l
argument_list|)
decl_stmt|;
synchronized|synchronized
init|(
name|loader
init|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|cls
init|=
name|loader
operator|.
name|lookupDefinedClass
argument_list|(
name|className
argument_list|)
decl_stmt|;
if|if
condition|(
name|cls
operator|==
literal|null
condition|)
block|{
return|return
name|loader
operator|.
name|defineClass
argument_list|(
name|className
argument_list|,
name|bytes
argument_list|)
return|;
block|}
return|return
name|cls
return|;
block|}
block|}
end_function

begin_function
specifier|public
name|Class
argument_list|<
name|?
argument_list|>
name|findClass
parameter_list|(
name|String
name|className
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|clz
parameter_list|)
block|{
name|TypeHelperClassLoader
name|loader
init|=
name|getTypeHelperClassLoader
argument_list|(
name|clz
argument_list|)
decl_stmt|;
return|return
name|loader
operator|.
name|lookupDefinedClass
argument_list|(
name|className
argument_list|)
return|;
block|}
end_function

begin_function
specifier|public
name|Class
argument_list|<
name|?
argument_list|>
name|findClass
parameter_list|(
name|String
name|className
parameter_list|,
name|ClassLoader
name|l
parameter_list|)
block|{
name|TypeHelperClassLoader
name|loader
init|=
name|getTypeHelperClassLoader
argument_list|(
name|l
argument_list|)
decl_stmt|;
return|return
name|loader
operator|.
name|lookupDefinedClass
argument_list|(
name|className
argument_list|)
return|;
block|}
end_function

begin_function
specifier|private
specifier|static
specifier|synchronized
name|TypeHelperClassLoader
name|getTypeHelperClassLoader
parameter_list|(
name|ClassLoader
name|l
parameter_list|)
block|{
name|WeakReference
argument_list|<
name|TypeHelperClassLoader
argument_list|>
name|ref
init|=
name|LOADER_MAP
operator|.
name|get
argument_list|(
name|l
argument_list|)
decl_stmt|;
name|TypeHelperClassLoader
name|ret
decl_stmt|;
if|if
condition|(
name|ref
operator|==
literal|null
operator|||
name|ref
operator|.
name|get
argument_list|()
operator|==
literal|null
condition|)
block|{
name|ret
operator|=
operator|new
name|TypeHelperClassLoader
argument_list|(
name|l
argument_list|)
expr_stmt|;
name|LOADER_MAP
operator|.
name|put
argument_list|(
name|l
argument_list|,
operator|new
name|WeakReference
argument_list|<
name|TypeHelperClassLoader
argument_list|>
argument_list|(
name|ret
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|ref
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
end_function

begin_function
specifier|private
specifier|static
specifier|synchronized
name|TypeHelperClassLoader
name|getTypeHelperClassLoader
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|cls
parameter_list|)
block|{
name|WeakReference
argument_list|<
name|TypeHelperClassLoader
argument_list|>
name|ref
init|=
name|CLASS_MAP
operator|.
name|get
argument_list|(
name|cls
argument_list|)
decl_stmt|;
name|TypeHelperClassLoader
name|ret
decl_stmt|;
if|if
condition|(
name|ref
operator|==
literal|null
operator|||
name|ref
operator|.
name|get
argument_list|()
operator|==
literal|null
condition|)
block|{
name|ret
operator|=
operator|new
name|TypeHelperClassLoader
argument_list|(
name|cls
operator|.
name|getClassLoader
argument_list|()
argument_list|)
expr_stmt|;
name|CLASS_MAP
operator|.
name|put
argument_list|(
name|cls
argument_list|,
operator|new
name|WeakReference
argument_list|<
name|TypeHelperClassLoader
argument_list|>
argument_list|(
name|ret
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|ref
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
end_function

begin_class
specifier|public
specifier|static
class|class
name|TypeHelperClassLoader
extends|extends
name|ClassLoader
block|{
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|defined
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|TypeHelperClassLoader
parameter_list|(
name|ClassLoader
name|parent
parameter_list|)
block|{
name|super
argument_list|(
name|parent
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Class
argument_list|<
name|?
argument_list|>
name|lookupDefinedClass
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|defined
operator|.
name|get
argument_list|(
name|name
operator|.
name|replace
argument_list|(
literal|'/'
argument_list|,
literal|'.'
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|Class
argument_list|<
name|?
argument_list|>
name|findClass
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|ClassNotFoundException
block|{
if|if
condition|(
name|name
operator|.
name|endsWith
argument_list|(
literal|"package-info"
argument_list|)
condition|)
block|{
return|return
name|getParent
argument_list|()
operator|.
name|loadClass
argument_list|(
name|name
argument_list|)
return|;
block|}
return|return
name|super
operator|.
name|findClass
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|public
name|Class
argument_list|<
name|?
argument_list|>
name|defineClass
parameter_list|(
name|String
name|name
parameter_list|,
name|byte
name|bytes
index|[]
parameter_list|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|ret
init|=
name|defined
operator|.
name|get
argument_list|(
name|name
operator|.
name|replace
argument_list|(
literal|'/'
argument_list|,
literal|'.'
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|ret
operator|!=
literal|null
condition|)
block|{
return|return
name|ret
return|;
block|}
if|if
condition|(
name|name
operator|.
name|endsWith
argument_list|(
literal|"package-info"
argument_list|)
condition|)
block|{
name|Package
name|p
init|=
name|super
operator|.
name|getPackage
argument_list|(
name|name
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|name
operator|.
name|length
argument_list|()
operator|-
literal|13
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|==
literal|null
condition|)
block|{
name|definePackage
argument_list|(
name|name
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|name
operator|.
name|length
argument_list|()
operator|-
literal|13
argument_list|)
operator|.
name|replace
argument_list|(
literal|'/'
argument_list|,
literal|'.'
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
name|ret
operator|=
name|super
operator|.
name|defineClass
argument_list|(
name|name
operator|.
name|replace
argument_list|(
literal|'/'
argument_list|,
literal|'.'
argument_list|)
argument_list|,
name|bytes
argument_list|,
literal|0
argument_list|,
name|bytes
operator|.
name|length
argument_list|)
expr_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|tmpRet
init|=
name|defined
operator|.
name|putIfAbsent
argument_list|(
name|name
operator|.
name|replace
argument_list|(
literal|'/'
argument_list|,
literal|'.'
argument_list|)
argument_list|,
name|ret
argument_list|)
decl_stmt|;
if|if
condition|(
name|tmpRet
operator|!=
literal|null
condition|)
block|{
name|ret
operator|=
name|tmpRet
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
block|}
end_class

begin_function
specifier|public
name|ASMType
name|getType
parameter_list|(
specifier|final
name|String
name|type
parameter_list|)
block|{
try|try
block|{
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|cls
init|=
name|ClassLoaderUtils
operator|.
name|loadClass
argument_list|(
name|cwClass
operator|.
name|getPackage
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|".Type"
argument_list|,
name|cwClass
argument_list|)
decl_stmt|;
specifier|final
name|Method
name|m
init|=
name|cls
operator|.
name|getMethod
argument_list|(
literal|"getType"
argument_list|,
name|String
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|Method
name|m2
init|=
name|cls
operator|.
name|getMethod
argument_list|(
literal|"getOpcode"
argument_list|,
name|Integer
operator|.
name|TYPE
argument_list|)
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
name|ASMType
name|t
init|=
operator|new
name|ASMType
argument_list|()
block|{
name|Object
name|tp
init|=
name|ReflectionUtil
operator|.
name|setAccessible
argument_list|(
name|m
argument_list|)
operator|.
name|invoke
argument_list|(
literal|null
argument_list|,
name|type
argument_list|)
decl_stmt|;
specifier|public
name|Object
name|getValue
parameter_list|()
block|{
return|return
name|tp
return|;
block|}
specifier|public
name|Class
argument_list|<
name|?
argument_list|>
name|realType
parameter_list|()
block|{
return|return
name|cls
return|;
block|}
specifier|public
name|int
name|getOpcode
parameter_list|(
name|int
name|ireturn
parameter_list|)
block|{
try|try
block|{
return|return
operator|(
name|Integer
operator|)
name|ReflectionUtil
operator|.
name|setAccessible
argument_list|(
name|m2
argument_list|)
operator|.
name|invoke
argument_list|(
name|tp
argument_list|,
name|ireturn
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
decl_stmt|;
return|return
name|t
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
block|}
end_function

begin_interface
specifier|public
interface|interface
name|ASMType
block|{
name|int
name|getOpcode
parameter_list|(
name|int
name|ireturn
parameter_list|)
function_decl|;
block|}
end_interface

begin_function
specifier|public
name|Label
name|createLabel
parameter_list|()
block|{
try|try
block|{
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|cls
init|=
name|ClassLoaderUtils
operator|.
name|loadClass
argument_list|(
name|cwClass
operator|.
name|getPackage
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|".Label"
argument_list|,
name|cwClass
argument_list|)
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
name|Label
name|l
init|=
operator|new
name|Label
argument_list|()
block|{
name|Object
name|l
init|=
name|cls
operator|.
name|newInstance
argument_list|()
decl_stmt|;
specifier|public
name|Object
name|getValue
parameter_list|()
block|{
return|return
name|l
return|;
block|}
specifier|public
name|Class
argument_list|<
name|?
argument_list|>
name|realType
parameter_list|()
block|{
return|return
name|cls
return|;
block|}
block|}
decl_stmt|;
return|return
name|l
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
end_function

begin_interface
specifier|public
interface|interface
name|ClassWriter
block|{
annotation|@
name|WrapReturn
argument_list|(
name|AnnotationVisitor
operator|.
name|class
argument_list|)
name|AnnotationVisitor
name|visitAnnotation
parameter_list|(
name|String
name|cls
parameter_list|,
name|boolean
name|t
parameter_list|)
function_decl|;
annotation|@
name|WrapReturn
argument_list|(
name|FieldVisitor
operator|.
name|class
argument_list|)
name|FieldVisitor
name|visitField
parameter_list|(
name|int
name|accPrivate
parameter_list|,
name|String
name|fieldName
parameter_list|,
name|String
name|classCode
parameter_list|,
name|String
name|fieldDescriptor
parameter_list|,
name|Object
name|object
parameter_list|)
function_decl|;
name|void
name|visitEnd
parameter_list|()
function_decl|;
name|byte
index|[]
name|toByteArray
parameter_list|()
function_decl|;
annotation|@
name|WrapReturn
argument_list|(
name|MethodVisitor
operator|.
name|class
argument_list|)
name|MethodVisitor
name|visitMethod
parameter_list|(
name|int
name|accPublic
parameter_list|,
name|String
name|string
parameter_list|,
name|String
name|string2
parameter_list|,
name|String
name|s3
parameter_list|,
name|String
index|[]
name|s4
parameter_list|)
function_decl|;
name|void
name|visit
parameter_list|(
name|int
name|v15
parameter_list|,
name|int
name|i
parameter_list|,
name|String
name|newClassName
parameter_list|,
name|String
name|object
parameter_list|,
name|String
name|string
parameter_list|,
name|String
index|[]
name|object2
parameter_list|)
function_decl|;
name|void
name|visitSource
parameter_list|(
name|String
name|arg0
parameter_list|,
name|String
name|arg1
parameter_list|)
function_decl|;
block|}
end_interface

begin_interface
specifier|public
interface|interface
name|Label
block|{     }
end_interface

begin_interface
specifier|public
interface|interface
name|FieldVisitor
block|{
annotation|@
name|WrapReturn
argument_list|(
name|AnnotationVisitor
operator|.
name|class
argument_list|)
name|AnnotationVisitor
name|visitAnnotation
parameter_list|(
name|String
name|cls
parameter_list|,
name|boolean
name|b
parameter_list|)
function_decl|;
name|void
name|visitEnd
parameter_list|()
function_decl|;
block|}
end_interface

begin_interface
specifier|public
interface|interface
name|MethodVisitor
block|{
name|void
name|visitEnd
parameter_list|()
function_decl|;
name|void
name|visitLabel
parameter_list|(
annotation|@
name|UnwrapParam
argument_list|(
name|typeMethodName
operator|=
literal|"realType"
argument_list|)
name|Label
name|l1
parameter_list|)
function_decl|;
name|void
name|visitMaxs
parameter_list|(
name|int
name|i
parameter_list|,
name|int
name|j
parameter_list|)
function_decl|;
name|void
name|visitLineNumber
parameter_list|(
name|int
name|i
parameter_list|,
annotation|@
name|UnwrapParam
argument_list|(
name|typeMethodName
operator|=
literal|"realType"
argument_list|)
name|Label
name|l0
parameter_list|)
function_decl|;
name|void
name|visitInsn
parameter_list|(
name|int
name|return1
parameter_list|)
function_decl|;
name|void
name|visitVarInsn
parameter_list|(
name|int
name|aload
parameter_list|,
name|int
name|i
parameter_list|)
function_decl|;
name|void
name|visitCode
parameter_list|()
function_decl|;
name|void
name|visitLdcInsn
parameter_list|(
name|String
name|sig
parameter_list|)
function_decl|;
name|void
name|visitLocalVariable
parameter_list|(
name|String
name|string
parameter_list|,
name|String
name|string2
parameter_list|,
name|String
name|string3
parameter_list|,
annotation|@
name|UnwrapParam
argument_list|(
name|typeMethodName
operator|=
literal|"realType"
argument_list|)
name|Label
name|lBegin
parameter_list|,
annotation|@
name|UnwrapParam
argument_list|(
name|typeMethodName
operator|=
literal|"realType"
argument_list|)
name|Label
name|lEnd
parameter_list|,
name|int
name|i
parameter_list|)
function_decl|;
name|void
name|visitTypeInsn
parameter_list|(
name|int
name|checkcast
parameter_list|,
name|String
name|string
parameter_list|)
function_decl|;
name|void
name|visitMethodInsn
parameter_list|(
name|int
name|invokevirtual
parameter_list|,
name|String
name|periodToSlashes
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|methodSignature
parameter_list|,
annotation|@
name|Optional
name|boolean
name|itf
parameter_list|)
function_decl|;
name|void
name|visitIntInsn
parameter_list|(
name|int
name|sipush
parameter_list|,
name|int
name|x
parameter_list|)
function_decl|;
name|void
name|visitIincInsn
parameter_list|(
name|int
name|i
parameter_list|,
name|int
name|j
parameter_list|)
function_decl|;
name|void
name|visitFieldInsn
parameter_list|(
name|int
name|getfield
parameter_list|,
name|String
name|periodToSlashes
parameter_list|,
name|String
name|string
parameter_list|,
name|String
name|string2
parameter_list|)
function_decl|;
name|void
name|visitJumpInsn
parameter_list|(
name|int
name|ifnonnull
parameter_list|,
annotation|@
name|UnwrapParam
argument_list|(
name|typeMethodName
operator|=
literal|"realType"
argument_list|)
name|Label
name|nonNullLabel
parameter_list|)
function_decl|;
name|void
name|visitFrame
parameter_list|(
name|int
name|type
parameter_list|,
name|int
name|nLocal
parameter_list|,
name|Object
index|[]
name|local
parameter_list|,
name|int
name|nStack
parameter_list|,
name|Object
index|[]
name|stack
parameter_list|)
function_decl|;
annotation|@
name|WrapReturn
argument_list|(
name|AnnotationVisitor
operator|.
name|class
argument_list|)
name|AnnotationVisitor
name|visitAnnotation
parameter_list|(
name|String
name|cls
parameter_list|,
name|boolean
name|b
parameter_list|)
function_decl|;
block|}
end_interface

begin_interface
specifier|public
interface|interface
name|AnnotationVisitor
block|{
name|void
name|visit
parameter_list|(
name|String
name|arg0
parameter_list|,
annotation|@
name|UnwrapParam
argument_list|(
name|typeMethodName
operator|=
literal|"realType"
argument_list|)
name|ASMType
name|arg1
parameter_list|)
function_decl|;
name|void
name|visit
parameter_list|(
name|String
name|arg0
parameter_list|,
name|Object
name|arg1
parameter_list|)
function_decl|;
annotation|@
name|WrapReturn
argument_list|(
name|AnnotationVisitor
operator|.
name|class
argument_list|)
name|AnnotationVisitor
name|visitAnnotation
parameter_list|(
name|String
name|arg0
parameter_list|,
name|String
name|arg1
parameter_list|)
function_decl|;
annotation|@
name|WrapReturn
argument_list|(
name|AnnotationVisitor
operator|.
name|class
argument_list|)
name|AnnotationVisitor
name|visitArray
parameter_list|(
name|String
name|arg0
parameter_list|)
function_decl|;
name|void
name|visitEnd
parameter_list|()
function_decl|;
name|void
name|visitEnum
parameter_list|(
name|String
name|arg0
parameter_list|,
name|String
name|arg1
parameter_list|,
name|String
name|arg2
parameter_list|)
function_decl|;
block|}
end_interface

unit|}
end_unit

