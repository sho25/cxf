begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|ref
operator|.
name|Reference
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|ref
operator|.
name|ReferenceQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|ref
operator|.
name|WeakReference
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * Implements a combination of WeakHashMap and IdentityHashMap.  * Useful for caches that need to key off of a == comparison  * instead of a .equals.  *  *<b>  * This class is not a general-purpose Map implementation! While  * this class implements the Map interface, it intentionally violates  * Map's general contract, which mandates the use of the equals method  * when comparing objects. This class is designed for use only in the  * rare cases wherein reference-equality semantics are required.  *  * Note that this implementation is not synchronized.  *</b>  */
end_comment

begin_class
specifier|public
class|class
name|WeakIdentityHashMap
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
implements|implements
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
block|{
specifier|private
specifier|final
name|ReferenceQueue
argument_list|<
name|K
argument_list|>
name|queue
init|=
operator|new
name|ReferenceQueue
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|IdentityWeakReference
argument_list|,
name|V
argument_list|>
name|backingStore
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|public
name|WeakIdentityHashMap
parameter_list|()
block|{     }
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|backingStore
operator|.
name|clear
argument_list|()
expr_stmt|;
name|reap
argument_list|()
expr_stmt|;
block|}
specifier|public
name|boolean
name|containsKey
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
name|reap
argument_list|()
expr_stmt|;
return|return
name|backingStore
operator|.
name|containsKey
argument_list|(
operator|new
name|IdentityWeakReference
argument_list|(
name|key
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|containsValue
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
name|reap
argument_list|()
expr_stmt|;
return|return
name|backingStore
operator|.
name|containsValue
argument_list|(
name|value
argument_list|)
return|;
block|}
specifier|public
name|Set
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|entrySet
parameter_list|()
block|{
name|reap
argument_list|()
expr_stmt|;
name|Set
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|ret
init|=
operator|new
name|HashSet
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|IdentityWeakReference
argument_list|,
name|V
argument_list|>
name|ref
range|:
name|backingStore
operator|.
name|entrySet
argument_list|()
control|)
block|{
specifier|final
name|K
name|key
init|=
name|ref
operator|.
name|getKey
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|key
operator|!=
literal|null
condition|)
block|{
specifier|final
name|V
name|value
init|=
name|ref
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|entry
init|=
operator|new
name|Map
operator|.
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|()
block|{
specifier|public
name|K
name|getKey
parameter_list|()
block|{
return|return
name|key
return|;
block|}
specifier|public
name|V
name|getValue
parameter_list|()
block|{
return|return
name|value
return|;
block|}
specifier|public
name|V
name|setValue
parameter_list|(
name|V
name|value
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
decl_stmt|;
name|ret
operator|.
name|add
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|Collections
operator|.
name|unmodifiableSet
argument_list|(
name|ret
argument_list|)
return|;
block|}
specifier|public
name|Set
argument_list|<
name|K
argument_list|>
name|keySet
parameter_list|()
block|{
name|reap
argument_list|()
expr_stmt|;
name|Set
argument_list|<
name|K
argument_list|>
name|ret
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|IdentityWeakReference
name|ref
range|:
name|backingStore
operator|.
name|keySet
argument_list|()
control|)
block|{
name|K
name|key
init|=
name|ref
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|key
operator|!=
literal|null
condition|)
block|{
name|ret
operator|.
name|add
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|Collections
operator|.
name|unmodifiableSet
argument_list|(
name|ret
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|o
operator|instanceof
name|WeakIdentityHashMap
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|WeakIdentityHashMap
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|v
init|=
operator|(
name|WeakIdentityHashMap
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|o
decl_stmt|;
return|return
name|backingStore
operator|.
name|equals
argument_list|(
name|v
operator|.
name|backingStore
argument_list|)
return|;
block|}
specifier|public
name|V
name|get
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
name|reap
argument_list|()
expr_stmt|;
return|return
name|backingStore
operator|.
name|get
argument_list|(
operator|new
name|IdentityWeakReference
argument_list|(
name|key
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|V
name|put
parameter_list|(
name|K
name|key
parameter_list|,
name|V
name|value
parameter_list|)
block|{
name|reap
argument_list|()
expr_stmt|;
return|return
name|backingStore
operator|.
name|put
argument_list|(
operator|new
name|IdentityWeakReference
argument_list|(
name|key
argument_list|)
argument_list|,
name|value
argument_list|)
return|;
block|}
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|reap
argument_list|()
expr_stmt|;
return|return
name|backingStore
operator|.
name|hashCode
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
name|reap
argument_list|()
expr_stmt|;
return|return
name|backingStore
operator|.
name|isEmpty
argument_list|()
return|;
block|}
specifier|public
name|void
name|putAll
parameter_list|(
name|Map
argument_list|<
name|?
extends|extends
name|K
argument_list|,
name|?
extends|extends
name|V
argument_list|>
name|t
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
specifier|public
name|V
name|remove
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
name|reap
argument_list|()
expr_stmt|;
return|return
name|backingStore
operator|.
name|remove
argument_list|(
operator|new
name|IdentityWeakReference
argument_list|(
name|key
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|int
name|size
parameter_list|()
block|{
name|reap
argument_list|()
expr_stmt|;
return|return
name|backingStore
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|Collection
argument_list|<
name|V
argument_list|>
name|values
parameter_list|()
block|{
name|reap
argument_list|()
expr_stmt|;
return|return
name|backingStore
operator|.
name|values
argument_list|()
return|;
block|}
specifier|private
specifier|synchronized
name|void
name|reap
parameter_list|()
block|{
name|Reference
argument_list|<
name|?
extends|extends
name|K
argument_list|>
name|zombie
init|=
name|queue
operator|.
name|poll
argument_list|()
decl_stmt|;
while|while
condition|(
name|zombie
operator|!=
literal|null
condition|)
block|{
name|backingStore
operator|.
name|remove
argument_list|(
name|zombie
argument_list|)
expr_stmt|;
name|zombie
operator|=
name|queue
operator|.
name|poll
argument_list|()
expr_stmt|;
block|}
block|}
class|class
name|IdentityWeakReference
extends|extends
name|WeakReference
argument_list|<
name|K
argument_list|>
block|{
name|int
name|hash
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|IdentityWeakReference
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
name|super
argument_list|(
operator|(
name|K
operator|)
name|obj
argument_list|,
name|queue
argument_list|)
expr_stmt|;
name|hash
operator|=
name|System
operator|.
name|identityHashCode
argument_list|(
name|obj
argument_list|)
expr_stmt|;
block|}
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|hash
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|o
operator|instanceof
name|WeakReference
condition|)
block|{
name|WeakReference
argument_list|<
name|?
argument_list|>
name|ref
init|=
operator|(
name|WeakReference
argument_list|<
name|?
argument_list|>
operator|)
name|o
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|get
argument_list|()
operator|==
name|ref
operator|.
name|get
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
block|}
block|}
end_class

end_unit

