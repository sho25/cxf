begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|annotation
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|Annotation
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractAnnotationVisitor
implements|implements
name|AnnotationVisitor
block|{
specifier|protected
name|Object
name|target
decl_stmt|;
specifier|protected
name|Class
argument_list|<
name|?
argument_list|>
name|targetClass
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|Annotation
argument_list|>
argument_list|>
name|targetAnnotations
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|protected
name|AbstractAnnotationVisitor
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|Annotation
argument_list|>
name|ann
parameter_list|)
block|{
name|addTargetAnnotation
argument_list|(
name|ann
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|AbstractAnnotationVisitor
parameter_list|(
name|List
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|Annotation
argument_list|>
argument_list|>
name|ann
parameter_list|)
block|{
name|targetAnnotations
operator|.
name|addAll
argument_list|(
name|ann
argument_list|)
expr_stmt|;
block|}
specifier|protected
specifier|final
name|void
name|addTargetAnnotation
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|Annotation
argument_list|>
name|ann
parameter_list|)
block|{
name|targetAnnotations
operator|.
name|add
argument_list|(
name|ann
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|visitClass
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|clz
parameter_list|,
name|Annotation
name|annotation
parameter_list|)
block|{
comment|// complete
block|}
specifier|public
name|List
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|Annotation
argument_list|>
argument_list|>
name|getTargetAnnotations
parameter_list|()
block|{
return|return
name|targetAnnotations
return|;
block|}
specifier|public
name|void
name|visitField
parameter_list|(
name|Field
name|field
parameter_list|,
name|Annotation
name|annotation
parameter_list|)
block|{
comment|// complete
block|}
specifier|public
name|void
name|visitMethod
parameter_list|(
name|Method
name|method
parameter_list|,
name|Annotation
name|annotation
parameter_list|)
block|{
comment|// complete
block|}
specifier|public
name|void
name|setTarget
parameter_list|(
name|Object
name|object
parameter_list|)
block|{
name|target
operator|=
name|object
expr_stmt|;
name|targetClass
operator|=
name|object
operator|.
name|getClass
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|setTarget
parameter_list|(
name|Object
name|object
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|cls
parameter_list|)
block|{
name|target
operator|=
name|object
expr_stmt|;
name|targetClass
operator|=
name|cls
expr_stmt|;
block|}
specifier|public
name|Object
name|getTarget
parameter_list|()
block|{
return|return
name|target
return|;
block|}
specifier|public
name|Class
argument_list|<
name|?
argument_list|>
name|getTargetClass
parameter_list|()
block|{
return|return
name|targetClass
return|;
block|}
block|}
end_class

end_unit

