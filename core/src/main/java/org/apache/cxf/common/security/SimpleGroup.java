begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|security
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|acl
operator|.
name|Group
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * Simple Group implementation  *  */
end_comment

begin_class
specifier|public
class|class
name|SimpleGroup
extends|extends
name|SimplePrincipal
implements|implements
name|Group
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|Principal
argument_list|>
name|members
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
specifier|public
name|SimpleGroup
parameter_list|(
name|String
name|groupName
parameter_list|)
block|{
name|super
argument_list|(
name|groupName
argument_list|)
expr_stmt|;
block|}
specifier|public
name|SimpleGroup
parameter_list|(
name|String
name|groupName
parameter_list|,
name|String
name|memberName
parameter_list|)
block|{
name|super
argument_list|(
name|groupName
argument_list|)
expr_stmt|;
name|members
operator|.
name|add
argument_list|(
operator|new
name|SimplePrincipal
argument_list|(
name|memberName
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|SimpleGroup
parameter_list|(
name|String
name|groupName
parameter_list|,
name|Principal
name|member
parameter_list|)
block|{
name|super
argument_list|(
name|groupName
argument_list|)
expr_stmt|;
name|members
operator|.
name|add
argument_list|(
name|member
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|isMember
parameter_list|(
name|Principal
name|p
parameter_list|)
block|{
return|return
name|members
operator|.
name|contains
argument_list|(
name|p
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|addMember
parameter_list|(
name|Principal
name|p
parameter_list|)
block|{
return|return
name|members
operator|.
name|add
argument_list|(
name|p
argument_list|)
return|;
block|}
specifier|public
name|Enumeration
argument_list|<
name|?
extends|extends
name|Principal
argument_list|>
name|members
parameter_list|()
block|{
specifier|final
name|Iterator
argument_list|<
name|Principal
argument_list|>
name|it
init|=
name|members
operator|.
name|iterator
argument_list|()
decl_stmt|;
return|return
operator|new
name|Enumeration
argument_list|<
name|Principal
argument_list|>
argument_list|()
block|{
specifier|public
name|boolean
name|hasMoreElements
parameter_list|()
block|{
return|return
name|it
operator|.
name|hasNext
argument_list|()
return|;
block|}
specifier|public
name|Principal
name|nextElement
parameter_list|()
block|{
return|return
name|it
operator|.
name|next
argument_list|()
return|;
block|}
block|}
return|;
block|}
specifier|public
name|boolean
name|removeMember
parameter_list|(
name|Principal
name|p
parameter_list|)
block|{
return|return
name|members
operator|.
name|remove
argument_list|(
name|p
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|obj
operator|instanceof
name|SimpleGroup
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|SimpleGroup
name|other
init|=
operator|(
name|SimpleGroup
operator|)
name|obj
decl_stmt|;
return|return
name|members
operator|.
name|equals
argument_list|(
name|other
operator|.
name|members
argument_list|)
operator|&&
name|super
operator|.
name|equals
argument_list|(
name|obj
argument_list|)
return|;
block|}
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|getName
argument_list|()
operator|.
name|hashCode
argument_list|()
operator|+
literal|37
operator|*
name|members
operator|.
name|hashCode
argument_list|()
return|;
block|}
block|}
end_class

end_unit

