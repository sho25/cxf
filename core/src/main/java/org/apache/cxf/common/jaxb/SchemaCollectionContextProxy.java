begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|jaxb
package|;
end_package

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Time
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|activation
operator|.
name|DataHandler
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|activation
operator|.
name|DataSource
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlRootElement
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlSchema
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|annotation
operator|.
name|XmlType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamReader
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|Source
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|xmlschema
operator|.
name|SchemaCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaElement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|constants
operator|.
name|Constants
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
specifier|public
class|class
name|SchemaCollectionContextProxy
implements|implements
name|JAXBContextProxy
block|{
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|,
name|QName
argument_list|>
name|TYPE_MAP
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|JAXBContext
name|context
decl_stmt|;
specifier|final
name|SchemaCollection
name|schemas
decl_stmt|;
specifier|final
name|String
name|defaultNamespace
decl_stmt|;
static|static
block|{
name|defaultRegister
argument_list|(
name|BigDecimal
operator|.
name|class
argument_list|,
name|Constants
operator|.
name|XSD_DECIMAL
argument_list|)
expr_stmt|;
name|defaultRegister
argument_list|(
name|BigInteger
operator|.
name|class
argument_list|,
name|Constants
operator|.
name|XSD_INTEGER
argument_list|)
expr_stmt|;
name|defaultRegister
argument_list|(
name|Boolean
operator|.
name|class
argument_list|,
name|Constants
operator|.
name|XSD_BOOLEAN
argument_list|)
expr_stmt|;
name|defaultRegister
argument_list|(
name|Calendar
operator|.
name|class
argument_list|,
name|Constants
operator|.
name|XSD_DATETIME
argument_list|)
expr_stmt|;
name|defaultRegister
argument_list|(
name|Date
operator|.
name|class
argument_list|,
name|Constants
operator|.
name|XSD_DATETIME
argument_list|)
expr_stmt|;
name|defaultRegister
argument_list|(
name|Float
operator|.
name|class
argument_list|,
name|Constants
operator|.
name|XSD_FLOAT
argument_list|)
expr_stmt|;
name|defaultRegister
argument_list|(
name|Double
operator|.
name|class
argument_list|,
name|Constants
operator|.
name|XSD_DOUBLE
argument_list|)
expr_stmt|;
name|defaultRegister
argument_list|(
name|Integer
operator|.
name|class
argument_list|,
name|Constants
operator|.
name|XSD_INT
argument_list|)
expr_stmt|;
name|defaultRegister
argument_list|(
name|Long
operator|.
name|class
argument_list|,
name|Constants
operator|.
name|XSD_LONG
argument_list|)
expr_stmt|;
name|defaultRegister
argument_list|(
name|Object
operator|.
name|class
argument_list|,
name|Constants
operator|.
name|XSD_ANYTYPE
argument_list|)
expr_stmt|;
name|defaultRegister
argument_list|(
name|Byte
operator|.
name|class
argument_list|,
name|Constants
operator|.
name|XSD_BYTE
argument_list|)
expr_stmt|;
name|defaultRegister
argument_list|(
name|Short
operator|.
name|class
argument_list|,
name|Constants
operator|.
name|XSD_SHORT
argument_list|)
expr_stmt|;
name|defaultRegister
argument_list|(
name|Source
operator|.
name|class
argument_list|,
name|Constants
operator|.
name|XSD_ANYTYPE
argument_list|)
expr_stmt|;
name|defaultRegister
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|Constants
operator|.
name|XSD_STRING
argument_list|)
expr_stmt|;
name|defaultRegister
argument_list|(
name|Time
operator|.
name|class
argument_list|,
name|Constants
operator|.
name|XSD_TIME
argument_list|)
expr_stmt|;
name|defaultRegister
argument_list|(
name|Timestamp
operator|.
name|class
argument_list|,
name|Constants
operator|.
name|XSD_DATETIME
argument_list|)
expr_stmt|;
name|defaultRegister
argument_list|(
name|URI
operator|.
name|class
argument_list|,
name|Constants
operator|.
name|XSD_ANYURI
argument_list|)
expr_stmt|;
name|defaultRegister
argument_list|(
name|XMLStreamReader
operator|.
name|class
argument_list|,
name|Constants
operator|.
name|XSD_ANYTYPE
argument_list|)
expr_stmt|;
name|defaultRegister
argument_list|(
name|boolean
operator|.
name|class
argument_list|,
name|Constants
operator|.
name|XSD_BOOLEAN
argument_list|)
expr_stmt|;
name|defaultRegister
argument_list|(
name|Date
operator|.
name|class
argument_list|,
name|Constants
operator|.
name|XSD_DATETIME
argument_list|)
expr_stmt|;
name|defaultRegister
argument_list|(
name|Float
operator|.
name|class
argument_list|,
name|Constants
operator|.
name|XSD_FLOAT
argument_list|)
expr_stmt|;
name|defaultRegister
argument_list|(
name|Double
operator|.
name|class
argument_list|,
name|Constants
operator|.
name|XSD_DOUBLE
argument_list|)
expr_stmt|;
name|defaultRegister
argument_list|(
name|Integer
operator|.
name|class
argument_list|,
name|Constants
operator|.
name|XSD_INT
argument_list|)
expr_stmt|;
name|defaultRegister
argument_list|(
name|Long
operator|.
name|class
argument_list|,
name|Constants
operator|.
name|XSD_LONG
argument_list|)
expr_stmt|;
name|defaultRegister
argument_list|(
name|Object
operator|.
name|class
argument_list|,
name|Constants
operator|.
name|XSD_ANYTYPE
argument_list|)
expr_stmt|;
name|defaultRegister
argument_list|(
name|Byte
operator|.
name|class
argument_list|,
name|Constants
operator|.
name|XSD_BYTE
argument_list|)
expr_stmt|;
name|defaultRegister
argument_list|(
name|Short
operator|.
name|class
argument_list|,
name|Constants
operator|.
name|XSD_SHORT
argument_list|)
expr_stmt|;
name|defaultRegister
argument_list|(
name|Source
operator|.
name|class
argument_list|,
name|Constants
operator|.
name|XSD_ANYTYPE
argument_list|)
expr_stmt|;
name|defaultRegister
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|Constants
operator|.
name|XSD_STRING
argument_list|)
expr_stmt|;
name|defaultRegister
argument_list|(
name|Time
operator|.
name|class
argument_list|,
name|Constants
operator|.
name|XSD_TIME
argument_list|)
expr_stmt|;
name|defaultRegister
argument_list|(
name|Timestamp
operator|.
name|class
argument_list|,
name|Constants
operator|.
name|XSD_DATETIME
argument_list|)
expr_stmt|;
name|defaultRegister
argument_list|(
name|URI
operator|.
name|class
argument_list|,
name|Constants
operator|.
name|XSD_ANYURI
argument_list|)
expr_stmt|;
name|defaultRegister
argument_list|(
name|XMLStreamReader
operator|.
name|class
argument_list|,
name|Constants
operator|.
name|XSD_ANYTYPE
argument_list|)
expr_stmt|;
name|defaultRegister
argument_list|(
name|boolean
operator|.
name|class
argument_list|,
name|Constants
operator|.
name|XSD_BOOLEAN
argument_list|)
expr_stmt|;
name|defaultRegister
argument_list|(
name|byte
index|[]
operator|.
expr|class
argument_list|,
name|Constants
operator|.
name|XSD_BASE64
argument_list|)
expr_stmt|;
name|defaultRegister
argument_list|(
name|double
operator|.
name|class
argument_list|,
name|Constants
operator|.
name|XSD_DOUBLE
argument_list|)
expr_stmt|;
name|defaultRegister
argument_list|(
name|float
operator|.
name|class
argument_list|,
name|Constants
operator|.
name|XSD_FLOAT
argument_list|)
expr_stmt|;
name|defaultRegister
argument_list|(
name|int
operator|.
name|class
argument_list|,
name|Constants
operator|.
name|XSD_INT
argument_list|)
expr_stmt|;
name|defaultRegister
argument_list|(
name|short
operator|.
name|class
argument_list|,
name|Constants
operator|.
name|XSD_SHORT
argument_list|)
expr_stmt|;
name|defaultRegister
argument_list|(
name|byte
operator|.
name|class
argument_list|,
name|Constants
operator|.
name|XSD_BYTE
argument_list|)
expr_stmt|;
name|defaultRegister
argument_list|(
name|long
operator|.
name|class
argument_list|,
name|Constants
operator|.
name|XSD_LONG
argument_list|)
expr_stmt|;
name|defaultRegister
argument_list|(
name|java
operator|.
name|sql
operator|.
name|Date
operator|.
name|class
argument_list|,
name|Constants
operator|.
name|XSD_DATETIME
argument_list|)
expr_stmt|;
name|defaultRegister
argument_list|(
name|java
operator|.
name|sql
operator|.
name|Date
operator|.
name|class
argument_list|,
name|Constants
operator|.
name|XSD_DATE
argument_list|)
expr_stmt|;
name|defaultRegister
argument_list|(
name|Number
operator|.
name|class
argument_list|,
name|Constants
operator|.
name|XSD_DECIMAL
argument_list|)
expr_stmt|;
name|defaultRegister
argument_list|(
name|DataSource
operator|.
name|class
argument_list|,
name|Constants
operator|.
name|XSD_BASE64
argument_list|)
expr_stmt|;
name|defaultRegister
argument_list|(
name|DataHandler
operator|.
name|class
argument_list|,
name|Constants
operator|.
name|XSD_BASE64
argument_list|)
expr_stmt|;
name|defaultRegister
argument_list|(
name|Document
operator|.
name|class
argument_list|,
name|Constants
operator|.
name|XSD_ANYTYPE
argument_list|)
expr_stmt|;
block|}
specifier|public
name|SchemaCollectionContextProxy
parameter_list|(
name|JAXBContext
name|ctx
parameter_list|,
name|SchemaCollection
name|c
parameter_list|,
name|String
name|defaultNs
parameter_list|)
block|{
name|schemas
operator|=
name|c
expr_stmt|;
name|context
operator|=
name|ctx
expr_stmt|;
name|defaultNamespace
operator|=
name|defaultNs
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|defaultRegister
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|cls
parameter_list|,
name|QName
name|name
parameter_list|)
block|{
name|TYPE_MAP
operator|.
name|put
argument_list|(
name|cls
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Object
name|getBeanInfo
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|cls
parameter_list|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|origCls
init|=
name|cls
decl_stmt|;
name|String
name|postfix
init|=
literal|""
decl_stmt|;
while|while
condition|(
name|cls
operator|.
name|isArray
argument_list|()
condition|)
block|{
name|cls
operator|=
name|cls
operator|.
name|getComponentType
argument_list|()
expr_stmt|;
name|postfix
operator|=
literal|"Array"
expr_stmt|;
block|}
name|XmlRootElement
name|xre
init|=
name|cls
operator|.
name|getAnnotation
argument_list|(
name|XmlRootElement
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|name
init|=
name|xre
operator|==
literal|null
condition|?
literal|"##default"
else|:
name|xre
operator|.
name|name
argument_list|()
decl_stmt|;
name|String
name|namespace
init|=
name|xre
operator|==
literal|null
condition|?
literal|"##default"
else|:
name|xre
operator|.
name|namespace
argument_list|()
decl_stmt|;
if|if
condition|(
literal|"##default"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|name
operator|=
name|java
operator|.
name|beans
operator|.
name|Introspector
operator|.
name|decapitalize
argument_list|(
name|cls
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|"##default"
operator|.
name|equals
argument_list|(
name|namespace
argument_list|)
operator|&&
name|cls
operator|.
name|getPackage
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|XmlSchema
name|sc
init|=
name|cls
operator|.
name|getPackage
argument_list|()
operator|.
name|getAnnotation
argument_list|(
name|XmlSchema
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|sc
operator|!=
literal|null
condition|)
block|{
name|namespace
operator|=
name|sc
operator|.
name|namespace
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
literal|"##default"
operator|.
name|equals
argument_list|(
name|namespace
argument_list|)
operator|||
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|namespace
argument_list|)
condition|)
block|{
name|namespace
operator|=
name|JAXBUtils
operator|.
name|getPackageNamespace
argument_list|(
name|cls
argument_list|)
expr_stmt|;
if|if
condition|(
name|namespace
operator|==
literal|null
condition|)
block|{
name|namespace
operator|=
name|defaultNamespace
expr_stmt|;
block|}
block|}
specifier|final
name|QName
name|qname
init|=
operator|new
name|QName
argument_list|(
name|namespace
argument_list|,
name|name
operator|+
name|postfix
argument_list|)
decl_stmt|;
specifier|final
name|XmlSchemaElement
name|el
init|=
name|schemas
operator|.
name|getElementByQName
argument_list|(
name|qname
argument_list|)
decl_stmt|;
name|XmlSchemaType
name|type
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|el
operator|!=
literal|null
condition|)
block|{
name|type
operator|=
name|el
operator|.
name|getSchemaType
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|type
operator|==
literal|null
condition|)
block|{
name|type
operator|=
name|schemas
operator|.
name|getTypeByQName
argument_list|(
name|getTypeQName
argument_list|(
name|origCls
argument_list|,
name|namespace
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|type
operator|==
literal|null
condition|)
block|{
name|type
operator|=
name|schemas
operator|.
name|getTypeByQName
argument_list|(
name|qname
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|type
operator|==
literal|null
condition|)
block|{
name|type
operator|=
name|mapToSchemaType
argument_list|(
name|origCls
argument_list|,
name|namespace
argument_list|)
expr_stmt|;
comment|/*             if (type == null) {                 type = mapToSchemaType(cls, namespace);             }             */
block|}
if|if
condition|(
name|el
operator|==
literal|null
operator|&&
name|type
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|QName
name|typeName
init|=
name|type
operator|==
literal|null
condition|?
literal|null
else|:
name|type
operator|.
name|getQName
argument_list|()
decl_stmt|;
return|return
operator|new
name|JAXBBeanInfo
argument_list|()
block|{
specifier|public
name|boolean
name|isElement
parameter_list|()
block|{
return|return
name|el
operator|==
literal|null
condition|?
literal|false
else|:
literal|true
return|;
block|}
specifier|public
name|Collection
argument_list|<
name|QName
argument_list|>
name|getTypeNames
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|singletonList
argument_list|(
name|typeName
argument_list|)
return|;
block|}
specifier|public
name|String
name|getElementNamespaceURI
parameter_list|(
name|Object
name|object
parameter_list|)
block|{
return|return
name|qname
operator|.
name|getNamespaceURI
argument_list|()
return|;
block|}
specifier|public
name|String
name|getElementLocalName
parameter_list|(
name|Object
name|object
parameter_list|)
block|{
return|return
name|qname
operator|.
name|getLocalPart
argument_list|()
return|;
block|}
block|}
return|;
block|}
specifier|private
name|QName
name|getTypeQName
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|cls
parameter_list|,
name|String
name|namespace
parameter_list|)
block|{
name|QName
name|qn
init|=
name|TYPE_MAP
operator|.
name|get
argument_list|(
name|cls
argument_list|)
decl_stmt|;
if|if
condition|(
name|qn
operator|!=
literal|null
condition|)
block|{
return|return
name|qn
return|;
block|}
name|XmlType
name|xtype
init|=
name|cls
operator|.
name|getAnnotation
argument_list|(
name|XmlType
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|tn
init|=
name|xtype
operator|==
literal|null
condition|?
literal|"##default"
else|:
name|xtype
operator|.
name|name
argument_list|()
decl_stmt|;
name|String
name|tns
init|=
name|xtype
operator|==
literal|null
condition|?
literal|"##default"
else|:
name|xtype
operator|.
name|namespace
argument_list|()
decl_stmt|;
if|if
condition|(
literal|"##default"
operator|.
name|equals
argument_list|(
name|tn
argument_list|)
condition|)
block|{
name|tn
operator|=
name|java
operator|.
name|beans
operator|.
name|Introspector
operator|.
name|decapitalize
argument_list|(
name|cls
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|"##default"
operator|.
name|equals
argument_list|(
name|tns
argument_list|)
operator|||
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|tns
argument_list|)
condition|)
block|{
name|tns
operator|=
name|JAXBUtils
operator|.
name|getPackageNamespace
argument_list|(
name|cls
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|"##default"
operator|.
name|equals
argument_list|(
name|tns
argument_list|)
operator|||
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|tns
argument_list|)
condition|)
block|{
name|tns
operator|=
name|namespace
expr_stmt|;
block|}
return|return
operator|new
name|QName
argument_list|(
name|tns
argument_list|,
name|tn
argument_list|)
return|;
block|}
specifier|private
name|XmlSchemaType
name|mapToSchemaType
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|cls
parameter_list|,
name|String
name|namespace
parameter_list|)
block|{
name|QName
name|qn
init|=
name|getTypeQName
argument_list|(
name|cls
argument_list|,
name|namespace
argument_list|)
decl_stmt|;
name|XmlSchemaType
name|type
init|=
name|schemas
operator|.
name|getTypeByQName
argument_list|(
name|qn
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|==
literal|null
operator|&&
name|cls
operator|.
name|isArray
argument_list|()
condition|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|compType
init|=
name|cls
operator|.
name|getComponentType
argument_list|()
decl_stmt|;
name|int
name|count
init|=
literal|1
decl_stmt|;
while|while
condition|(
name|compType
operator|.
name|isArray
argument_list|()
condition|)
block|{
name|compType
operator|=
name|compType
operator|.
name|getComponentType
argument_list|()
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
name|QName
name|aqn
init|=
name|getTypeQName
argument_list|(
name|compType
argument_list|,
name|namespace
argument_list|)
decl_stmt|;
while|while
condition|(
name|count
operator|>
literal|0
condition|)
block|{
name|aqn
operator|=
operator|new
name|QName
argument_list|(
name|aqn
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
name|aqn
operator|.
name|getLocalPart
argument_list|()
operator|+
literal|"Array"
argument_list|)
expr_stmt|;
name|count
operator|--
expr_stmt|;
block|}
name|type
operator|=
name|schemas
operator|.
name|getTypeByQName
argument_list|(
name|aqn
argument_list|)
expr_stmt|;
if|if
condition|(
name|type
operator|==
literal|null
condition|)
block|{
name|type
operator|=
name|schemas
operator|.
name|getTypeByQName
argument_list|(
operator|new
name|QName
argument_list|(
literal|"http://jaxb.dev.java.net/array"
argument_list|,
name|aqn
operator|.
name|getLocalPart
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/*         if (type == null) {             System.out.println("HELP: " + cls.getName());         }         */
return|return
name|type
return|;
block|}
block|}
end_class

end_unit

