begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * Utility class loader that can be used to create proxies in cases where  * the the client classes are not visible to the loader of the  * service class.  */
end_comment

begin_class
specifier|public
class|class
name|ProxyClassLoader
extends|extends
name|ClassLoader
block|{
specifier|private
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|classes
index|[]
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|ClassLoader
argument_list|>
name|loaders
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
name|boolean
name|checkSystem
decl_stmt|;
specifier|public
name|ProxyClassLoader
parameter_list|(
name|ClassLoader
name|parent
parameter_list|)
block|{
name|super
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|classes
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|ProxyClassLoader
parameter_list|(
name|ClassLoader
name|parent
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|cls
parameter_list|)
block|{
name|super
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|classes
operator|=
name|cls
expr_stmt|;
block|}
specifier|public
name|void
name|addLoader
parameter_list|(
name|ClassLoader
name|loader
parameter_list|)
block|{
if|if
condition|(
name|loader
operator|==
literal|null
condition|)
block|{
name|checkSystem
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|loaders
operator|.
name|add
argument_list|(
name|loader
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|Class
argument_list|<
name|?
argument_list|>
name|findClass
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|ClassNotFoundException
block|{
if|if
condition|(
name|classes
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Class
argument_list|<
name|?
argument_list|>
name|c
range|:
name|classes
control|)
block|{
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
name|c
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|c
return|;
block|}
block|}
block|}
for|for
control|(
name|ClassLoader
name|loader
range|:
name|loaders
control|)
block|{
try|try
block|{
return|return
name|loader
operator|.
name|loadClass
argument_list|(
name|name
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|cnfe
parameter_list|)
block|{
comment|// Try next
block|}
catch|catch
parameter_list|(
name|NoClassDefFoundError
name|cnfe
parameter_list|)
block|{
comment|// Try next
block|}
block|}
if|if
condition|(
name|checkSystem
condition|)
block|{
try|try
block|{
return|return
name|getSystemClassLoader
argument_list|()
operator|.
name|loadClass
argument_list|(
name|name
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|cnfe
parameter_list|)
block|{
comment|// Try next
block|}
catch|catch
parameter_list|(
name|NoClassDefFoundError
name|cnfe
parameter_list|)
block|{
comment|// Try next
block|}
block|}
throw|throw
operator|new
name|ClassNotFoundException
argument_list|(
name|name
argument_list|)
throw|;
block|}
specifier|public
name|URL
name|findResource
parameter_list|(
name|String
name|name
parameter_list|)
block|{
for|for
control|(
name|ClassLoader
name|loader
range|:
name|loaders
control|)
block|{
name|URL
name|url
init|=
name|loader
operator|.
name|getResource
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|url
operator|!=
literal|null
condition|)
block|{
return|return
name|url
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

