begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|DataFormatException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|Deflater
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|Inflater
import|;
end_import

begin_class
specifier|public
specifier|final
class|class
name|CompressionUtils
block|{
specifier|private
name|CompressionUtils
parameter_list|()
block|{      }
specifier|public
specifier|static
name|InputStream
name|inflate
parameter_list|(
name|byte
index|[]
name|deflatedToken
parameter_list|)
throws|throws
name|DataFormatException
block|{
return|return
name|inflate
argument_list|(
name|deflatedToken
argument_list|,
literal|true
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|InputStream
name|inflate
parameter_list|(
name|byte
index|[]
name|deflatedToken
parameter_list|,
name|boolean
name|nowrap
parameter_list|)
throws|throws
name|DataFormatException
block|{
name|Inflater
name|inflater
init|=
operator|new
name|Inflater
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|inflater
operator|.
name|setInput
argument_list|(
name|deflatedToken
argument_list|)
expr_stmt|;
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
name|deflatedToken
operator|.
name|length
index|]
decl_stmt|;
name|int
name|inflateLen
decl_stmt|;
name|ByteArrayOutputStream
name|inflatedToken
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
while|while
condition|(
operator|!
name|inflater
operator|.
name|finished
argument_list|()
condition|)
block|{
name|inflateLen
operator|=
name|inflater
operator|.
name|inflate
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|deflatedToken
operator|.
name|length
argument_list|)
expr_stmt|;
if|if
condition|(
name|inflateLen
operator|==
literal|0
operator|&&
operator|!
name|inflater
operator|.
name|finished
argument_list|()
condition|)
block|{
if|if
condition|(
name|inflater
operator|.
name|needsInput
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|DataFormatException
argument_list|(
literal|"Inflater can not inflate all the token bytes"
argument_list|)
throw|;
block|}
break|break;
block|}
name|inflatedToken
operator|.
name|write
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|inflateLen
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|ByteArrayInputStream
argument_list|(
name|inflatedToken
operator|.
name|toByteArray
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|byte
index|[]
name|deflate
parameter_list|(
name|byte
index|[]
name|tokenBytes
parameter_list|)
block|{
return|return
name|deflate
argument_list|(
name|tokenBytes
argument_list|,
literal|true
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|byte
index|[]
name|deflate
parameter_list|(
name|byte
index|[]
name|tokenBytes
parameter_list|,
name|boolean
name|nowrap
parameter_list|)
block|{
return|return
name|deflate
argument_list|(
name|tokenBytes
argument_list|,
name|Deflater
operator|.
name|DEFLATED
argument_list|,
name|nowrap
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|byte
index|[]
name|deflate
parameter_list|(
name|byte
index|[]
name|tokenBytes
parameter_list|,
name|int
name|level
parameter_list|,
name|boolean
name|nowrap
parameter_list|)
block|{
name|Deflater
name|compresser
init|=
operator|new
name|Deflater
argument_list|(
name|level
argument_list|,
name|nowrap
argument_list|)
decl_stmt|;
name|compresser
operator|.
name|setInput
argument_list|(
name|tokenBytes
argument_list|)
expr_stmt|;
name|compresser
operator|.
name|finish
argument_list|()
expr_stmt|;
name|byte
index|[]
name|output
init|=
operator|new
name|byte
index|[
name|tokenBytes
operator|.
name|length
operator|*
literal|2
index|]
decl_stmt|;
name|int
name|compressedDataLength
init|=
name|compresser
operator|.
name|deflate
argument_list|(
name|output
argument_list|)
decl_stmt|;
name|byte
index|[]
name|result
init|=
operator|new
name|byte
index|[
name|compressedDataLength
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|output
argument_list|,
literal|0
argument_list|,
name|result
argument_list|,
literal|0
argument_list|,
name|compressedDataLength
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

