begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|AccessController
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|classloader
operator|.
name|ClassLoaderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_class
specifier|public
class|class
name|ProxyClassLoaderCache
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|ProxyClassLoaderCache
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|ThreadLocal
argument_list|<
name|ClassLoader
argument_list|>
name|PARENT_CLASSLOADER
init|=
operator|new
name|ThreadLocal
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|ThreadLocal
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
index|[]
argument_list|>
name|PROXY_INTERFACES
init|=
operator|new
name|ThreadLocal
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|ClassValue
argument_list|<
name|ClassLoader
argument_list|>
name|backend
init|=
operator|new
name|ClassValue
argument_list|<
name|ClassLoader
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|ClassLoader
name|computeValue
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|proxyInterface
parameter_list|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|FINE
argument_list|,
literal|"can't find ProxyClassLoader from ClassValue Cache, "
operator|+
literal|"will create a new one"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|FINE
argument_list|,
literal|"interface for new created ProxyClassLoader is "
operator|+
name|proxyInterface
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|FINE
argument_list|,
literal|"interface's classloader for new created ProxyClassLoader is "
operator|+
name|ClassLoaderUtils
operator|.
name|getClassLoaderName
argument_list|(
name|proxyInterface
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|createProxyClassLoader
argument_list|(
name|proxyInterface
argument_list|)
return|;
comment|// Parameter 'proxyInterface' is not used inside method body
block|}
block|}
decl_stmt|;
specifier|private
name|ClassLoader
name|createProxyClassLoader
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|proxyInterface
parameter_list|)
block|{
specifier|final
name|SecurityManager
name|sm
init|=
name|System
operator|.
name|getSecurityManager
argument_list|()
decl_stmt|;
name|ProxyClassLoader
name|ret
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|sm
operator|==
literal|null
condition|)
block|{
name|ret
operator|=
operator|new
name|ProxyClassLoader
argument_list|(
name|PARENT_CLASSLOADER
operator|.
name|get
argument_list|()
argument_list|,
name|PROXY_INTERFACES
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|AccessController
operator|.
name|doPrivileged
argument_list|(
operator|new
name|PrivilegedAction
argument_list|<
name|ProxyClassLoader
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ProxyClassLoader
name|run
parameter_list|()
block|{
return|return
operator|new
name|ProxyClassLoader
argument_list|(
name|PARENT_CLASSLOADER
operator|.
name|get
argument_list|()
argument_list|,
name|PROXY_INTERFACES
operator|.
name|get
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Class
argument_list|<
name|?
argument_list|>
name|currentInterface
range|:
name|PROXY_INTERFACES
operator|.
name|get
argument_list|()
control|)
block|{
name|ret
operator|.
name|addLoader
argument_list|(
name|getClassLoader
argument_list|(
name|currentInterface
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|FINE
argument_list|,
literal|"interface for new created ProxyClassLoader is "
operator|+
name|currentInterface
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|FINE
argument_list|,
literal|"interface's classloader for new created ProxyClassLoader is "
operator|+
name|currentInterface
operator|.
name|getClassLoader
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|public
name|ClassLoader
name|getProxyClassLoader
parameter_list|(
name|ClassLoader
name|parent
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|proxyInterfaces
parameter_list|)
block|{
try|try
block|{
name|PARENT_CLASSLOADER
operator|.
name|set
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|PROXY_INTERFACES
operator|.
name|set
argument_list|(
name|proxyInterfaces
argument_list|)
expr_stmt|;
for|for
control|(
name|Class
argument_list|<
name|?
argument_list|>
name|currentInterface
range|:
name|proxyInterfaces
control|)
block|{
name|String
name|ifName
init|=
name|currentInterface
operator|.
name|getName
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|FINE
argument_list|,
literal|"the interface we are checking is "
operator|+
name|currentInterface
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|FINE
argument_list|,
literal|"the interface' classloader we are checking is "
operator|+
name|getClassLoader
argument_list|(
name|currentInterface
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|ifName
operator|.
name|startsWith
argument_list|(
literal|"org.apache.cxf"
argument_list|)
operator|&&
operator|!
name|ifName
operator|.
name|startsWith
argument_list|(
literal|"java"
argument_list|)
condition|)
block|{
comment|// cache and retrieve customer interface
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|FINE
argument_list|,
literal|"the customer interface is "
operator|+
name|currentInterface
operator|.
name|getName
argument_list|()
operator|+
literal|". Will try to fetch it from Cache"
argument_list|)
expr_stmt|;
return|return
name|backend
operator|.
name|get
argument_list|(
name|currentInterface
argument_list|)
return|;
block|}
block|}
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|FINE
argument_list|,
literal|"Non of interfaces are customer interface, "
operator|+
literal|"retrive the last interface as key:"
operator|+
name|proxyInterfaces
index|[
name|proxyInterfaces
operator|.
name|length
operator|-
literal|1
index|]
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|//the last interface is the variable type
return|return
name|backend
operator|.
name|get
argument_list|(
name|proxyInterfaces
index|[
name|proxyInterfaces
operator|.
name|length
operator|-
literal|1
index|]
argument_list|)
return|;
block|}
finally|finally
block|{
name|PARENT_CLASSLOADER
operator|.
name|remove
argument_list|()
expr_stmt|;
name|PROXY_INTERFACES
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|removeStaleProxyClassLoader
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|proxyInterface
parameter_list|)
block|{
name|backend
operator|.
name|remove
argument_list|(
name|proxyInterface
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|ClassLoader
name|getClassLoader
parameter_list|(
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|)
block|{
specifier|final
name|SecurityManager
name|sm
init|=
name|System
operator|.
name|getSecurityManager
argument_list|()
decl_stmt|;
if|if
condition|(
name|sm
operator|!=
literal|null
condition|)
block|{
return|return
name|AccessController
operator|.
name|doPrivileged
argument_list|(
operator|new
name|PrivilegedAction
argument_list|<
name|ClassLoader
argument_list|>
argument_list|()
block|{
specifier|public
name|ClassLoader
name|run
parameter_list|()
block|{
return|return
name|clazz
operator|.
name|getClassLoader
argument_list|()
return|;
block|}
block|}
argument_list|)
return|;
block|}
return|return
name|clazz
operator|.
name|getClassLoader
argument_list|()
return|;
block|}
block|}
end_class

end_unit

