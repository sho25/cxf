begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FilterOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_class
specifier|public
class|class
name|Base64OutputStream
extends|extends
name|FilterOutputStream
block|{
specifier|private
name|byte
index|[]
name|lastChunk
decl_stmt|;
specifier|private
name|boolean
name|flushed
decl_stmt|;
specifier|private
name|boolean
name|urlSafe
decl_stmt|;
specifier|public
name|Base64OutputStream
parameter_list|(
name|OutputStream
name|out
parameter_list|,
name|boolean
name|urlSafe
parameter_list|)
block|{
name|super
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|this
operator|.
name|urlSafe
operator|=
name|urlSafe
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|int
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|bytes
init|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
name|Integer
operator|.
name|SIZE
operator|/
literal|8
argument_list|)
operator|.
name|putInt
argument_list|(
name|value
argument_list|)
operator|.
name|array
argument_list|()
decl_stmt|;
name|write
argument_list|(
name|bytes
argument_list|,
literal|0
argument_list|,
name|bytes
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|byte
name|b
index|[]
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
name|encodeAndWrite
argument_list|(
name|b
argument_list|,
name|off
argument_list|,
name|len
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|encodeAndWrite
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|,
name|boolean
name|finalWrite
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|theChunk
init|=
name|lastChunk
decl_stmt|;
name|int
name|lenToEncode
init|=
name|len
decl_stmt|;
if|if
condition|(
name|theChunk
operator|!=
literal|null
condition|)
block|{
name|theChunk
operator|=
name|newArray
argument_list|(
name|theChunk
argument_list|,
literal|0
argument_list|,
name|theChunk
operator|.
name|length
argument_list|,
name|b
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|lenToEncode
operator|=
name|theChunk
operator|.
name|length
expr_stmt|;
name|off
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
name|theChunk
operator|=
name|b
expr_stmt|;
block|}
name|int
name|rem
init|=
name|finalWrite
condition|?
literal|0
else|:
name|lenToEncode
operator|%
literal|3
decl_stmt|;
name|Base64Utility
operator|.
name|encodeAndStream
argument_list|(
name|theChunk
argument_list|,
name|off
argument_list|,
name|lenToEncode
operator|-
name|rem
argument_list|,
name|urlSafe
argument_list|,
name|out
argument_list|)
expr_stmt|;
if|if
condition|(
name|rem
operator|>
literal|0
condition|)
block|{
name|lastChunk
operator|=
name|newArray
argument_list|(
name|theChunk
argument_list|,
name|lenToEncode
operator|-
name|rem
argument_list|,
name|rem
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|lastChunk
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|flush
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|flushed
operator|||
name|lastChunk
operator|==
literal|null
condition|)
block|{
return|return;
block|}
try|try
block|{
name|Base64Utility
operator|.
name|encodeAndStream
argument_list|(
name|lastChunk
argument_list|,
literal|0
argument_list|,
name|lastChunk
operator|.
name|length
argument_list|,
name|urlSafe
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|lastChunk
operator|=
literal|null
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
name|flushed
operator|=
literal|true
expr_stmt|;
block|}
specifier|private
name|byte
index|[]
name|newArray
parameter_list|(
name|byte
index|[]
name|src
parameter_list|,
name|int
name|srcPos
parameter_list|,
name|int
name|srcLen
parameter_list|)
block|{
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
name|srcLen
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|src
argument_list|,
name|srcPos
argument_list|,
name|buf
argument_list|,
literal|0
argument_list|,
name|srcLen
argument_list|)
expr_stmt|;
return|return
name|buf
return|;
block|}
specifier|private
name|byte
index|[]
name|newArray
parameter_list|(
name|byte
index|[]
name|src
parameter_list|,
name|int
name|srcPos
parameter_list|,
name|int
name|srcLen
parameter_list|,
name|byte
index|[]
name|src2
parameter_list|,
name|int
name|srcPos2
parameter_list|,
name|int
name|srcLen2
parameter_list|)
block|{
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
name|srcLen
operator|+
name|srcLen2
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|src
argument_list|,
name|srcPos
argument_list|,
name|buf
argument_list|,
literal|0
argument_list|,
name|srcLen
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|src2
argument_list|,
name|srcPos2
argument_list|,
name|buf
argument_list|,
name|srcLen
argument_list|,
name|srcLen2
argument_list|)
expr_stmt|;
return|return
name|buf
return|;
block|}
block|}
end_class

end_unit

