begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Proxy
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|JavaUtils
import|;
end_import

begin_class
specifier|public
specifier|final
class|class
name|PackageUtils
block|{
specifier|private
name|PackageUtils
parameter_list|()
block|{      }
specifier|static
name|String
name|getPackageName
parameter_list|(
name|String
name|className
parameter_list|)
block|{
name|int
name|pos
init|=
name|className
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
decl_stmt|;
if|if
condition|(
name|pos
operator|!=
operator|-
literal|1
condition|)
block|{
return|return
name|className
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|pos
argument_list|)
return|;
block|}
return|return
literal|""
return|;
block|}
specifier|public
specifier|static
name|String
name|getPackageName
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|)
block|{
name|String
name|className
init|=
name|clazz
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|className
operator|.
name|startsWith
argument_list|(
literal|"[L"
argument_list|)
condition|)
block|{
name|className
operator|=
name|className
operator|.
name|substring
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
return|return
name|getPackageName
argument_list|(
name|className
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|getSharedPackageName
parameter_list|(
name|List
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|classes
parameter_list|)
block|{
if|if
condition|(
name|classes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|""
return|;
block|}
name|List
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|lParts
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|classes
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|currentParts
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Class
argument_list|<
name|?
argument_list|>
name|cls
range|:
name|classes
control|)
block|{
if|if
condition|(
operator|!
name|Proxy
operator|.
name|isProxyClass
argument_list|(
name|cls
argument_list|)
condition|)
block|{
name|lParts
operator|.
name|add
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|getPackageName
argument_list|(
name|cls
argument_list|)
operator|.
name|split
argument_list|(
literal|"\\."
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|lParts
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|int
name|j
init|=
literal|1
decl_stmt|;
for|for
control|(
init|;
name|j
operator|<
name|lParts
operator|.
name|size
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
operator|(
name|lParts
operator|.
name|get
argument_list|(
name|j
argument_list|)
operator|.
name|size
argument_list|()
operator|-
literal|1
operator|)
operator|||
operator|!
name|lParts
operator|.
name|get
argument_list|(
name|j
argument_list|)
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|equals
argument_list|(
name|lParts
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
condition|)
block|{
break|break;
block|}
block|}
if|if
condition|(
name|j
operator|==
name|lParts
operator|.
name|size
argument_list|()
condition|)
block|{
name|currentParts
operator|.
name|add
argument_list|(
name|lParts
operator|.
name|get
argument_list|(
name|j
operator|-
literal|1
argument_list|)
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
break|break;
block|}
block|}
return|return
name|String
operator|.
name|join
argument_list|(
literal|"."
argument_list|,
name|currentParts
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|parsePackageName
parameter_list|(
name|String
name|namespace
parameter_list|,
name|String
name|defaultPackageName
parameter_list|)
block|{
return|return
operator|(
name|defaultPackageName
operator|!=
literal|null
operator|&&
operator|!
name|defaultPackageName
operator|.
name|trim
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|)
condition|?
name|defaultPackageName
else|:
name|getPackageNameByNameSpaceURI
argument_list|(
name|namespace
operator|.
name|trim
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|getPackageNameByNameSpaceURI
parameter_list|(
name|String
name|nameSpaceURI
parameter_list|)
block|{
name|int
name|idx
init|=
name|nameSpaceURI
operator|.
name|indexOf
argument_list|(
literal|':'
argument_list|)
decl_stmt|;
name|boolean
name|urnScheme
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|idx
operator|>=
literal|0
condition|)
block|{
specifier|final
name|String
name|scheme
init|=
name|nameSpaceURI
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|idx
argument_list|)
decl_stmt|;
name|urnScheme
operator|=
literal|"urn"
operator|.
name|equalsIgnoreCase
argument_list|(
name|scheme
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"http"
operator|.
name|equalsIgnoreCase
argument_list|(
name|scheme
argument_list|)
operator|||
name|urnScheme
condition|)
block|{
name|nameSpaceURI
operator|=
name|nameSpaceURI
operator|.
name|substring
argument_list|(
name|idx
operator|+
operator|(
name|urnScheme
condition|?
literal|1
else|:
literal|3
operator|)
argument_list|)
expr_stmt|;
comment|//
block|}
block|}
name|List
argument_list|<
name|String
argument_list|>
name|tokens
init|=
name|tokenize
argument_list|(
name|nameSpaceURI
argument_list|,
literal|"/:"
argument_list|)
decl_stmt|;
if|if
condition|(
name|tokens
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|tokens
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|String
name|lastToken
init|=
name|tokens
operator|.
name|get
argument_list|(
name|tokens
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
name|idx
operator|=
name|lastToken
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
expr_stmt|;
if|if
condition|(
name|idx
operator|>
literal|0
condition|)
block|{
comment|//lastToken = lastToken.substring(0, idx);
name|lastToken
operator|=
name|lastToken
operator|.
name|replace
argument_list|(
literal|'.'
argument_list|,
literal|'_'
argument_list|)
expr_stmt|;
name|tokens
operator|.
name|set
argument_list|(
name|tokens
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|,
name|lastToken
argument_list|)
expr_stmt|;
block|}
block|}
name|String
name|domain
init|=
name|tokens
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|// comma was removed by tokenize
comment|//        idx = domain.indexOf(':');
comment|//        if (idx>= 0) {
comment|//            domain = domain.substring(0, idx);
comment|//        }
name|List
argument_list|<
name|String
argument_list|>
name|r
init|=
name|tokenize
argument_list|(
name|domain
argument_list|,
name|urnScheme
condition|?
literal|".-"
else|:
literal|"."
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|reverse
argument_list|(
name|r
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"www"
operator|.
name|equalsIgnoreCase
argument_list|(
name|r
operator|.
name|get
argument_list|(
name|r
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
condition|)
block|{
comment|// remove leading www
name|r
operator|.
name|remove
argument_list|(
name|r
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
comment|// replace the domain name with tokenized items
name|tokens
operator|.
name|addAll
argument_list|(
literal|0
argument_list|,
name|r
argument_list|)
expr_stmt|;
comment|// iterate through the tokens and apply xml->java name algorithm
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tokens
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
comment|// get the token and remove illegal chars
name|String
name|token
init|=
name|tokens
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|token
operator|=
name|removeIllegalIdentifierChars
argument_list|(
name|token
argument_list|)
expr_stmt|;
comment|// this will check for reserved keywords
if|if
condition|(
name|JavaUtils
operator|.
name|isJavaKeyword
argument_list|(
name|token
argument_list|)
condition|)
block|{
name|token
operator|=
literal|'_'
operator|+
name|token
expr_stmt|;
block|}
name|tokens
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|token
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// concat all the pieces and return it
return|return
name|String
operator|.
name|join
argument_list|(
literal|"."
argument_list|,
name|tokens
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|tokenize
parameter_list|(
name|String
name|str
parameter_list|,
name|String
name|sep
parameter_list|)
block|{
name|StringTokenizer
name|tokens
init|=
operator|new
name|StringTokenizer
argument_list|(
name|str
argument_list|,
name|sep
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|r
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
while|while
condition|(
name|tokens
operator|.
name|hasMoreTokens
argument_list|()
condition|)
block|{
name|r
operator|.
name|add
argument_list|(
name|tokens
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|r
return|;
block|}
specifier|private
specifier|static
name|String
name|removeIllegalIdentifierChars
parameter_list|(
name|String
name|token
parameter_list|)
block|{
name|StringBuilder
name|newToken
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|token
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|char
name|c
init|=
name|token
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|==
literal|0
operator|&&
operator|!
name|Character
operator|.
name|isJavaIdentifierStart
argument_list|(
name|c
argument_list|)
condition|)
block|{
comment|// prefix an '_' if the first char is illegal
name|newToken
operator|.
name|append
argument_list|(
literal|'_'
argument_list|)
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|Character
operator|.
name|isJavaIdentifierPart
argument_list|(
name|c
argument_list|)
condition|)
block|{
comment|// replace the char with an '_' if it is illegal
name|newToken
operator|.
name|append
argument_list|(
literal|'_'
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// add the legal char
name|newToken
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|newToken
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|String
name|getNamespace
parameter_list|(
name|String
name|packageName
parameter_list|)
block|{
if|if
condition|(
name|packageName
operator|==
literal|null
operator|||
name|packageName
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|parts
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|packageName
operator|.
name|split
argument_list|(
literal|"\\."
argument_list|)
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|reverse
argument_list|(
name|parts
argument_list|)
expr_stmt|;
return|return
literal|"http://"
operator|+
name|String
operator|.
name|join
argument_list|(
literal|"."
argument_list|,
name|parts
argument_list|)
operator|+
literal|'/'
return|;
block|}
block|}
end_class

end_unit

