begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|beans
operator|.
name|BeanInfo
import|;
end_import

begin_import
import|import
name|java
operator|.
name|beans
operator|.
name|PropertyDescriptor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|Annotation
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|AccessibleObject
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Constructor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|AccessController
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedActionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|classloader
operator|.
name|ClassLoaderUtils
import|;
end_import

begin_class
specifier|public
specifier|final
class|class
name|ReflectionUtil
block|{
specifier|private
specifier|static
name|Method
name|springBeanUtilsDescriptorFetcher
decl_stmt|;
specifier|private
specifier|static
name|boolean
name|springChecked
decl_stmt|;
specifier|private
name|ReflectionUtil
parameter_list|()
block|{
comment|// intentionally empty
block|}
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|accessDeclaredField
parameter_list|(
specifier|final
name|Field
name|f
parameter_list|,
specifier|final
name|Object
name|o
parameter_list|,
specifier|final
name|Class
argument_list|<
name|T
argument_list|>
name|responseClass
parameter_list|)
block|{
return|return
name|AccessController
operator|.
name|doPrivileged
argument_list|(
operator|new
name|PrivilegedAction
argument_list|<
name|T
argument_list|>
argument_list|()
block|{
specifier|public
name|T
name|run
parameter_list|()
block|{
name|boolean
name|b
init|=
name|f
operator|.
name|isAccessible
argument_list|()
decl_stmt|;
try|try
block|{
name|f
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|responseClass
operator|.
name|cast
argument_list|(
name|f
operator|.
name|get
argument_list|(
name|o
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|SecurityException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
finally|finally
block|{
name|f
operator|.
name|setAccessible
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
return|;
block|}
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|accessDeclaredField
parameter_list|(
specifier|final
name|String
name|fieldName
parameter_list|,
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|cls
parameter_list|,
specifier|final
name|Object
name|o
parameter_list|,
specifier|final
name|Class
argument_list|<
name|T
argument_list|>
name|responseClass
parameter_list|)
block|{
return|return
name|AccessController
operator|.
name|doPrivileged
argument_list|(
operator|new
name|PrivilegedAction
argument_list|<
name|T
argument_list|>
argument_list|()
block|{
specifier|public
name|T
name|run
parameter_list|()
block|{
name|Field
name|f
init|=
name|getDeclaredField
argument_list|(
name|cls
argument_list|,
name|fieldName
argument_list|)
decl_stmt|;
name|boolean
name|b
init|=
name|f
operator|.
name|isAccessible
argument_list|()
decl_stmt|;
try|try
block|{
name|f
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|responseClass
operator|.
name|cast
argument_list|(
name|f
operator|.
name|get
argument_list|(
name|o
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|SecurityException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
finally|finally
block|{
name|f
operator|.
name|setAccessible
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Field
name|getDeclaredField
parameter_list|(
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|cls
parameter_list|,
specifier|final
name|String
name|name
parameter_list|)
block|{
return|return
name|AccessController
operator|.
name|doPrivileged
argument_list|(
operator|new
name|PrivilegedAction
argument_list|<
name|Field
argument_list|>
argument_list|()
block|{
specifier|public
name|Field
name|run
parameter_list|()
block|{
try|try
block|{
return|return
name|cls
operator|.
name|getDeclaredField
argument_list|(
name|name
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|SecurityException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchFieldException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
argument_list|)
return|;
block|}
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Constructor
argument_list|<
name|T
argument_list|>
name|getDeclaredConstructor
parameter_list|(
specifier|final
name|Class
argument_list|<
name|T
argument_list|>
name|cls
parameter_list|,
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
modifier|...
name|args
parameter_list|)
block|{
return|return
name|AccessController
operator|.
name|doPrivileged
argument_list|(
operator|new
name|PrivilegedAction
argument_list|<
name|Constructor
argument_list|<
name|T
argument_list|>
argument_list|>
argument_list|()
block|{
specifier|public
name|Constructor
argument_list|<
name|T
argument_list|>
name|run
parameter_list|()
block|{
try|try
block|{
return|return
name|cls
operator|.
name|getDeclaredConstructor
argument_list|(
name|args
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|SecurityException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
argument_list|)
return|;
block|}
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Constructor
argument_list|<
name|T
argument_list|>
name|getConstructor
parameter_list|(
specifier|final
name|Class
argument_list|<
name|T
argument_list|>
name|cls
parameter_list|,
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
modifier|...
name|args
parameter_list|)
block|{
return|return
name|AccessController
operator|.
name|doPrivileged
argument_list|(
operator|new
name|PrivilegedAction
argument_list|<
name|Constructor
argument_list|<
name|T
argument_list|>
argument_list|>
argument_list|()
block|{
specifier|public
name|Constructor
argument_list|<
name|T
argument_list|>
name|run
parameter_list|()
block|{
try|try
block|{
return|return
name|cls
operator|.
name|getConstructor
argument_list|(
name|args
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|SecurityException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
argument_list|)
return|;
block|}
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Constructor
argument_list|<
name|T
argument_list|>
index|[]
name|getDeclaredConstructors
parameter_list|(
specifier|final
name|Class
argument_list|<
name|T
argument_list|>
name|cls
parameter_list|)
block|{
return|return
name|AccessController
operator|.
name|doPrivileged
argument_list|(
operator|new
name|PrivilegedAction
argument_list|<
name|Constructor
argument_list|<
name|T
argument_list|>
index|[]
argument_list|>
argument_list|()
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|Constructor
argument_list|<
name|T
argument_list|>
index|[]
name|run
parameter_list|()
block|{
try|try
block|{
return|return
operator|(
name|Constructor
argument_list|<
name|T
argument_list|>
index|[]
operator|)
name|cls
operator|.
name|getDeclaredConstructors
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|SecurityException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Method
index|[]
name|getDeclaredMethods
parameter_list|(
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|cls
parameter_list|)
block|{
return|return
name|AccessController
operator|.
name|doPrivileged
argument_list|(
operator|new
name|PrivilegedAction
argument_list|<
name|Method
index|[]
argument_list|>
argument_list|()
block|{
specifier|public
name|Method
index|[]
name|run
parameter_list|()
block|{
return|return
name|cls
operator|.
name|getDeclaredMethods
argument_list|()
return|;
block|}
block|}
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Method
name|getDeclaredMethod
parameter_list|(
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|,
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
modifier|...
name|parameterTypes
parameter_list|)
throws|throws
name|NoSuchMethodException
block|{
try|try
block|{
return|return
name|AccessController
operator|.
name|doPrivileged
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Method
argument_list|>
argument_list|()
block|{
specifier|public
name|Method
name|run
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|clazz
operator|.
name|getDeclaredMethod
argument_list|(
name|name
argument_list|,
name|parameterTypes
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|PrivilegedActionException
name|pae
parameter_list|)
block|{
name|Exception
name|e
init|=
name|pae
operator|.
name|getException
argument_list|()
decl_stmt|;
if|if
condition|(
name|e
operator|instanceof
name|NoSuchMethodException
condition|)
block|{
throw|throw
operator|(
name|NoSuchMethodException
operator|)
name|e
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|SecurityException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
specifier|public
specifier|static
name|Method
name|getMethod
parameter_list|(
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|,
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
modifier|...
name|parameterTypes
parameter_list|)
throws|throws
name|NoSuchMethodException
block|{
try|try
block|{
return|return
name|AccessController
operator|.
name|doPrivileged
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Method
argument_list|>
argument_list|()
block|{
specifier|public
name|Method
name|run
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|clazz
operator|.
name|getMethod
argument_list|(
name|name
argument_list|,
name|parameterTypes
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|PrivilegedActionException
name|pae
parameter_list|)
block|{
name|Exception
name|e
init|=
name|pae
operator|.
name|getException
argument_list|()
decl_stmt|;
if|if
condition|(
name|e
operator|instanceof
name|NoSuchMethodException
condition|)
block|{
throw|throw
operator|(
name|NoSuchMethodException
operator|)
name|e
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|SecurityException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
specifier|public
specifier|static
name|Field
index|[]
name|getDeclaredFields
parameter_list|(
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|cls
parameter_list|)
block|{
return|return
name|AccessController
operator|.
name|doPrivileged
argument_list|(
operator|new
name|PrivilegedAction
argument_list|<
name|Field
index|[]
argument_list|>
argument_list|()
block|{
specifier|public
name|Field
index|[]
name|run
parameter_list|()
block|{
return|return
name|cls
operator|.
name|getDeclaredFields
argument_list|()
return|;
block|}
block|}
argument_list|)
return|;
block|}
specifier|public
specifier|static
parameter_list|<
name|T
extends|extends
name|AccessibleObject
parameter_list|>
name|T
name|setAccessible
parameter_list|(
specifier|final
name|T
name|o
parameter_list|)
block|{
return|return
name|AccessController
operator|.
name|doPrivileged
argument_list|(
operator|new
name|PrivilegedAction
argument_list|<
name|T
argument_list|>
argument_list|()
block|{
specifier|public
name|T
name|run
parameter_list|()
block|{
name|o
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|o
return|;
block|}
block|}
argument_list|)
return|;
block|}
specifier|public
specifier|static
parameter_list|<
name|T
extends|extends
name|AccessibleObject
parameter_list|>
name|T
name|setAccessible
parameter_list|(
specifier|final
name|T
name|o
parameter_list|,
specifier|final
name|boolean
name|b
parameter_list|)
block|{
return|return
name|AccessController
operator|.
name|doPrivileged
argument_list|(
operator|new
name|PrivilegedAction
argument_list|<
name|T
argument_list|>
argument_list|()
block|{
specifier|public
name|T
name|run
parameter_list|()
block|{
name|o
operator|.
name|setAccessible
argument_list|(
name|b
argument_list|)
expr_stmt|;
return|return
name|o
return|;
block|}
block|}
argument_list|)
return|;
block|}
comment|/**      *  create own array of property descriptors to:      *<pre>      *  - prevent memory leaks by Introspector's cache      *  - get correct type for generic properties from superclass      *     that are limited to a specific type in beanClass      *    see http://bugs.sun.com/view_bug.do?bug_id=6528714      *   we cannot use BeanUtils.getPropertyDescriptors because of issue SPR-6063      *</pre>      * @param refClass calling class for class loading.      * @param beanInfo Bean in question      * @param beanClass class for bean in question      * @param propertyDescriptors raw descriptors      */
specifier|public
specifier|static
name|PropertyDescriptor
index|[]
name|getPropertyDescriptorsAvoidSunBug
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|refClass
parameter_list|,
name|BeanInfo
name|beanInfo
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|beanClass
parameter_list|,
name|PropertyDescriptor
index|[]
name|propertyDescriptors
parameter_list|)
block|{
if|if
condition|(
operator|!
name|springChecked
condition|)
block|{
try|try
block|{
name|springChecked
operator|=
literal|true
expr_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|cls
init|=
name|ClassLoaderUtils
operator|.
name|loadClass
argument_list|(
literal|"org.springframework.beans.BeanUtils"
argument_list|,
name|refClass
argument_list|)
decl_stmt|;
name|springBeanUtilsDescriptorFetcher
operator|=
name|cls
operator|.
name|getMethod
argument_list|(
literal|"getPropertyDescriptor"
argument_list|,
operator|new
name|Class
index|[]
block|{
name|Class
operator|.
name|class
block|,
name|String
operator|.
name|class
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|//ignore - just assume it's an unsupported/unknown annotation
block|}
block|}
if|if
condition|(
name|springBeanUtilsDescriptorFetcher
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|propertyDescriptors
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|PropertyDescriptor
argument_list|>
name|descriptors
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|propertyDescriptors
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|propertyDescriptors
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|PropertyDescriptor
name|propertyDescriptor
init|=
name|propertyDescriptors
index|[
name|i
index|]
decl_stmt|;
try|try
block|{
name|propertyDescriptor
operator|=
operator|(
name|PropertyDescriptor
operator|)
name|springBeanUtilsDescriptorFetcher
operator|.
name|invoke
argument_list|(
literal|null
argument_list|,
name|beanClass
argument_list|,
name|propertyDescriptor
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|propertyDescriptor
operator|!=
literal|null
condition|)
block|{
name|descriptors
operator|.
name|add
argument_list|(
name|propertyDescriptor
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InvocationTargetException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
throw|;
block|}
block|}
return|return
name|descriptors
operator|.
name|toArray
argument_list|(
operator|new
name|PropertyDescriptor
index|[
name|descriptors
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
else|else
block|{
return|return
name|beanInfo
operator|.
name|getPropertyDescriptors
argument_list|()
return|;
block|}
block|}
comment|/**      * Look for a specified annotation on a method. If there, return it. If not, search it's containing class.      * Assume that the annotation is marked @Inherited.      *      * @param m method to examine      * @param annotationType the annotation type to look for.      */
specifier|public
specifier|static
parameter_list|<
name|T
extends|extends
name|Annotation
parameter_list|>
name|T
name|getAnnotationForMethodOrContainingClass
parameter_list|(
name|Method
name|m
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|annotationType
parameter_list|)
block|{
name|T
name|annotation
init|=
name|m
operator|.
name|getAnnotation
argument_list|(
name|annotationType
argument_list|)
decl_stmt|;
if|if
condition|(
name|annotation
operator|!=
literal|null
condition|)
block|{
return|return
name|annotation
return|;
block|}
return|return
name|m
operator|.
name|getDeclaringClass
argument_list|()
operator|.
name|getAnnotation
argument_list|(
name|annotationType
argument_list|)
return|;
block|}
block|}
end_class

end_unit

