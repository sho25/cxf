begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NoSuchElementException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_comment
comment|/**  * This class implements most of the<tt>Set</tt> interface, backed by a  * sorted Array.  This makes iterators very fast, lookups are log(n), but  * adds are fairly expensive.  *  * This class is also threadsafe, but without synchronizations.   Lookups  * and iterators will iterate over the state of the Set when the iterator  * was created.  *  * If no data is stored in the Set, it uses very little memory.  The backing  * array is created on demand.  *  * This class is primarly useful for stuff that will be setup at startup, but  * then iterated over MANY times during runtime.  *  * @param<T>  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|SortedArraySet
parameter_list|<
name|T
parameter_list|>
implements|implements
name|SortedSet
argument_list|<
name|T
argument_list|>
block|{
specifier|final
name|AtomicReference
argument_list|<
name|T
index|[]
argument_list|>
name|data
init|=
operator|new
name|AtomicReference
argument_list|<
name|T
index|[]
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|data
operator|.
name|set
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
name|T
index|[]
name|tmp
init|=
name|data
operator|.
name|get
argument_list|()
decl_stmt|;
return|return
name|tmp
operator|==
literal|null
operator|||
name|tmp
operator|.
name|length
operator|==
literal|0
return|;
block|}
specifier|public
name|Iterator
argument_list|<
name|T
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
operator|new
name|SASIterator
argument_list|<
name|T
argument_list|>
argument_list|(
name|data
operator|.
name|get
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|int
name|size
parameter_list|()
block|{
name|T
index|[]
name|tmp
init|=
name|data
operator|.
name|get
argument_list|()
decl_stmt|;
return|return
name|tmp
operator|==
literal|null
condition|?
literal|0
else|:
name|tmp
operator|.
name|length
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
name|T
index|[]
name|newArray
parameter_list|(
name|int
name|size
parameter_list|)
block|{
return|return
operator|(
name|T
index|[]
operator|)
operator|new
name|Object
index|[
name|size
index|]
return|;
block|}
specifier|public
name|boolean
name|add
parameter_list|(
name|T
name|o
parameter_list|)
block|{
if|if
condition|(
operator|!
name|contains
argument_list|(
name|o
argument_list|)
condition|)
block|{
name|T
index|[]
name|tmp
init|=
name|data
operator|.
name|get
argument_list|()
decl_stmt|;
name|T
index|[]
name|tmp2
decl_stmt|;
if|if
condition|(
name|tmp
operator|==
literal|null
condition|)
block|{
name|tmp2
operator|=
name|newArray
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|tmp2
index|[
literal|0
index|]
operator|=
name|o
expr_stmt|;
block|}
else|else
block|{
name|tmp2
operator|=
name|newArray
argument_list|(
name|tmp
operator|.
name|length
operator|+
literal|1
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|tmp
argument_list|,
literal|0
argument_list|,
name|tmp2
argument_list|,
literal|0
argument_list|,
name|tmp
operator|.
name|length
argument_list|)
expr_stmt|;
name|tmp2
index|[
name|tmp2
operator|.
name|length
operator|-
literal|1
index|]
operator|=
name|o
expr_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|tmp2
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|data
operator|.
name|compareAndSet
argument_list|(
name|tmp
argument_list|,
name|tmp2
argument_list|)
condition|)
block|{
return|return
name|add
argument_list|(
name|o
argument_list|)
return|;
block|}
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|addAll
parameter_list|(
name|Collection
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|c
parameter_list|)
block|{
name|boolean
name|val
init|=
literal|false
decl_stmt|;
for|for
control|(
name|T
name|t
range|:
name|c
control|)
block|{
name|val
operator||=
name|add
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
return|return
name|val
return|;
block|}
specifier|public
name|boolean
name|containsAll
parameter_list|(
name|Collection
argument_list|<
name|?
argument_list|>
name|c
parameter_list|)
block|{
name|boolean
name|val
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Object
name|t
range|:
name|c
control|)
block|{
name|val
operator||=
name|contains
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
return|return
name|val
return|;
block|}
specifier|public
name|boolean
name|contains
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
name|T
index|[]
name|tmp
init|=
name|data
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|tmp
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|Arrays
operator|.
name|binarySearch
argument_list|(
name|tmp
argument_list|,
name|o
argument_list|)
operator|>=
literal|0
return|;
block|}
specifier|public
name|boolean
name|removeAll
parameter_list|(
name|Collection
argument_list|<
name|?
argument_list|>
name|c
parameter_list|)
block|{
name|boolean
name|val
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Object
name|t
range|:
name|c
control|)
block|{
name|val
operator||=
name|remove
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
return|return
name|val
return|;
block|}
specifier|public
name|boolean
name|retainAll
parameter_list|(
name|Collection
argument_list|<
name|?
argument_list|>
name|c
parameter_list|)
block|{
name|boolean
name|val
init|=
literal|false
decl_stmt|;
for|for
control|(
name|T
name|t
range|:
name|this
control|)
block|{
if|if
condition|(
operator|!
name|c
operator|.
name|contains
argument_list|(
name|t
argument_list|)
condition|)
block|{
name|val
operator||=
name|remove
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|val
return|;
block|}
specifier|public
name|boolean
name|remove
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
name|T
index|[]
name|tmp
init|=
name|data
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|tmp
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|int
name|idx
init|=
name|Arrays
operator|.
name|binarySearch
argument_list|(
name|tmp
argument_list|,
name|o
argument_list|)
decl_stmt|;
if|if
condition|(
name|idx
operator|!=
operator|-
literal|1
condition|)
block|{
if|if
condition|(
name|tmp
operator|.
name|length
operator|==
literal|1
operator|&&
operator|!
name|data
operator|.
name|compareAndSet
argument_list|(
name|tmp
argument_list|,
literal|null
argument_list|)
condition|)
block|{
return|return
name|remove
argument_list|(
name|o
argument_list|)
return|;
block|}
name|T
index|[]
name|tmp2
init|=
name|newArray
argument_list|(
name|tmp
operator|.
name|length
operator|-
literal|1
argument_list|)
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|tmp
argument_list|,
literal|0
argument_list|,
name|tmp2
argument_list|,
literal|0
argument_list|,
name|idx
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|tmp
argument_list|,
name|idx
operator|+
literal|1
argument_list|,
name|tmp2
argument_list|,
name|idx
argument_list|,
name|tmp
operator|.
name|length
operator|-
literal|1
operator|-
name|idx
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|data
operator|.
name|compareAndSet
argument_list|(
name|tmp
argument_list|,
name|tmp2
argument_list|)
condition|)
block|{
return|return
name|remove
argument_list|(
name|o
argument_list|)
return|;
block|}
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|Object
index|[]
name|toArray
parameter_list|()
block|{
name|T
index|[]
name|tmp
init|=
name|data
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|tmp
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|Object
index|[
literal|0
index|]
return|;
block|}
name|T
index|[]
name|tmp2
init|=
name|newArray
argument_list|(
name|tmp
operator|.
name|length
argument_list|)
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|tmp
argument_list|,
literal|0
argument_list|,
name|tmp2
argument_list|,
literal|0
argument_list|,
name|tmp
operator|.
name|length
argument_list|)
expr_stmt|;
return|return
name|tmp2
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
parameter_list|<
name|X
parameter_list|>
name|X
index|[]
name|toArray
parameter_list|(
name|X
index|[]
name|a
parameter_list|)
block|{
name|T
index|[]
name|tmp
init|=
name|data
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|tmp
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|a
operator|.
name|length
operator|!=
literal|0
condition|)
block|{
return|return
operator|(
name|X
index|[]
operator|)
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Array
operator|.
name|newInstance
argument_list|(
name|a
operator|.
name|getClass
argument_list|()
operator|.
name|getComponentType
argument_list|()
argument_list|,
literal|0
argument_list|)
return|;
block|}
return|return
name|a
return|;
block|}
if|if
condition|(
name|a
operator|.
name|length
operator|<
name|tmp
operator|.
name|length
condition|)
block|{
name|a
operator|=
operator|(
name|X
index|[]
operator|)
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Array
operator|.
name|newInstance
argument_list|(
name|a
operator|.
name|getClass
argument_list|()
operator|.
name|getComponentType
argument_list|()
argument_list|,
name|tmp
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|arraycopy
argument_list|(
name|tmp
argument_list|,
literal|0
argument_list|,
name|a
argument_list|,
literal|0
argument_list|,
name|tmp
operator|.
name|length
argument_list|)
expr_stmt|;
if|if
condition|(
name|a
operator|.
name|length
operator|>
name|tmp
operator|.
name|length
condition|)
block|{
name|a
index|[
name|tmp
operator|.
name|length
index|]
operator|=
literal|null
expr_stmt|;
block|}
return|return
name|a
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|o
operator|instanceof
name|SortedArraySet
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|SortedArraySet
argument_list|<
name|T
argument_list|>
name|as
init|=
operator|(
name|SortedArraySet
argument_list|<
name|T
argument_list|>
operator|)
name|o
decl_stmt|;
return|return
name|Arrays
operator|.
name|equals
argument_list|(
name|data
operator|.
name|get
argument_list|()
argument_list|,
name|as
operator|.
name|data
operator|.
name|get
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|toString
argument_list|(
name|data
operator|.
name|get
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|hashCode
argument_list|(
name|data
operator|.
name|get
argument_list|()
argument_list|)
return|;
block|}
specifier|private
class|class
name|SASIterator
parameter_list|<
name|X
parameter_list|>
implements|implements
name|Iterator
argument_list|<
name|X
argument_list|>
block|{
specifier|final
name|X
index|[]
name|data
decl_stmt|;
name|int
name|idx
decl_stmt|;
name|SASIterator
parameter_list|(
name|X
index|[]
name|d
parameter_list|)
block|{
name|data
operator|=
name|d
expr_stmt|;
block|}
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|data
operator|!=
literal|null
operator|&&
name|idx
operator|!=
name|data
operator|.
name|length
return|;
block|}
specifier|public
name|X
name|next
parameter_list|()
block|{
if|if
condition|(
name|data
operator|==
literal|null
operator|||
name|idx
operator|==
name|data
operator|.
name|length
condition|)
block|{
throw|throw
operator|new
name|NoSuchElementException
argument_list|()
throw|;
block|}
return|return
name|data
index|[
name|idx
operator|++
index|]
return|;
block|}
specifier|public
name|void
name|remove
parameter_list|()
block|{
if|if
condition|(
name|idx
operator|>
literal|0
condition|)
block|{
name|SortedArraySet
operator|.
name|this
operator|.
name|remove
argument_list|(
name|data
index|[
name|idx
operator|-
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|Comparator
argument_list|<
name|?
super|super
name|T
argument_list|>
name|comparator
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
specifier|public
name|T
name|first
parameter_list|()
block|{
name|T
index|[]
name|tmp
init|=
name|data
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|tmp
operator|==
literal|null
operator|||
name|tmp
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|tmp
index|[
literal|0
index|]
return|;
block|}
specifier|public
name|T
name|last
parameter_list|()
block|{
name|T
index|[]
name|tmp
init|=
name|data
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|tmp
operator|==
literal|null
operator|||
name|tmp
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|tmp
index|[
name|tmp
operator|.
name|length
operator|-
literal|1
index|]
return|;
block|}
specifier|public
name|SortedSet
argument_list|<
name|T
argument_list|>
name|headSet
parameter_list|(
name|T
name|toElement
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
specifier|public
name|SortedSet
argument_list|<
name|T
argument_list|>
name|subSet
parameter_list|(
name|T
name|fromElement
parameter_list|,
name|T
name|toElement
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
specifier|public
name|SortedSet
argument_list|<
name|T
argument_list|>
name|tailSet
parameter_list|(
name|T
name|fromElement
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
end_class

end_unit

