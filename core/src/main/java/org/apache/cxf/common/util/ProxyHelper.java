begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationHandler
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Proxy
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|classloader
operator|.
name|ClassLoaderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
specifier|public
class|class
name|ProxyHelper
block|{
specifier|static
specifier|final
name|ProxyHelper
name|HELPER
decl_stmt|;
static|static
block|{
name|ProxyHelper
name|theHelper
init|=
literal|null
decl_stmt|;
try|try
block|{
name|theHelper
operator|=
operator|new
name|CglibProxyHelper
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
name|theHelper
operator|=
operator|new
name|ProxyHelper
argument_list|()
expr_stmt|;
block|}
name|HELPER
operator|=
name|theHelper
expr_stmt|;
block|}
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|ProxyHelper
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
name|ProxyClassLoaderCache
name|proxyClassLoaderCache
init|=
operator|new
name|ProxyClassLoaderCache
argument_list|()
decl_stmt|;
specifier|protected
name|ProxyHelper
parameter_list|()
block|{     }
specifier|protected
name|Object
name|getProxyInternal
parameter_list|(
name|ClassLoader
name|loader
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|interfaces
parameter_list|,
name|InvocationHandler
name|handler
parameter_list|)
block|{
name|ClassLoader
name|combinedLoader
init|=
name|getClassLoaderForInterfaces
argument_list|(
name|loader
argument_list|,
name|interfaces
argument_list|)
decl_stmt|;
return|return
name|Proxy
operator|.
name|newProxyInstance
argument_list|(
name|combinedLoader
argument_list|,
name|interfaces
argument_list|,
name|handler
argument_list|)
return|;
block|}
comment|/**      * Return a classloader that can see all the given interfaces If the given loader can see all interfaces      * then it is used. If not then a combined classloader of all interface classloaders is returned.      *      * @param loader use supplied class loader      * @param interfaces      * @return classloader that sees all interfaces      */
specifier|private
name|ClassLoader
name|getClassLoaderForInterfaces
parameter_list|(
specifier|final
name|ClassLoader
name|loader
parameter_list|,
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|interfaces
parameter_list|)
block|{
if|if
condition|(
name|canSeeAllInterfaces
argument_list|(
name|loader
argument_list|,
name|interfaces
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|FINE
argument_list|,
literal|"current classloader "
operator|+
name|loader
operator|+
literal|" can see all interface"
argument_list|)
expr_stmt|;
return|return
name|loader
return|;
block|}
name|String
name|sortedNameFromInterfaceArray
init|=
name|getSortedNameFromInterfaceArray
argument_list|(
name|interfaces
argument_list|)
decl_stmt|;
name|ClassLoader
name|cachedLoader
init|=
name|proxyClassLoaderCache
operator|.
name|getProxyClassLoader
argument_list|(
name|loader
argument_list|,
name|interfaces
argument_list|)
decl_stmt|;
if|if
condition|(
name|canSeeAllInterfaces
argument_list|(
name|cachedLoader
argument_list|,
name|interfaces
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|FINE
argument_list|,
literal|"find required loader from ProxyClassLoader cache with key"
operator|+
name|sortedNameFromInterfaceArray
argument_list|)
expr_stmt|;
return|return
name|cachedLoader
return|;
block|}
else|else
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|FINE
argument_list|,
literal|"find a loader from ProxyClassLoader cache with interfaces "
operator|+
name|sortedNameFromInterfaceArray
operator|+
literal|" but can't see all interfaces"
argument_list|)
expr_stmt|;
for|for
control|(
name|Class
argument_list|<
name|?
argument_list|>
name|currentInterface
range|:
name|interfaces
control|)
block|{
name|String
name|ifName
init|=
name|currentInterface
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|ifName
operator|.
name|startsWith
argument_list|(
literal|"org.apache.cxf"
argument_list|)
operator|&&
operator|!
name|ifName
operator|.
name|startsWith
argument_list|(
literal|"java"
argument_list|)
condition|)
block|{
comment|// remove the stale ProxyClassLoader and recreate one
name|proxyClassLoaderCache
operator|.
name|removeStaleProxyClassLoader
argument_list|(
name|currentInterface
argument_list|)
expr_stmt|;
name|cachedLoader
operator|=
name|proxyClassLoaderCache
operator|.
name|getProxyClassLoader
argument_list|(
name|loader
argument_list|,
name|interfaces
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|cachedLoader
return|;
block|}
specifier|private
name|String
name|getSortedNameFromInterfaceArray
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|interfaces
parameter_list|)
block|{
name|SortedArraySet
argument_list|<
name|String
argument_list|>
name|arraySet
init|=
operator|new
name|SortedArraySet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Class
argument_list|<
name|?
argument_list|>
name|currentInterface
range|:
name|interfaces
control|)
block|{
name|arraySet
operator|.
name|add
argument_list|(
name|currentInterface
operator|.
name|getName
argument_list|()
operator|+
name|ClassLoaderUtils
operator|.
name|getClassLoaderName
argument_list|(
name|currentInterface
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|arraySet
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
name|boolean
name|canSeeAllInterfaces
parameter_list|(
name|ClassLoader
name|loader
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|interfaces
parameter_list|)
block|{
for|for
control|(
name|Class
argument_list|<
name|?
argument_list|>
name|currentInterface
range|:
name|interfaces
control|)
block|{
name|String
name|ifName
init|=
name|currentInterface
operator|.
name|getName
argument_list|()
decl_stmt|;
try|try
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|ifClass
init|=
name|Class
operator|.
name|forName
argument_list|(
name|ifName
argument_list|,
literal|true
argument_list|,
name|loader
argument_list|)
decl_stmt|;
if|if
condition|(
name|ifClass
operator|!=
name|currentInterface
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|//we need to check all the params/returns as well as the Proxy creation
comment|//will try to create methods for all of this even if they aren't used
comment|//by the client and not available in the clients classloader
for|for
control|(
name|Method
name|m
range|:
name|ifClass
operator|.
name|getMethods
argument_list|()
control|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|returnType
init|=
name|m
operator|.
name|getReturnType
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|returnType
operator|.
name|isPrimitive
argument_list|()
condition|)
block|{
name|Class
operator|.
name|forName
argument_list|(
name|returnType
operator|.
name|getName
argument_list|()
argument_list|,
literal|true
argument_list|,
name|loader
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Class
argument_list|<
name|?
argument_list|>
name|p
range|:
name|m
operator|.
name|getParameterTypes
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|p
operator|.
name|isPrimitive
argument_list|()
condition|)
block|{
name|Class
operator|.
name|forName
argument_list|(
name|p
operator|.
name|getName
argument_list|()
argument_list|,
literal|true
argument_list|,
name|loader
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|NoClassDefFoundError
decl||
name|ClassNotFoundException
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|public
specifier|static
name|Object
name|getProxy
parameter_list|(
name|ClassLoader
name|loader
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|interfaces
parameter_list|,
name|InvocationHandler
name|handler
parameter_list|)
block|{
return|return
name|HELPER
operator|.
name|getProxyInternal
argument_list|(
name|loader
argument_list|,
name|interfaces
argument_list|,
name|handler
argument_list|)
return|;
block|}
block|}
end_class

end_unit

