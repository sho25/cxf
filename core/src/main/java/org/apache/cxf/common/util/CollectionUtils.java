begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Dictionary
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_class
specifier|public
specifier|final
class|class
name|CollectionUtils
block|{
specifier|private
name|CollectionUtils
parameter_list|()
block|{      }
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Collection
argument_list|<
name|T
argument_list|>
name|diff
parameter_list|(
name|Collection
argument_list|<
name|T
argument_list|>
name|c1
parameter_list|,
name|Collection
argument_list|<
name|T
argument_list|>
name|c2
parameter_list|)
block|{
if|if
condition|(
name|c1
operator|==
literal|null
operator|||
name|c1
operator|.
name|isEmpty
argument_list|()
operator|||
name|c2
operator|==
literal|null
operator|||
name|c2
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|c1
return|;
block|}
name|Collection
argument_list|<
name|T
argument_list|>
name|difference
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|T
name|item
range|:
name|c1
control|)
block|{
if|if
condition|(
operator|!
name|c2
operator|.
name|contains
argument_list|(
name|item
argument_list|)
condition|)
block|{
name|difference
operator|.
name|add
argument_list|(
name|item
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|difference
return|;
block|}
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|boolean
name|isEmpty
parameter_list|(
name|Collection
argument_list|<
name|T
argument_list|>
name|c
parameter_list|)
block|{
if|if
condition|(
name|c
operator|!=
literal|null
operator|&&
operator|!
name|c
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|T
name|item
range|:
name|c
control|)
block|{
if|if
condition|(
name|item
operator|!=
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|public
specifier|static
parameter_list|<
name|S
parameter_list|,
name|T
parameter_list|>
name|Dictionary
argument_list|<
name|S
argument_list|,
name|T
argument_list|>
name|singletonDictionary
parameter_list|(
name|S
name|s
parameter_list|,
name|T
name|t
parameter_list|)
block|{
return|return
name|toDictionary
argument_list|(
name|Collections
operator|.
name|singletonMap
argument_list|(
name|s
argument_list|,
name|t
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
parameter_list|<
name|S
parameter_list|,
name|T
parameter_list|>
name|Dictionary
argument_list|<
name|S
argument_list|,
name|T
argument_list|>
name|toDictionary
parameter_list|(
name|Map
argument_list|<
name|S
argument_list|,
name|T
argument_list|>
name|map
parameter_list|)
block|{
return|return
operator|new
name|MapToDictionary
argument_list|<
name|S
argument_list|,
name|T
argument_list|>
argument_list|(
name|map
argument_list|)
return|;
block|}
specifier|static
class|class
name|MapToDictionary
parameter_list|<
name|S
parameter_list|,
name|T
parameter_list|>
extends|extends
name|Dictionary
argument_list|<
name|S
argument_list|,
name|T
argument_list|>
block|{
comment|/**          * Map source.          **/
specifier|private
specifier|final
name|Map
argument_list|<
name|S
argument_list|,
name|T
argument_list|>
name|map
decl_stmt|;
name|MapToDictionary
parameter_list|(
name|Map
argument_list|<
name|S
argument_list|,
name|T
argument_list|>
name|map
parameter_list|)
block|{
name|this
operator|.
name|map
operator|=
name|map
expr_stmt|;
block|}
specifier|public
name|Enumeration
argument_list|<
name|T
argument_list|>
name|elements
parameter_list|()
block|{
return|return
name|map
operator|!=
literal|null
condition|?
operator|new
name|IteratorToEnumeration
argument_list|<
name|T
argument_list|>
argument_list|(
name|map
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
argument_list|)
else|:
literal|null
return|;
block|}
specifier|public
name|T
name|get
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
return|return
name|map
operator|!=
literal|null
condition|?
name|map
operator|.
name|get
argument_list|(
name|key
argument_list|)
else|:
literal|null
return|;
block|}
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
name|map
operator|!=
literal|null
condition|?
name|map
operator|.
name|isEmpty
argument_list|()
else|:
literal|true
return|;
block|}
specifier|public
name|Enumeration
argument_list|<
name|S
argument_list|>
name|keys
parameter_list|()
block|{
return|return
name|map
operator|!=
literal|null
condition|?
operator|new
name|IteratorToEnumeration
argument_list|<
name|S
argument_list|>
argument_list|(
name|map
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
argument_list|)
else|:
literal|null
return|;
block|}
specifier|public
name|T
name|put
parameter_list|(
name|S
name|key
parameter_list|,
name|T
name|value
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
specifier|public
name|T
name|remove
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|map
operator|!=
literal|null
condition|?
name|map
operator|.
name|size
argument_list|()
else|:
literal|0
return|;
block|}
specifier|static
class|class
name|IteratorToEnumeration
parameter_list|<
name|X
parameter_list|>
implements|implements
name|Enumeration
argument_list|<
name|X
argument_list|>
block|{
specifier|private
specifier|final
name|Iterator
argument_list|<
name|X
argument_list|>
name|iter
decl_stmt|;
name|IteratorToEnumeration
parameter_list|(
name|Iterator
argument_list|<
name|X
argument_list|>
name|iter
parameter_list|)
block|{
name|this
operator|.
name|iter
operator|=
name|iter
expr_stmt|;
block|}
specifier|public
name|boolean
name|hasMoreElements
parameter_list|()
block|{
return|return
name|iter
operator|!=
literal|null
condition|?
name|iter
operator|.
name|hasNext
argument_list|()
else|:
literal|false
return|;
block|}
specifier|public
name|X
name|nextElement
parameter_list|()
block|{
return|return
name|iter
operator|!=
literal|null
condition|?
name|iter
operator|.
name|next
argument_list|()
else|:
literal|null
return|;
block|}
block|}
block|}
block|}
end_class

end_unit

