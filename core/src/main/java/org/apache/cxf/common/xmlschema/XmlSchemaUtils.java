begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|xmlschema
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaAnnotated
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaAttributeOrGroupRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaComplexContentExtension
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaComplexType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaContentModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaElement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaEnumerationFacet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaExternal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaFacet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaImport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaParticle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaSimpleType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaSimpleTypeContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|XmlSchemaSimpleTypeRestriction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|ws
operator|.
name|commons
operator|.
name|schema
operator|.
name|constants
operator|.
name|Constants
import|;
end_import

begin_comment
comment|/**  * Some functions that avoid problems with Commons XML Schema.  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|XmlSchemaUtils
block|{
specifier|public
specifier|static
specifier|final
name|String
name|XSI_NIL
init|=
literal|"xsi:nil='true'"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|XmlSchemaUtils
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|XmlSchemaUtils
parameter_list|()
block|{     }
comment|/**      * Wrapper around XmlSchemaElement.setRefName that checks for inconsistency with      * name and QName.      * @param element      * @param name      */
specifier|public
specifier|static
name|void
name|setElementRefName
parameter_list|(
name|XmlSchemaElement
name|element
parameter_list|,
name|QName
name|name
parameter_list|)
block|{
if|if
condition|(
name|name
operator|!=
literal|null
operator|&&
operator|(
operator|(
name|element
operator|.
name|getQName
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|element
operator|.
name|getQName
argument_list|()
operator|.
name|equals
argument_list|(
name|name
argument_list|)
operator|)
operator|||
operator|(
name|element
operator|.
name|getName
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|element
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|name
operator|.
name|getLocalPart
argument_list|()
argument_list|)
operator|)
operator|)
condition|)
block|{
name|LOG
operator|.
name|severe
argument_list|(
literal|"Attempt to set the refName of an element with a name or QName"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|XmlSchemaInvalidOperation
argument_list|(
literal|"Attempt to set the refName of an element "
operator|+
literal|"with a name or QName."
argument_list|)
throw|;
block|}
name|element
operator|.
name|getRef
argument_list|()
operator|.
name|setTargetQName
argument_list|(
name|name
argument_list|)
expr_stmt|;
comment|// cxf conventionally keeps something in the name slot.
block|}
comment|/**      * Return true if a simple type is a straightforward XML Schema representation of an enumeration.      * If we discover schemas that are 'enum-like' with more complex structures, we might      * make this deal with them.      * @param type Simple type, possible an enumeration.      * @return true for an enumeration.      */
specifier|public
specifier|static
name|boolean
name|isEumeration
parameter_list|(
name|XmlSchemaSimpleType
name|type
parameter_list|)
block|{
name|XmlSchemaSimpleTypeContent
name|content
init|=
name|type
operator|.
name|getContent
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|content
operator|instanceof
name|XmlSchemaSimpleTypeRestriction
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|XmlSchemaSimpleTypeRestriction
name|restriction
init|=
operator|(
name|XmlSchemaSimpleTypeRestriction
operator|)
name|content
decl_stmt|;
name|List
argument_list|<
name|XmlSchemaFacet
argument_list|>
name|facets
init|=
name|restriction
operator|.
name|getFacets
argument_list|()
decl_stmt|;
for|for
control|(
name|XmlSchemaFacet
name|facet
range|:
name|facets
control|)
block|{
if|if
condition|(
operator|!
operator|(
name|facet
operator|instanceof
name|XmlSchemaEnumerationFacet
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
comment|/**      * Retrieve the string values for an enumeration.      * @param type      */
specifier|public
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|enumeratorValues
parameter_list|(
name|XmlSchemaSimpleType
name|type
parameter_list|)
block|{
name|XmlSchemaSimpleTypeContent
name|content
init|=
name|type
operator|.
name|getContent
argument_list|()
decl_stmt|;
name|XmlSchemaSimpleTypeRestriction
name|restriction
init|=
operator|(
name|XmlSchemaSimpleTypeRestriction
operator|)
name|content
decl_stmt|;
name|List
argument_list|<
name|XmlSchemaFacet
argument_list|>
name|facets
init|=
name|restriction
operator|.
name|getFacets
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|values
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|XmlSchemaFacet
name|facet
range|:
name|facets
control|)
block|{
name|XmlSchemaEnumerationFacet
name|enumFacet
init|=
operator|(
name|XmlSchemaEnumerationFacet
operator|)
name|facet
decl_stmt|;
name|values
operator|.
name|add
argument_list|(
name|enumFacet
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|values
return|;
block|}
comment|/**      * Is there an import for a particular namespace in a schema?      * @param schema      * @param namespaceUri      */
specifier|public
specifier|static
name|boolean
name|schemaImportsNamespace
parameter_list|(
name|XmlSchema
name|schema
parameter_list|,
name|String
name|namespaceUri
parameter_list|)
block|{
name|List
argument_list|<
name|XmlSchemaExternal
argument_list|>
name|externals
init|=
name|schema
operator|.
name|getExternals
argument_list|()
decl_stmt|;
for|for
control|(
name|XmlSchemaExternal
name|what
range|:
name|externals
control|)
block|{
if|if
condition|(
name|what
operator|instanceof
name|XmlSchemaImport
condition|)
block|{
name|XmlSchemaImport
name|imp
init|=
operator|(
name|XmlSchemaImport
operator|)
name|what
decl_stmt|;
comment|// already there.
if|if
condition|(
name|namespaceUri
operator|.
name|equals
argument_list|(
name|imp
operator|.
name|getNamespace
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**      * Assist in managing the required<import namespace='uri'> for imports of peer schemas.      * @param schema      * @param namespaceUri      */
specifier|public
specifier|static
name|void
name|addImportIfNeeded
parameter_list|(
name|XmlSchema
name|schema
parameter_list|,
name|String
name|namespaceUri
parameter_list|)
block|{
comment|// no need to import nothing or the XSD schema, or the schema we are fixing.
if|if
condition|(
literal|""
operator|.
name|equals
argument_list|(
name|namespaceUri
argument_list|)
operator|||
name|Constants
operator|.
name|URI_2001_SCHEMA_XSD
operator|.
name|equals
argument_list|(
name|namespaceUri
argument_list|)
operator|||
name|schema
operator|.
name|getTargetNamespace
argument_list|()
operator|.
name|equals
argument_list|(
name|namespaceUri
argument_list|)
condition|)
block|{
return|return;
block|}
name|List
argument_list|<
name|XmlSchemaExternal
argument_list|>
name|externals
init|=
name|schema
operator|.
name|getExternals
argument_list|()
decl_stmt|;
for|for
control|(
name|XmlSchemaExternal
name|what
range|:
name|externals
control|)
block|{
if|if
condition|(
name|what
operator|instanceof
name|XmlSchemaImport
condition|)
block|{
name|XmlSchemaImport
name|imp
init|=
operator|(
name|XmlSchemaImport
operator|)
name|what
decl_stmt|;
comment|// already there.
if|if
condition|(
name|namespaceUri
operator|.
name|equals
argument_list|(
name|imp
operator|.
name|getNamespace
argument_list|()
argument_list|)
condition|)
block|{
return|return;
block|}
block|}
block|}
name|XmlSchemaImport
name|imp
init|=
operator|new
name|XmlSchemaImport
argument_list|(
name|schema
argument_list|)
decl_stmt|;
name|imp
operator|.
name|setNamespace
argument_list|(
name|namespaceUri
argument_list|)
expr_stmt|;
block|}
comment|/**      * For convenience, start from a qname, and add the import if it is non-null      * and has a namespace.      * @see #addImportIfNeeded(XmlSchema, String)      * @param schema      * @param qname      */
specifier|public
specifier|static
name|void
name|addImportIfNeeded
parameter_list|(
name|XmlSchema
name|schema
parameter_list|,
name|QName
name|qname
parameter_list|)
block|{
if|if
condition|(
name|qname
operator|==
literal|null
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|qname
operator|.
name|getNamespaceURI
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|addImportIfNeeded
argument_list|(
name|schema
argument_list|,
name|qname
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * This copes with an observed phenomenon in the schema built by the      * ReflectionServiceFactoryBean. It is creating element such that: (a) the      * type is not set. (b) the refName is set. (c) the namespaceURI in the      * refName is set empty. This apparently indicates 'same Schema' to everyone      * else, so thus function implements that convention here. It is unclear if      * that is a correct structure, and it if changes, we can simplify or      * eliminate this function.      *      * @param name      * @param referencingURI      */
specifier|public
specifier|static
name|XmlSchemaElement
name|findElementByRefName
parameter_list|(
name|SchemaCollection
name|xmlSchemaCollection
parameter_list|,
name|QName
name|name
parameter_list|,
name|String
name|referencingURI
parameter_list|)
block|{
name|String
name|uri
init|=
name|name
operator|.
name|getNamespaceURI
argument_list|()
decl_stmt|;
if|if
condition|(
literal|""
operator|.
name|equals
argument_list|(
name|uri
argument_list|)
condition|)
block|{
name|uri
operator|=
name|referencingURI
expr_stmt|;
block|}
name|QName
name|copyName
init|=
operator|new
name|QName
argument_list|(
name|uri
argument_list|,
name|name
operator|.
name|getLocalPart
argument_list|()
argument_list|)
decl_stmt|;
name|XmlSchemaElement
name|target
init|=
name|xmlSchemaCollection
operator|.
name|getElementByQName
argument_list|(
name|copyName
argument_list|)
decl_stmt|;
assert|assert
name|target
operator|!=
literal|null
assert|;
return|return
name|target
return|;
block|}
specifier|public
specifier|static
name|QName
name|getBaseType
parameter_list|(
name|XmlSchemaComplexType
name|type
parameter_list|)
block|{
name|XmlSchemaContentModel
name|model
init|=
name|type
operator|.
name|getContentModel
argument_list|()
decl_stmt|;
if|if
condition|(
name|model
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|XmlSchemaContent
name|content
init|=
name|model
operator|.
name|getContent
argument_list|()
decl_stmt|;
if|if
condition|(
name|content
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
operator|!
operator|(
name|content
operator|instanceof
name|XmlSchemaComplexContentExtension
operator|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|XmlSchemaComplexContentExtension
name|ext
init|=
operator|(
name|XmlSchemaComplexContentExtension
operator|)
name|content
decl_stmt|;
return|return
name|ext
operator|.
name|getBaseTypeName
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|List
argument_list|<
name|XmlSchemaAttributeOrGroupRef
argument_list|>
name|getContentAttributes
parameter_list|(
name|XmlSchemaComplexType
name|type
parameter_list|)
block|{
name|XmlSchemaContentModel
name|model
init|=
name|type
operator|.
name|getContentModel
argument_list|()
decl_stmt|;
if|if
condition|(
name|model
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|XmlSchemaContent
name|content
init|=
name|model
operator|.
name|getContent
argument_list|()
decl_stmt|;
if|if
condition|(
name|content
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
operator|!
operator|(
name|content
operator|instanceof
name|XmlSchemaComplexContentExtension
operator|)
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|//TODO: the anyAttribute case.
name|XmlSchemaComplexContentExtension
name|ext
init|=
operator|(
name|XmlSchemaComplexContentExtension
operator|)
name|content
decl_stmt|;
return|return
name|ext
operator|.
name|getAttributes
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|List
argument_list|<
name|XmlSchemaAnnotated
argument_list|>
name|getContentAttributes
parameter_list|(
name|XmlSchemaComplexType
name|type
parameter_list|,
name|SchemaCollection
name|collection
parameter_list|)
block|{
name|List
argument_list|<
name|XmlSchemaAnnotated
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<
name|XmlSchemaAnnotated
argument_list|>
argument_list|()
decl_stmt|;
name|QName
name|baseTypeName
init|=
name|getBaseType
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|baseTypeName
operator|!=
literal|null
condition|)
block|{
name|XmlSchemaComplexType
name|baseType
init|=
operator|(
name|XmlSchemaComplexType
operator|)
name|collection
operator|.
name|getTypeByQName
argument_list|(
name|baseTypeName
argument_list|)
decl_stmt|;
comment|// recurse onto the base type ...
name|results
operator|.
name|addAll
argument_list|(
name|getContentAttributes
argument_list|(
name|baseType
argument_list|,
name|collection
argument_list|)
argument_list|)
expr_stmt|;
comment|// and now process our sequence.
name|List
argument_list|<
name|XmlSchemaAttributeOrGroupRef
argument_list|>
name|extAttrs
init|=
name|getContentAttributes
argument_list|(
name|type
argument_list|)
decl_stmt|;
name|results
operator|.
name|addAll
argument_list|(
name|extAttrs
argument_list|)
expr_stmt|;
return|return
name|results
return|;
block|}
else|else
block|{
comment|// no base type, the simple case.
name|List
argument_list|<
name|XmlSchemaAttributeOrGroupRef
argument_list|>
name|attrs
init|=
name|type
operator|.
name|getAttributes
argument_list|()
decl_stmt|;
name|results
operator|.
name|addAll
argument_list|(
name|attrs
argument_list|)
expr_stmt|;
return|return
name|results
return|;
block|}
block|}
comment|/**      * By convention, an element that is named in its schema's TNS can have a 'name' but      * no QName. This can get inconvenient for consumers who want to think about qualified names.      * Unfortunately, XmlSchema elements, unlike types, don't store a reference to their containing      * schema.      * @param element      * @param schema      */
specifier|public
specifier|static
name|QName
name|getElementQualifiedName
parameter_list|(
name|XmlSchemaElement
name|element
parameter_list|,
name|XmlSchema
name|schema
parameter_list|)
block|{
if|if
condition|(
name|element
operator|.
name|getQName
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
name|element
operator|.
name|getQName
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|element
operator|.
name|getName
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|QName
argument_list|(
name|schema
operator|.
name|getTargetNamespace
argument_list|()
argument_list|,
name|element
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|public
specifier|static
name|boolean
name|isAttributeNameQualified
parameter_list|(
name|XmlSchemaAttribute
name|attribute
parameter_list|,
name|XmlSchema
name|schema
parameter_list|)
block|{
if|if
condition|(
name|attribute
operator|.
name|isRef
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"isElementNameQualified on element with ref="
argument_list|)
throw|;
block|}
if|if
condition|(
name|attribute
operator|.
name|getForm
argument_list|()
operator|.
name|equals
argument_list|(
name|XmlSchemaForm
operator|.
name|QUALIFIED
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|attribute
operator|.
name|getForm
argument_list|()
operator|.
name|equals
argument_list|(
name|XmlSchemaForm
operator|.
name|UNQUALIFIED
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|schema
operator|.
name|getAttributeFormDefault
argument_list|()
operator|.
name|equals
argument_list|(
name|XmlSchemaForm
operator|.
name|QUALIFIED
argument_list|)
return|;
block|}
comment|/**      * due to a bug, feature, or just plain oddity of JAXB, it isn't good enough      * to just check the form of an element and of its schema. If schema 'a'      * (default unqualified) has a complex type with an element with a ref= to      * schema (b) (default unqualified), JAXB seems to expect to see a      * qualifier, anyway.<br/> So, if the element is local to a complex type,      * all we care about is the default element form of the schema and the local      * form of the element.<br/> If, on the other hand, the element is global,      * we might need to compare namespaces.<br/>      *      * @param attribute the attribute      * @param global if this element is a global element (complex type ref= to      *                it, or in a part)      * @param localSchema the schema of the complex type containing the      *                reference, only used for the 'odd case'.      * @param attributeSchema the schema for the element.      * @return if the element needs to be qualified.      */
specifier|public
specifier|static
name|boolean
name|isAttributeQualified
parameter_list|(
name|XmlSchemaAttribute
name|attribute
parameter_list|,
name|boolean
name|global
parameter_list|,
name|XmlSchema
name|localSchema
parameter_list|,
name|XmlSchema
name|attributeSchema
parameter_list|)
block|{
if|if
condition|(
name|attribute
operator|.
name|getQName
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"getSchemaQualifier on anonymous element."
argument_list|)
throw|;
block|}
if|if
condition|(
name|attribute
operator|.
name|isRef
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"getSchemaQualified on the 'from' side of ref=."
argument_list|)
throw|;
block|}
if|if
condition|(
name|global
condition|)
block|{
return|return
name|isAttributeNameQualified
argument_list|(
name|attribute
argument_list|,
name|attributeSchema
argument_list|)
operator|||
operator|(
name|localSchema
operator|!=
literal|null
operator|&&
operator|!
operator|(
name|attribute
operator|.
name|getQName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
operator|.
name|equals
argument_list|(
name|localSchema
operator|.
name|getTargetNamespace
argument_list|()
argument_list|)
operator|)
operator|)
return|;
block|}
else|else
block|{
return|return
name|isAttributeNameQualified
argument_list|(
name|attribute
argument_list|,
name|attributeSchema
argument_list|)
return|;
block|}
block|}
specifier|public
specifier|static
name|boolean
name|isElementNameQualified
parameter_list|(
name|XmlSchemaElement
name|element
parameter_list|,
name|XmlSchema
name|schema
parameter_list|)
block|{
if|if
condition|(
name|element
operator|.
name|isRef
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"isElementNameQualified on element with ref="
argument_list|)
throw|;
block|}
if|if
condition|(
name|element
operator|.
name|getForm
argument_list|()
operator|.
name|equals
argument_list|(
name|XmlSchemaForm
operator|.
name|QUALIFIED
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|element
operator|.
name|getForm
argument_list|()
operator|.
name|equals
argument_list|(
name|XmlSchemaForm
operator|.
name|UNQUALIFIED
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|schema
operator|.
name|getElementFormDefault
argument_list|()
operator|.
name|equals
argument_list|(
name|XmlSchemaForm
operator|.
name|QUALIFIED
argument_list|)
return|;
block|}
comment|/**      * due to a bug, feature, or just plain oddity of JAXB, it isn't good enough      * to just check the form of an element and of its schema. If schema 'a'      * (default unqualified) has a complex type with an element with a ref= to      * schema (b) (default unqualified), JAXB seems to expect to see a      * qualifier, anyway.<br/> So, if the element is local to a complex type,      * all we care about is the default element form of the schema and the local      * form of the element.<br/> If, on the other hand, the element is global,      * we might need to compare namespaces.<br/>      *      * @param element the element.      * @param global if this element is a global element (complex type ref= to      *                it, or in a part)      * @param localSchema the schema of the complex type containing the      *                reference, only used for the 'odd case'.      * @param elementSchema the schema for the element.      * @return if the element needs to be qualified.      */
specifier|public
specifier|static
name|boolean
name|isElementQualified
parameter_list|(
name|XmlSchemaElement
name|element
parameter_list|,
name|boolean
name|global
parameter_list|,
name|XmlSchema
name|localSchema
parameter_list|,
name|XmlSchema
name|elementSchema
parameter_list|)
block|{
name|QName
name|qn
init|=
name|getElementQualifiedName
argument_list|(
name|element
argument_list|,
name|localSchema
argument_list|)
decl_stmt|;
if|if
condition|(
name|qn
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"isElementQualified on anonymous element."
argument_list|)
throw|;
block|}
if|if
condition|(
name|element
operator|.
name|isRef
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"isElementQualified on the 'from' side of ref=."
argument_list|)
throw|;
block|}
if|if
condition|(
name|global
condition|)
block|{
return|return
name|isElementNameQualified
argument_list|(
name|element
argument_list|,
name|elementSchema
argument_list|)
operator|||
operator|(
name|localSchema
operator|!=
literal|null
operator|&&
operator|!
operator|(
name|qn
operator|.
name|getNamespaceURI
argument_list|()
operator|.
name|equals
argument_list|(
name|localSchema
operator|.
name|getTargetNamespace
argument_list|()
argument_list|)
operator|)
operator|)
return|;
block|}
else|else
block|{
return|return
name|isElementNameQualified
argument_list|(
name|element
argument_list|,
name|elementSchema
argument_list|)
return|;
block|}
block|}
specifier|public
specifier|static
name|boolean
name|isParticleArray
parameter_list|(
name|XmlSchemaParticle
name|particle
parameter_list|)
block|{
return|return
name|particle
operator|.
name|getMaxOccurs
argument_list|()
operator|>
literal|1
return|;
block|}
specifier|public
specifier|static
name|boolean
name|isParticleOptional
parameter_list|(
name|XmlSchemaParticle
name|particle
parameter_list|)
block|{
return|return
name|particle
operator|.
name|getMinOccurs
argument_list|()
operator|==
literal|0
operator|&&
name|particle
operator|.
name|getMaxOccurs
argument_list|()
operator|==
literal|1
return|;
block|}
block|}
end_class

end_unit

