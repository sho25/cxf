begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ListIterator
import|;
end_import

begin_class
specifier|public
class|class
name|NSStack
block|{
specifier|private
specifier|static
specifier|final
name|String
name|NS_PREFIX_PREFIX
init|=
literal|"ns"
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|List
argument_list|<
name|NSDecl
argument_list|>
argument_list|>
name|stack
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
name|List
argument_list|<
name|NSDecl
argument_list|>
name|top
decl_stmt|;
specifier|private
name|int
name|size
decl_stmt|;
specifier|private
name|int
name|nsPrefixCount
init|=
literal|1
decl_stmt|;
specifier|public
specifier|synchronized
name|void
name|push
parameter_list|()
block|{
name|top
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|stack
operator|.
name|add
argument_list|(
name|top
argument_list|)
expr_stmt|;
name|size
operator|++
expr_stmt|;
block|}
comment|/**      * Leave a scope: this removes any NS declarations that were added      * in the last scope. Note that I don't bother to validate that you      * don't call popScope too many times; that's your problem.      */
specifier|public
specifier|synchronized
name|void
name|pop
parameter_list|()
block|{
name|stack
operator|.
name|remove
argument_list|(
operator|--
name|size
argument_list|)
expr_stmt|;
name|top
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|size
operator|!=
literal|0
condition|)
block|{
name|top
operator|=
name|stack
operator|.
name|get
argument_list|(
name|size
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Add a new declaration to the current scope. This is visible within      * the current scope as well as from any nested scopes.      *      * @param prefix the prefix to be used for this namespace      * @param uri the namespace name of this namespace.      */
specifier|public
specifier|synchronized
name|void
name|add
parameter_list|(
name|String
name|prefix
parameter_list|,
name|String
name|uri
parameter_list|)
block|{
name|top
operator|.
name|add
argument_list|(
operator|new
name|NSDecl
argument_list|(
name|prefix
argument_list|,
name|uri
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Add a new declaration to the current scope using a unique prefix      * and return the prefix. This is useful when one just wants to add a      * decl and doesn't want to have to deal with creating unique prefixes.      * If the namespace name is already declared and in scope, then the      * previously declared prefix is returned.      *      * @param uri the namespace name of this namespace      * @return the unique prefix created or previously declared      *         for this namespace      */
specifier|public
specifier|synchronized
name|String
name|add
parameter_list|(
name|String
name|uri
parameter_list|)
block|{
name|String
name|uniquePrefix
init|=
name|getPrefix
argument_list|(
name|uri
argument_list|)
decl_stmt|;
if|if
condition|(
name|uniquePrefix
operator|==
literal|null
condition|)
block|{
do|do
block|{
name|uniquePrefix
operator|=
name|NS_PREFIX_PREFIX
operator|+
name|nsPrefixCount
operator|++
expr_stmt|;
block|}
do|while
condition|(
name|getURI
argument_list|(
name|uniquePrefix
argument_list|)
operator|!=
literal|null
condition|)
do|;
name|add
argument_list|(
name|uniquePrefix
argument_list|,
name|uri
argument_list|)
expr_stmt|;
block|}
return|return
name|uniquePrefix
return|;
block|}
comment|/**      * Return the prefix associated with the given namespace name by      * looking thru all the namespace declarations that are in scope.      *      * @param uri the namespace name for whom a declared prefix is desired      * @return the prefix or null if namespace name not found      */
specifier|public
specifier|synchronized
name|String
name|getPrefix
parameter_list|(
name|String
name|uri
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
name|size
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
name|List
argument_list|<
name|NSDecl
argument_list|>
name|scope
init|=
name|stack
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|ListIterator
argument_list|<
name|NSDecl
argument_list|>
name|lsIterator
init|=
name|scope
operator|.
name|listIterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|lsIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|NSDecl
name|nsd
init|=
name|lsIterator
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|nsd
operator|.
name|getUri
argument_list|()
operator|.
name|equals
argument_list|(
name|uri
argument_list|)
condition|)
block|{
return|return
name|nsd
operator|.
name|getPrefix
argument_list|()
return|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Return the namespace name associated with the given prefix by      * looking thru all the namespace declarations that are in scope.      *      * @param prefix the prefix for whom a declared namespace name is desired      * @return the namespace name or null if prefix not found      */
specifier|public
specifier|synchronized
name|String
name|getURI
parameter_list|(
name|String
name|prefix
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
name|size
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
name|List
argument_list|<
name|NSDecl
argument_list|>
name|scope
init|=
name|stack
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|ListIterator
argument_list|<
name|NSDecl
argument_list|>
name|lsIterator
init|=
name|scope
operator|.
name|listIterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|lsIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|NSDecl
name|nsd
init|=
name|lsIterator
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|nsd
operator|.
name|getPrefix
argument_list|()
operator|.
name|equals
argument_list|(
name|prefix
argument_list|)
condition|)
block|{
return|return
name|nsd
operator|.
name|getUri
argument_list|()
return|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

