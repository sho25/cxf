begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|annotations
operator|.
name|SchemaValidation
operator|.
name|SchemaValidationType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|MessageUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|AbstractPropertiesHolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|BindingOperationInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|EndpointInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|OperationInfo
import|;
end_import

begin_class
specifier|public
specifier|final
class|class
name|ServiceUtils
block|{
specifier|private
name|ServiceUtils
parameter_list|()
block|{     }
comment|/**      * A short cut method to be able to test for if Schema Validation should be enabled      * for IN or OUT without having to check BOTH and IN or OUT.      *      * @param message      * @param type      */
specifier|public
specifier|static
name|boolean
name|isSchemaValidationEnabled
parameter_list|(
name|SchemaValidationType
name|type
parameter_list|,
name|Message
name|message
parameter_list|)
block|{
name|SchemaValidationType
name|validationType
init|=
name|getSchemaValidationType
argument_list|(
name|message
argument_list|)
decl_stmt|;
name|boolean
name|isRequestor
init|=
name|MessageUtils
operator|.
name|isRequestor
argument_list|(
name|message
argument_list|)
decl_stmt|;
if|if
condition|(
name|SchemaValidationType
operator|.
name|REQUEST
operator|.
name|equals
argument_list|(
name|validationType
argument_list|)
condition|)
block|{
if|if
condition|(
name|isRequestor
condition|)
block|{
name|validationType
operator|=
name|SchemaValidationType
operator|.
name|OUT
expr_stmt|;
block|}
else|else
block|{
name|validationType
operator|=
name|SchemaValidationType
operator|.
name|IN
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|SchemaValidationType
operator|.
name|RESPONSE
operator|.
name|equals
argument_list|(
name|validationType
argument_list|)
condition|)
block|{
if|if
condition|(
name|isRequestor
condition|)
block|{
name|validationType
operator|=
name|SchemaValidationType
operator|.
name|IN
expr_stmt|;
block|}
else|else
block|{
name|validationType
operator|=
name|SchemaValidationType
operator|.
name|OUT
expr_stmt|;
block|}
block|}
return|return
name|validationType
operator|.
name|equals
argument_list|(
name|type
argument_list|)
operator|||
operator|(
operator|(
name|SchemaValidationType
operator|.
name|IN
operator|.
name|equals
argument_list|(
name|type
argument_list|)
operator|||
name|SchemaValidationType
operator|.
name|OUT
operator|.
name|equals
argument_list|(
name|type
argument_list|)
operator|)
operator|&&
name|SchemaValidationType
operator|.
name|BOTH
operator|.
name|equals
argument_list|(
name|validationType
argument_list|)
operator|)
return|;
block|}
comment|/**      * A convenience method to check for schema validation config in the message context, and then in the service model.      * Does not modify the Message context (other than what is done in the getContextualProperty itself)      *      * @param message      */
specifier|public
specifier|static
name|SchemaValidationType
name|getSchemaValidationType
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
name|SchemaValidationType
name|validationType
init|=
name|getOverrideSchemaValidationType
argument_list|(
name|message
argument_list|)
decl_stmt|;
if|if
condition|(
name|validationType
operator|==
literal|null
condition|)
block|{
name|validationType
operator|=
name|getSchemaValidationTypeFromModel
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|validationType
operator|==
literal|null
condition|)
block|{
name|Object
name|obj
init|=
name|message
operator|.
name|getContextualProperty
argument_list|(
name|Message
operator|.
name|SCHEMA_VALIDATION_ENABLED
argument_list|)
decl_stmt|;
if|if
condition|(
name|obj
operator|!=
literal|null
condition|)
block|{
name|validationType
operator|=
name|getSchemaValidationType
argument_list|(
name|obj
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|validationType
operator|==
literal|null
condition|)
block|{
name|validationType
operator|=
name|SchemaValidationType
operator|.
name|NONE
expr_stmt|;
block|}
return|return
name|validationType
return|;
block|}
specifier|private
specifier|static
name|SchemaValidationType
name|getOverrideSchemaValidationType
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
name|Object
name|obj
init|=
name|message
operator|.
name|get
argument_list|(
name|Message
operator|.
name|SCHEMA_VALIDATION_ENABLED
argument_list|)
decl_stmt|;
if|if
condition|(
name|obj
operator|==
literal|null
operator|&&
name|message
operator|.
name|getExchange
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|obj
operator|=
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|get
argument_list|(
name|Message
operator|.
name|SCHEMA_VALIDATION_ENABLED
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|obj
operator|!=
literal|null
condition|)
block|{
comment|// this method will transform the legacy enabled as well
return|return
name|getSchemaValidationType
argument_list|(
name|obj
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
specifier|static
name|SchemaValidationType
name|getSchemaValidationTypeFromModel
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
name|Exchange
name|exchange
init|=
name|message
operator|.
name|getExchange
argument_list|()
decl_stmt|;
if|if
condition|(
name|exchange
operator|!=
literal|null
condition|)
block|{
name|BindingOperationInfo
name|boi
init|=
name|exchange
operator|.
name|getBindingOperationInfo
argument_list|()
decl_stmt|;
name|Endpoint
name|endpoint
init|=
name|exchange
operator|.
name|getEndpoint
argument_list|()
decl_stmt|;
if|if
condition|(
name|boi
operator|!=
literal|null
operator|&&
name|endpoint
operator|!=
literal|null
condition|)
block|{
name|SchemaValidationType
name|validationType
init|=
literal|null
decl_stmt|;
name|OperationInfo
name|opInfo
init|=
name|boi
operator|.
name|getOperationInfo
argument_list|()
decl_stmt|;
name|EndpointInfo
name|ep
init|=
name|endpoint
operator|.
name|getEndpointInfo
argument_list|()
decl_stmt|;
if|if
condition|(
name|opInfo
operator|!=
literal|null
condition|)
block|{
name|validationType
operator|=
name|getSchemaValidationTypeFromModel
argument_list|(
name|opInfo
argument_list|)
expr_stmt|;
if|if
condition|(
name|validationType
operator|==
literal|null
operator|&&
name|ep
operator|!=
literal|null
condition|)
block|{
name|validationType
operator|=
name|getSchemaValidationTypeFromModel
argument_list|(
name|ep
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|validationType
return|;
block|}
block|}
comment|// else
return|return
literal|null
return|;
block|}
specifier|private
specifier|static
name|SchemaValidationType
name|getSchemaValidationTypeFromModel
parameter_list|(
name|AbstractPropertiesHolder
name|properties
parameter_list|)
block|{
name|Object
name|obj
init|=
name|properties
operator|.
name|getProperty
argument_list|(
name|Message
operator|.
name|SCHEMA_VALIDATION_TYPE
argument_list|)
decl_stmt|;
if|if
condition|(
name|obj
operator|!=
literal|null
condition|)
block|{
return|return
name|getSchemaValidationType
argument_list|(
name|obj
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
specifier|static
name|SchemaValidationType
name|getSchemaValidationType
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|instanceof
name|SchemaValidationType
condition|)
block|{
return|return
operator|(
name|SchemaValidationType
operator|)
name|obj
return|;
block|}
elseif|else
if|if
condition|(
name|obj
operator|!=
literal|null
condition|)
block|{
name|String
name|value
init|=
name|obj
operator|.
name|toString
argument_list|()
operator|.
name|toUpperCase
argument_list|()
decl_stmt|;
comment|// handle boolean values as well
if|if
condition|(
literal|"TRUE"
operator|.
name|equals
argument_list|(
name|value
argument_list|)
condition|)
block|{
return|return
name|SchemaValidationType
operator|.
name|BOTH
return|;
block|}
elseif|else
if|if
condition|(
literal|"FALSE"
operator|.
name|equals
argument_list|(
name|value
argument_list|)
condition|)
block|{
return|return
name|SchemaValidationType
operator|.
name|NONE
return|;
block|}
elseif|else
if|if
condition|(
name|value
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
return|return
name|SchemaValidationType
operator|.
name|valueOf
argument_list|(
name|value
argument_list|)
return|;
block|}
block|}
comment|// fall through default value
return|return
name|SchemaValidationType
operator|.
name|NONE
return|;
block|}
comment|/**      * Generates a suitable service name from a given class. The returned name      * is the simple name of the class, i.e. without the package name.      *      * @param clazz the class.      * @return the name.      */
specifier|public
specifier|static
name|String
name|makeServiceNameFromClassName
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|)
block|{
name|String
name|name
init|=
name|clazz
operator|.
name|getName
argument_list|()
decl_stmt|;
name|int
name|last
init|=
name|name
operator|.
name|lastIndexOf
argument_list|(
literal|"."
argument_list|)
decl_stmt|;
if|if
condition|(
name|last
operator|!=
operator|-
literal|1
condition|)
block|{
name|name
operator|=
name|name
operator|.
name|substring
argument_list|(
name|last
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
name|int
name|inner
init|=
name|name
operator|.
name|lastIndexOf
argument_list|(
literal|"$"
argument_list|)
decl_stmt|;
if|if
condition|(
name|inner
operator|!=
operator|-
literal|1
condition|)
block|{
name|name
operator|=
name|name
operator|.
name|substring
argument_list|(
name|inner
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
name|name
return|;
block|}
specifier|public
specifier|static
name|QName
name|makeQualifiedNameFromClass
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|)
block|{
name|String
name|namespace
init|=
name|makeNamespaceFromClassName
argument_list|(
name|clazz
operator|.
name|getName
argument_list|()
argument_list|,
literal|"http"
argument_list|)
decl_stmt|;
name|String
name|localPart
init|=
name|makeServiceNameFromClassName
argument_list|(
name|clazz
argument_list|)
decl_stmt|;
return|return
operator|new
name|QName
argument_list|(
name|namespace
argument_list|,
name|localPart
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|getMethodName
parameter_list|(
name|Method
name|m
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|m
operator|.
name|getDeclaringClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|'.'
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|m
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|'('
argument_list|)
expr_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|params
init|=
name|m
operator|.
name|getParameterTypes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|params
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|param
init|=
name|params
index|[
name|i
index|]
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|param
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|<
name|params
operator|.
name|length
operator|-
literal|1
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
block|}
name|sb
operator|.
name|append
argument_list|(
literal|')'
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      * Generates the name of a XML namespace from a given class name and      * protocol. The returned namespace will take the form      *<code>protocol://domain</code>, where<code>protocol</code> is the      * given protocol, and<code>domain</code> the inversed package name of      * the given class name.<p/> For instance, if the given class name is      *<code>org.codehaus.xfire.services.Echo</code>, and the protocol is      *<code>http</code>, the resulting namespace would be      *<code>http://services.xfire.codehaus.org</code>.      *      * @param className the class name      * @param protocol the protocol (eg.<code>http</code>)      * @return the namespace      */
specifier|public
specifier|static
name|String
name|makeNamespaceFromClassName
parameter_list|(
name|String
name|className
parameter_list|,
name|String
name|protocol
parameter_list|)
block|{
name|int
name|index
init|=
name|className
operator|.
name|lastIndexOf
argument_list|(
literal|"."
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|==
operator|-
literal|1
condition|)
block|{
return|return
name|protocol
operator|+
literal|"://"
operator|+
literal|"DefaultNamespace"
return|;
block|}
name|String
name|packageName
init|=
name|className
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|index
argument_list|)
decl_stmt|;
name|StringTokenizer
name|st
init|=
operator|new
name|StringTokenizer
argument_list|(
name|packageName
argument_list|,
literal|"."
argument_list|)
decl_stmt|;
name|String
index|[]
name|words
init|=
operator|new
name|String
index|[
name|st
operator|.
name|countTokens
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|words
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|words
index|[
name|i
index|]
operator|=
name|st
operator|.
name|nextToken
argument_list|()
expr_stmt|;
block|}
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|80
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|words
operator|.
name|length
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
operator|--
name|i
control|)
block|{
name|String
name|word
init|=
name|words
index|[
name|i
index|]
decl_stmt|;
comment|// seperate with dot
if|if
condition|(
name|i
operator|!=
name|words
operator|.
name|length
operator|-
literal|1
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|'.'
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|word
argument_list|)
expr_stmt|;
block|}
return|return
name|protocol
operator|+
literal|"://"
operator|+
name|sb
operator|.
name|toString
argument_list|()
operator|+
literal|"/"
return|;
block|}
comment|/**      * Method makePackageName      *      * @param namespace      */
specifier|public
specifier|static
name|String
name|makePackageName
parameter_list|(
name|String
name|namespace
parameter_list|)
block|{
name|String
name|hostname
init|=
literal|null
decl_stmt|;
name|String
name|path
init|=
literal|""
decl_stmt|;
comment|// get the target namespace of the document
try|try
block|{
name|URL
name|u
init|=
operator|new
name|URL
argument_list|(
name|namespace
argument_list|)
decl_stmt|;
name|hostname
operator|=
name|u
operator|.
name|getHost
argument_list|()
expr_stmt|;
name|path
operator|=
name|u
operator|.
name|getPath
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|e
parameter_list|)
block|{
if|if
condition|(
name|namespace
operator|.
name|indexOf
argument_list|(
literal|":"
argument_list|)
operator|>
operator|-
literal|1
condition|)
block|{
name|hostname
operator|=
name|namespace
operator|.
name|substring
argument_list|(
name|namespace
operator|.
name|indexOf
argument_list|(
literal|":"
argument_list|)
operator|+
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|hostname
operator|.
name|indexOf
argument_list|(
literal|"/"
argument_list|)
operator|>
operator|-
literal|1
condition|)
block|{
name|hostname
operator|=
name|hostname
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|hostname
operator|.
name|indexOf
argument_list|(
literal|"/"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|hostname
operator|=
name|namespace
expr_stmt|;
block|}
block|}
comment|// if we didn't file a hostname, bail
if|if
condition|(
name|hostname
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// convert illegal java identifier
name|hostname
operator|=
name|hostname
operator|.
name|replace
argument_list|(
literal|'-'
argument_list|,
literal|'_'
argument_list|)
expr_stmt|;
name|path
operator|=
name|path
operator|.
name|replace
argument_list|(
literal|'-'
argument_list|,
literal|'_'
argument_list|)
expr_stmt|;
comment|// chomp off last forward slash in path, if necessary
if|if
condition|(
operator|(
name|path
operator|.
name|length
argument_list|()
operator|>
literal|0
operator|)
operator|&&
operator|(
name|path
operator|.
name|charAt
argument_list|(
name|path
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
operator|==
literal|'/'
operator|)
condition|)
block|{
name|path
operator|=
name|path
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|path
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
comment|// tokenize the hostname and reverse it
name|StringTokenizer
name|st
init|=
operator|new
name|StringTokenizer
argument_list|(
name|hostname
argument_list|,
literal|".:"
argument_list|)
decl_stmt|;
name|String
index|[]
name|words
init|=
operator|new
name|String
index|[
name|st
operator|.
name|countTokens
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|words
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|words
index|[
name|i
index|]
operator|=
name|st
operator|.
name|nextToken
argument_list|()
expr_stmt|;
block|}
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
name|namespace
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|words
operator|.
name|length
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
operator|--
name|i
control|)
block|{
name|addWordToPackageBuffer
argument_list|(
name|sb
argument_list|,
name|words
index|[
name|i
index|]
argument_list|,
name|i
operator|==
name|words
operator|.
name|length
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
comment|// tokenize the path
name|StringTokenizer
name|st2
init|=
operator|new
name|StringTokenizer
argument_list|(
name|path
argument_list|,
literal|"/"
argument_list|)
decl_stmt|;
while|while
condition|(
name|st2
operator|.
name|hasMoreTokens
argument_list|()
condition|)
block|{
name|addWordToPackageBuffer
argument_list|(
name|sb
argument_list|,
name|st2
operator|.
name|nextToken
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      * Massage<tt>word</tt> into a form suitable for use in a Java package      * name. Append it to the target string buffer with a<tt>.</tt> delimiter      * iff<tt>word</tt> is not the first word in the package name.      *      * @param sb the buffer to append to      * @param word the word to append      * @param firstWord a flag indicating whether this is the first word      */
specifier|private
specifier|static
name|void
name|addWordToPackageBuffer
parameter_list|(
name|StringBuilder
name|sb
parameter_list|,
name|String
name|word
parameter_list|,
name|boolean
name|firstWord
parameter_list|)
block|{
if|if
condition|(
name|JavaUtils
operator|.
name|isJavaKeyword
argument_list|(
name|word
argument_list|)
condition|)
block|{
name|word
operator|=
name|JavaUtils
operator|.
name|makeNonJavaKeyword
argument_list|(
name|word
argument_list|)
expr_stmt|;
block|}
comment|// separate with dot after the first word
if|if
condition|(
operator|!
name|firstWord
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|'.'
argument_list|)
expr_stmt|;
block|}
comment|// prefix digits with underscores
if|if
condition|(
name|Character
operator|.
name|isDigit
argument_list|(
name|word
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
argument_list|)
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|'_'
argument_list|)
expr_stmt|;
block|}
comment|// replace periods with underscores
if|if
condition|(
name|word
operator|.
name|indexOf
argument_list|(
literal|'.'
argument_list|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|char
index|[]
name|buf
init|=
name|word
operator|.
name|toCharArray
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|word
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|buf
index|[
name|i
index|]
operator|==
literal|'.'
condition|)
block|{
name|buf
index|[
name|i
index|]
operator|=
literal|'_'
expr_stmt|;
block|}
block|}
name|word
operator|=
operator|new
name|String
argument_list|(
name|buf
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|word
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

