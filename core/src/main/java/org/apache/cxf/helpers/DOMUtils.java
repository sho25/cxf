begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|AccessController
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|WeakHashMap
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|XMLConstants
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilderFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|ParserConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Attr
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Comment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|DocumentFragment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NamedNodeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|EntityResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|InputSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_comment
comment|/**  * Few simple utils to read DOM. This is originally from the Jakarta Commons Modeler.  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|DOMUtils
block|{
specifier|private
specifier|static
name|boolean
name|isJre9SAAJ
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|ClassLoader
argument_list|,
name|DocumentBuilder
argument_list|>
name|DOCUMENT_BUILDERS
init|=
name|Collections
operator|.
name|synchronizedMap
argument_list|(
operator|new
name|WeakHashMap
argument_list|<
name|ClassLoader
argument_list|,
name|DocumentBuilder
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|XMLNAMESPACE
init|=
literal|"xmlns"
decl_stmt|;
specifier|private
specifier|static
specifier|volatile
name|Document
name|emptyDocument
decl_stmt|;
static|static
block|{
try|try
block|{
name|Method
index|[]
name|methods
init|=
name|DOMUtils
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
operator|.
name|loadClass
argument_list|(
literal|"com.sun.xml.messaging.saaj.soap.SOAPDocumentImpl"
argument_list|)
operator|.
name|getMethods
argument_list|()
decl_stmt|;
for|for
control|(
name|Method
name|method
range|:
name|methods
control|)
block|{
if|if
condition|(
name|method
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"register"
argument_list|)
condition|)
block|{
comment|//this is the 1.4+ SAAJ impl
name|setJava9SAAJ
argument_list|(
literal|true
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|cnfe
parameter_list|)
block|{
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|DOMUtils
operator|.
name|class
argument_list|)
operator|.
name|finest
argument_list|(
literal|"can't load class com.sun.xml.messaging.saaj.soap.SOAPDocumentImpl"
argument_list|)
expr_stmt|;
try|try
block|{
name|Method
index|[]
name|methods
init|=
name|DOMUtils
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
operator|.
name|loadClass
argument_list|(
literal|"com.sun.xml.internal.messaging.saaj.soap.SOAPDocumentImpl"
argument_list|)
operator|.
name|getMethods
argument_list|()
decl_stmt|;
for|for
control|(
name|Method
name|method
range|:
name|methods
control|)
block|{
if|if
condition|(
name|method
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"register"
argument_list|)
condition|)
block|{
comment|//this is the SAAJ impl in JDK9
name|setJava9SAAJ
argument_list|(
literal|true
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|cnfe1
parameter_list|)
block|{
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|DOMUtils
operator|.
name|class
argument_list|)
operator|.
name|finest
argument_list|(
literal|"can't load class com.sun.xml.internal.messaging.saaj.soap.SOAPDocumentImpl"
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|throwable
parameter_list|)
block|{
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|DOMUtils
operator|.
name|class
argument_list|)
operator|.
name|finest
argument_list|(
literal|"Other JDK vendor"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|DOMUtils
parameter_list|()
block|{     }
specifier|private
specifier|static
name|DocumentBuilder
name|getDocumentBuilder
parameter_list|()
throws|throws
name|ParserConfigurationException
block|{
name|ClassLoader
name|loader
init|=
name|getContextClassLoader
argument_list|()
decl_stmt|;
if|if
condition|(
name|loader
operator|==
literal|null
condition|)
block|{
name|loader
operator|=
name|getClassLoader
argument_list|(
name|DOMUtils
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|loader
operator|==
literal|null
condition|)
block|{
name|DocumentBuilderFactory
name|f
init|=
name|DocumentBuilderFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|f
operator|.
name|setNamespaceAware
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|f
operator|.
name|setFeature
argument_list|(
name|javax
operator|.
name|xml
operator|.
name|XMLConstants
operator|.
name|FEATURE_SECURE_PROCESSING
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|f
operator|.
name|setFeature
argument_list|(
literal|"http://apache.org/xml/features/disallow-doctype-decl"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
name|f
operator|.
name|newDocumentBuilder
argument_list|()
return|;
block|}
name|DocumentBuilder
name|factory
init|=
name|DOCUMENT_BUILDERS
operator|.
name|get
argument_list|(
name|loader
argument_list|)
decl_stmt|;
if|if
condition|(
name|factory
operator|==
literal|null
condition|)
block|{
name|DocumentBuilderFactory
name|f2
init|=
name|DocumentBuilderFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|f2
operator|.
name|setNamespaceAware
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|f2
operator|.
name|setFeature
argument_list|(
name|javax
operator|.
name|xml
operator|.
name|XMLConstants
operator|.
name|FEATURE_SECURE_PROCESSING
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|f2
operator|.
name|setFeature
argument_list|(
literal|"http://apache.org/xml/features/disallow-doctype-decl"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|factory
operator|=
name|f2
operator|.
name|newDocumentBuilder
argument_list|()
expr_stmt|;
name|DOCUMENT_BUILDERS
operator|.
name|put
argument_list|(
name|loader
argument_list|,
name|factory
argument_list|)
expr_stmt|;
block|}
return|return
name|factory
return|;
block|}
specifier|private
specifier|static
name|ClassLoader
name|getContextClassLoader
parameter_list|()
block|{
specifier|final
name|SecurityManager
name|sm
init|=
name|System
operator|.
name|getSecurityManager
argument_list|()
decl_stmt|;
if|if
condition|(
name|sm
operator|!=
literal|null
condition|)
block|{
return|return
name|AccessController
operator|.
name|doPrivileged
argument_list|(
operator|new
name|PrivilegedAction
argument_list|<
name|ClassLoader
argument_list|>
argument_list|()
block|{
specifier|public
name|ClassLoader
name|run
parameter_list|()
block|{
return|return
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
return|;
block|}
block|}
argument_list|)
return|;
block|}
return|return
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|ClassLoader
name|getClassLoader
parameter_list|(
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|)
block|{
specifier|final
name|SecurityManager
name|sm
init|=
name|System
operator|.
name|getSecurityManager
argument_list|()
decl_stmt|;
if|if
condition|(
name|sm
operator|!=
literal|null
condition|)
block|{
return|return
name|AccessController
operator|.
name|doPrivileged
argument_list|(
operator|new
name|PrivilegedAction
argument_list|<
name|ClassLoader
argument_list|>
argument_list|()
block|{
specifier|public
name|ClassLoader
name|run
parameter_list|()
block|{
return|return
name|clazz
operator|.
name|getClassLoader
argument_list|()
return|;
block|}
block|}
argument_list|)
return|;
block|}
return|return
name|clazz
operator|.
name|getClassLoader
argument_list|()
return|;
block|}
comment|/**      * Creates a new Document object      * @throws ParserConfigurationException      */
specifier|public
specifier|static
name|Document
name|newDocument
parameter_list|()
block|{
return|return
name|createDocument
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|Document
name|createDocument
parameter_list|()
block|{
try|try
block|{
return|return
name|getDocumentBuilder
argument_list|()
operator|.
name|newDocument
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|ParserConfigurationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
specifier|synchronized
name|Document
name|createEmptyDocument
parameter_list|()
block|{
if|if
condition|(
name|emptyDocument
operator|==
literal|null
condition|)
block|{
name|emptyDocument
operator|=
name|createDocument
argument_list|()
expr_stmt|;
comment|// uncomment this to see if anything is actually setting anything into the empty doc
comment|/*             final Document doc  = createDocument();             emptyDocument = (Document)org.apache.cxf.common.util.ProxyHelper.getProxy(                 DOMUtils.class.getClassLoader(),                 new Class<?>[] {Document.class},                 new java.lang.reflect.InvocationHandler() {                     @Override                     public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {                         if (method.getName().contains("create")) {                             return method.invoke(doc, args);                         }                         throw new IllegalStateException("Cannot modify factory document");                     }                 });             */
block|}
return|return
name|emptyDocument
return|;
block|}
comment|/**      * Returns a static Document that should always be "empty".  It's useful as a factory for      * for creating Elements and other nodes that will be traversed later and don't need to      * be attached into a document      * @return      */
specifier|public
specifier|static
name|Document
name|getEmptyDocument
parameter_list|()
block|{
name|Document
name|doc
init|=
name|emptyDocument
decl_stmt|;
if|if
condition|(
name|doc
operator|==
literal|null
condition|)
block|{
name|doc
operator|=
name|createEmptyDocument
argument_list|()
expr_stmt|;
block|}
return|return
name|doc
return|;
block|}
comment|/**      * This function is much like getAttribute, but returns null, not "", for a nonexistent attribute.      *      * @param e      * @param attributeName      */
specifier|public
specifier|static
name|String
name|getAttributeValueEmptyNull
parameter_list|(
name|Element
name|e
parameter_list|,
name|String
name|attributeName
parameter_list|)
block|{
name|Attr
name|node
init|=
name|e
operator|.
name|getAttributeNode
argument_list|(
name|attributeName
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|node
operator|.
name|getValue
argument_list|()
return|;
block|}
comment|/**      * Get the text content of a node and all it's children or null if there is no text      */
specifier|public
specifier|static
name|String
name|getAllContent
parameter_list|(
name|Node
name|n
parameter_list|)
block|{
name|StringBuilder
name|b
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|getAllContent
argument_list|(
name|n
argument_list|,
name|b
argument_list|)
expr_stmt|;
return|return
name|b
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|void
name|getAllContent
parameter_list|(
name|Node
name|n
parameter_list|,
name|StringBuilder
name|b
parameter_list|)
block|{
name|Node
name|nd
init|=
name|n
operator|.
name|getFirstChild
argument_list|()
decl_stmt|;
while|while
condition|(
name|nd
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|nd
operator|instanceof
name|Text
operator|&&
operator|!
operator|(
name|nd
operator|instanceof
name|Comment
operator|)
condition|)
block|{
name|b
operator|.
name|append
argument_list|(
operator|(
operator|(
name|Text
operator|)
name|nd
operator|)
operator|.
name|getData
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|getAllContent
argument_list|(
name|nd
argument_list|,
name|b
argument_list|)
expr_stmt|;
block|}
name|nd
operator|=
name|nd
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Get the trimmed text content of a node or null if there is no text      */
specifier|public
specifier|static
name|String
name|getContent
parameter_list|(
name|Node
name|n
parameter_list|)
block|{
name|String
name|s
init|=
name|getRawContent
argument_list|(
name|n
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|!=
literal|null
condition|)
block|{
name|s
operator|=
name|s
operator|.
name|trim
argument_list|()
expr_stmt|;
block|}
return|return
name|s
return|;
block|}
comment|/**      * Get the raw text content of a node or null if there is no text      */
specifier|public
specifier|static
name|String
name|getRawContent
parameter_list|(
name|Node
name|n
parameter_list|)
block|{
if|if
condition|(
name|n
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|StringBuilder
name|b
init|=
literal|null
decl_stmt|;
name|String
name|s
init|=
literal|null
decl_stmt|;
name|Node
name|n1
init|=
name|n
operator|.
name|getFirstChild
argument_list|()
decl_stmt|;
while|while
condition|(
name|n1
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|n1
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|TEXT_NODE
operator|||
name|n1
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|CDATA_SECTION_NODE
condition|)
block|{
if|if
condition|(
name|b
operator|!=
literal|null
condition|)
block|{
name|b
operator|.
name|append
argument_list|(
operator|(
operator|(
name|Text
operator|)
name|n1
operator|)
operator|.
name|getNodeValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|s
operator|==
literal|null
condition|)
block|{
name|s
operator|=
operator|(
operator|(
name|Text
operator|)
name|n1
operator|)
operator|.
name|getNodeValue
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|b
operator|=
operator|new
name|StringBuilder
argument_list|(
name|s
argument_list|)
operator|.
name|append
argument_list|(
operator|(
operator|(
name|Text
operator|)
name|n1
operator|)
operator|.
name|getNodeValue
argument_list|()
argument_list|)
expr_stmt|;
name|s
operator|=
literal|null
expr_stmt|;
block|}
block|}
name|n1
operator|=
name|n1
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|b
operator|!=
literal|null
condition|)
block|{
return|return
name|b
operator|.
name|toString
argument_list|()
return|;
block|}
return|return
name|s
return|;
block|}
comment|/**      * Get the first element child.      *      * @param parent lookup direct childs      * @param name name of the element. If null return the first element.      */
specifier|public
specifier|static
name|Node
name|getChild
parameter_list|(
name|Node
name|parent
parameter_list|,
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|parent
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Node
name|first
init|=
name|parent
operator|.
name|getFirstChild
argument_list|()
decl_stmt|;
if|if
condition|(
name|first
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
for|for
control|(
name|Node
name|node
init|=
name|first
init|;
name|node
operator|!=
literal|null
condition|;
name|node
operator|=
name|node
operator|.
name|getNextSibling
argument_list|()
control|)
block|{
comment|// System.out.println("getNode: " + name + " " +
comment|// node.getNodeName());
if|if
condition|(
name|node
operator|.
name|getNodeType
argument_list|()
operator|!=
name|Node
operator|.
name|ELEMENT_NODE
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|name
operator|!=
literal|null
operator|&&
name|name
operator|.
name|equals
argument_list|(
name|node
operator|.
name|getNodeName
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|node
return|;
block|}
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
return|return
name|node
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|public
specifier|static
name|boolean
name|hasAttribute
parameter_list|(
name|Element
name|element
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|NamedNodeMap
name|attributes
init|=
name|element
operator|.
name|getAttributes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|attributes
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Node
name|node
init|=
name|attributes
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|.
name|equals
argument_list|(
name|node
operator|.
name|getNodeValue
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|public
specifier|static
name|String
name|getAttribute
parameter_list|(
name|Node
name|element
parameter_list|,
name|String
name|attName
parameter_list|)
block|{
name|NamedNodeMap
name|attrs
init|=
name|element
operator|.
name|getAttributes
argument_list|()
decl_stmt|;
if|if
condition|(
name|attrs
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Node
name|attN
init|=
name|attrs
operator|.
name|getNamedItem
argument_list|(
name|attName
argument_list|)
decl_stmt|;
if|if
condition|(
name|attN
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|attN
operator|.
name|getNodeValue
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|String
name|getAttribute
parameter_list|(
name|Element
name|element
parameter_list|,
name|QName
name|attName
parameter_list|)
block|{
name|Attr
name|attr
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|attName
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
condition|)
block|{
name|attr
operator|=
name|element
operator|.
name|getAttributeNode
argument_list|(
name|attName
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|attr
operator|=
name|element
operator|.
name|getAttributeNodeNS
argument_list|(
name|attName
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
name|attName
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|attr
operator|==
literal|null
condition|?
literal|null
else|:
name|attr
operator|.
name|getValue
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|void
name|setAttribute
parameter_list|(
name|Node
name|node
parameter_list|,
name|String
name|attName
parameter_list|,
name|String
name|val
parameter_list|)
block|{
name|NamedNodeMap
name|attributes
init|=
name|node
operator|.
name|getAttributes
argument_list|()
decl_stmt|;
name|Node
name|attNode
init|=
name|node
operator|.
name|getOwnerDocument
argument_list|()
operator|.
name|createAttributeNS
argument_list|(
literal|null
argument_list|,
name|attName
argument_list|)
decl_stmt|;
name|attNode
operator|.
name|setNodeValue
argument_list|(
name|val
argument_list|)
expr_stmt|;
name|attributes
operator|.
name|setNamedItem
argument_list|(
name|attNode
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|removeAttribute
parameter_list|(
name|Node
name|node
parameter_list|,
name|String
name|attName
parameter_list|)
block|{
name|NamedNodeMap
name|attributes
init|=
name|node
operator|.
name|getAttributes
argument_list|()
decl_stmt|;
name|attributes
operator|.
name|removeNamedItem
argument_list|(
name|attName
argument_list|)
expr_stmt|;
block|}
comment|/**      * Set or replace the text value      */
specifier|public
specifier|static
name|void
name|setText
parameter_list|(
name|Node
name|node
parameter_list|,
name|String
name|val
parameter_list|)
block|{
name|Node
name|chld
init|=
name|DOMUtils
operator|.
name|getChild
argument_list|(
name|node
argument_list|,
name|Node
operator|.
name|TEXT_NODE
argument_list|)
decl_stmt|;
if|if
condition|(
name|chld
operator|==
literal|null
condition|)
block|{
name|Node
name|textN
init|=
name|node
operator|.
name|getOwnerDocument
argument_list|()
operator|.
name|createTextNode
argument_list|(
name|val
argument_list|)
decl_stmt|;
name|node
operator|.
name|appendChild
argument_list|(
name|textN
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// change the value
name|chld
operator|.
name|setNodeValue
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
comment|/**      * Find the first direct child with a given attribute.      *      * @param parent      * @param elemName name of the element, or null for any      * @param attName attribute we're looking for      * @param attVal attribute value or null if we just want any      */
specifier|public
specifier|static
name|Element
name|findChildWithAtt
parameter_list|(
name|Node
name|parent
parameter_list|,
name|String
name|elemName
parameter_list|,
name|String
name|attName
parameter_list|,
name|String
name|attVal
parameter_list|)
block|{
name|Element
name|child
init|=
operator|(
name|Element
operator|)
name|getChild
argument_list|(
name|parent
argument_list|,
name|Node
operator|.
name|ELEMENT_NODE
argument_list|)
decl_stmt|;
if|if
condition|(
name|attVal
operator|==
literal|null
condition|)
block|{
while|while
condition|(
name|child
operator|!=
literal|null
operator|&&
operator|(
name|elemName
operator|==
literal|null
operator|||
name|elemName
operator|.
name|equals
argument_list|(
name|child
operator|.
name|getNodeName
argument_list|()
argument_list|)
operator|)
operator|&&
name|DOMUtils
operator|.
name|getAttribute
argument_list|(
name|child
argument_list|,
name|attName
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|child
operator|=
operator|(
name|Element
operator|)
name|getNext
argument_list|(
name|child
argument_list|,
name|elemName
argument_list|,
name|Node
operator|.
name|ELEMENT_NODE
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
while|while
condition|(
name|child
operator|!=
literal|null
operator|&&
operator|(
name|elemName
operator|==
literal|null
operator|||
name|elemName
operator|.
name|equals
argument_list|(
name|child
operator|.
name|getNodeName
argument_list|()
argument_list|)
operator|)
operator|&&
operator|!
name|attVal
operator|.
name|equals
argument_list|(
name|DOMUtils
operator|.
name|getAttribute
argument_list|(
name|child
argument_list|,
name|attName
argument_list|)
argument_list|)
condition|)
block|{
name|child
operator|=
operator|(
name|Element
operator|)
name|getNext
argument_list|(
name|child
argument_list|,
name|elemName
argument_list|,
name|Node
operator|.
name|ELEMENT_NODE
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|child
return|;
block|}
comment|/**      * Get the first child's content ( ie it's included TEXT node ).      */
specifier|public
specifier|static
name|String
name|getChildContent
parameter_list|(
name|Node
name|parent
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|Node
name|first
init|=
name|parent
operator|.
name|getFirstChild
argument_list|()
decl_stmt|;
if|if
condition|(
name|first
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
for|for
control|(
name|Node
name|node
init|=
name|first
init|;
name|node
operator|!=
literal|null
condition|;
name|node
operator|=
name|node
operator|.
name|getNextSibling
argument_list|()
control|)
block|{
comment|// System.out.println("getNode: " + name + " " +
comment|// node.getNodeName());
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
name|node
operator|.
name|getNodeName
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getRawContent
argument_list|(
name|node
argument_list|)
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|public
specifier|static
name|QName
name|getElementQName
parameter_list|(
name|Element
name|el
parameter_list|)
block|{
return|return
operator|new
name|QName
argument_list|(
name|el
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
name|el
operator|.
name|getLocalName
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Creates a QName object based on the qualified name      * and using the Node as a base to lookup the namespace      * for the prefix      * @param qualifiedName      * @param node      */
specifier|public
specifier|static
name|QName
name|createQName
parameter_list|(
name|String
name|qualifiedName
parameter_list|,
name|Node
name|node
parameter_list|)
block|{
if|if
condition|(
name|qualifiedName
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|int
name|index
init|=
name|qualifiedName
operator|.
name|indexOf
argument_list|(
literal|":"
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|==
operator|-
literal|1
condition|)
block|{
return|return
operator|new
name|QName
argument_list|(
name|qualifiedName
argument_list|)
return|;
block|}
name|String
name|prefix
init|=
name|qualifiedName
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|index
argument_list|)
decl_stmt|;
name|String
name|localName
init|=
name|qualifiedName
operator|.
name|substring
argument_list|(
name|index
operator|+
literal|1
argument_list|)
decl_stmt|;
name|String
name|ns
init|=
name|node
operator|.
name|lookupNamespaceURI
argument_list|(
name|prefix
argument_list|)
decl_stmt|;
if|if
condition|(
name|ns
operator|==
literal|null
operator|||
name|localName
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Invalid QName in mapping: "
operator|+
name|qualifiedName
argument_list|)
throw|;
block|}
return|return
operator|new
name|QName
argument_list|(
name|ns
argument_list|,
name|localName
argument_list|,
name|prefix
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|QName
name|convertStringToQName
parameter_list|(
name|String
name|expandedQName
parameter_list|)
block|{
return|return
name|convertStringToQName
argument_list|(
name|expandedQName
argument_list|,
literal|""
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|QName
name|convertStringToQName
parameter_list|(
name|String
name|expandedQName
parameter_list|,
name|String
name|prefix
parameter_list|)
block|{
name|int
name|ind1
init|=
name|expandedQName
operator|.
name|indexOf
argument_list|(
literal|'{'
argument_list|)
decl_stmt|;
if|if
condition|(
name|ind1
operator|!=
literal|0
condition|)
block|{
return|return
operator|new
name|QName
argument_list|(
name|expandedQName
argument_list|)
return|;
block|}
name|int
name|ind2
init|=
name|expandedQName
operator|.
name|indexOf
argument_list|(
literal|'}'
argument_list|)
decl_stmt|;
if|if
condition|(
name|ind2
operator|<=
name|ind1
operator|+
literal|1
operator|||
name|ind2
operator|>=
name|expandedQName
operator|.
name|length
argument_list|()
operator|-
literal|1
condition|)
block|{
return|return
literal|null
return|;
block|}
name|String
name|ns
init|=
name|expandedQName
operator|.
name|substring
argument_list|(
name|ind1
operator|+
literal|1
argument_list|,
name|ind2
argument_list|)
decl_stmt|;
name|String
name|localName
init|=
name|expandedQName
operator|.
name|substring
argument_list|(
name|ind2
operator|+
literal|1
argument_list|)
decl_stmt|;
return|return
operator|new
name|QName
argument_list|(
name|ns
argument_list|,
name|localName
argument_list|,
name|prefix
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Set
argument_list|<
name|QName
argument_list|>
name|convertStringsToQNames
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|expandedQNames
parameter_list|)
block|{
name|Set
argument_list|<
name|QName
argument_list|>
name|dropElements
init|=
name|Collections
operator|.
name|emptySet
argument_list|()
decl_stmt|;
if|if
condition|(
name|expandedQNames
operator|!=
literal|null
condition|)
block|{
name|dropElements
operator|=
operator|new
name|LinkedHashSet
argument_list|<>
argument_list|(
name|expandedQNames
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|val
range|:
name|expandedQNames
control|)
block|{
name|dropElements
operator|.
name|add
argument_list|(
name|convertStringToQName
argument_list|(
name|val
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|dropElements
return|;
block|}
comment|/**      * Get the first direct child with a given type      */
specifier|public
specifier|static
name|Element
name|getFirstElement
parameter_list|(
name|Node
name|parent
parameter_list|)
block|{
name|Node
name|n
init|=
name|parent
operator|.
name|getFirstChild
argument_list|()
decl_stmt|;
while|while
condition|(
name|n
operator|!=
literal|null
operator|&&
name|Node
operator|.
name|ELEMENT_NODE
operator|!=
name|n
operator|.
name|getNodeType
argument_list|()
condition|)
block|{
name|n
operator|=
name|n
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|n
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|(
name|Element
operator|)
name|n
return|;
block|}
specifier|public
specifier|static
name|Element
name|getNextElement
parameter_list|(
name|Element
name|el
parameter_list|)
block|{
name|Node
name|nd
init|=
name|el
operator|.
name|getNextSibling
argument_list|()
decl_stmt|;
while|while
condition|(
name|nd
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|nd
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|ELEMENT_NODE
condition|)
block|{
return|return
operator|(
name|Element
operator|)
name|nd
return|;
block|}
name|nd
operator|=
name|nd
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Return the first element child with the specified qualified name.      *      * @param parent      * @param q      */
specifier|public
specifier|static
name|Element
name|getFirstChildWithName
parameter_list|(
name|Element
name|parent
parameter_list|,
name|QName
name|q
parameter_list|)
block|{
name|String
name|ns
init|=
name|q
operator|.
name|getNamespaceURI
argument_list|()
decl_stmt|;
name|String
name|lp
init|=
name|q
operator|.
name|getLocalPart
argument_list|()
decl_stmt|;
return|return
name|getFirstChildWithName
argument_list|(
name|parent
argument_list|,
name|ns
argument_list|,
name|lp
argument_list|)
return|;
block|}
comment|/**      * Return the first element child with the specified qualified name.      *      * @param parent      * @param ns      * @param lp      */
specifier|public
specifier|static
name|Element
name|getFirstChildWithName
parameter_list|(
name|Element
name|parent
parameter_list|,
name|String
name|ns
parameter_list|,
name|String
name|lp
parameter_list|)
block|{
for|for
control|(
name|Node
name|n
init|=
name|parent
operator|.
name|getFirstChild
argument_list|()
init|;
name|n
operator|!=
literal|null
condition|;
name|n
operator|=
name|n
operator|.
name|getNextSibling
argument_list|()
control|)
block|{
if|if
condition|(
name|n
operator|instanceof
name|Element
condition|)
block|{
name|Element
name|e
init|=
operator|(
name|Element
operator|)
name|n
decl_stmt|;
name|String
name|ens
init|=
operator|(
name|e
operator|.
name|getNamespaceURI
argument_list|()
operator|==
literal|null
operator|)
condition|?
literal|""
else|:
name|e
operator|.
name|getNamespaceURI
argument_list|()
decl_stmt|;
if|if
condition|(
name|ns
operator|.
name|equals
argument_list|(
name|ens
argument_list|)
operator|&&
name|lp
operator|.
name|equals
argument_list|(
name|e
operator|.
name|getLocalName
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|e
return|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Return child elements with specified name.      *      * @param parent      * @param ns      * @param localName      */
specifier|public
specifier|static
name|List
argument_list|<
name|Element
argument_list|>
name|getChildrenWithName
parameter_list|(
name|Element
name|parent
parameter_list|,
name|String
name|ns
parameter_list|,
name|String
name|localName
parameter_list|)
block|{
name|List
argument_list|<
name|Element
argument_list|>
name|r
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Node
name|n
init|=
name|parent
operator|.
name|getFirstChild
argument_list|()
init|;
name|n
operator|!=
literal|null
condition|;
name|n
operator|=
name|n
operator|.
name|getNextSibling
argument_list|()
control|)
block|{
if|if
condition|(
name|n
operator|instanceof
name|Element
condition|)
block|{
name|Element
name|e
init|=
operator|(
name|Element
operator|)
name|n
decl_stmt|;
name|String
name|eNs
init|=
operator|(
name|e
operator|.
name|getNamespaceURI
argument_list|()
operator|==
literal|null
operator|)
condition|?
literal|""
else|:
name|e
operator|.
name|getNamespaceURI
argument_list|()
decl_stmt|;
if|if
condition|(
name|ns
operator|.
name|equals
argument_list|(
name|eNs
argument_list|)
operator|&&
name|localName
operator|.
name|equals
argument_list|(
name|e
operator|.
name|getLocalName
argument_list|()
argument_list|)
condition|)
block|{
name|r
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|r
return|;
block|}
comment|/**      * Returns all child elements with specified namespace.      *      * @param parent the element to search under      * @param ns the namespace to find elements in      * @return all child elements with specified namespace      */
specifier|public
specifier|static
name|List
argument_list|<
name|Element
argument_list|>
name|getChildrenWithNamespace
parameter_list|(
name|Element
name|parent
parameter_list|,
name|String
name|ns
parameter_list|)
block|{
name|List
argument_list|<
name|Element
argument_list|>
name|r
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Node
name|n
init|=
name|parent
operator|.
name|getFirstChild
argument_list|()
init|;
name|n
operator|!=
literal|null
condition|;
name|n
operator|=
name|n
operator|.
name|getNextSibling
argument_list|()
control|)
block|{
if|if
condition|(
name|n
operator|instanceof
name|Element
condition|)
block|{
name|Element
name|e
init|=
operator|(
name|Element
operator|)
name|n
decl_stmt|;
name|String
name|eNs
init|=
operator|(
name|e
operator|.
name|getNamespaceURI
argument_list|()
operator|==
literal|null
operator|)
condition|?
literal|""
else|:
name|e
operator|.
name|getNamespaceURI
argument_list|()
decl_stmt|;
if|if
condition|(
name|ns
operator|.
name|equals
argument_list|(
name|eNs
argument_list|)
condition|)
block|{
name|r
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|r
return|;
block|}
comment|/**      * Get the first child of the specified type.      *      * @param parent      * @param type      */
specifier|public
specifier|static
name|Node
name|getChild
parameter_list|(
name|Node
name|parent
parameter_list|,
name|int
name|type
parameter_list|)
block|{
name|Node
name|n
init|=
name|parent
operator|.
name|getFirstChild
argument_list|()
decl_stmt|;
while|while
condition|(
name|n
operator|!=
literal|null
operator|&&
name|type
operator|!=
name|n
operator|.
name|getNodeType
argument_list|()
condition|)
block|{
name|n
operator|=
name|n
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|n
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|n
return|;
block|}
comment|/**      * Get the next sibling with the same name and type      */
specifier|public
specifier|static
name|Node
name|getNext
parameter_list|(
name|Node
name|current
parameter_list|)
block|{
name|String
name|name
init|=
name|current
operator|.
name|getNodeName
argument_list|()
decl_stmt|;
name|int
name|type
init|=
name|current
operator|.
name|getNodeType
argument_list|()
decl_stmt|;
return|return
name|getNext
argument_list|(
name|current
argument_list|,
name|name
argument_list|,
name|type
argument_list|)
return|;
block|}
comment|/**      * Return the next sibling with a given name and type      */
specifier|public
specifier|static
name|Node
name|getNext
parameter_list|(
name|Node
name|current
parameter_list|,
name|String
name|name
parameter_list|,
name|int
name|type
parameter_list|)
block|{
name|Node
name|first
init|=
name|current
operator|.
name|getNextSibling
argument_list|()
decl_stmt|;
if|if
condition|(
name|first
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
for|for
control|(
name|Node
name|node
init|=
name|first
init|;
name|node
operator|!=
literal|null
condition|;
name|node
operator|=
name|node
operator|.
name|getNextSibling
argument_list|()
control|)
block|{
if|if
condition|(
name|type
operator|>=
literal|0
operator|&&
name|node
operator|.
name|getNodeType
argument_list|()
operator|!=
name|type
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
return|return
name|node
return|;
block|}
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
name|node
operator|.
name|getNodeName
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|node
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|public
specifier|static
class|class
name|NullResolver
implements|implements
name|EntityResolver
block|{
specifier|public
name|InputSource
name|resolveEntity
parameter_list|(
name|String
name|publicId
parameter_list|,
name|String
name|systemId
parameter_list|)
throws|throws
name|SAXException
throws|,
name|IOException
block|{
return|return
operator|new
name|InputSource
argument_list|(
operator|new
name|StringReader
argument_list|(
literal|""
argument_list|)
argument_list|)
return|;
block|}
block|}
specifier|public
specifier|static
name|String
name|getPrefixRecursive
parameter_list|(
name|Element
name|el
parameter_list|,
name|String
name|ns
parameter_list|)
block|{
name|String
name|prefix
init|=
name|getPrefix
argument_list|(
name|el
argument_list|,
name|ns
argument_list|)
decl_stmt|;
if|if
condition|(
name|prefix
operator|==
literal|null
operator|&&
name|el
operator|.
name|getParentNode
argument_list|()
operator|instanceof
name|Element
condition|)
block|{
name|prefix
operator|=
name|getPrefixRecursive
argument_list|(
operator|(
name|Element
operator|)
name|el
operator|.
name|getParentNode
argument_list|()
argument_list|,
name|ns
argument_list|)
expr_stmt|;
block|}
return|return
name|prefix
return|;
block|}
specifier|public
specifier|static
name|String
name|getPrefix
parameter_list|(
name|Element
name|el
parameter_list|,
name|String
name|ns
parameter_list|)
block|{
name|NamedNodeMap
name|atts
init|=
name|el
operator|.
name|getAttributes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|atts
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Node
name|node
init|=
name|atts
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|name
init|=
name|node
operator|.
name|getNodeName
argument_list|()
decl_stmt|;
if|if
condition|(
name|ns
operator|.
name|equals
argument_list|(
name|node
operator|.
name|getNodeValue
argument_list|()
argument_list|)
operator|&&
operator|(
name|name
operator|!=
literal|null
operator|&&
operator|(
name|XMLNAMESPACE
operator|.
name|equals
argument_list|(
name|name
argument_list|)
operator|||
name|name
operator|.
name|startsWith
argument_list|(
name|XMLNAMESPACE
operator|+
literal|":"
argument_list|)
operator|)
operator|)
condition|)
block|{
return|return
name|node
operator|.
name|getLocalName
argument_list|()
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Get all prefixes defined, up to the root, for a namespace URI.      *      * @param element      * @param namespaceUri      * @param prefixes      */
specifier|public
specifier|static
name|void
name|getPrefixesRecursive
parameter_list|(
name|Element
name|element
parameter_list|,
name|String
name|namespaceUri
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|prefixes
parameter_list|)
block|{
name|getPrefixes
argument_list|(
name|element
argument_list|,
name|namespaceUri
argument_list|,
name|prefixes
argument_list|)
expr_stmt|;
name|Node
name|parent
init|=
name|element
operator|.
name|getParentNode
argument_list|()
decl_stmt|;
if|if
condition|(
name|parent
operator|instanceof
name|Element
condition|)
block|{
name|getPrefixesRecursive
argument_list|(
operator|(
name|Element
operator|)
name|parent
argument_list|,
name|namespaceUri
argument_list|,
name|prefixes
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Get all prefixes defined on this element for the specified namespace.      *      * @param element      * @param namespaceUri      * @param prefixes      */
specifier|public
specifier|static
name|void
name|getPrefixes
parameter_list|(
name|Element
name|element
parameter_list|,
name|String
name|namespaceUri
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|prefixes
parameter_list|)
block|{
name|NamedNodeMap
name|atts
init|=
name|element
operator|.
name|getAttributes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|atts
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Node
name|node
init|=
name|atts
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|name
init|=
name|node
operator|.
name|getNodeName
argument_list|()
decl_stmt|;
if|if
condition|(
name|namespaceUri
operator|.
name|equals
argument_list|(
name|node
operator|.
name|getNodeValue
argument_list|()
argument_list|)
operator|&&
operator|(
name|name
operator|!=
literal|null
operator|&&
operator|(
name|XMLNAMESPACE
operator|.
name|equals
argument_list|(
name|name
argument_list|)
operator|||
name|name
operator|.
name|startsWith
argument_list|(
name|XMLNAMESPACE
operator|+
literal|":"
argument_list|)
operator|)
operator|)
condition|)
block|{
name|prefixes
operator|.
name|add
argument_list|(
name|node
operator|.
name|getPrefix
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
name|String
name|createNamespace
parameter_list|(
name|Element
name|el
parameter_list|,
name|String
name|ns
parameter_list|)
block|{
name|String
name|p
init|=
literal|"ns1"
decl_stmt|;
name|int
name|i
init|=
literal|1
decl_stmt|;
while|while
condition|(
name|getPrefix
argument_list|(
name|el
argument_list|,
name|ns
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|p
operator|=
literal|"ns"
operator|+
name|i
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
name|addNamespacePrefix
argument_list|(
name|el
argument_list|,
name|ns
argument_list|,
name|p
argument_list|)
expr_stmt|;
return|return
name|p
return|;
block|}
comment|/**      * Starting from a node, find the namespace declaration for a prefix. for a matching namespace      * declaration.      *      * @param node search up from here to search for namespace definitions      * @param searchPrefix the prefix we are searching for      * @return the namespace if found.      */
specifier|public
specifier|static
name|String
name|getNamespace
parameter_list|(
name|Node
name|node
parameter_list|,
name|String
name|searchPrefix
parameter_list|)
block|{
name|Element
name|el
decl_stmt|;
while|while
condition|(
operator|!
operator|(
name|node
operator|instanceof
name|Element
operator|)
condition|)
block|{
name|node
operator|=
name|node
operator|.
name|getParentNode
argument_list|()
expr_stmt|;
block|}
name|el
operator|=
operator|(
name|Element
operator|)
name|node
expr_stmt|;
name|NamedNodeMap
name|atts
init|=
name|el
operator|.
name|getAttributes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|atts
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Node
name|currentAttribute
init|=
name|atts
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|currentLocalName
init|=
name|currentAttribute
operator|.
name|getLocalName
argument_list|()
decl_stmt|;
name|String
name|currentPrefix
init|=
name|currentAttribute
operator|.
name|getPrefix
argument_list|()
decl_stmt|;
if|if
condition|(
name|searchPrefix
operator|.
name|equals
argument_list|(
name|currentLocalName
argument_list|)
operator|&&
name|XMLNAMESPACE
operator|.
name|equals
argument_list|(
name|currentPrefix
argument_list|)
condition|)
block|{
return|return
name|currentAttribute
operator|.
name|getNodeValue
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|searchPrefix
argument_list|)
operator|&&
name|XMLNAMESPACE
operator|.
name|equals
argument_list|(
name|currentLocalName
argument_list|)
operator|&&
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|currentPrefix
argument_list|)
condition|)
block|{
return|return
name|currentAttribute
operator|.
name|getNodeValue
argument_list|()
return|;
block|}
block|}
name|Node
name|parent
init|=
name|el
operator|.
name|getParentNode
argument_list|()
decl_stmt|;
if|if
condition|(
name|parent
operator|instanceof
name|Element
condition|)
block|{
return|return
name|getNamespace
argument_list|(
name|parent
argument_list|,
name|searchPrefix
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
specifier|static
name|List
argument_list|<
name|Element
argument_list|>
name|findAllElementsByTagNameNS
parameter_list|(
name|Element
name|elem
parameter_list|,
name|String
name|nameSpaceURI
parameter_list|,
name|String
name|localName
parameter_list|)
block|{
name|List
argument_list|<
name|Element
argument_list|>
name|ret
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
name|findAllElementsByTagNameNS
argument_list|(
name|elem
argument_list|,
name|nameSpaceURI
argument_list|,
name|localName
argument_list|,
name|ret
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
comment|/**      * Try to get the DOM Node from the SAAJ Node with JAVA9 afterwards      * @param node The original node we need check      * @return The DOM node      */
specifier|public
specifier|static
name|Node
name|getDomElement
parameter_list|(
name|Node
name|node
parameter_list|)
block|{
if|if
condition|(
name|node
operator|!=
literal|null
operator|&&
name|isJava9SAAJ
argument_list|()
condition|)
block|{
comment|//java9plus hack
try|try
block|{
name|Method
name|method
init|=
name|node
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"getDomElement"
argument_list|)
decl_stmt|;
name|node
operator|=
operator|(
name|Node
operator|)
name|method
operator|.
name|invoke
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|e
parameter_list|)
block|{
comment|//best effort to try, do nothing if NoSuchMethodException
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
return|return
name|node
return|;
block|}
comment|/**      * Try to get the DOM DocumentFragment from the SAAJ DocumentFragment with JAVA9 afterwards      * @param DocumentFragment The original documentFragment we need check      * @return The DOM DocumentFragment      */
specifier|public
specifier|static
name|DocumentFragment
name|getDomDocumentFragment
parameter_list|(
name|DocumentFragment
name|fragment
parameter_list|)
block|{
if|if
condition|(
name|fragment
operator|!=
literal|null
operator|&&
name|isJava9SAAJ
argument_list|()
condition|)
block|{
comment|//java9 plus hack
try|try
block|{
name|Field
name|f
init|=
name|fragment
operator|.
name|getClass
argument_list|()
operator|.
name|getDeclaredField
argument_list|(
literal|"documentFragment"
argument_list|)
decl_stmt|;
name|f
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|fragment
operator|=
operator|(
name|DocumentFragment
operator|)
name|f
operator|.
name|get
argument_list|(
name|fragment
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchFieldException
name|e
parameter_list|)
block|{
comment|//best effort to try, do nothing if NoSuchMethodException
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
return|return
name|fragment
return|;
block|}
specifier|private
specifier|static
name|void
name|findAllElementsByTagNameNS
parameter_list|(
name|Element
name|el
parameter_list|,
name|String
name|nameSpaceURI
parameter_list|,
name|String
name|localName
parameter_list|,
name|List
argument_list|<
name|Element
argument_list|>
name|elementList
parameter_list|)
block|{
if|if
condition|(
name|el
operator|.
name|getNamespaceURI
argument_list|()
operator|!=
literal|null
operator|&&
name|localName
operator|.
name|equals
argument_list|(
name|el
operator|.
name|getLocalName
argument_list|()
argument_list|)
operator|&&
name|nameSpaceURI
operator|.
name|contains
argument_list|(
name|el
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
condition|)
block|{
name|elementList
operator|.
name|add
argument_list|(
name|el
argument_list|)
expr_stmt|;
block|}
name|Element
name|elem
init|=
name|getFirstElement
argument_list|(
name|el
argument_list|)
decl_stmt|;
while|while
condition|(
name|elem
operator|!=
literal|null
condition|)
block|{
name|findAllElementsByTagNameNS
argument_list|(
name|elem
argument_list|,
name|nameSpaceURI
argument_list|,
name|localName
argument_list|,
name|elementList
argument_list|)
expr_stmt|;
name|elem
operator|=
name|getNextElement
argument_list|(
name|elem
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|List
argument_list|<
name|Element
argument_list|>
name|findAllElementsByTagName
parameter_list|(
name|Element
name|elem
parameter_list|,
name|String
name|tagName
parameter_list|)
block|{
name|List
argument_list|<
name|Element
argument_list|>
name|ret
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
name|findAllElementsByTagName
argument_list|(
name|elem
argument_list|,
name|tagName
argument_list|,
name|ret
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
specifier|private
specifier|static
name|void
name|findAllElementsByTagName
parameter_list|(
name|Element
name|el
parameter_list|,
name|String
name|tagName
parameter_list|,
name|List
argument_list|<
name|Element
argument_list|>
name|elementList
parameter_list|)
block|{
if|if
condition|(
name|tagName
operator|.
name|equals
argument_list|(
name|el
operator|.
name|getTagName
argument_list|()
argument_list|)
condition|)
block|{
name|elementList
operator|.
name|add
argument_list|(
name|el
argument_list|)
expr_stmt|;
block|}
name|Element
name|elem
init|=
name|getFirstElement
argument_list|(
name|el
argument_list|)
decl_stmt|;
while|while
condition|(
name|elem
operator|!=
literal|null
condition|)
block|{
name|findAllElementsByTagName
argument_list|(
name|elem
argument_list|,
name|tagName
argument_list|,
name|elementList
argument_list|)
expr_stmt|;
name|elem
operator|=
name|getNextElement
argument_list|(
name|elem
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|boolean
name|hasElementWithName
parameter_list|(
name|Element
name|el
parameter_list|,
name|String
name|nameSpaceURI
parameter_list|,
name|String
name|localName
parameter_list|)
block|{
if|if
condition|(
name|el
operator|.
name|getNamespaceURI
argument_list|()
operator|!=
literal|null
operator|&&
name|localName
operator|.
name|equals
argument_list|(
name|el
operator|.
name|getLocalName
argument_list|()
argument_list|)
operator|&&
name|nameSpaceURI
operator|.
name|contains
argument_list|(
name|el
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
name|Element
name|elem
init|=
name|getFirstElement
argument_list|(
name|el
argument_list|)
decl_stmt|;
while|while
condition|(
name|elem
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|hasElementWithName
argument_list|(
name|elem
argument_list|,
name|nameSpaceURI
argument_list|,
name|localName
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
name|elem
operator|=
name|getNextElement
argument_list|(
name|elem
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
specifier|public
specifier|static
name|boolean
name|hasElementInNS
parameter_list|(
name|Element
name|el
parameter_list|,
name|String
name|namespace
parameter_list|)
block|{
if|if
condition|(
name|namespace
operator|.
name|equals
argument_list|(
name|el
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
name|Element
name|elem
init|=
name|getFirstElement
argument_list|(
name|el
argument_list|)
decl_stmt|;
while|while
condition|(
name|elem
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|hasElementInNS
argument_list|(
name|elem
argument_list|,
name|namespace
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
name|elem
operator|=
name|getNextElement
argument_list|(
name|elem
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
comment|/**      * Set a namespace/prefix on an element if it is not set already. First off, it searches for the element      * for the prefix associated with the specified namespace. If the prefix isn't null, then this is      * returned. Otherwise, it creates a new attribute using the namespace/prefix passed as parameters.      *      * @param element      * @param namespace      * @param prefix      * @return the prefix associated with the set namespace      */
specifier|public
specifier|static
name|String
name|setNamespace
parameter_list|(
name|Element
name|element
parameter_list|,
name|String
name|namespace
parameter_list|,
name|String
name|prefix
parameter_list|)
block|{
name|String
name|pre
init|=
name|getPrefixRecursive
argument_list|(
name|element
argument_list|,
name|namespace
argument_list|)
decl_stmt|;
if|if
condition|(
name|pre
operator|!=
literal|null
condition|)
block|{
return|return
name|pre
return|;
block|}
name|element
operator|.
name|setAttributeNS
argument_list|(
name|XMLConstants
operator|.
name|XMLNS_ATTRIBUTE_NS_URI
argument_list|,
literal|"xmlns:"
operator|+
name|prefix
argument_list|,
name|namespace
argument_list|)
expr_stmt|;
return|return
name|prefix
return|;
block|}
comment|/**      * Add a namespace prefix definition to an element.      *      * @param element      * @param namespaceUri      * @param prefix      */
specifier|public
specifier|static
name|void
name|addNamespacePrefix
parameter_list|(
name|Element
name|element
parameter_list|,
name|String
name|namespaceUri
parameter_list|,
name|String
name|prefix
parameter_list|)
block|{
name|element
operator|.
name|setAttributeNS
argument_list|(
name|XMLConstants
operator|.
name|XMLNS_ATTRIBUTE_NS_URI
argument_list|,
literal|"xmlns:"
operator|+
name|prefix
argument_list|,
name|namespaceUri
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|boolean
name|isJava9SAAJ
parameter_list|()
block|{
return|return
name|isJre9SAAJ
return|;
block|}
specifier|private
specifier|static
name|void
name|setJava9SAAJ
parameter_list|(
name|boolean
name|isJava9SAAJ
parameter_list|)
block|{
name|DOMUtils
operator|.
name|isJre9SAAJ
operator|=
name|isJava9SAAJ
expr_stmt|;
block|}
block|}
end_class

end_unit

