begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|Bus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|BindingInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|ServiceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|ChainInitiationObserver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|Destination
import|;
end_import

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractBindingFactory
implements|implements
name|BindingFactory
block|{
specifier|protected
name|Collection
argument_list|<
name|String
argument_list|>
name|activationNamespaces
decl_stmt|;
specifier|protected
name|Bus
name|bus
decl_stmt|;
specifier|public
name|AbstractBindingFactory
parameter_list|()
block|{     }
specifier|public
name|AbstractBindingFactory
parameter_list|(
name|Collection
argument_list|<
name|String
argument_list|>
name|ns
parameter_list|)
block|{
name|activationNamespaces
operator|=
name|ns
expr_stmt|;
block|}
specifier|public
name|AbstractBindingFactory
parameter_list|(
name|Bus
name|b
parameter_list|)
block|{
name|bus
operator|=
name|b
expr_stmt|;
name|registerWithBindingManager
argument_list|()
expr_stmt|;
block|}
specifier|public
name|AbstractBindingFactory
parameter_list|(
name|Bus
name|b
parameter_list|,
name|Collection
argument_list|<
name|String
argument_list|>
name|ns
parameter_list|)
block|{
name|activationNamespaces
operator|=
name|ns
expr_stmt|;
name|bus
operator|=
name|b
expr_stmt|;
name|registerWithBindingManager
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|registerWithBindingManager
parameter_list|()
block|{
if|if
condition|(
name|bus
operator|!=
literal|null
operator|&&
name|activationNamespaces
operator|!=
literal|null
condition|)
block|{
name|BindingFactoryManager
name|manager
init|=
name|bus
operator|.
name|getExtension
argument_list|(
name|BindingFactoryManager
operator|.
name|class
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|ns
range|:
name|activationNamespaces
control|)
block|{
name|manager
operator|.
name|registerBindingFactory
argument_list|(
name|ns
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Creates a "default" BindingInfo object for the service.  Called by      * createBindingInfo(Service service, String binding, Object config) to actually      * create the BindingInfo.  Can return a subclass which can then process      * the extensors within the subclass.      */
specifier|public
name|BindingInfo
name|createBindingInfo
parameter_list|(
name|ServiceInfo
name|service
parameter_list|,
name|String
name|namespace
parameter_list|,
name|Object
name|config
parameter_list|)
block|{
return|return
operator|new
name|BindingInfo
argument_list|(
name|service
argument_list|,
name|namespace
argument_list|)
return|;
block|}
comment|/**      * Creates a "default" BindingInfo object for the service.  Can return a subclass      * which can then process the extensors within the subclass.   By default, just      * creates it for the first ServiceInfo in the service      */
specifier|public
name|BindingInfo
name|createBindingInfo
parameter_list|(
name|Service
name|service
parameter_list|,
name|String
name|namespace
parameter_list|,
name|Object
name|config
parameter_list|)
block|{
name|BindingInfo
name|bi
init|=
name|createBindingInfo
argument_list|(
name|service
operator|.
name|getServiceInfos
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|namespace
argument_list|,
name|config
argument_list|)
decl_stmt|;
if|if
condition|(
name|bi
operator|.
name|getName
argument_list|()
operator|==
literal|null
condition|)
block|{
name|bi
operator|.
name|setName
argument_list|(
operator|new
name|QName
argument_list|(
name|service
operator|.
name|getName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
name|service
operator|.
name|getName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
operator|+
literal|"Binding"
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|bi
return|;
block|}
specifier|public
name|void
name|addListener
parameter_list|(
name|Destination
name|d
parameter_list|,
name|Endpoint
name|e
parameter_list|)
block|{
name|ChainInitiationObserver
name|observer
init|=
operator|new
name|ChainInitiationObserver
argument_list|(
name|e
argument_list|,
name|bus
argument_list|)
decl_stmt|;
name|d
operator|.
name|setMessageObserver
argument_list|(
name|observer
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Bus
name|getBus
parameter_list|()
block|{
return|return
name|bus
return|;
block|}
annotation|@
name|Resource
specifier|public
name|void
name|setBus
parameter_list|(
name|Bus
name|bus
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|bus
operator|!=
name|bus
condition|)
block|{
name|this
operator|.
name|bus
operator|=
name|bus
expr_stmt|;
name|registerWithBindingManager
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|Collection
argument_list|<
name|String
argument_list|>
name|getActivationNamespaces
parameter_list|()
block|{
return|return
name|activationNamespaces
return|;
block|}
specifier|public
name|void
name|setActivationNamespaces
parameter_list|(
name|Collection
argument_list|<
name|String
argument_list|>
name|activationNamespaces
parameter_list|)
block|{
name|this
operator|.
name|activationNamespaces
operator|=
name|activationNamespaces
expr_stmt|;
name|registerWithBindingManager
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

