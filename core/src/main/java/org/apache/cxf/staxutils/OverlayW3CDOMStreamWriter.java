begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|staxutils
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|DocumentFragment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_comment
comment|/**  * Special StreamWriter that will "overlay" any write events onto the DOM.  * If the startElement ends up writing an element that already exists at that  * location, it will just walk into it instead of creating a new element  */
end_comment

begin_class
specifier|public
class|class
name|OverlayW3CDOMStreamWriter
extends|extends
name|W3CDOMStreamWriter
block|{
specifier|protected
name|boolean
name|isOverlaid
init|=
literal|true
decl_stmt|;
name|List
argument_list|<
name|Boolean
argument_list|>
name|isOverlaidStack
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
name|Boolean
name|textOverlay
decl_stmt|;
specifier|public
name|OverlayW3CDOMStreamWriter
parameter_list|(
name|Document
name|document
parameter_list|)
block|{
name|super
argument_list|(
name|document
argument_list|)
expr_stmt|;
block|}
specifier|public
name|OverlayW3CDOMStreamWriter
parameter_list|(
name|Element
name|e
parameter_list|)
block|{
name|super
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
specifier|public
name|OverlayW3CDOMStreamWriter
parameter_list|(
name|Document
name|doc
parameter_list|,
name|Element
name|e
parameter_list|)
block|{
name|super
argument_list|(
name|doc
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
specifier|public
name|OverlayW3CDOMStreamWriter
parameter_list|(
name|Document
name|doc
parameter_list|,
name|DocumentFragment
name|frag
parameter_list|)
block|{
name|super
argument_list|(
name|doc
argument_list|,
name|frag
argument_list|)
expr_stmt|;
name|isOverlaid
operator|=
literal|false
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|createAndAddElement
parameter_list|(
name|String
name|prefix
parameter_list|,
name|String
name|local
parameter_list|,
name|String
name|namespace
parameter_list|)
block|{
name|super
operator|.
name|createAndAddElement
argument_list|(
name|prefix
argument_list|,
name|local
argument_list|,
name|namespace
argument_list|)
expr_stmt|;
if|if
condition|(
name|isOverlaid
condition|)
block|{
try|try
block|{
comment|//mark this as new so we don't consider this for overlaying
name|getCurrentNode
argument_list|()
operator|.
name|setUserData
argument_list|(
literal|"new"
argument_list|,
literal|"new"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
comment|//ignore
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|writeEndElement
parameter_list|()
throws|throws
name|XMLStreamException
block|{
if|if
condition|(
name|isOverlaid
condition|)
block|{
name|Node
name|nd
init|=
name|getCurrentNode
argument_list|()
operator|.
name|getFirstChild
argument_list|()
decl_stmt|;
while|while
condition|(
name|nd
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|getCurrentNode
argument_list|()
operator|.
name|setUserData
argument_list|(
literal|"new"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
comment|//ignore
block|}
name|nd
operator|=
name|nd
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
block|}
block|}
name|isOverlaid
operator|=
name|isOverlaidStack
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|super
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
name|textOverlay
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|void
name|writeStartElement
parameter_list|(
name|String
name|local
parameter_list|)
throws|throws
name|XMLStreamException
block|{
name|isOverlaidStack
operator|.
name|add
argument_list|(
literal|0
argument_list|,
name|isOverlaid
argument_list|)
expr_stmt|;
if|if
condition|(
name|isOverlaid
condition|)
block|{
name|Element
name|nd
init|=
name|getCurrentNode
argument_list|()
decl_stmt|;
name|Node
name|nd2
decl_stmt|;
if|if
condition|(
name|nd
operator|==
literal|null
condition|)
block|{
name|nd2
operator|=
name|getDocument
argument_list|()
operator|.
name|getDocumentElement
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|nd2
operator|=
name|nd
operator|.
name|getFirstChild
argument_list|()
expr_stmt|;
block|}
while|while
condition|(
name|nd2
operator|!=
literal|null
condition|)
block|{
name|Object
name|userData
init|=
literal|null
decl_stmt|;
try|try
block|{
name|userData
operator|=
name|nd2
operator|.
name|getUserData
argument_list|(
literal|"new"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
comment|//ignore - non DOM level 3
block|}
if|if
condition|(
name|nd2
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|ELEMENT_NODE
operator|&&
name|local
operator|.
name|equals
argument_list|(
name|nd2
operator|.
name|getLocalName
argument_list|()
argument_list|)
operator|&&
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|nd2
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
operator|&&
name|userData
operator|!=
literal|null
condition|)
block|{
name|adjustOverlaidNode
argument_list|(
name|nd2
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|setChild
argument_list|(
operator|(
name|Element
operator|)
name|nd2
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|nd2
operator|.
name|getFirstChild
argument_list|()
operator|==
literal|null
condition|)
block|{
comment|//optimize a case where we KNOW anything added cannot be an overlay
name|isOverlaid
operator|=
literal|false
expr_stmt|;
name|textOverlay
operator|=
literal|null
expr_stmt|;
block|}
return|return;
block|}
name|nd2
operator|=
name|nd2
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
block|}
block|}
name|super
operator|.
name|writeStartElement
argument_list|(
name|local
argument_list|)
expr_stmt|;
name|isOverlaid
operator|=
literal|false
expr_stmt|;
name|textOverlay
operator|=
name|Boolean
operator|.
name|FALSE
expr_stmt|;
block|}
specifier|protected
name|void
name|adjustOverlaidNode
parameter_list|(
name|Node
name|nd2
parameter_list|,
name|String
name|pfx
parameter_list|)
block|{     }
specifier|public
name|void
name|writeStartElement
parameter_list|(
name|String
name|namespace
parameter_list|,
name|String
name|local
parameter_list|)
throws|throws
name|XMLStreamException
block|{
name|isOverlaidStack
operator|.
name|add
argument_list|(
literal|0
argument_list|,
name|isOverlaid
argument_list|)
expr_stmt|;
if|if
condition|(
name|isOverlaid
condition|)
block|{
name|Element
name|nd
init|=
name|getCurrentNode
argument_list|()
decl_stmt|;
name|Node
name|nd2
decl_stmt|;
if|if
condition|(
name|nd
operator|==
literal|null
condition|)
block|{
name|nd2
operator|=
name|getDocument
argument_list|()
operator|.
name|getDocumentElement
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|nd2
operator|=
name|nd
operator|.
name|getFirstChild
argument_list|()
expr_stmt|;
block|}
while|while
condition|(
name|nd2
operator|!=
literal|null
condition|)
block|{
name|Object
name|userData
init|=
literal|null
decl_stmt|;
try|try
block|{
name|userData
operator|=
name|nd2
operator|.
name|getUserData
argument_list|(
literal|"new"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
comment|//ignore - non DOM level 3
block|}
if|if
condition|(
name|nd2
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|ELEMENT_NODE
operator|&&
name|local
operator|.
name|equals
argument_list|(
name|nd2
operator|.
name|getLocalName
argument_list|()
argument_list|)
operator|&&
name|namespace
operator|.
name|equals
argument_list|(
name|nd2
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
operator|&&
name|userData
operator|==
literal|null
condition|)
block|{
name|adjustOverlaidNode
argument_list|(
name|nd2
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|setChild
argument_list|(
operator|(
name|Element
operator|)
name|nd2
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|nd2
operator|.
name|getFirstChild
argument_list|()
operator|==
literal|null
condition|)
block|{
comment|//optimize a case where we KNOW anything added cannot be an overlay
name|isOverlaid
operator|=
literal|false
expr_stmt|;
name|textOverlay
operator|=
literal|null
expr_stmt|;
block|}
return|return;
block|}
name|nd2
operator|=
name|nd2
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
block|}
block|}
name|super
operator|.
name|writeStartElement
argument_list|(
name|namespace
argument_list|,
name|local
argument_list|)
expr_stmt|;
name|isOverlaid
operator|=
literal|false
expr_stmt|;
name|textOverlay
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|void
name|writeStartElement
parameter_list|(
name|String
name|prefix
parameter_list|,
name|String
name|local
parameter_list|,
name|String
name|namespace
parameter_list|)
throws|throws
name|XMLStreamException
block|{
if|if
condition|(
name|prefix
operator|==
literal|null
operator|||
name|prefix
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|writeStartElement
argument_list|(
name|namespace
argument_list|,
name|local
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|isOverlaidStack
operator|.
name|add
argument_list|(
literal|0
argument_list|,
name|isOverlaid
argument_list|)
expr_stmt|;
if|if
condition|(
name|isOverlaid
condition|)
block|{
name|Element
name|nd
init|=
name|getCurrentNode
argument_list|()
decl_stmt|;
name|Node
name|nd2
decl_stmt|;
if|if
condition|(
name|nd
operator|==
literal|null
condition|)
block|{
name|nd2
operator|=
name|getDocument
argument_list|()
operator|.
name|getDocumentElement
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|nd2
operator|=
name|nd
operator|.
name|getFirstChild
argument_list|()
expr_stmt|;
block|}
while|while
condition|(
name|nd2
operator|!=
literal|null
condition|)
block|{
name|Object
name|userData
init|=
literal|null
decl_stmt|;
try|try
block|{
name|userData
operator|=
name|nd2
operator|.
name|getUserData
argument_list|(
literal|"new"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
comment|//ignore - non DOM level 3
block|}
if|if
condition|(
name|nd2
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|ELEMENT_NODE
operator|&&
name|local
operator|.
name|equals
argument_list|(
name|nd2
operator|.
name|getLocalName
argument_list|()
argument_list|)
operator|&&
name|namespace
operator|.
name|equals
argument_list|(
name|nd2
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
operator|&&
name|userData
operator|==
literal|null
condition|)
block|{
name|adjustOverlaidNode
argument_list|(
name|nd2
argument_list|,
name|prefix
argument_list|)
expr_stmt|;
name|setChild
argument_list|(
operator|(
name|Element
operator|)
name|nd2
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|nd2
operator|.
name|getFirstChild
argument_list|()
operator|==
literal|null
condition|)
block|{
comment|//optimize a case where we KNOW anything added cannot be an overlay
name|isOverlaid
operator|=
literal|false
expr_stmt|;
name|textOverlay
operator|=
literal|null
expr_stmt|;
block|}
return|return;
block|}
name|nd2
operator|=
name|nd2
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
block|}
block|}
name|super
operator|.
name|writeStartElement
argument_list|(
name|prefix
argument_list|,
name|local
argument_list|,
name|namespace
argument_list|)
expr_stmt|;
name|isOverlaid
operator|=
literal|false
expr_stmt|;
name|textOverlay
operator|=
literal|false
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|writeCharacters
parameter_list|(
name|String
name|text
parameter_list|)
throws|throws
name|XMLStreamException
block|{
if|if
condition|(
operator|!
name|isOverlaid
operator|||
name|textOverlay
operator|==
literal|null
condition|)
block|{
name|super
operator|.
name|writeCharacters
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|textOverlay
condition|)
block|{
name|Element
name|nd
init|=
name|getCurrentNode
argument_list|()
decl_stmt|;
name|Node
name|txt
init|=
name|nd
operator|.
name|getFirstChild
argument_list|()
decl_stmt|;
if|if
condition|(
name|txt
operator|instanceof
name|Text
operator|&&
operator|(
operator|(
name|Text
operator|)
name|txt
operator|)
operator|.
name|getTextContent
argument_list|()
operator|.
name|startsWith
argument_list|(
name|text
argument_list|)
condition|)
block|{
name|textOverlay
operator|=
literal|true
expr_stmt|;
return|return;
block|}
name|super
operator|.
name|writeCharacters
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

