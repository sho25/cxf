begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|staxutils
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Stack
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ArrayBlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|BlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|NamespaceContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|ParserConfigurationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|Location
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|StreamFilter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLEventFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLInputFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLOutputFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLResolver
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamConstants
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamReader
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamWriter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|events
operator|.
name|Attribute
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|events
operator|.
name|Characters
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|events
operator|.
name|DTD
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|events
operator|.
name|Namespace
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|events
operator|.
name|StartDocument
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|events
operator|.
name|StartElement
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|events
operator|.
name|XMLEvent
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|Source
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|dom
operator|.
name|DOMResult
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|dom
operator|.
name|DOMSource
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|sax
operator|.
name|SAXSource
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|stax
operator|.
name|StAXSource
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|stream
operator|.
name|StreamSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Attr
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|CDATASection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Comment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|DocumentFragment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|DocumentType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|EntityReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NamedNodeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|ProcessingInstruction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|UserDataHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|InputSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|XMLReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|classloader
operator|.
name|ClassLoaderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|PropertyUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|SystemPropertyAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|CastUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|DOMUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_class
specifier|public
specifier|final
class|class
name|StaxUtils
block|{
comment|// System properties for defaults, but also contextual properties usable
comment|// for StaxInInterceptor
specifier|public
specifier|static
specifier|final
name|String
name|MAX_CHILD_ELEMENTS
init|=
literal|"org.apache.cxf.stax.maxChildElements"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|MAX_ELEMENT_DEPTH
init|=
literal|"org.apache.cxf.stax.maxElementDepth"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|MAX_ATTRIBUTE_COUNT
init|=
literal|"org.apache.cxf.stax.maxAttributeCount"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|MAX_ATTRIBUTE_SIZE
init|=
literal|"org.apache.cxf.stax.maxAttributeSize"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|MAX_TEXT_LENGTH
init|=
literal|"org.apache.cxf.stax.maxTextLength"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|MIN_TEXT_SEGMENT
init|=
literal|"org.apache.cxf.stax.minTextSegment"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|MAX_ELEMENT_COUNT
init|=
literal|"org.apache.cxf.stax.maxElementCount"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|MAX_XML_CHARACTERS
init|=
literal|"org.apache.cxf.stax.maxXMLCharacters"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|ALLOW_INSECURE_PARSER
init|=
literal|"org.apache.cxf.stax.allowInsecureParser"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|INNER_ELEMENT_COUNT_SYSTEM_PROP
init|=
literal|"org.apache.cxf.staxutils.innerElementCountThreshold"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|INNER_ELEMENT_LEVEL_SYSTEM_PROP
init|=
literal|"org.apache.cxf.staxutils.innerElementLevelThreshold"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|StaxUtils
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|BlockingQueue
argument_list|<
name|XMLInputFactory
argument_list|>
name|NS_AWARE_INPUT_FACTORY_POOL
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|XMLInputFactory
name|SAFE_INPUT_FACTORY
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|BlockingQueue
argument_list|<
name|XMLOutputFactory
argument_list|>
name|OUTPUT_FACTORY_POOL
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|XMLOutputFactory
name|SAFE_OUTPUT_FACTORY
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|XML_NS
init|=
literal|"http://www.w3.org/2000/xmlns/"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DEF_PREFIXES
index|[]
init|=
operator|new
name|String
index|[]
block|{
literal|"ns1"
operator|.
name|intern
argument_list|()
block|,
literal|"ns2"
operator|.
name|intern
argument_list|()
block|,
literal|"ns3"
operator|.
name|intern
argument_list|()
block|,
literal|"ns4"
operator|.
name|intern
argument_list|()
block|,
literal|"ns5"
operator|.
name|intern
argument_list|()
block|,
literal|"ns6"
operator|.
name|intern
argument_list|()
block|,
literal|"ns7"
operator|.
name|intern
argument_list|()
block|,
literal|"ns8"
operator|.
name|intern
argument_list|()
block|,
literal|"ns9"
operator|.
name|intern
argument_list|()
block|}
decl_stmt|;
specifier|private
specifier|static
name|int
name|innerElementLevelThreshold
init|=
literal|100
decl_stmt|;
specifier|private
specifier|static
name|int
name|innerElementCountThreshold
init|=
literal|50000
decl_stmt|;
specifier|private
specifier|static
name|int
name|maxAttributeCount
init|=
literal|500
decl_stmt|;
specifier|private
specifier|static
name|int
name|maxAttributeSize
init|=
literal|64
operator|*
literal|1024
decl_stmt|;
comment|//64K per attribute, likely just "list" will hit
specifier|private
specifier|static
name|int
name|maxTextLength
init|=
literal|128
operator|*
literal|1024
operator|*
literal|1024
decl_stmt|;
comment|//128M - more than this should DEFINITLEY use MTOM
specifier|private
specifier|static
name|int
name|minTextSegment
init|=
literal|64
decl_stmt|;
comment|// Same default as woodstox
specifier|private
specifier|static
name|long
name|maxElementCount
init|=
name|Long
operator|.
name|MAX_VALUE
decl_stmt|;
specifier|private
specifier|static
name|long
name|maxXMLCharacters
init|=
name|Long
operator|.
name|MAX_VALUE
decl_stmt|;
specifier|private
specifier|static
name|boolean
name|allowInsecureParser
decl_stmt|;
static|static
block|{
name|int
name|i
init|=
name|getInteger
argument_list|(
literal|"org.apache.cxf.staxutils.pool-size"
argument_list|,
literal|20
argument_list|)
decl_stmt|;
name|NS_AWARE_INPUT_FACTORY_POOL
operator|=
operator|new
name|ArrayBlockingQueue
argument_list|<
name|XMLInputFactory
argument_list|>
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|OUTPUT_FACTORY_POOL
operator|=
operator|new
name|ArrayBlockingQueue
argument_list|<
name|XMLOutputFactory
argument_list|>
argument_list|(
name|i
argument_list|)
expr_stmt|;
comment|//old names
name|innerElementCountThreshold
operator|=
name|getInteger
argument_list|(
name|INNER_ELEMENT_COUNT_SYSTEM_PROP
argument_list|,
name|innerElementCountThreshold
argument_list|)
expr_stmt|;
name|innerElementLevelThreshold
operator|=
name|getInteger
argument_list|(
name|INNER_ELEMENT_LEVEL_SYSTEM_PROP
argument_list|,
name|innerElementLevelThreshold
argument_list|)
expr_stmt|;
comment|//new names
name|innerElementCountThreshold
operator|=
name|getInteger
argument_list|(
name|MAX_CHILD_ELEMENTS
argument_list|,
name|innerElementCountThreshold
argument_list|)
expr_stmt|;
name|innerElementLevelThreshold
operator|=
name|getInteger
argument_list|(
name|MAX_ELEMENT_DEPTH
argument_list|,
name|innerElementLevelThreshold
argument_list|)
expr_stmt|;
name|maxAttributeCount
operator|=
name|getInteger
argument_list|(
name|MAX_ATTRIBUTE_COUNT
argument_list|,
name|maxAttributeCount
argument_list|)
expr_stmt|;
name|maxAttributeSize
operator|=
name|getInteger
argument_list|(
name|MAX_ATTRIBUTE_SIZE
argument_list|,
name|maxAttributeSize
argument_list|)
expr_stmt|;
name|maxTextLength
operator|=
name|getInteger
argument_list|(
name|MAX_TEXT_LENGTH
argument_list|,
name|maxTextLength
argument_list|)
expr_stmt|;
name|minTextSegment
operator|=
name|getInteger
argument_list|(
name|MIN_TEXT_SEGMENT
argument_list|,
name|minTextSegment
argument_list|)
expr_stmt|;
name|maxElementCount
operator|=
name|getLong
argument_list|(
name|MAX_ELEMENT_COUNT
argument_list|,
name|maxElementCount
argument_list|)
expr_stmt|;
name|maxXMLCharacters
operator|=
name|getLong
argument_list|(
name|MAX_XML_CHARACTERS
argument_list|,
name|maxXMLCharacters
argument_list|)
expr_stmt|;
name|String
name|s
init|=
name|SystemPropertyAction
operator|.
name|getPropertyOrNull
argument_list|(
name|ALLOW_INSECURE_PARSER
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|s
argument_list|)
condition|)
block|{
name|allowInsecureParser
operator|=
literal|"1"
operator|.
name|equals
argument_list|(
name|s
argument_list|)
operator|||
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
name|XMLInputFactory
name|xif
init|=
literal|null
decl_stmt|;
try|try
block|{
name|xif
operator|=
name|createXMLInputFactory
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|String
name|xifClassName
init|=
name|xif
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|xifClassName
operator|.
name|contains
argument_list|(
literal|"ctc.wstx"
argument_list|)
operator|&&
operator|!
name|xifClassName
operator|.
name|contains
argument_list|(
literal|"xml.xlxp"
argument_list|)
operator|&&
operator|!
name|xifClassName
operator|.
name|contains
argument_list|(
literal|"xml.xlxp2"
argument_list|)
operator|&&
operator|!
name|xifClassName
operator|.
name|contains
argument_list|(
literal|"bea.core"
argument_list|)
condition|)
block|{
name|xif
operator|=
literal|null
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
comment|//ignore, can always drop down to the pooled factories
name|xif
operator|=
literal|null
expr_stmt|;
block|}
name|SAFE_INPUT_FACTORY
operator|=
name|xif
expr_stmt|;
name|XMLOutputFactory
name|xof
init|=
literal|null
decl_stmt|;
try|try
block|{
name|xof
operator|=
name|XMLOutputFactory
operator|.
name|newInstance
argument_list|()
expr_stmt|;
name|String
name|xofClassName
init|=
name|xof
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|xofClassName
operator|.
name|contains
argument_list|(
literal|"ctc.wstx"
argument_list|)
operator|&&
operator|!
name|xofClassName
operator|.
name|contains
argument_list|(
literal|"xml.xlxp"
argument_list|)
operator|&&
operator|!
name|xofClassName
operator|.
name|contains
argument_list|(
literal|"xml.xlxp2"
argument_list|)
operator|&&
operator|!
name|xofClassName
operator|.
name|contains
argument_list|(
literal|"bea.core"
argument_list|)
condition|)
block|{
name|xof
operator|=
literal|null
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
comment|//ignore, can always drop down to the pooled factories
block|}
name|SAFE_OUTPUT_FACTORY
operator|=
name|xof
expr_stmt|;
block|}
specifier|private
name|StaxUtils
parameter_list|()
block|{     }
specifier|private
specifier|static
name|int
name|getInteger
parameter_list|(
name|String
name|prop
parameter_list|,
name|int
name|def
parameter_list|)
block|{
try|try
block|{
name|String
name|s
init|=
name|SystemPropertyAction
operator|.
name|getPropertyOrNull
argument_list|(
name|prop
argument_list|)
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|s
argument_list|)
condition|)
block|{
return|return
name|def
return|;
block|}
name|int
name|i
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|s
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|<
literal|0
condition|)
block|{
name|i
operator|=
name|def
expr_stmt|;
block|}
return|return
name|i
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
comment|//ignore
block|}
return|return
name|def
return|;
block|}
specifier|private
specifier|static
name|long
name|getLong
parameter_list|(
name|String
name|prop
parameter_list|,
name|long
name|def
parameter_list|)
block|{
try|try
block|{
name|String
name|s
init|=
name|SystemPropertyAction
operator|.
name|getPropertyOrNull
argument_list|(
name|prop
argument_list|)
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|s
argument_list|)
condition|)
block|{
return|return
name|def
return|;
block|}
name|long
name|i
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|s
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|<
literal|0
condition|)
block|{
name|i
operator|=
name|def
expr_stmt|;
block|}
return|return
name|i
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
comment|//ignore
block|}
return|return
name|def
return|;
block|}
specifier|public
specifier|static
name|void
name|setInnerElementLevelThreshold
parameter_list|(
name|int
name|i
parameter_list|)
block|{
if|if
condition|(
name|i
operator|==
operator|-
literal|1
condition|)
block|{
name|i
operator|=
literal|500
expr_stmt|;
block|}
name|innerElementLevelThreshold
operator|=
name|i
expr_stmt|;
name|setProperty
argument_list|(
name|SAFE_INPUT_FACTORY
argument_list|,
literal|"com.ctc.wstx.maxElementDepth"
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|setInnerElementCountThreshold
parameter_list|(
name|int
name|i
parameter_list|)
block|{
if|if
condition|(
name|i
operator|==
operator|-
literal|1
condition|)
block|{
name|i
operator|=
literal|50000
expr_stmt|;
block|}
name|innerElementCountThreshold
operator|=
name|i
expr_stmt|;
name|setProperty
argument_list|(
name|SAFE_INPUT_FACTORY
argument_list|,
literal|"com.ctc.wstx.maxChildrenPerElement"
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
comment|/**      * CXF works with multiple STaX parsers. When we can't find any other way to work      * against the different parsers, this can be used to condition code. Note: if you've got      * Woodstox in the class path without being the default provider, this will return      * the wrong answer.      * @return true if Woodstox is in the classpath.      */
specifier|public
specifier|static
name|boolean
name|isWoodstox
parameter_list|()
block|{
try|try
block|{
name|ClassLoaderUtils
operator|.
name|loadClass
argument_list|(
literal|"org.codehaus.stax2.XMLStreamReader2"
argument_list|,
name|StaxUtils
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
comment|/**      * Return a cached, namespace-aware, factory.      */
specifier|private
specifier|static
name|XMLInputFactory
name|getXMLInputFactory
parameter_list|()
block|{
if|if
condition|(
name|SAFE_INPUT_FACTORY
operator|!=
literal|null
condition|)
block|{
return|return
name|SAFE_INPUT_FACTORY
return|;
block|}
name|XMLInputFactory
name|f
init|=
name|NS_AWARE_INPUT_FACTORY_POOL
operator|.
name|poll
argument_list|()
decl_stmt|;
if|if
condition|(
name|f
operator|==
literal|null
condition|)
block|{
name|f
operator|=
name|createXMLInputFactory
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
return|return
name|f
return|;
block|}
specifier|private
specifier|static
name|void
name|returnXMLInputFactory
parameter_list|(
name|XMLInputFactory
name|factory
parameter_list|)
block|{
if|if
condition|(
name|SAFE_INPUT_FACTORY
operator|!=
name|factory
condition|)
block|{
name|NS_AWARE_INPUT_FACTORY_POOL
operator|.
name|offer
argument_list|(
name|factory
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|XMLOutputFactory
name|getXMLOutputFactory
parameter_list|()
block|{
if|if
condition|(
name|SAFE_OUTPUT_FACTORY
operator|!=
literal|null
condition|)
block|{
return|return
name|SAFE_OUTPUT_FACTORY
return|;
block|}
name|XMLOutputFactory
name|f
init|=
name|OUTPUT_FACTORY_POOL
operator|.
name|poll
argument_list|()
decl_stmt|;
if|if
condition|(
name|f
operator|==
literal|null
condition|)
block|{
name|f
operator|=
name|XMLOutputFactory
operator|.
name|newInstance
argument_list|()
expr_stmt|;
block|}
return|return
name|f
return|;
block|}
specifier|private
specifier|static
name|void
name|returnXMLOutputFactory
parameter_list|(
name|XMLOutputFactory
name|factory
parameter_list|)
block|{
if|if
condition|(
name|SAFE_OUTPUT_FACTORY
operator|!=
name|factory
condition|)
block|{
name|OUTPUT_FACTORY_POOL
operator|.
name|offer
argument_list|(
name|factory
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Return a new factory so that the caller can set sticky parameters.      * @param nsAware      * @throws XMLStreamException      */
specifier|public
specifier|static
name|XMLInputFactory
name|createXMLInputFactory
parameter_list|(
name|boolean
name|nsAware
parameter_list|)
block|{
name|XMLInputFactory
name|factory
init|=
literal|null
decl_stmt|;
try|try
block|{
name|factory
operator|=
name|XMLInputFactory
operator|.
name|newInstance
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isLoggable
argument_list|(
name|Level
operator|.
name|FINE
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|FINE
argument_list|,
literal|"XMLInputFactory.newInstance() failed with: "
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
name|factory
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|factory
operator|==
literal|null
operator|||
operator|!
name|setRestrictionProperties
argument_list|(
name|factory
argument_list|)
condition|)
block|{
try|try
block|{
name|factory
operator|=
name|createWoodstoxFactory
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isLoggable
argument_list|(
name|Level
operator|.
name|FINE
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|FINE
argument_list|,
literal|"Cannot create Woodstox XMLInputFactory: "
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|factory
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Failed to create XMLInputFactory."
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|setRestrictionProperties
argument_list|(
name|factory
argument_list|)
condition|)
block|{
if|if
condition|(
name|allowInsecureParser
condition|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
literal|"INSECURE_PARSER_DETECTED"
argument_list|,
name|factory
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Cannot create a secure XMLInputFactory"
argument_list|)
throw|;
block|}
block|}
block|}
name|setProperty
argument_list|(
name|factory
argument_list|,
name|XMLInputFactory
operator|.
name|IS_NAMESPACE_AWARE
argument_list|,
name|nsAware
argument_list|)
expr_stmt|;
name|setProperty
argument_list|(
name|factory
argument_list|,
name|XMLInputFactory
operator|.
name|SUPPORT_DTD
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|setProperty
argument_list|(
name|factory
argument_list|,
name|XMLInputFactory
operator|.
name|IS_REPLACING_ENTITY_REFERENCES
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|setProperty
argument_list|(
name|factory
argument_list|,
name|XMLInputFactory
operator|.
name|IS_SUPPORTING_EXTERNAL_ENTITIES
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|factory
operator|.
name|setXMLResolver
argument_list|(
operator|new
name|XMLResolver
argument_list|()
block|{
specifier|public
name|Object
name|resolveEntity
parameter_list|(
name|String
name|publicID
parameter_list|,
name|String
name|systemID
parameter_list|,
name|String
name|baseURI
parameter_list|,
name|String
name|namespace
parameter_list|)
throws|throws
name|XMLStreamException
block|{
throw|throw
operator|new
name|XMLStreamException
argument_list|(
literal|"Reading external entities is disabled"
argument_list|)
throw|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|factory
return|;
block|}
specifier|private
specifier|static
name|XMLInputFactory
name|createWoodstoxFactory
parameter_list|()
block|{
return|return
name|WoodstoxHelper
operator|.
name|createInputFactory
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|XMLEventFactory
name|createWoodstoxEventFactory
parameter_list|()
block|{
return|return
name|WoodstoxHelper
operator|.
name|createEventFactory
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|boolean
name|setRestrictionProperties
parameter_list|(
name|XMLInputFactory
name|factory
parameter_list|)
block|{
comment|//For now, we can only support Woodstox 4.2.x and newer as none of the other
comment|//stax parsers support these settings
specifier|final
name|boolean
name|wstxMaxs
init|=
name|setProperty
argument_list|(
name|factory
argument_list|,
literal|"com.ctc.wstx.maxAttributesPerElement"
argument_list|,
name|maxAttributeCount
argument_list|)
operator|&&
name|setProperty
argument_list|(
name|factory
argument_list|,
literal|"com.ctc.wstx.maxAttributeSize"
argument_list|,
name|maxAttributeSize
argument_list|)
operator|&&
name|setProperty
argument_list|(
name|factory
argument_list|,
literal|"com.ctc.wstx.maxChildrenPerElement"
argument_list|,
name|innerElementCountThreshold
argument_list|)
operator|&&
name|setProperty
argument_list|(
name|factory
argument_list|,
literal|"com.ctc.wstx.maxElementCount"
argument_list|,
name|maxElementCount
argument_list|)
operator|&&
name|setProperty
argument_list|(
name|factory
argument_list|,
literal|"com.ctc.wstx.maxElementDepth"
argument_list|,
name|innerElementLevelThreshold
argument_list|)
operator|&&
name|setProperty
argument_list|(
name|factory
argument_list|,
literal|"com.ctc.wstx.maxCharacters"
argument_list|,
name|maxXMLCharacters
argument_list|)
operator|&&
name|setProperty
argument_list|(
name|factory
argument_list|,
literal|"com.ctc.wstx.maxTextLength"
argument_list|,
name|maxTextLength
argument_list|)
decl_stmt|;
return|return
name|wstxMaxs
operator|&&
name|setProperty
argument_list|(
name|factory
argument_list|,
literal|"com.ctc.wstx.minTextSegment"
argument_list|,
name|minTextSegment
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|boolean
name|setProperty
parameter_list|(
name|XMLInputFactory
name|f
parameter_list|,
name|String
name|p
parameter_list|,
name|Object
name|o
parameter_list|)
block|{
try|try
block|{
name|f
operator|.
name|setProperty
argument_list|(
name|p
argument_list|,
name|o
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
comment|//ignore
block|}
return|return
literal|false
return|;
block|}
specifier|public
specifier|static
name|XMLStreamWriter
name|createXMLStreamWriter
parameter_list|(
name|Writer
name|out
parameter_list|)
block|{
name|XMLOutputFactory
name|factory
init|=
name|getXMLOutputFactory
argument_list|()
decl_stmt|;
try|try
block|{
return|return
name|factory
operator|.
name|createXMLStreamWriter
argument_list|(
name|out
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|XMLStreamException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Cant' create XMLStreamWriter"
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|returnXMLOutputFactory
argument_list|(
name|factory
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|XMLStreamWriter
name|createXMLStreamWriter
parameter_list|(
name|OutputStream
name|out
parameter_list|)
block|{
return|return
name|createXMLStreamWriter
argument_list|(
name|out
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|XMLStreamWriter
name|createXMLStreamWriter
parameter_list|(
name|OutputStream
name|out
parameter_list|,
name|String
name|encoding
parameter_list|)
block|{
if|if
condition|(
name|encoding
operator|==
literal|null
condition|)
block|{
name|encoding
operator|=
name|StandardCharsets
operator|.
name|UTF_8
operator|.
name|name
argument_list|()
expr_stmt|;
block|}
name|XMLOutputFactory
name|factory
init|=
name|getXMLOutputFactory
argument_list|()
decl_stmt|;
try|try
block|{
return|return
name|factory
operator|.
name|createXMLStreamWriter
argument_list|(
name|out
argument_list|,
name|encoding
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|XMLStreamException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Cant' create XMLStreamWriter"
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|returnXMLOutputFactory
argument_list|(
name|factory
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|XMLStreamWriter
name|createXMLStreamWriter
parameter_list|(
name|Result
name|r
parameter_list|)
block|{
if|if
condition|(
name|r
operator|instanceof
name|DOMResult
condition|)
block|{
comment|//use our own DOM writer to avoid issues with Sun's
comment|//version that doesn't support getNamespaceContext
name|DOMResult
name|dr
init|=
operator|(
name|DOMResult
operator|)
name|r
decl_stmt|;
name|Node
name|nd
init|=
name|dr
operator|.
name|getNode
argument_list|()
decl_stmt|;
if|if
condition|(
name|nd
operator|instanceof
name|Document
condition|)
block|{
return|return
operator|new
name|W3CDOMStreamWriter
argument_list|(
operator|(
name|Document
operator|)
name|nd
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|nd
operator|instanceof
name|Element
condition|)
block|{
return|return
operator|new
name|W3CDOMStreamWriter
argument_list|(
operator|(
name|Element
operator|)
name|nd
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|nd
operator|instanceof
name|DocumentFragment
condition|)
block|{
return|return
operator|new
name|W3CDOMStreamWriter
argument_list|(
operator|(
name|DocumentFragment
operator|)
name|nd
argument_list|)
return|;
block|}
block|}
name|XMLOutputFactory
name|factory
init|=
name|getXMLOutputFactory
argument_list|()
decl_stmt|;
try|try
block|{
return|return
name|factory
operator|.
name|createXMLStreamWriter
argument_list|(
name|r
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|XMLStreamException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Cant' create XMLStreamWriter"
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|returnXMLOutputFactory
argument_list|(
name|factory
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|XMLStreamReader
name|createFilteredReader
parameter_list|(
name|XMLStreamReader
name|reader
parameter_list|,
name|StreamFilter
name|filter
parameter_list|)
block|{
name|XMLInputFactory
name|factory
init|=
name|getXMLInputFactory
argument_list|()
decl_stmt|;
try|try
block|{
return|return
name|factory
operator|.
name|createFilteredReader
argument_list|(
name|reader
argument_list|,
name|filter
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|XMLStreamException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Cant' create XMLStreamReader"
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|returnXMLInputFactory
argument_list|(
name|factory
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|void
name|nextEvent
parameter_list|(
name|XMLStreamReader
name|dr
parameter_list|)
block|{
try|try
block|{
name|dr
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLStreamException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Couldn't parse stream."
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|boolean
name|toNextText
parameter_list|(
name|DepthXMLStreamReader
name|reader
parameter_list|)
block|{
if|if
condition|(
name|reader
operator|.
name|getEventType
argument_list|()
operator|==
name|XMLStreamConstants
operator|.
name|CHARACTERS
condition|)
block|{
return|return
literal|true
return|;
block|}
try|try
block|{
name|int
name|depth
init|=
name|reader
operator|.
name|getDepth
argument_list|()
decl_stmt|;
name|int
name|event
init|=
name|reader
operator|.
name|getEventType
argument_list|()
decl_stmt|;
while|while
condition|(
name|reader
operator|.
name|getDepth
argument_list|()
operator|>=
name|depth
operator|&&
name|reader
operator|.
name|hasNext
argument_list|()
condition|)
block|{
if|if
condition|(
name|event
operator|==
name|XMLStreamConstants
operator|.
name|CHARACTERS
operator|&&
name|reader
operator|.
name|getDepth
argument_list|()
operator|==
name|depth
operator|+
literal|1
condition|)
block|{
return|return
literal|true
return|;
block|}
name|event
operator|=
name|reader
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
catch|catch
parameter_list|(
name|XMLStreamException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Couldn't parse stream."
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|boolean
name|toNextTag
parameter_list|(
name|XMLStreamReader
name|reader
parameter_list|)
block|{
try|try
block|{
comment|// advance to first tag.
name|int
name|x
init|=
name|reader
operator|.
name|getEventType
argument_list|()
decl_stmt|;
while|while
condition|(
name|x
operator|!=
name|XMLStreamConstants
operator|.
name|START_ELEMENT
operator|&&
name|x
operator|!=
name|XMLStreamConstants
operator|.
name|END_ELEMENT
operator|&&
name|reader
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|x
operator|=
name|reader
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|XMLStreamException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Couldn't parse stream."
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
specifier|static
name|boolean
name|toNextTag
parameter_list|(
name|DepthXMLStreamReader
name|reader
parameter_list|,
name|QName
name|endTag
parameter_list|)
block|{
try|try
block|{
name|int
name|depth
init|=
name|reader
operator|.
name|getDepth
argument_list|()
decl_stmt|;
name|int
name|event
init|=
name|reader
operator|.
name|getEventType
argument_list|()
decl_stmt|;
while|while
condition|(
name|reader
operator|.
name|getDepth
argument_list|()
operator|>=
name|depth
operator|&&
name|reader
operator|.
name|hasNext
argument_list|()
condition|)
block|{
if|if
condition|(
name|event
operator|==
name|XMLStreamConstants
operator|.
name|START_ELEMENT
operator|&&
name|reader
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|endTag
argument_list|)
operator|&&
name|reader
operator|.
name|getDepth
argument_list|()
operator|==
name|depth
operator|+
literal|1
condition|)
block|{
return|return
literal|true
return|;
block|}
name|event
operator|=
name|reader
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
catch|catch
parameter_list|(
name|XMLStreamException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Couldn't parse stream."
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|void
name|writeStartElement
parameter_list|(
name|XMLStreamWriter
name|writer
parameter_list|,
name|String
name|prefix
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|namespace
parameter_list|)
throws|throws
name|XMLStreamException
block|{
if|if
condition|(
name|prefix
operator|==
literal|null
condition|)
block|{
name|prefix
operator|=
literal|""
expr_stmt|;
block|}
if|if
condition|(
name|namespace
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|writer
operator|.
name|writeStartElement
argument_list|(
name|prefix
argument_list|,
name|name
argument_list|,
name|namespace
argument_list|)
expr_stmt|;
if|if
condition|(
name|prefix
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|writer
operator|.
name|writeNamespace
argument_list|(
name|prefix
argument_list|,
name|namespace
argument_list|)
expr_stmt|;
name|writer
operator|.
name|setPrefix
argument_list|(
name|prefix
argument_list|,
name|namespace
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|writer
operator|.
name|writeDefaultNamespace
argument_list|(
name|namespace
argument_list|)
expr_stmt|;
name|writer
operator|.
name|setDefaultNamespace
argument_list|(
name|namespace
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|writer
operator|.
name|writeStartElement
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeDefaultNamespace
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|writer
operator|.
name|setDefaultNamespace
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Returns true if currently at the start of an element, otherwise move      * forwards to the next element start and return true, otherwise false is      * returned if the end of the stream is reached.      */
specifier|public
specifier|static
name|boolean
name|skipToStartOfElement
parameter_list|(
name|XMLStreamReader
name|in
parameter_list|)
throws|throws
name|XMLStreamException
block|{
for|for
control|(
name|int
name|code
init|=
name|in
operator|.
name|getEventType
argument_list|()
init|;
name|code
operator|!=
name|XMLStreamConstants
operator|.
name|END_DOCUMENT
condition|;
name|code
operator|=
name|in
operator|.
name|next
argument_list|()
control|)
block|{
if|if
condition|(
name|code
operator|==
name|XMLStreamConstants
operator|.
name|START_ELEMENT
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|public
specifier|static
name|boolean
name|toNextElement
parameter_list|(
name|DepthXMLStreamReader
name|dr
parameter_list|)
block|{
if|if
condition|(
name|dr
operator|.
name|getEventType
argument_list|()
operator|==
name|XMLStreamConstants
operator|.
name|START_ELEMENT
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|dr
operator|.
name|getEventType
argument_list|()
operator|==
name|XMLStreamConstants
operator|.
name|END_ELEMENT
condition|)
block|{
return|return
literal|false
return|;
block|}
try|try
block|{
name|int
name|depth
init|=
name|dr
operator|.
name|getDepth
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|event
init|=
name|dr
operator|.
name|getEventType
argument_list|()
init|;
name|dr
operator|.
name|getDepth
argument_list|()
operator|>=
name|depth
operator|&&
name|dr
operator|.
name|hasNext
argument_list|()
condition|;
name|event
operator|=
name|dr
operator|.
name|next
argument_list|()
control|)
block|{
if|if
condition|(
name|event
operator|==
name|XMLStreamConstants
operator|.
name|START_ELEMENT
operator|&&
name|dr
operator|.
name|getDepth
argument_list|()
operator|==
name|depth
operator|+
literal|1
condition|)
block|{
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|event
operator|==
name|XMLStreamConstants
operator|.
name|END_ELEMENT
condition|)
block|{
name|depth
operator|--
expr_stmt|;
block|}
block|}
return|return
literal|false
return|;
block|}
catch|catch
parameter_list|(
name|XMLStreamException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Couldn't parse stream."
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|boolean
name|skipToStartOfElement
parameter_list|(
name|DepthXMLStreamReader
name|in
parameter_list|)
throws|throws
name|XMLStreamException
block|{
for|for
control|(
name|int
name|code
init|=
name|in
operator|.
name|getEventType
argument_list|()
init|;
name|code
operator|!=
name|XMLStreamConstants
operator|.
name|END_DOCUMENT
condition|;
name|code
operator|=
name|in
operator|.
name|next
argument_list|()
control|)
block|{
if|if
condition|(
name|code
operator|==
name|XMLStreamConstants
operator|.
name|START_ELEMENT
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|public
specifier|static
name|void
name|copy
parameter_list|(
name|Source
name|source
parameter_list|,
name|OutputStream
name|os
parameter_list|)
throws|throws
name|XMLStreamException
block|{
name|XMLStreamWriter
name|writer
init|=
name|createXMLStreamWriter
argument_list|(
name|os
argument_list|)
decl_stmt|;
try|try
block|{
name|copy
argument_list|(
name|source
argument_list|,
name|writer
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
try|try
block|{
name|writer
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLStreamException
name|ex
parameter_list|)
block|{
comment|//ignore
block|}
name|StaxUtils
operator|.
name|close
argument_list|(
name|writer
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|void
name|copy
parameter_list|(
name|Source
name|source
parameter_list|,
name|XMLStreamWriter
name|writer
parameter_list|)
throws|throws
name|XMLStreamException
block|{
if|if
condition|(
name|source
operator|instanceof
name|StaxSource
condition|)
block|{
name|StaxSource
name|ss
init|=
operator|(
name|StaxSource
operator|)
name|source
decl_stmt|;
if|if
condition|(
name|ss
operator|.
name|getXMLStreamReader
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return;
block|}
block|}
elseif|else
if|if
condition|(
name|source
operator|instanceof
name|StAXSource
condition|)
block|{
name|StAXSource
name|ss
init|=
operator|(
name|StAXSource
operator|)
name|source
decl_stmt|;
if|if
condition|(
name|ss
operator|.
name|getXMLStreamReader
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return;
block|}
block|}
elseif|else
if|if
condition|(
name|source
operator|instanceof
name|SAXSource
condition|)
block|{
name|SAXSource
name|ss
init|=
operator|(
name|SAXSource
operator|)
name|source
decl_stmt|;
name|InputSource
name|src
init|=
name|ss
operator|.
name|getInputSource
argument_list|()
decl_stmt|;
if|if
condition|(
name|src
operator|==
literal|null
operator|||
operator|(
name|src
operator|.
name|getSystemId
argument_list|()
operator|==
literal|null
operator|&&
name|src
operator|.
name|getPublicId
argument_list|()
operator|==
literal|null
operator|)
condition|)
block|{
if|if
condition|(
name|ss
operator|.
name|getXMLReader
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|//OK - reader is OK.  We'll use that out
name|StreamWriterContentHandler
name|ch
init|=
operator|new
name|StreamWriterContentHandler
argument_list|(
name|writer
argument_list|)
decl_stmt|;
name|XMLReader
name|reader
init|=
operator|(
operator|(
name|SAXSource
operator|)
name|source
operator|)
operator|.
name|getXMLReader
argument_list|()
decl_stmt|;
name|reader
operator|.
name|setContentHandler
argument_list|(
name|ch
argument_list|)
expr_stmt|;
try|try
block|{
try|try
block|{
name|reader
operator|.
name|setFeature
argument_list|(
literal|"http://xml.org/sax/features/namespaces"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
comment|//ignore
block|}
try|try
block|{
name|reader
operator|.
name|setProperty
argument_list|(
literal|"http://xml.org/sax/properties/lexical-handler"
argument_list|,
name|ch
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
comment|//ignore
block|}
name|reader
operator|.
name|parse
argument_list|(
operator|(
operator|(
name|SAXSource
operator|)
name|source
operator|)
operator|.
name|getInputSource
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XMLStreamException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|ss
operator|.
name|getInputSource
argument_list|()
operator|==
literal|null
condition|)
block|{
comment|//nothing to copy, just return
return|return;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|source
operator|instanceof
name|StreamSource
condition|)
block|{
name|StreamSource
name|ss
init|=
operator|(
name|StreamSource
operator|)
name|source
decl_stmt|;
if|if
condition|(
name|ss
operator|.
name|getInputStream
argument_list|()
operator|==
literal|null
operator|&&
name|ss
operator|.
name|getReader
argument_list|()
operator|==
literal|null
operator|&&
name|ss
operator|.
name|getSystemId
argument_list|()
operator|==
literal|null
condition|)
block|{
comment|//nothing to copy, just return
return|return;
block|}
block|}
name|XMLStreamReader
name|reader
init|=
name|createXMLStreamReader
argument_list|(
name|source
argument_list|)
decl_stmt|;
name|copy
argument_list|(
name|reader
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|public
specifier|static
name|Document
name|copy
parameter_list|(
name|Document
name|doc
parameter_list|)
throws|throws
name|XMLStreamException
throws|,
name|ParserConfigurationException
block|{
name|XMLStreamReader
name|reader
init|=
name|createXMLStreamReader
argument_list|(
name|doc
argument_list|)
decl_stmt|;
name|W3CDOMStreamWriter
name|writer
init|=
operator|new
name|W3CDOMStreamWriter
argument_list|()
decl_stmt|;
name|copy
argument_list|(
name|reader
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|Document
name|d
init|=
name|writer
operator|.
name|getDocument
argument_list|()
decl_stmt|;
try|try
block|{
name|d
operator|.
name|setDocumentURI
argument_list|(
name|doc
operator|.
name|getDocumentURI
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|//ignore - probably not DOM level 3
block|}
return|return
name|d
return|;
block|}
specifier|public
specifier|static
name|void
name|copy
parameter_list|(
name|Document
name|doc
parameter_list|,
name|XMLStreamWriter
name|writer
parameter_list|)
throws|throws
name|XMLStreamException
block|{
name|XMLStreamReader
name|reader
init|=
name|createXMLStreamReader
argument_list|(
name|doc
argument_list|)
decl_stmt|;
name|copy
argument_list|(
name|reader
argument_list|,
name|writer
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|copy
parameter_list|(
name|Element
name|node
parameter_list|,
name|XMLStreamWriter
name|writer
parameter_list|)
throws|throws
name|XMLStreamException
block|{
name|XMLStreamReader
name|reader
init|=
name|createXMLStreamReader
argument_list|(
name|node
argument_list|)
decl_stmt|;
name|copy
argument_list|(
name|reader
argument_list|,
name|writer
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|copy
parameter_list|(
name|XMLStreamReader
name|reader
parameter_list|,
name|OutputStream
name|os
parameter_list|)
throws|throws
name|XMLStreamException
block|{
name|XMLStreamWriter
name|xsw
init|=
name|StaxUtils
operator|.
name|createXMLStreamWriter
argument_list|(
name|os
argument_list|)
decl_stmt|;
name|StaxUtils
operator|.
name|copy
argument_list|(
name|reader
argument_list|,
name|xsw
argument_list|)
expr_stmt|;
name|xsw
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|writeTo
parameter_list|(
name|Node
name|node
parameter_list|,
name|OutputStream
name|os
parameter_list|)
throws|throws
name|XMLStreamException
block|{
name|copy
argument_list|(
operator|new
name|DOMSource
argument_list|(
name|node
argument_list|)
argument_list|,
name|os
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|writeTo
parameter_list|(
name|Node
name|node
parameter_list|,
name|OutputStream
name|os
parameter_list|,
name|int
name|indent
parameter_list|)
throws|throws
name|XMLStreamException
block|{
if|if
condition|(
name|indent
operator|>
literal|0
condition|)
block|{
name|XMLStreamWriter
name|writer
init|=
operator|new
name|PrettyPrintXMLStreamWriter
argument_list|(
name|createXMLStreamWriter
argument_list|(
name|os
argument_list|)
argument_list|,
name|indent
argument_list|)
decl_stmt|;
try|try
block|{
name|copy
argument_list|(
operator|new
name|DOMSource
argument_list|(
name|node
argument_list|)
argument_list|,
name|writer
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|copy
argument_list|(
operator|new
name|DOMSource
argument_list|(
name|node
argument_list|)
argument_list|,
name|os
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|void
name|writeTo
parameter_list|(
name|Node
name|node
parameter_list|,
name|Writer
name|os
parameter_list|)
throws|throws
name|XMLStreamException
block|{
name|writeTo
argument_list|(
name|node
argument_list|,
name|os
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|writeTo
parameter_list|(
name|Node
name|node
parameter_list|,
name|Writer
name|os
parameter_list|,
name|int
name|indent
parameter_list|)
throws|throws
name|XMLStreamException
block|{
name|XMLStreamWriter
name|writer
init|=
name|createXMLStreamWriter
argument_list|(
name|os
argument_list|)
decl_stmt|;
if|if
condition|(
name|indent
operator|>
literal|0
condition|)
block|{
name|writer
operator|=
operator|new
name|PrettyPrintXMLStreamWriter
argument_list|(
name|writer
argument_list|,
name|indent
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|copy
argument_list|(
operator|new
name|DOMSource
argument_list|(
name|node
argument_list|)
argument_list|,
name|writer
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Copies the reader to the writer. The start and end document methods must      * be handled on the writer manually. TODO: if the namespace on the reader      * has been declared previously to where we are in the stream, this probably      * won't work.      *      * @param reader      * @param writer      * @throws XMLStreamException      */
specifier|public
specifier|static
name|void
name|copy
parameter_list|(
name|XMLStreamReader
name|reader
parameter_list|,
name|XMLStreamWriter
name|writer
parameter_list|)
throws|throws
name|XMLStreamException
block|{
name|copy
argument_list|(
name|reader
argument_list|,
name|writer
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|copy
parameter_list|(
name|XMLStreamReader
name|reader
parameter_list|,
name|XMLStreamWriter
name|writer
parameter_list|,
name|boolean
name|fragment
parameter_list|)
throws|throws
name|XMLStreamException
block|{
name|copy
argument_list|(
name|reader
argument_list|,
name|writer
argument_list|,
name|fragment
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|copy
parameter_list|(
name|XMLStreamReader
name|reader
parameter_list|,
name|XMLStreamWriter
name|writer
parameter_list|,
name|boolean
name|fragment
parameter_list|,
name|boolean
name|isThreshold
parameter_list|)
throws|throws
name|XMLStreamException
block|{
comment|// number of elements read in
name|int
name|read
init|=
literal|0
decl_stmt|;
name|int
name|elementCount
init|=
literal|0
decl_stmt|;
name|Stack
argument_list|<
name|Integer
argument_list|>
name|countStack
init|=
operator|new
name|Stack
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|event
init|=
name|reader
operator|.
name|getEventType
argument_list|()
decl_stmt|;
while|while
condition|(
name|reader
operator|.
name|hasNext
argument_list|()
condition|)
block|{
switch|switch
condition|(
name|event
condition|)
block|{
case|case
name|XMLStreamConstants
operator|.
name|START_ELEMENT
case|:
name|read
operator|++
expr_stmt|;
if|if
condition|(
name|isThreshold
condition|)
block|{
name|elementCount
operator|++
expr_stmt|;
if|if
condition|(
name|innerElementLevelThreshold
operator|!=
operator|-
literal|1
operator|&&
name|read
operator|>=
name|innerElementLevelThreshold
condition|)
block|{
throw|throw
operator|new
name|DepthExceededStaxException
argument_list|(
literal|"reach the innerElementLevelThreshold:"
operator|+
name|innerElementLevelThreshold
argument_list|)
throw|;
block|}
if|if
condition|(
name|innerElementCountThreshold
operator|!=
operator|-
literal|1
operator|&&
name|elementCount
operator|>=
name|innerElementCountThreshold
condition|)
block|{
throw|throw
operator|new
name|DepthExceededStaxException
argument_list|(
literal|"reach the innerElementCountThreshold:"
operator|+
name|innerElementCountThreshold
argument_list|)
throw|;
block|}
name|countStack
operator|.
name|push
argument_list|(
name|elementCount
argument_list|)
expr_stmt|;
name|elementCount
operator|=
literal|0
expr_stmt|;
block|}
name|writeStartElement
argument_list|(
name|reader
argument_list|,
name|writer
argument_list|)
expr_stmt|;
break|break;
case|case
name|XMLStreamConstants
operator|.
name|END_ELEMENT
case|:
if|if
condition|(
name|read
operator|>
literal|0
condition|)
block|{
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
block|}
name|read
operator|--
expr_stmt|;
if|if
condition|(
name|read
operator|<
literal|0
operator|&&
name|fragment
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|isThreshold
operator|&&
operator|!
name|countStack
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|elementCount
operator|=
name|countStack
operator|.
name|pop
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
name|XMLStreamConstants
operator|.
name|CHARACTERS
case|:
case|case
name|XMLStreamConstants
operator|.
name|SPACE
case|:
name|String
name|s
init|=
name|reader
operator|.
name|getText
argument_list|()
decl_stmt|;
if|if
condition|(
name|s
operator|!=
literal|null
condition|)
block|{
name|writer
operator|.
name|writeCharacters
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|XMLStreamConstants
operator|.
name|COMMENT
case|:
name|writer
operator|.
name|writeComment
argument_list|(
name|reader
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|XMLStreamConstants
operator|.
name|CDATA
case|:
name|writer
operator|.
name|writeCData
argument_list|(
name|reader
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|XMLStreamConstants
operator|.
name|START_DOCUMENT
case|:
case|case
name|XMLStreamConstants
operator|.
name|END_DOCUMENT
case|:
case|case
name|XMLStreamConstants
operator|.
name|ATTRIBUTE
case|:
case|case
name|XMLStreamConstants
operator|.
name|NAMESPACE
case|:
break|break;
default|default:
break|break;
block|}
name|event
operator|=
name|reader
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|writeStartElement
parameter_list|(
name|XMLStreamReader
name|reader
parameter_list|,
name|XMLStreamWriter
name|writer
parameter_list|)
throws|throws
name|XMLStreamException
block|{
name|String
name|uri
init|=
name|reader
operator|.
name|getNamespaceURI
argument_list|()
decl_stmt|;
name|String
name|prefix
init|=
name|reader
operator|.
name|getPrefix
argument_list|()
decl_stmt|;
name|String
name|local
init|=
name|reader
operator|.
name|getLocalName
argument_list|()
decl_stmt|;
if|if
condition|(
name|prefix
operator|==
literal|null
condition|)
block|{
name|prefix
operator|=
literal|""
expr_stmt|;
block|}
name|boolean
name|writeElementNS
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|uri
operator|!=
literal|null
condition|)
block|{
name|writeElementNS
operator|=
literal|true
expr_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|it
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
name|writer
operator|.
name|getNamespaceContext
argument_list|()
operator|.
name|getPrefixes
argument_list|(
name|uri
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|it
operator|.
name|hasNext
argument_list|()
operator|&&
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|prefix
argument_list|)
operator|&&
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|uri
argument_list|)
operator|&&
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|writer
operator|.
name|getNamespaceContext
argument_list|()
operator|.
name|getNamespaceURI
argument_list|(
literal|""
argument_list|)
argument_list|)
condition|)
block|{
name|writeElementNS
operator|=
literal|false
expr_stmt|;
block|}
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|s
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|s
operator|==
literal|null
condition|)
block|{
name|s
operator|=
literal|""
expr_stmt|;
block|}
if|if
condition|(
name|s
operator|.
name|equals
argument_list|(
name|prefix
argument_list|)
condition|)
block|{
name|writeElementNS
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
comment|// Write out the element name
if|if
condition|(
name|uri
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|prefix
operator|.
name|length
argument_list|()
operator|==
literal|0
operator|&&
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|uri
argument_list|)
condition|)
block|{
name|writer
operator|.
name|writeStartElement
argument_list|(
name|local
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|writer
operator|.
name|writeStartElement
argument_list|(
name|prefix
argument_list|,
name|local
argument_list|,
name|uri
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|writer
operator|.
name|writeStartElement
argument_list|(
name|local
argument_list|)
expr_stmt|;
block|}
comment|// Write out the namespaces
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|reader
operator|.
name|getNamespaceCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|nsURI
init|=
name|reader
operator|.
name|getNamespaceURI
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|nsPrefix
init|=
name|reader
operator|.
name|getNamespacePrefix
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|nsPrefix
operator|==
literal|null
condition|)
block|{
name|nsPrefix
operator|=
literal|""
expr_stmt|;
block|}
if|if
condition|(
name|nsURI
operator|==
literal|null
condition|)
block|{
name|nsURI
operator|=
literal|""
expr_stmt|;
block|}
if|if
condition|(
name|nsPrefix
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|writer
operator|.
name|writeDefaultNamespace
argument_list|(
name|nsURI
argument_list|)
expr_stmt|;
name|writer
operator|.
name|setDefaultNamespace
argument_list|(
name|nsURI
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|writer
operator|.
name|writeNamespace
argument_list|(
name|nsPrefix
argument_list|,
name|nsURI
argument_list|)
expr_stmt|;
name|writer
operator|.
name|setPrefix
argument_list|(
name|nsPrefix
argument_list|,
name|nsURI
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|nsURI
operator|.
name|equals
argument_list|(
name|uri
argument_list|)
operator|&&
name|nsPrefix
operator|.
name|equals
argument_list|(
name|prefix
argument_list|)
condition|)
block|{
name|writeElementNS
operator|=
literal|false
expr_stmt|;
block|}
block|}
comment|// Check if the namespace still needs to be written.
comment|// We need this check because namespace writing works
comment|// different on Woodstox and the RI.
if|if
condition|(
name|writeElementNS
condition|)
block|{
if|if
condition|(
name|prefix
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|writer
operator|.
name|writeDefaultNamespace
argument_list|(
name|uri
argument_list|)
expr_stmt|;
name|writer
operator|.
name|setDefaultNamespace
argument_list|(
name|uri
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|writer
operator|.
name|writeNamespace
argument_list|(
name|prefix
argument_list|,
name|uri
argument_list|)
expr_stmt|;
name|writer
operator|.
name|setPrefix
argument_list|(
name|prefix
argument_list|,
name|uri
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Write out attributes
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|reader
operator|.
name|getAttributeCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|ns
init|=
name|reader
operator|.
name|getAttributeNamespace
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|nsPrefix
init|=
name|reader
operator|.
name|getAttributePrefix
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|ns
operator|==
literal|null
operator|||
name|ns
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|writer
operator|.
name|writeAttribute
argument_list|(
name|reader
operator|.
name|getAttributeLocalName
argument_list|(
name|i
argument_list|)
argument_list|,
name|reader
operator|.
name|getAttributeValue
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|nsPrefix
operator|==
literal|null
operator|||
name|nsPrefix
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|writer
operator|.
name|writeAttribute
argument_list|(
name|reader
operator|.
name|getAttributeNamespace
argument_list|(
name|i
argument_list|)
argument_list|,
name|reader
operator|.
name|getAttributeLocalName
argument_list|(
name|i
argument_list|)
argument_list|,
name|reader
operator|.
name|getAttributeValue
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Iterator
argument_list|<
name|String
argument_list|>
name|it
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
name|writer
operator|.
name|getNamespaceContext
argument_list|()
operator|.
name|getPrefixes
argument_list|(
name|ns
argument_list|)
argument_list|)
decl_stmt|;
name|boolean
name|writeNs
init|=
literal|true
decl_stmt|;
while|while
condition|(
name|it
operator|!=
literal|null
operator|&&
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|s
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|s
operator|==
literal|null
condition|)
block|{
name|s
operator|=
literal|""
expr_stmt|;
block|}
if|if
condition|(
name|s
operator|.
name|equals
argument_list|(
name|nsPrefix
argument_list|)
condition|)
block|{
name|writeNs
operator|=
literal|false
expr_stmt|;
block|}
block|}
if|if
condition|(
name|writeNs
condition|)
block|{
name|writer
operator|.
name|writeNamespace
argument_list|(
name|nsPrefix
argument_list|,
name|ns
argument_list|)
expr_stmt|;
name|writer
operator|.
name|setPrefix
argument_list|(
name|nsPrefix
argument_list|,
name|ns
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|writeAttribute
argument_list|(
name|reader
operator|.
name|getAttributePrefix
argument_list|(
name|i
argument_list|)
argument_list|,
name|reader
operator|.
name|getAttributeNamespace
argument_list|(
name|i
argument_list|)
argument_list|,
name|reader
operator|.
name|getAttributeLocalName
argument_list|(
name|i
argument_list|)
argument_list|,
name|reader
operator|.
name|getAttributeValue
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
name|void
name|writeDocument
parameter_list|(
name|Document
name|d
parameter_list|,
name|XMLStreamWriter
name|writer
parameter_list|,
name|boolean
name|repairing
parameter_list|)
throws|throws
name|XMLStreamException
block|{
name|writeDocument
argument_list|(
name|d
argument_list|,
name|writer
argument_list|,
literal|true
argument_list|,
name|repairing
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|writeDocument
parameter_list|(
name|Document
name|d
parameter_list|,
name|XMLStreamWriter
name|writer
parameter_list|,
name|boolean
name|writeProlog
parameter_list|,
name|boolean
name|repairing
parameter_list|)
throws|throws
name|XMLStreamException
block|{
if|if
condition|(
name|writeProlog
condition|)
block|{
name|writer
operator|.
name|writeStartDocument
argument_list|()
expr_stmt|;
block|}
name|Node
name|node
init|=
name|d
operator|.
name|getFirstChild
argument_list|()
decl_stmt|;
while|while
condition|(
name|node
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|writeProlog
operator|||
name|node
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|ELEMENT_NODE
condition|)
block|{
name|writeNode
argument_list|(
name|node
argument_list|,
name|writer
argument_list|,
name|repairing
argument_list|)
expr_stmt|;
block|}
name|node
operator|=
name|node
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|writeProlog
condition|)
block|{
name|writer
operator|.
name|writeEndDocument
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Writes an Element to an XMLStreamWriter. The writer must already have      * started the document (via writeStartDocument()). Also, this probably      * won't work with just a fragment of a document. The Element should be the      * root element of the document.      *      * @param e      * @param writer      * @throws XMLStreamException      */
specifier|public
specifier|static
name|void
name|writeElement
parameter_list|(
name|Element
name|e
parameter_list|,
name|XMLStreamWriter
name|writer
parameter_list|,
name|boolean
name|repairing
parameter_list|)
throws|throws
name|XMLStreamException
block|{
name|writeElement
argument_list|(
name|e
argument_list|,
name|writer
argument_list|,
name|repairing
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**      * Writes an Element to an XMLStreamWriter. The writer must already have      * started the document (via writeStartDocument()). Also, this probably      * won't work with just a fragment of a document. The Element should be the      * root element of the document.      *      * @param e      * @param writer      * @param endElement true if the element should be ended      * @throws XMLStreamException      */
specifier|public
specifier|static
name|void
name|writeElement
parameter_list|(
name|Element
name|e
parameter_list|,
name|XMLStreamWriter
name|writer
parameter_list|,
name|boolean
name|repairing
parameter_list|,
name|boolean
name|endElement
parameter_list|)
throws|throws
name|XMLStreamException
block|{
name|String
name|prefix
init|=
name|e
operator|.
name|getPrefix
argument_list|()
decl_stmt|;
name|String
name|ns
init|=
name|e
operator|.
name|getNamespaceURI
argument_list|()
decl_stmt|;
name|String
name|localName
init|=
name|e
operator|.
name|getLocalName
argument_list|()
decl_stmt|;
if|if
condition|(
name|prefix
operator|==
literal|null
condition|)
block|{
name|prefix
operator|=
literal|""
expr_stmt|;
block|}
if|if
condition|(
name|localName
operator|==
literal|null
condition|)
block|{
name|localName
operator|=
name|e
operator|.
name|getNodeName
argument_list|()
expr_stmt|;
if|if
condition|(
name|localName
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Element's local name cannot be null!"
argument_list|)
throw|;
block|}
block|}
name|String
name|decUri
init|=
name|writer
operator|.
name|getNamespaceContext
argument_list|()
operator|.
name|getNamespaceURI
argument_list|(
name|prefix
argument_list|)
decl_stmt|;
name|boolean
name|declareNamespace
init|=
name|decUri
operator|==
literal|null
operator|||
operator|!
name|decUri
operator|.
name|equals
argument_list|(
name|ns
argument_list|)
decl_stmt|;
if|if
condition|(
name|ns
operator|==
literal|null
operator|||
name|ns
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|writer
operator|.
name|writeStartElement
argument_list|(
name|localName
argument_list|)
expr_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|decUri
argument_list|)
condition|)
block|{
name|declareNamespace
operator|=
literal|false
expr_stmt|;
block|}
block|}
else|else
block|{
name|writer
operator|.
name|writeStartElement
argument_list|(
name|prefix
argument_list|,
name|localName
argument_list|,
name|ns
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Node
name|attr
range|:
name|sortElementAttributes
argument_list|(
name|e
operator|.
name|getAttributes
argument_list|()
argument_list|)
control|)
block|{
name|String
name|name
init|=
name|attr
operator|.
name|getLocalName
argument_list|()
decl_stmt|;
name|String
name|attrPrefix
init|=
name|attr
operator|.
name|getPrefix
argument_list|()
decl_stmt|;
if|if
condition|(
name|attrPrefix
operator|==
literal|null
condition|)
block|{
name|attrPrefix
operator|=
literal|""
expr_stmt|;
block|}
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
name|name
operator|=
name|attr
operator|.
name|getNodeName
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
literal|"xmlns"
operator|.
name|equals
argument_list|(
name|attrPrefix
argument_list|)
condition|)
block|{
name|writer
operator|.
name|writeNamespace
argument_list|(
name|name
argument_list|,
name|attr
operator|.
name|getNodeValue
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|setPrefix
argument_list|(
name|name
argument_list|,
name|attr
operator|.
name|getNodeValue
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
name|prefix
argument_list|)
operator|&&
name|attr
operator|.
name|getNodeValue
argument_list|()
operator|.
name|equals
argument_list|(
name|ns
argument_list|)
condition|)
block|{
name|declareNamespace
operator|=
literal|false
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
literal|"xmlns"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
operator|&&
literal|""
operator|.
name|equals
argument_list|(
name|attrPrefix
argument_list|)
condition|)
block|{
name|writer
operator|.
name|writeDefaultNamespace
argument_list|(
name|attr
operator|.
name|getNodeValue
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|setDefaultNamespace
argument_list|(
name|attr
operator|.
name|getNodeValue
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|attr
operator|.
name|getNodeValue
argument_list|()
operator|.
name|equals
argument_list|(
name|ns
argument_list|)
condition|)
block|{
name|declareNamespace
operator|=
literal|false
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|attr
operator|.
name|getNodeValue
argument_list|()
argument_list|)
operator|&&
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|ns
argument_list|)
condition|)
block|{
name|declareNamespace
operator|=
literal|false
expr_stmt|;
block|}
block|}
else|else
block|{
name|String
name|attns
init|=
name|attr
operator|.
name|getNamespaceURI
argument_list|()
decl_stmt|;
name|String
name|value
init|=
name|attr
operator|.
name|getNodeValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|attns
operator|==
literal|null
operator|||
name|attns
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|writer
operator|.
name|writeAttribute
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|attrPrefix
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|writer
operator|.
name|writeAttribute
argument_list|(
name|attns
argument_list|,
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|repairing
operator|&&
name|writer
operator|.
name|getNamespaceContext
argument_list|()
operator|.
name|getNamespaceURI
argument_list|(
name|attrPrefix
argument_list|)
operator|==
literal|null
condition|)
block|{
name|writer
operator|.
name|writeNamespace
argument_list|(
name|attrPrefix
argument_list|,
name|attns
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|writeAttribute
argument_list|(
name|attrPrefix
argument_list|,
name|attns
argument_list|,
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|declareNamespace
operator|&&
name|repairing
condition|)
block|{
if|if
condition|(
name|ns
operator|==
literal|null
condition|)
block|{
name|writer
operator|.
name|writeNamespace
argument_list|(
name|prefix
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|writer
operator|.
name|setPrefix
argument_list|(
name|prefix
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|writer
operator|.
name|writeNamespace
argument_list|(
name|prefix
argument_list|,
name|ns
argument_list|)
expr_stmt|;
name|writer
operator|.
name|setPrefix
argument_list|(
name|prefix
argument_list|,
name|ns
argument_list|)
expr_stmt|;
block|}
block|}
name|Node
name|nd
init|=
name|e
operator|.
name|getFirstChild
argument_list|()
decl_stmt|;
while|while
condition|(
name|nd
operator|!=
literal|null
condition|)
block|{
name|writeNode
argument_list|(
name|nd
argument_list|,
name|writer
argument_list|,
name|repairing
argument_list|)
expr_stmt|;
name|nd
operator|=
name|nd
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|endElement
condition|)
block|{
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|List
argument_list|<
name|Node
argument_list|>
name|sortElementAttributes
parameter_list|(
name|NamedNodeMap
name|attrs
parameter_list|)
block|{
if|if
condition|(
name|attrs
operator|.
name|getLength
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
name|Collections
operator|.
expr|<
name|Node
operator|>
name|emptyList
argument_list|()
return|;
block|}
name|List
argument_list|<
name|Node
argument_list|>
name|sortedAttrs
init|=
operator|new
name|LinkedList
argument_list|<
name|Node
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|attrs
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Node
name|attr
init|=
name|attrs
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|name
init|=
name|attr
operator|.
name|getLocalName
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
name|name
operator|=
name|attr
operator|.
name|getNodeName
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
literal|"xmlns"
operator|.
name|equals
argument_list|(
name|attr
operator|.
name|getPrefix
argument_list|()
argument_list|)
operator|||
literal|"xmlns"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|sortedAttrs
operator|.
name|add
argument_list|(
literal|0
argument_list|,
name|attr
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sortedAttrs
operator|.
name|add
argument_list|(
name|attr
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|sortedAttrs
return|;
block|}
specifier|public
specifier|static
name|void
name|writeNode
parameter_list|(
name|Node
name|n
parameter_list|,
name|XMLStreamWriter
name|writer
parameter_list|,
name|boolean
name|repairing
parameter_list|)
throws|throws
name|XMLStreamException
block|{
switch|switch
condition|(
name|n
operator|.
name|getNodeType
argument_list|()
condition|)
block|{
case|case
name|Node
operator|.
name|ELEMENT_NODE
case|:
name|writeElement
argument_list|(
operator|(
name|Element
operator|)
name|n
argument_list|,
name|writer
argument_list|,
name|repairing
argument_list|)
expr_stmt|;
break|break;
case|case
name|Node
operator|.
name|TEXT_NODE
case|:
name|writer
operator|.
name|writeCharacters
argument_list|(
operator|(
operator|(
name|Text
operator|)
name|n
operator|)
operator|.
name|getNodeValue
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|Node
operator|.
name|COMMENT_NODE
case|:
name|writer
operator|.
name|writeComment
argument_list|(
operator|(
operator|(
name|Comment
operator|)
name|n
operator|)
operator|.
name|getData
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|Node
operator|.
name|CDATA_SECTION_NODE
case|:
name|writer
operator|.
name|writeCData
argument_list|(
operator|(
operator|(
name|CDATASection
operator|)
name|n
operator|)
operator|.
name|getData
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|Node
operator|.
name|ENTITY_REFERENCE_NODE
case|:
name|writer
operator|.
name|writeEntityRef
argument_list|(
operator|(
operator|(
name|EntityReference
operator|)
name|n
operator|)
operator|.
name|getNodeValue
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|Node
operator|.
name|PROCESSING_INSTRUCTION_NODE
case|:
name|ProcessingInstruction
name|pi
init|=
operator|(
name|ProcessingInstruction
operator|)
name|n
decl_stmt|;
name|writer
operator|.
name|writeProcessingInstruction
argument_list|(
name|pi
operator|.
name|getTarget
argument_list|()
argument_list|,
name|pi
operator|.
name|getData
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|Node
operator|.
name|DOCUMENT_NODE
case|:
name|writeDocument
argument_list|(
operator|(
name|Document
operator|)
name|n
argument_list|,
name|writer
argument_list|,
name|repairing
argument_list|)
expr_stmt|;
break|break;
case|case
name|Node
operator|.
name|DOCUMENT_FRAGMENT_NODE
case|:
block|{
name|DocumentFragment
name|frag
init|=
operator|(
name|DocumentFragment
operator|)
name|n
decl_stmt|;
name|Node
name|child
init|=
name|frag
operator|.
name|getFirstChild
argument_list|()
decl_stmt|;
while|while
condition|(
name|child
operator|!=
literal|null
condition|)
block|{
name|writeNode
argument_list|(
name|child
argument_list|,
name|writer
argument_list|,
name|repairing
argument_list|)
expr_stmt|;
name|child
operator|=
name|child
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
block|}
break|break;
block|}
case|case
name|Node
operator|.
name|DOCUMENT_TYPE_NODE
case|:
try|try
block|{
if|if
condition|(
operator|(
operator|(
name|DocumentType
operator|)
name|n
operator|)
operator|.
name|getTextContent
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|writer
operator|.
name|writeDTD
argument_list|(
operator|(
operator|(
name|DocumentType
operator|)
name|n
operator|)
operator|.
name|getTextContent
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|ex
parameter_list|)
block|{
comment|//can we ignore?  DOM writers really don't allow this
comment|//as there isn't a way to write a DTD in dom
block|}
break|break;
default|default:
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Found type: "
operator|+
name|n
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|Document
name|read
parameter_list|(
name|Source
name|s
parameter_list|)
throws|throws
name|XMLStreamException
block|{
name|XMLStreamReader
name|reader
init|=
name|createXMLStreamReader
argument_list|(
name|s
argument_list|)
decl_stmt|;
try|try
block|{
return|return
name|read
argument_list|(
name|reader
argument_list|)
return|;
block|}
finally|finally
block|{
try|try
block|{
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|//ignore
block|}
block|}
block|}
specifier|public
specifier|static
name|Document
name|read
parameter_list|(
name|InputStream
name|s
parameter_list|)
throws|throws
name|XMLStreamException
block|{
name|XMLStreamReader
name|reader
init|=
name|createXMLStreamReader
argument_list|(
name|s
argument_list|)
decl_stmt|;
try|try
block|{
return|return
name|read
argument_list|(
name|reader
argument_list|)
return|;
block|}
finally|finally
block|{
try|try
block|{
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|//ignore
block|}
block|}
block|}
specifier|public
specifier|static
name|Document
name|read
parameter_list|(
name|Reader
name|s
parameter_list|)
throws|throws
name|XMLStreamException
block|{
name|XMLStreamReader
name|reader
init|=
name|createXMLStreamReader
argument_list|(
name|s
argument_list|)
decl_stmt|;
try|try
block|{
return|return
name|read
argument_list|(
name|reader
argument_list|)
return|;
block|}
finally|finally
block|{
try|try
block|{
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|//ignore
block|}
block|}
block|}
specifier|public
specifier|static
name|Document
name|read
parameter_list|(
name|File
name|is
parameter_list|)
throws|throws
name|XMLStreamException
throws|,
name|IOException
block|{
try|try
init|(
name|InputStream
name|fin
init|=
name|Files
operator|.
name|newInputStream
argument_list|(
name|is
operator|.
name|toPath
argument_list|()
argument_list|)
init|)
block|{
return|return
name|read
argument_list|(
name|fin
argument_list|)
return|;
block|}
block|}
specifier|public
specifier|static
name|Document
name|read
parameter_list|(
name|InputSource
name|s
parameter_list|)
throws|throws
name|XMLStreamException
block|{
name|XMLStreamReader
name|reader
init|=
name|createXMLStreamReader
argument_list|(
name|s
argument_list|)
decl_stmt|;
try|try
block|{
return|return
name|read
argument_list|(
name|reader
argument_list|)
return|;
block|}
finally|finally
block|{
try|try
block|{
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|//ignore
block|}
block|}
block|}
specifier|public
specifier|static
name|Document
name|read
parameter_list|(
name|XMLStreamReader
name|reader
parameter_list|)
throws|throws
name|XMLStreamException
block|{
return|return
name|read
argument_list|(
name|reader
argument_list|,
literal|false
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Document
name|read
parameter_list|(
name|XMLStreamReader
name|reader
parameter_list|,
name|boolean
name|recordLoc
parameter_list|)
throws|throws
name|XMLStreamException
block|{
name|Document
name|doc
init|=
name|DOMUtils
operator|.
name|createDocument
argument_list|()
decl_stmt|;
if|if
condition|(
name|reader
operator|.
name|getLocation
argument_list|()
operator|.
name|getSystemId
argument_list|()
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|doc
operator|.
name|setDocumentURI
argument_list|(
name|reader
operator|.
name|getLocation
argument_list|()
operator|.
name|getSystemId
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|//ignore - probably not DOM level 3
block|}
block|}
name|readDocElements
argument_list|(
name|doc
argument_list|,
name|doc
argument_list|,
name|reader
argument_list|,
literal|true
argument_list|,
name|recordLoc
argument_list|)
expr_stmt|;
return|return
name|doc
return|;
block|}
specifier|public
specifier|static
name|Document
name|read
parameter_list|(
name|DocumentBuilder
name|builder
parameter_list|,
name|XMLStreamReader
name|reader
parameter_list|,
name|boolean
name|repairing
parameter_list|)
throws|throws
name|XMLStreamException
block|{
name|Document
name|doc
init|=
name|builder
operator|==
literal|null
condition|?
name|DOMUtils
operator|.
name|createDocument
argument_list|()
else|:
name|builder
operator|.
name|newDocument
argument_list|()
decl_stmt|;
if|if
condition|(
name|reader
operator|.
name|getLocation
argument_list|()
operator|.
name|getSystemId
argument_list|()
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|doc
operator|.
name|setDocumentURI
argument_list|(
name|reader
operator|.
name|getLocation
argument_list|()
operator|.
name|getSystemId
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|//ignore - probably not DOM level 3
block|}
block|}
name|readDocElements
argument_list|(
name|doc
argument_list|,
name|reader
argument_list|,
name|repairing
argument_list|)
expr_stmt|;
return|return
name|doc
return|;
block|}
comment|/**      * @param parent      */
specifier|private
specifier|static
name|Document
name|getDocument
parameter_list|(
name|Node
name|parent
parameter_list|)
block|{
return|return
operator|(
name|parent
operator|instanceof
name|Document
operator|)
condition|?
operator|(
name|Document
operator|)
name|parent
else|:
name|parent
operator|.
name|getOwnerDocument
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|boolean
name|isDeclared
parameter_list|(
name|Element
name|e
parameter_list|,
name|String
name|namespaceURI
parameter_list|,
name|String
name|prefix
parameter_list|)
block|{
while|while
condition|(
name|e
operator|!=
literal|null
condition|)
block|{
name|Attr
name|att
decl_stmt|;
if|if
condition|(
name|prefix
operator|!=
literal|null
operator|&&
name|prefix
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|att
operator|=
name|e
operator|.
name|getAttributeNodeNS
argument_list|(
name|XML_NS
argument_list|,
name|prefix
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|att
operator|=
name|e
operator|.
name|getAttributeNode
argument_list|(
literal|"xmlns"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|att
operator|!=
literal|null
operator|&&
name|att
operator|.
name|getNodeValue
argument_list|()
operator|.
name|equals
argument_list|(
name|namespaceURI
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|e
operator|.
name|getParentNode
argument_list|()
operator|instanceof
name|Element
condition|)
block|{
name|e
operator|=
operator|(
name|Element
operator|)
name|e
operator|.
name|getParentNode
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|prefix
argument_list|)
operator|&&
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|namespaceURI
argument_list|)
condition|)
block|{
comment|//A document that probably doesn't have any namespace qualifies elements
return|return
literal|true
return|;
block|}
else|else
block|{
name|e
operator|=
literal|null
expr_stmt|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|public
specifier|static
name|void
name|readDocElements
parameter_list|(
name|Node
name|parent
parameter_list|,
name|XMLStreamReader
name|reader
parameter_list|,
name|boolean
name|repairing
parameter_list|)
throws|throws
name|XMLStreamException
block|{
name|Document
name|doc
init|=
name|getDocument
argument_list|(
name|parent
argument_list|)
decl_stmt|;
name|readDocElements
argument_list|(
name|doc
argument_list|,
name|parent
argument_list|,
name|reader
argument_list|,
name|repairing
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|readDocElements
parameter_list|(
name|Node
name|parent
parameter_list|,
name|XMLStreamReader
name|reader
parameter_list|,
name|boolean
name|repairing
parameter_list|,
name|boolean
name|isThreshold
parameter_list|)
throws|throws
name|XMLStreamException
block|{
name|Document
name|doc
init|=
name|getDocument
argument_list|(
name|parent
argument_list|)
decl_stmt|;
name|readDocElements
argument_list|(
name|doc
argument_list|,
name|parent
argument_list|,
name|reader
argument_list|,
name|repairing
argument_list|,
literal|false
argument_list|,
name|isThreshold
argument_list|)
expr_stmt|;
block|}
comment|/**      * @param parent      * @param reader      * @throws XMLStreamException      */
specifier|public
specifier|static
name|void
name|readDocElements
parameter_list|(
name|Document
name|doc
parameter_list|,
name|Node
name|parent
parameter_list|,
name|XMLStreamReader
name|reader
parameter_list|,
name|boolean
name|repairing
parameter_list|,
name|boolean
name|recordLoc
parameter_list|)
throws|throws
name|XMLStreamException
block|{
name|readDocElements
argument_list|(
name|doc
argument_list|,
name|parent
argument_list|,
name|reader
argument_list|,
name|repairing
argument_list|,
name|recordLoc
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**      * @param parent      * @param reader      * @throws XMLStreamException      */
specifier|public
specifier|static
name|void
name|readDocElements
parameter_list|(
name|Document
name|doc
parameter_list|,
name|Node
name|parent
parameter_list|,
name|XMLStreamReader
name|reader
parameter_list|,
name|boolean
name|repairing
parameter_list|,
name|boolean
name|recordLoc
parameter_list|,
name|boolean
name|isThreshold
parameter_list|)
throws|throws
name|XMLStreamException
block|{
name|Stack
argument_list|<
name|Node
argument_list|>
name|stack
init|=
operator|new
name|Stack
argument_list|<
name|Node
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|event
init|=
name|reader
operator|.
name|getEventType
argument_list|()
decl_stmt|;
name|int
name|elementCount
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|reader
operator|.
name|hasNext
argument_list|()
condition|)
block|{
switch|switch
condition|(
name|event
condition|)
block|{
case|case
name|XMLStreamConstants
operator|.
name|START_ELEMENT
case|:
block|{
name|elementCount
operator|++
expr_stmt|;
name|Element
name|e
decl_stmt|;
if|if
condition|(
operator|!
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|reader
operator|.
name|getPrefix
argument_list|()
argument_list|)
condition|)
block|{
name|e
operator|=
name|doc
operator|.
name|createElementNS
argument_list|(
name|reader
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
name|reader
operator|.
name|getPrefix
argument_list|()
operator|+
literal|":"
operator|+
name|reader
operator|.
name|getLocalName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|e
operator|=
name|doc
operator|.
name|createElementNS
argument_list|(
name|reader
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
name|reader
operator|.
name|getLocalName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|e
operator|=
operator|(
name|Element
operator|)
name|parent
operator|.
name|appendChild
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|recordLoc
operator|=
name|addLocation
argument_list|(
name|doc
argument_list|,
name|e
argument_list|,
name|reader
argument_list|,
name|recordLoc
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|ns
init|=
literal|0
init|;
name|ns
operator|<
name|reader
operator|.
name|getNamespaceCount
argument_list|()
condition|;
name|ns
operator|++
control|)
block|{
name|String
name|uri
init|=
name|reader
operator|.
name|getNamespaceURI
argument_list|(
name|ns
argument_list|)
decl_stmt|;
name|String
name|prefix
init|=
name|reader
operator|.
name|getNamespacePrefix
argument_list|(
name|ns
argument_list|)
decl_stmt|;
name|declare
argument_list|(
name|e
argument_list|,
name|uri
argument_list|,
name|prefix
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|att
init|=
literal|0
init|;
name|att
operator|<
name|reader
operator|.
name|getAttributeCount
argument_list|()
condition|;
name|att
operator|++
control|)
block|{
name|String
name|name
init|=
name|reader
operator|.
name|getAttributeLocalName
argument_list|(
name|att
argument_list|)
decl_stmt|;
name|String
name|prefix
init|=
name|reader
operator|.
name|getAttributePrefix
argument_list|(
name|att
argument_list|)
decl_stmt|;
if|if
condition|(
name|prefix
operator|!=
literal|null
operator|&&
name|prefix
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|name
operator|=
name|prefix
operator|+
literal|":"
operator|+
name|name
expr_stmt|;
block|}
name|Attr
name|attr
init|=
name|doc
operator|.
name|createAttributeNS
argument_list|(
name|reader
operator|.
name|getAttributeNamespace
argument_list|(
name|att
argument_list|)
argument_list|,
name|name
argument_list|)
decl_stmt|;
name|attr
operator|.
name|setValue
argument_list|(
name|reader
operator|.
name|getAttributeValue
argument_list|(
name|att
argument_list|)
argument_list|)
expr_stmt|;
name|e
operator|.
name|setAttributeNode
argument_list|(
name|attr
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|repairing
operator|&&
operator|!
name|isDeclared
argument_list|(
name|e
argument_list|,
name|reader
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
name|reader
operator|.
name|getPrefix
argument_list|()
argument_list|)
condition|)
block|{
name|declare
argument_list|(
name|e
argument_list|,
name|reader
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
name|reader
operator|.
name|getPrefix
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|stack
operator|.
name|push
argument_list|(
name|parent
argument_list|)
expr_stmt|;
if|if
condition|(
name|isThreshold
operator|&&
name|innerElementLevelThreshold
operator|!=
operator|-
literal|1
operator|&&
name|stack
operator|.
name|size
argument_list|()
operator|>=
name|innerElementLevelThreshold
condition|)
block|{
throw|throw
operator|new
name|DepthExceededStaxException
argument_list|(
literal|"reach the innerElementLevelThreshold:"
operator|+
name|innerElementLevelThreshold
argument_list|)
throw|;
block|}
if|if
condition|(
name|isThreshold
operator|&&
name|innerElementCountThreshold
operator|!=
operator|-
literal|1
operator|&&
name|elementCount
operator|>=
name|innerElementCountThreshold
condition|)
block|{
throw|throw
operator|new
name|DepthExceededStaxException
argument_list|(
literal|"reach the innerElementCountThreshold:"
operator|+
name|innerElementCountThreshold
argument_list|)
throw|;
block|}
name|parent
operator|=
name|e
expr_stmt|;
break|break;
block|}
case|case
name|XMLStreamConstants
operator|.
name|END_ELEMENT
case|:
if|if
condition|(
name|stack
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|parent
operator|=
name|stack
operator|.
name|pop
argument_list|()
expr_stmt|;
if|if
condition|(
name|parent
operator|instanceof
name|Document
condition|)
block|{
return|return;
block|}
break|break;
case|case
name|XMLStreamConstants
operator|.
name|NAMESPACE
case|:
break|break;
case|case
name|XMLStreamConstants
operator|.
name|ATTRIBUTE
case|:
break|break;
case|case
name|XMLStreamConstants
operator|.
name|CHARACTERS
case|:
if|if
condition|(
name|parent
operator|!=
literal|null
condition|)
block|{
name|recordLoc
operator|=
name|addLocation
argument_list|(
name|doc
argument_list|,
name|parent
operator|.
name|appendChild
argument_list|(
name|doc
operator|.
name|createTextNode
argument_list|(
name|reader
operator|.
name|getText
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|reader
argument_list|,
name|recordLoc
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|XMLStreamConstants
operator|.
name|COMMENT
case|:
if|if
condition|(
name|parent
operator|!=
literal|null
condition|)
block|{
name|parent
operator|.
name|appendChild
argument_list|(
name|doc
operator|.
name|createComment
argument_list|(
name|reader
operator|.
name|getText
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|XMLStreamConstants
operator|.
name|CDATA
case|:
name|recordLoc
operator|=
name|addLocation
argument_list|(
name|doc
argument_list|,
name|parent
operator|.
name|appendChild
argument_list|(
name|doc
operator|.
name|createCDATASection
argument_list|(
name|reader
operator|.
name|getText
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|reader
argument_list|,
name|recordLoc
argument_list|)
expr_stmt|;
break|break;
case|case
name|XMLStreamConstants
operator|.
name|PROCESSING_INSTRUCTION
case|:
name|parent
operator|.
name|appendChild
argument_list|(
name|doc
operator|.
name|createProcessingInstruction
argument_list|(
name|reader
operator|.
name|getPITarget
argument_list|()
argument_list|,
name|reader
operator|.
name|getPIData
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|XMLStreamConstants
operator|.
name|ENTITY_REFERENCE
case|:
name|parent
operator|.
name|appendChild
argument_list|(
name|doc
operator|.
name|createProcessingInstruction
argument_list|(
name|reader
operator|.
name|getPITarget
argument_list|()
argument_list|,
name|reader
operator|.
name|getPIData
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
if|if
condition|(
name|reader
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|event
operator|=
name|reader
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|StreamToDOMContext
block|{
specifier|private
name|Stack
argument_list|<
name|Node
argument_list|>
name|stack
init|=
operator|new
name|Stack
argument_list|<
name|Node
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|int
name|elementCount
decl_stmt|;
specifier|private
name|boolean
name|repairing
decl_stmt|;
specifier|private
name|boolean
name|recordLoc
decl_stmt|;
specifier|private
name|boolean
name|threshold
decl_stmt|;
specifier|public
name|StreamToDOMContext
parameter_list|(
name|boolean
name|repairing
parameter_list|,
name|boolean
name|recordLoc
parameter_list|,
name|boolean
name|threshold
parameter_list|)
block|{
name|this
operator|.
name|repairing
operator|=
name|repairing
expr_stmt|;
name|this
operator|.
name|recordLoc
operator|=
name|recordLoc
expr_stmt|;
name|this
operator|.
name|threshold
operator|=
name|threshold
expr_stmt|;
block|}
specifier|public
name|void
name|setRecordLoc
parameter_list|(
name|boolean
name|recordLoc
parameter_list|)
block|{
name|this
operator|.
name|recordLoc
operator|=
name|recordLoc
expr_stmt|;
block|}
specifier|public
name|boolean
name|isRecordLoc
parameter_list|()
block|{
return|return
name|this
operator|.
name|recordLoc
return|;
block|}
specifier|public
name|boolean
name|isRepairing
parameter_list|()
block|{
return|return
name|this
operator|.
name|repairing
return|;
block|}
specifier|public
name|boolean
name|isThreshold
parameter_list|()
block|{
return|return
name|this
operator|.
name|threshold
return|;
block|}
specifier|public
name|int
name|incrementCount
parameter_list|()
block|{
return|return
operator|++
name|elementCount
return|;
block|}
specifier|public
name|int
name|decreaseCount
parameter_list|()
block|{
return|return
operator|--
name|elementCount
return|;
block|}
specifier|public
name|int
name|getCount
parameter_list|()
block|{
return|return
name|elementCount
return|;
block|}
specifier|public
name|Node
name|pushToStack
parameter_list|(
name|Node
name|node
parameter_list|)
block|{
return|return
name|stack
operator|.
name|push
argument_list|(
name|node
argument_list|)
return|;
block|}
specifier|public
name|Node
name|popFromStack
parameter_list|()
block|{
return|return
name|stack
operator|.
name|pop
argument_list|()
return|;
block|}
specifier|public
name|int
name|getStackSize
parameter_list|()
block|{
return|return
name|stack
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|isStackEmpty
parameter_list|()
block|{
return|return
name|stack
operator|.
name|isEmpty
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
name|void
name|readDocElements
parameter_list|(
name|Document
name|doc
parameter_list|,
name|Node
name|parent
parameter_list|,
name|XMLStreamReader
name|reader
parameter_list|,
name|StreamToDOMContext
name|context
parameter_list|)
throws|throws
name|XMLStreamException
block|{
name|int
name|event
init|=
name|reader
operator|.
name|getEventType
argument_list|()
decl_stmt|;
while|while
condition|(
name|reader
operator|.
name|hasNext
argument_list|()
condition|)
block|{
switch|switch
condition|(
name|event
condition|)
block|{
case|case
name|XMLStreamConstants
operator|.
name|START_ELEMENT
case|:
block|{
name|context
operator|.
name|incrementCount
argument_list|()
expr_stmt|;
name|Element
name|e
decl_stmt|;
if|if
condition|(
operator|!
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|reader
operator|.
name|getPrefix
argument_list|()
argument_list|)
condition|)
block|{
name|e
operator|=
name|doc
operator|.
name|createElementNS
argument_list|(
name|reader
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
name|reader
operator|.
name|getPrefix
argument_list|()
operator|+
literal|":"
operator|+
name|reader
operator|.
name|getLocalName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|e
operator|=
name|doc
operator|.
name|createElementNS
argument_list|(
name|reader
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
name|reader
operator|.
name|getLocalName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|e
operator|=
operator|(
name|Element
operator|)
name|parent
operator|.
name|appendChild
argument_list|(
name|e
argument_list|)
expr_stmt|;
if|if
condition|(
name|context
operator|.
name|isRecordLoc
argument_list|()
condition|)
block|{
name|context
operator|.
name|setRecordLoc
argument_list|(
name|addLocation
argument_list|(
name|doc
argument_list|,
name|e
argument_list|,
name|reader
operator|.
name|getLocation
argument_list|()
argument_list|,
name|context
operator|.
name|isRecordLoc
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|ns
init|=
literal|0
init|;
name|ns
operator|<
name|reader
operator|.
name|getNamespaceCount
argument_list|()
condition|;
name|ns
operator|++
control|)
block|{
name|String
name|uri
init|=
name|reader
operator|.
name|getNamespaceURI
argument_list|(
name|ns
argument_list|)
decl_stmt|;
name|String
name|prefix
init|=
name|reader
operator|.
name|getNamespacePrefix
argument_list|(
name|ns
argument_list|)
decl_stmt|;
name|declare
argument_list|(
name|e
argument_list|,
name|uri
argument_list|,
name|prefix
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|att
init|=
literal|0
init|;
name|att
operator|<
name|reader
operator|.
name|getAttributeCount
argument_list|()
condition|;
name|att
operator|++
control|)
block|{
name|String
name|name
init|=
name|reader
operator|.
name|getAttributeLocalName
argument_list|(
name|att
argument_list|)
decl_stmt|;
name|String
name|prefix
init|=
name|reader
operator|.
name|getAttributePrefix
argument_list|(
name|att
argument_list|)
decl_stmt|;
if|if
condition|(
name|prefix
operator|!=
literal|null
operator|&&
name|prefix
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|name
operator|=
name|prefix
operator|+
literal|":"
operator|+
name|name
expr_stmt|;
block|}
name|Attr
name|attr
init|=
name|doc
operator|.
name|createAttributeNS
argument_list|(
name|reader
operator|.
name|getAttributeNamespace
argument_list|(
name|att
argument_list|)
argument_list|,
name|name
argument_list|)
decl_stmt|;
name|attr
operator|.
name|setValue
argument_list|(
name|reader
operator|.
name|getAttributeValue
argument_list|(
name|att
argument_list|)
argument_list|)
expr_stmt|;
name|e
operator|.
name|setAttributeNode
argument_list|(
name|attr
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|context
operator|.
name|isRepairing
argument_list|()
operator|&&
operator|!
name|isDeclared
argument_list|(
name|e
argument_list|,
name|reader
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
name|reader
operator|.
name|getPrefix
argument_list|()
argument_list|)
condition|)
block|{
name|declare
argument_list|(
name|e
argument_list|,
name|reader
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
name|reader
operator|.
name|getPrefix
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|context
operator|.
name|pushToStack
argument_list|(
name|parent
argument_list|)
expr_stmt|;
if|if
condition|(
name|context
operator|.
name|isThreshold
argument_list|()
operator|&&
name|innerElementLevelThreshold
operator|!=
operator|-
literal|1
operator|&&
name|context
operator|.
name|getStackSize
argument_list|()
operator|>=
name|innerElementLevelThreshold
condition|)
block|{
throw|throw
operator|new
name|DepthExceededStaxException
argument_list|(
literal|"reach the innerElementLevelThreshold:"
operator|+
name|innerElementLevelThreshold
argument_list|)
throw|;
block|}
if|if
condition|(
name|context
operator|.
name|isThreshold
argument_list|()
operator|&&
name|innerElementCountThreshold
operator|!=
operator|-
literal|1
operator|&&
name|context
operator|.
name|getCount
argument_list|()
operator|>=
name|innerElementCountThreshold
condition|)
block|{
throw|throw
operator|new
name|DepthExceededStaxException
argument_list|(
literal|"reach the innerElementCountThreshold:"
operator|+
name|innerElementCountThreshold
argument_list|)
throw|;
block|}
name|parent
operator|=
name|e
expr_stmt|;
break|break;
block|}
case|case
name|XMLStreamConstants
operator|.
name|END_ELEMENT
case|:
if|if
condition|(
name|context
operator|.
name|isStackEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|parent
operator|=
name|context
operator|.
name|popFromStack
argument_list|()
expr_stmt|;
if|if
condition|(
name|parent
operator|instanceof
name|Document
condition|)
block|{
return|return;
block|}
break|break;
case|case
name|XMLStreamConstants
operator|.
name|NAMESPACE
case|:
break|break;
case|case
name|XMLStreamConstants
operator|.
name|ATTRIBUTE
case|:
break|break;
case|case
name|XMLStreamConstants
operator|.
name|CHARACTERS
case|:
if|if
condition|(
name|parent
operator|!=
literal|null
condition|)
block|{
name|context
operator|.
name|setRecordLoc
argument_list|(
name|addLocation
argument_list|(
name|doc
argument_list|,
name|parent
operator|.
name|appendChild
argument_list|(
name|doc
operator|.
name|createTextNode
argument_list|(
name|reader
operator|.
name|getText
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|reader
operator|.
name|getLocation
argument_list|()
argument_list|,
name|context
operator|.
name|isRecordLoc
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|XMLStreamConstants
operator|.
name|COMMENT
case|:
if|if
condition|(
name|parent
operator|!=
literal|null
condition|)
block|{
name|parent
operator|.
name|appendChild
argument_list|(
name|doc
operator|.
name|createComment
argument_list|(
name|reader
operator|.
name|getText
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|XMLStreamConstants
operator|.
name|CDATA
case|:
name|context
operator|.
name|setRecordLoc
argument_list|(
name|addLocation
argument_list|(
name|doc
argument_list|,
name|parent
operator|.
name|appendChild
argument_list|(
name|doc
operator|.
name|createCDATASection
argument_list|(
name|reader
operator|.
name|getText
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|reader
operator|.
name|getLocation
argument_list|()
argument_list|,
name|context
operator|.
name|isRecordLoc
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|XMLStreamConstants
operator|.
name|PROCESSING_INSTRUCTION
case|:
name|parent
operator|.
name|appendChild
argument_list|(
name|doc
operator|.
name|createProcessingInstruction
argument_list|(
name|reader
operator|.
name|getPITarget
argument_list|()
argument_list|,
name|reader
operator|.
name|getPIData
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|XMLStreamConstants
operator|.
name|ENTITY_REFERENCE
case|:
name|parent
operator|.
name|appendChild
argument_list|(
name|doc
operator|.
name|createProcessingInstruction
argument_list|(
name|reader
operator|.
name|getPITarget
argument_list|()
argument_list|,
name|reader
operator|.
name|getPIData
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
if|if
condition|(
name|reader
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|event
operator|=
name|reader
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
name|Node
name|readDocElement
parameter_list|(
name|Document
name|doc
parameter_list|,
name|Node
name|parent
parameter_list|,
name|XMLEvent
name|ev
parameter_list|,
name|StreamToDOMContext
name|context
parameter_list|)
throws|throws
name|XMLStreamException
block|{
switch|switch
condition|(
name|ev
operator|.
name|getEventType
argument_list|()
condition|)
block|{
case|case
name|XMLStreamConstants
operator|.
name|START_ELEMENT
case|:
block|{
name|context
operator|.
name|incrementCount
argument_list|()
expr_stmt|;
name|Element
name|e
decl_stmt|;
name|StartElement
name|startElem
init|=
name|ev
operator|.
name|asStartElement
argument_list|()
decl_stmt|;
name|QName
name|name
init|=
name|startElem
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|name
operator|.
name|getPrefix
argument_list|()
argument_list|)
condition|)
block|{
name|e
operator|=
name|doc
operator|.
name|createElementNS
argument_list|(
name|name
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
name|name
operator|.
name|getPrefix
argument_list|()
operator|+
literal|":"
operator|+
name|name
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|e
operator|=
name|doc
operator|.
name|createElementNS
argument_list|(
name|name
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
name|name
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|e
operator|=
operator|(
name|Element
operator|)
name|parent
operator|.
name|appendChild
argument_list|(
name|e
argument_list|)
expr_stmt|;
if|if
condition|(
name|context
operator|.
name|isRecordLoc
argument_list|()
condition|)
block|{
name|context
operator|.
name|setRecordLoc
argument_list|(
name|addLocation
argument_list|(
name|doc
argument_list|,
name|e
argument_list|,
name|startElem
operator|.
name|getLocation
argument_list|()
argument_list|,
name|context
operator|.
name|isRecordLoc
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|context
operator|.
name|isRepairing
argument_list|()
operator|&&
operator|!
name|isDeclared
argument_list|(
name|e
argument_list|,
name|name
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
name|name
operator|.
name|getPrefix
argument_list|()
argument_list|)
condition|)
block|{
name|declare
argument_list|(
name|e
argument_list|,
name|name
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
name|name
operator|.
name|getPrefix
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|context
operator|.
name|pushToStack
argument_list|(
name|parent
argument_list|)
expr_stmt|;
if|if
condition|(
name|context
operator|.
name|isThreshold
argument_list|()
operator|&&
name|innerElementLevelThreshold
operator|!=
operator|-
literal|1
operator|&&
name|context
operator|.
name|getStackSize
argument_list|()
operator|>=
name|innerElementLevelThreshold
condition|)
block|{
throw|throw
operator|new
name|DepthExceededStaxException
argument_list|(
literal|"reach the innerElementLevelThreshold:"
operator|+
name|innerElementLevelThreshold
argument_list|)
throw|;
block|}
if|if
condition|(
name|context
operator|.
name|isThreshold
argument_list|()
operator|&&
name|innerElementCountThreshold
operator|!=
operator|-
literal|1
operator|&&
name|context
operator|.
name|getCount
argument_list|()
operator|>=
name|innerElementCountThreshold
condition|)
block|{
throw|throw
operator|new
name|DepthExceededStaxException
argument_list|(
literal|"reach the innerElementCountThreshold:"
operator|+
name|innerElementCountThreshold
argument_list|)
throw|;
block|}
name|parent
operator|=
name|e
expr_stmt|;
break|break;
block|}
case|case
name|XMLStreamConstants
operator|.
name|END_ELEMENT
case|:
if|if
condition|(
name|context
operator|.
name|isStackEmpty
argument_list|()
condition|)
block|{
return|return
name|parent
return|;
block|}
name|parent
operator|=
name|context
operator|.
name|popFromStack
argument_list|()
expr_stmt|;
if|if
condition|(
name|parent
operator|instanceof
name|Document
condition|)
block|{
return|return
name|parent
return|;
block|}
break|break;
case|case
name|XMLStreamConstants
operator|.
name|NAMESPACE
case|:
name|Namespace
name|ns
init|=
operator|(
name|Namespace
operator|)
name|ev
decl_stmt|;
name|declare
argument_list|(
operator|(
name|Element
operator|)
name|parent
argument_list|,
name|ns
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
name|ns
operator|.
name|getPrefix
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|XMLStreamConstants
operator|.
name|ATTRIBUTE
case|:
name|Attribute
name|at
init|=
operator|(
name|Attribute
operator|)
name|ev
decl_stmt|;
name|QName
name|qname
init|=
name|at
operator|.
name|getName
argument_list|()
decl_stmt|;
name|String
name|attName
init|=
name|qname
operator|.
name|getLocalPart
argument_list|()
decl_stmt|;
name|String
name|attPrefix
init|=
name|qname
operator|.
name|getPrefix
argument_list|()
decl_stmt|;
if|if
condition|(
name|attPrefix
operator|!=
literal|null
operator|&&
name|attPrefix
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|attName
operator|=
name|attPrefix
operator|+
literal|":"
operator|+
name|attName
expr_stmt|;
block|}
name|Attr
name|attr
init|=
name|doc
operator|.
name|createAttributeNS
argument_list|(
name|qname
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
name|attName
argument_list|)
decl_stmt|;
name|attr
operator|.
name|setValue
argument_list|(
name|at
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
operator|(
operator|(
name|Element
operator|)
name|parent
operator|)
operator|.
name|setAttributeNode
argument_list|(
name|attr
argument_list|)
expr_stmt|;
break|break;
case|case
name|XMLStreamConstants
operator|.
name|CHARACTERS
case|:
if|if
condition|(
name|parent
operator|!=
literal|null
condition|)
block|{
name|Characters
name|characters
init|=
name|ev
operator|.
name|asCharacters
argument_list|()
decl_stmt|;
name|context
operator|.
name|setRecordLoc
argument_list|(
name|addLocation
argument_list|(
name|doc
argument_list|,
name|parent
operator|.
name|appendChild
argument_list|(
name|doc
operator|.
name|createTextNode
argument_list|(
name|characters
operator|.
name|getData
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|characters
operator|.
name|getLocation
argument_list|()
argument_list|,
name|context
operator|.
name|isRecordLoc
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|XMLStreamConstants
operator|.
name|COMMENT
case|:
if|if
condition|(
name|parent
operator|!=
literal|null
condition|)
block|{
name|parent
operator|.
name|appendChild
argument_list|(
name|doc
operator|.
name|createComment
argument_list|(
operator|(
operator|(
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|events
operator|.
name|Comment
operator|)
name|ev
operator|)
operator|.
name|getText
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|XMLStreamConstants
operator|.
name|CDATA
case|:
name|Characters
name|characters
init|=
name|ev
operator|.
name|asCharacters
argument_list|()
decl_stmt|;
name|context
operator|.
name|setRecordLoc
argument_list|(
name|addLocation
argument_list|(
name|doc
argument_list|,
name|parent
operator|.
name|appendChild
argument_list|(
name|doc
operator|.
name|createCDATASection
argument_list|(
name|characters
operator|.
name|getData
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|characters
operator|.
name|getLocation
argument_list|()
argument_list|,
name|context
operator|.
name|isRecordLoc
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|XMLStreamConstants
operator|.
name|PROCESSING_INSTRUCTION
case|:
name|parent
operator|.
name|appendChild
argument_list|(
name|doc
operator|.
name|createProcessingInstruction
argument_list|(
operator|(
operator|(
name|ProcessingInstruction
operator|)
name|ev
operator|)
operator|.
name|getTarget
argument_list|()
argument_list|,
operator|(
operator|(
name|ProcessingInstruction
operator|)
name|ev
operator|)
operator|.
name|getData
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|XMLStreamConstants
operator|.
name|ENTITY_REFERENCE
case|:
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|events
operator|.
name|EntityReference
name|er
init|=
operator|(
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|events
operator|.
name|EntityReference
operator|)
name|ev
decl_stmt|;
name|parent
operator|.
name|appendChild
argument_list|(
name|doc
operator|.
name|createEntityReference
argument_list|(
name|er
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
return|return
name|parent
return|;
block|}
specifier|private
specifier|static
name|boolean
name|addLocation
parameter_list|(
name|Document
name|doc
parameter_list|,
name|Node
name|node
parameter_list|,
name|Location
name|loc
parameter_list|,
name|boolean
name|recordLoc
parameter_list|)
block|{
if|if
condition|(
name|recordLoc
operator|&&
name|loc
operator|!=
literal|null
operator|&&
operator|(
name|loc
operator|.
name|getColumnNumber
argument_list|()
operator|!=
literal|0
operator|||
name|loc
operator|.
name|getLineNumber
argument_list|()
operator|!=
literal|0
operator|)
condition|)
block|{
try|try
block|{
specifier|final
name|int
name|charOffset
init|=
name|loc
operator|.
name|getCharacterOffset
argument_list|()
decl_stmt|;
specifier|final
name|int
name|colNum
init|=
name|loc
operator|.
name|getColumnNumber
argument_list|()
decl_stmt|;
specifier|final
name|int
name|linNum
init|=
name|loc
operator|.
name|getLineNumber
argument_list|()
decl_stmt|;
specifier|final
name|String
name|pubId
init|=
name|loc
operator|.
name|getPublicId
argument_list|()
operator|==
literal|null
condition|?
name|doc
operator|.
name|getDocumentURI
argument_list|()
else|:
name|loc
operator|.
name|getPublicId
argument_list|()
decl_stmt|;
specifier|final
name|String
name|sysId
init|=
name|loc
operator|.
name|getSystemId
argument_list|()
operator|==
literal|null
condition|?
name|doc
operator|.
name|getDocumentURI
argument_list|()
else|:
name|loc
operator|.
name|getSystemId
argument_list|()
decl_stmt|;
name|Location
name|loc2
init|=
operator|new
name|Location
argument_list|()
block|{
specifier|public
name|int
name|getCharacterOffset
parameter_list|()
block|{
return|return
name|charOffset
return|;
block|}
specifier|public
name|int
name|getColumnNumber
parameter_list|()
block|{
return|return
name|colNum
return|;
block|}
specifier|public
name|int
name|getLineNumber
parameter_list|()
block|{
return|return
name|linNum
return|;
block|}
specifier|public
name|String
name|getPublicId
parameter_list|()
block|{
return|return
name|pubId
return|;
block|}
specifier|public
name|String
name|getSystemId
parameter_list|()
block|{
return|return
name|sysId
return|;
block|}
block|}
decl_stmt|;
name|node
operator|.
name|setUserData
argument_list|(
literal|"location"
argument_list|,
name|loc2
argument_list|,
name|LocationUserDataHandler
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
comment|//possibly not DOM level 3, won't be able to record this then
return|return
literal|false
return|;
block|}
block|}
return|return
name|recordLoc
return|;
block|}
specifier|private
specifier|static
name|boolean
name|addLocation
parameter_list|(
name|Document
name|doc
parameter_list|,
name|Node
name|node
parameter_list|,
name|XMLStreamReader
name|reader
parameter_list|,
name|boolean
name|recordLoc
parameter_list|)
block|{
return|return
name|addLocation
argument_list|(
name|doc
argument_list|,
name|node
argument_list|,
name|reader
operator|.
name|getLocation
argument_list|()
argument_list|,
name|recordLoc
argument_list|)
return|;
block|}
specifier|private
specifier|static
class|class
name|LocationUserDataHandler
implements|implements
name|UserDataHandler
block|{
specifier|public
specifier|static
specifier|final
name|LocationUserDataHandler
name|INSTANCE
init|=
operator|new
name|LocationUserDataHandler
argument_list|()
decl_stmt|;
specifier|public
name|void
name|handle
parameter_list|(
name|short
name|operation
parameter_list|,
name|String
name|key
parameter_list|,
name|Object
name|data
parameter_list|,
name|Node
name|src
parameter_list|,
name|Node
name|dst
parameter_list|)
block|{
if|if
condition|(
name|operation
operator|==
name|NODE_CLONED
condition|)
block|{
name|dst
operator|.
name|setUserData
argument_list|(
name|key
argument_list|,
name|data
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
name|void
name|declare
parameter_list|(
name|Element
name|node
parameter_list|,
name|String
name|uri
parameter_list|,
name|String
name|prefix
parameter_list|)
block|{
name|String
name|qualname
decl_stmt|;
if|if
condition|(
name|prefix
operator|!=
literal|null
operator|&&
name|prefix
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|qualname
operator|=
literal|"xmlns:"
operator|+
name|prefix
expr_stmt|;
block|}
else|else
block|{
name|qualname
operator|=
literal|"xmlns"
expr_stmt|;
block|}
name|Attr
name|attr
init|=
name|node
operator|.
name|getOwnerDocument
argument_list|()
operator|.
name|createAttributeNS
argument_list|(
name|XML_NS
argument_list|,
name|qualname
argument_list|)
decl_stmt|;
name|attr
operator|.
name|setValue
argument_list|(
name|uri
argument_list|)
expr_stmt|;
name|node
operator|.
name|setAttributeNodeNS
argument_list|(
name|attr
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|XMLStreamReader
name|createXMLStreamReader
parameter_list|(
name|InputSource
name|src
parameter_list|)
block|{
name|String
name|sysId
init|=
name|src
operator|.
name|getSystemId
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|src
operator|.
name|getSystemId
argument_list|()
decl_stmt|;
name|String
name|pubId
init|=
name|src
operator|.
name|getPublicId
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|src
operator|.
name|getPublicId
argument_list|()
decl_stmt|;
if|if
condition|(
name|src
operator|.
name|getByteStream
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|src
operator|.
name|getEncoding
argument_list|()
operator|==
literal|null
condition|)
block|{
name|StreamSource
name|ss
init|=
operator|new
name|StreamSource
argument_list|(
name|src
operator|.
name|getByteStream
argument_list|()
argument_list|,
name|sysId
argument_list|)
decl_stmt|;
name|ss
operator|.
name|setPublicId
argument_list|(
name|pubId
argument_list|)
expr_stmt|;
return|return
name|createXMLStreamReader
argument_list|(
name|ss
argument_list|)
return|;
block|}
return|return
name|createXMLStreamReader
argument_list|(
name|src
operator|.
name|getByteStream
argument_list|()
argument_list|,
name|src
operator|.
name|getEncoding
argument_list|()
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|src
operator|.
name|getCharacterStream
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|StreamSource
name|ss
init|=
operator|new
name|StreamSource
argument_list|(
name|src
operator|.
name|getCharacterStream
argument_list|()
argument_list|,
name|sysId
argument_list|)
decl_stmt|;
name|ss
operator|.
name|setPublicId
argument_list|(
name|pubId
argument_list|)
expr_stmt|;
return|return
name|createXMLStreamReader
argument_list|(
name|ss
argument_list|)
return|;
block|}
else|else
block|{
try|try
block|{
name|URL
name|url
init|=
operator|new
name|URL
argument_list|(
name|sysId
argument_list|)
decl_stmt|;
name|StreamSource
name|ss
init|=
operator|new
name|StreamSource
argument_list|(
name|url
operator|.
name|openStream
argument_list|()
argument_list|,
name|sysId
argument_list|)
decl_stmt|;
name|ss
operator|.
name|setPublicId
argument_list|(
name|pubId
argument_list|)
expr_stmt|;
return|return
name|createXMLStreamReader
argument_list|(
name|ss
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|//ignore - not a valid URL
block|}
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"InputSource must have a ByteStream or CharacterStream"
argument_list|)
throw|;
block|}
comment|/**      * @param in      * @param encoding      */
specifier|public
specifier|static
name|XMLStreamReader
name|createXMLStreamReader
parameter_list|(
name|InputStream
name|in
parameter_list|,
name|String
name|encoding
parameter_list|)
block|{
if|if
condition|(
name|encoding
operator|==
literal|null
condition|)
block|{
name|encoding
operator|=
name|StandardCharsets
operator|.
name|UTF_8
operator|.
name|name
argument_list|()
expr_stmt|;
block|}
name|XMLInputFactory
name|factory
init|=
name|getXMLInputFactory
argument_list|()
decl_stmt|;
try|try
block|{
return|return
name|factory
operator|.
name|createXMLStreamReader
argument_list|(
name|in
argument_list|,
name|encoding
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|XMLStreamException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Couldn't parse stream."
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|returnXMLInputFactory
argument_list|(
name|factory
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * @param in      */
specifier|public
specifier|static
name|XMLStreamReader
name|createXMLStreamReader
parameter_list|(
name|InputStream
name|in
parameter_list|)
block|{
name|XMLInputFactory
name|factory
init|=
name|getXMLInputFactory
argument_list|()
decl_stmt|;
try|try
block|{
return|return
name|factory
operator|.
name|createXMLStreamReader
argument_list|(
name|in
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|XMLStreamException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Couldn't parse stream."
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|returnXMLInputFactory
argument_list|(
name|factory
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|XMLStreamReader
name|createXMLStreamReader
parameter_list|(
name|String
name|systemId
parameter_list|,
name|InputStream
name|in
parameter_list|)
block|{
name|XMLInputFactory
name|factory
init|=
name|getXMLInputFactory
argument_list|()
decl_stmt|;
try|try
block|{
return|return
name|factory
operator|.
name|createXMLStreamReader
argument_list|(
name|systemId
argument_list|,
name|in
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|XMLStreamException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Couldn't parse stream."
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|returnXMLInputFactory
argument_list|(
name|factory
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|XMLStreamReader
name|createXMLStreamReader
parameter_list|(
name|Element
name|el
parameter_list|)
block|{
return|return
operator|new
name|W3CDOMStreamReader
argument_list|(
name|el
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|XMLStreamReader
name|createXMLStreamReader
parameter_list|(
name|Document
name|doc
parameter_list|)
block|{
return|return
operator|new
name|W3CDOMStreamReader
argument_list|(
name|doc
operator|.
name|getDocumentElement
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|XMLStreamReader
name|createXMLStreamReader
parameter_list|(
name|Element
name|el
parameter_list|,
name|String
name|sysId
parameter_list|)
block|{
return|return
operator|new
name|W3CDOMStreamReader
argument_list|(
name|el
argument_list|,
name|sysId
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|XMLStreamReader
name|createXMLStreamReader
parameter_list|(
name|Document
name|doc
parameter_list|,
name|String
name|sysId
parameter_list|)
block|{
return|return
operator|new
name|W3CDOMStreamReader
argument_list|(
name|doc
operator|.
name|getDocumentElement
argument_list|()
argument_list|,
name|sysId
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|XMLStreamReader
name|createXMLStreamReader
parameter_list|(
name|Source
name|source
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|source
operator|instanceof
name|DOMSource
condition|)
block|{
name|DOMSource
name|ds
init|=
operator|(
name|DOMSource
operator|)
name|source
decl_stmt|;
name|Node
name|nd
init|=
name|ds
operator|.
name|getNode
argument_list|()
decl_stmt|;
name|Element
name|el
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|nd
operator|instanceof
name|Document
condition|)
block|{
name|el
operator|=
operator|(
operator|(
name|Document
operator|)
name|nd
operator|)
operator|.
name|getDocumentElement
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|nd
operator|instanceof
name|Element
condition|)
block|{
name|el
operator|=
operator|(
name|Element
operator|)
name|nd
expr_stmt|;
block|}
if|if
condition|(
literal|null
operator|!=
name|el
condition|)
block|{
return|return
operator|new
name|W3CDOMStreamReader
argument_list|(
name|el
argument_list|,
name|source
operator|.
name|getSystemId
argument_list|()
argument_list|)
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|source
operator|instanceof
name|StAXSource
condition|)
block|{
return|return
operator|(
operator|(
name|StAXSource
operator|)
name|source
operator|)
operator|.
name|getXMLStreamReader
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|source
operator|instanceof
name|StaxSource
condition|)
block|{
return|return
operator|(
operator|(
name|StaxSource
operator|)
name|source
operator|)
operator|.
name|getXMLStreamReader
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|source
operator|instanceof
name|SAXSource
condition|)
block|{
name|SAXSource
name|ss
init|=
operator|(
name|SAXSource
operator|)
name|source
decl_stmt|;
if|if
condition|(
name|ss
operator|.
name|getXMLReader
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
name|createXMLStreamReader
argument_list|(
operator|(
operator|(
name|SAXSource
operator|)
name|source
operator|)
operator|.
name|getInputSource
argument_list|()
argument_list|)
return|;
block|}
block|}
name|XMLInputFactory
name|factory
init|=
name|getXMLInputFactory
argument_list|()
decl_stmt|;
try|try
block|{
name|XMLStreamReader
name|reader
init|=
literal|null
decl_stmt|;
try|try
block|{
name|reader
operator|=
name|factory
operator|.
name|createXMLStreamReader
argument_list|(
name|source
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|e
parameter_list|)
block|{
comment|//ignore
block|}
if|if
condition|(
name|reader
operator|==
literal|null
operator|&&
name|source
operator|instanceof
name|StreamSource
condition|)
block|{
comment|//createXMLStreamReader from Source is optional, we'll try and map it
name|StreamSource
name|ss
init|=
operator|(
name|StreamSource
operator|)
name|source
decl_stmt|;
if|if
condition|(
name|ss
operator|.
name|getInputStream
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|reader
operator|=
name|factory
operator|.
name|createXMLStreamReader
argument_list|(
name|ss
operator|.
name|getSystemId
argument_list|()
argument_list|,
name|ss
operator|.
name|getInputStream
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|reader
operator|=
name|factory
operator|.
name|createXMLStreamReader
argument_list|(
name|ss
operator|.
name|getSystemId
argument_list|()
argument_list|,
name|ss
operator|.
name|getReader
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|reader
return|;
block|}
finally|finally
block|{
name|returnXMLInputFactory
argument_list|(
name|factory
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|XMLStreamException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Couldn't parse stream."
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * @param reader      */
specifier|public
specifier|static
name|XMLStreamReader
name|createXMLStreamReader
parameter_list|(
name|Reader
name|reader
parameter_list|)
block|{
name|XMLInputFactory
name|factory
init|=
name|getXMLInputFactory
argument_list|()
decl_stmt|;
try|try
block|{
return|return
name|factory
operator|.
name|createXMLStreamReader
argument_list|(
name|reader
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|XMLStreamException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Couldn't parse stream."
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|returnXMLInputFactory
argument_list|(
name|factory
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Reads a QName from the element text. Reader must be positioned at the      * start tag.      */
specifier|public
specifier|static
name|QName
name|readQName
parameter_list|(
name|XMLStreamReader
name|reader
parameter_list|)
throws|throws
name|XMLStreamException
block|{
name|String
name|value
init|=
name|reader
operator|.
name|getElementText
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|value
operator|=
name|value
operator|.
name|trim
argument_list|()
expr_stmt|;
name|int
name|index
init|=
name|value
operator|.
name|indexOf
argument_list|(
literal|":"
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|==
operator|-
literal|1
condition|)
block|{
return|return
operator|new
name|QName
argument_list|(
name|value
argument_list|)
return|;
block|}
name|String
name|prefix
init|=
name|value
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|index
argument_list|)
decl_stmt|;
name|String
name|localName
init|=
name|value
operator|.
name|substring
argument_list|(
name|index
operator|+
literal|1
argument_list|)
decl_stmt|;
name|String
name|ns
init|=
name|reader
operator|.
name|getNamespaceURI
argument_list|(
name|prefix
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
operator|!
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|prefix
argument_list|)
operator|&&
name|ns
operator|==
literal|null
operator|)
operator|||
name|localName
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Invalid QName in mapping: "
operator|+
name|value
argument_list|)
throw|;
block|}
if|if
condition|(
name|ns
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|QName
argument_list|(
name|localName
argument_list|)
return|;
block|}
return|return
operator|new
name|QName
argument_list|(
name|ns
argument_list|,
name|localName
argument_list|,
name|prefix
argument_list|)
return|;
block|}
comment|/**      * Create a unique namespace uri/prefix combination.      *      * @return The namespace with the specified URI. If one doesn't exist, one      *         is created.      * @throws XMLStreamException      */
specifier|public
specifier|static
name|String
name|getUniquePrefix
parameter_list|(
name|XMLStreamWriter
name|writer
parameter_list|,
name|String
name|namespaceURI
parameter_list|,
name|boolean
name|declare
parameter_list|)
throws|throws
name|XMLStreamException
block|{
name|String
name|prefix
init|=
name|writer
operator|.
name|getPrefix
argument_list|(
name|namespaceURI
argument_list|)
decl_stmt|;
if|if
condition|(
name|prefix
operator|==
literal|null
condition|)
block|{
name|prefix
operator|=
name|getUniquePrefix
argument_list|(
name|writer
argument_list|)
expr_stmt|;
if|if
condition|(
name|declare
condition|)
block|{
name|writer
operator|.
name|setPrefix
argument_list|(
name|prefix
argument_list|,
name|namespaceURI
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeNamespace
argument_list|(
name|prefix
argument_list|,
name|namespaceURI
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|prefix
return|;
block|}
specifier|public
specifier|static
name|String
name|getUniquePrefix
parameter_list|(
name|XMLStreamWriter
name|writer
parameter_list|,
name|String
name|namespaceURI
parameter_list|)
throws|throws
name|XMLStreamException
block|{
return|return
name|getUniquePrefix
argument_list|(
name|writer
argument_list|,
name|namespaceURI
argument_list|,
literal|false
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|getUniquePrefix
parameter_list|(
name|XMLStreamWriter
name|writer
parameter_list|)
block|{
name|NamespaceContext
name|nc
init|=
name|writer
operator|.
name|getNamespaceContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|nc
operator|==
literal|null
condition|)
block|{
return|return
name|DEF_PREFIXES
index|[
literal|0
index|]
return|;
block|}
for|for
control|(
name|String
name|t
range|:
name|DEF_PREFIXES
control|)
block|{
name|String
name|uri
init|=
name|nc
operator|.
name|getNamespaceURI
argument_list|(
name|t
argument_list|)
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|uri
argument_list|)
condition|)
block|{
return|return
name|t
return|;
block|}
block|}
name|int
name|n
init|=
literal|10
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|String
name|nsPrefix
init|=
literal|"ns"
operator|+
name|n
decl_stmt|;
name|String
name|uri
init|=
name|nc
operator|.
name|getNamespaceURI
argument_list|(
name|nsPrefix
argument_list|)
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|uri
argument_list|)
condition|)
block|{
return|return
name|nsPrefix
return|;
block|}
name|n
operator|++
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|void
name|printXmlFragment
parameter_list|(
name|XMLStreamReader
name|reader
parameter_list|)
block|{
try|try
block|{
name|StringWriter
name|sw
init|=
operator|new
name|StringWriter
argument_list|(
literal|1024
argument_list|)
decl_stmt|;
name|XMLStreamWriter
name|writer
init|=
literal|null
decl_stmt|;
try|try
block|{
name|writer
operator|=
operator|new
name|PrettyPrintXMLStreamWriter
argument_list|(
name|createXMLStreamWriter
argument_list|(
name|sw
argument_list|)
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|copy
argument_list|(
name|reader
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|writer
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|StaxUtils
operator|.
name|close
argument_list|(
name|writer
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
name|sw
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLStreamException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|severe
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|writeStartElementEvent
parameter_list|(
name|XMLEvent
name|event
parameter_list|,
name|XMLStreamWriter
name|writer
parameter_list|)
throws|throws
name|XMLStreamException
block|{
name|StartElement
name|start
init|=
name|event
operator|.
name|asStartElement
argument_list|()
decl_stmt|;
name|QName
name|name
init|=
name|start
operator|.
name|getName
argument_list|()
decl_stmt|;
name|String
name|nsURI
init|=
name|name
operator|.
name|getNamespaceURI
argument_list|()
decl_stmt|;
name|String
name|localName
init|=
name|name
operator|.
name|getLocalPart
argument_list|()
decl_stmt|;
name|String
name|prefix
init|=
name|name
operator|.
name|getPrefix
argument_list|()
decl_stmt|;
if|if
condition|(
name|prefix
operator|!=
literal|null
condition|)
block|{
name|writer
operator|.
name|writeStartElement
argument_list|(
name|prefix
argument_list|,
name|localName
argument_list|,
name|nsURI
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|nsURI
operator|!=
literal|null
condition|)
block|{
name|writer
operator|.
name|writeStartElement
argument_list|(
name|localName
argument_list|,
name|nsURI
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|writer
operator|.
name|writeStartElement
argument_list|(
name|localName
argument_list|)
expr_stmt|;
block|}
name|Iterator
argument_list|<
name|XMLEvent
argument_list|>
name|it
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
name|start
operator|.
name|getNamespaces
argument_list|()
argument_list|)
decl_stmt|;
while|while
condition|(
name|it
operator|!=
literal|null
operator|&&
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|writeEvent
argument_list|(
name|it
operator|.
name|next
argument_list|()
argument_list|,
name|writer
argument_list|)
expr_stmt|;
block|}
name|it
operator|=
name|CastUtils
operator|.
name|cast
argument_list|(
name|start
operator|.
name|getAttributes
argument_list|()
argument_list|)
expr_stmt|;
while|while
condition|(
name|it
operator|!=
literal|null
operator|&&
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|writeAttributeEvent
argument_list|(
name|it
operator|.
name|next
argument_list|()
argument_list|,
name|writer
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|writeAttributeEvent
parameter_list|(
name|XMLEvent
name|event
parameter_list|,
name|XMLStreamWriter
name|writer
parameter_list|)
throws|throws
name|XMLStreamException
block|{
name|Attribute
name|attr
init|=
operator|(
name|Attribute
operator|)
name|event
decl_stmt|;
name|QName
name|name
init|=
name|attr
operator|.
name|getName
argument_list|()
decl_stmt|;
name|String
name|nsURI
init|=
name|name
operator|.
name|getNamespaceURI
argument_list|()
decl_stmt|;
name|String
name|localName
init|=
name|name
operator|.
name|getLocalPart
argument_list|()
decl_stmt|;
name|String
name|prefix
init|=
name|name
operator|.
name|getPrefix
argument_list|()
decl_stmt|;
name|String
name|value
init|=
name|attr
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|prefix
operator|!=
literal|null
condition|)
block|{
name|writer
operator|.
name|writeAttribute
argument_list|(
name|prefix
argument_list|,
name|nsURI
argument_list|,
name|localName
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|nsURI
operator|!=
literal|null
condition|)
block|{
name|writer
operator|.
name|writeAttribute
argument_list|(
name|nsURI
argument_list|,
name|localName
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|writer
operator|.
name|writeAttribute
argument_list|(
name|localName
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|void
name|writeEvent
parameter_list|(
name|XMLEvent
name|event
parameter_list|,
name|XMLStreamWriter
name|writer
parameter_list|)
throws|throws
name|XMLStreamException
block|{
switch|switch
condition|(
name|event
operator|.
name|getEventType
argument_list|()
condition|)
block|{
case|case
name|XMLStreamConstants
operator|.
name|START_ELEMENT
case|:
name|writeStartElementEvent
argument_list|(
name|event
argument_list|,
name|writer
argument_list|)
expr_stmt|;
break|break;
case|case
name|XMLStreamConstants
operator|.
name|END_ELEMENT
case|:
name|writer
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
break|break;
case|case
name|XMLStreamConstants
operator|.
name|ATTRIBUTE
case|:
name|writeAttributeEvent
argument_list|(
name|event
argument_list|,
name|writer
argument_list|)
expr_stmt|;
break|break;
case|case
name|XMLStreamConstants
operator|.
name|ENTITY_REFERENCE
case|:
name|writer
operator|.
name|writeEntityRef
argument_list|(
operator|(
operator|(
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|events
operator|.
name|EntityReference
operator|)
name|event
operator|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|XMLStreamConstants
operator|.
name|DTD
case|:
name|writer
operator|.
name|writeDTD
argument_list|(
operator|(
operator|(
name|DTD
operator|)
name|event
operator|)
operator|.
name|getDocumentTypeDeclaration
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|XMLStreamConstants
operator|.
name|PROCESSING_INSTRUCTION
case|:
if|if
condition|(
operator|(
operator|(
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|events
operator|.
name|ProcessingInstruction
operator|)
name|event
operator|)
operator|.
name|getData
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|writer
operator|.
name|writeProcessingInstruction
argument_list|(
operator|(
operator|(
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|events
operator|.
name|ProcessingInstruction
operator|)
name|event
operator|)
operator|.
name|getTarget
argument_list|()
argument_list|,
operator|(
operator|(
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|events
operator|.
name|ProcessingInstruction
operator|)
name|event
operator|)
operator|.
name|getData
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|writer
operator|.
name|writeProcessingInstruction
argument_list|(
operator|(
operator|(
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|events
operator|.
name|ProcessingInstruction
operator|)
name|event
operator|)
operator|.
name|getTarget
argument_list|()
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|XMLStreamConstants
operator|.
name|NAMESPACE
case|:
if|if
condition|(
operator|(
operator|(
name|Namespace
operator|)
name|event
operator|)
operator|.
name|isDefaultNamespaceDeclaration
argument_list|()
condition|)
block|{
name|writer
operator|.
name|writeDefaultNamespace
argument_list|(
operator|(
operator|(
name|Namespace
operator|)
name|event
operator|)
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|setDefaultNamespace
argument_list|(
operator|(
operator|(
name|Namespace
operator|)
name|event
operator|)
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|writer
operator|.
name|writeNamespace
argument_list|(
operator|(
operator|(
name|Namespace
operator|)
name|event
operator|)
operator|.
name|getPrefix
argument_list|()
argument_list|,
operator|(
operator|(
name|Namespace
operator|)
name|event
operator|)
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|setPrefix
argument_list|(
operator|(
operator|(
name|Namespace
operator|)
name|event
operator|)
operator|.
name|getPrefix
argument_list|()
argument_list|,
operator|(
operator|(
name|Namespace
operator|)
name|event
operator|)
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|XMLStreamConstants
operator|.
name|COMMENT
case|:
name|writer
operator|.
name|writeComment
argument_list|(
operator|(
operator|(
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|events
operator|.
name|Comment
operator|)
name|event
operator|)
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|XMLStreamConstants
operator|.
name|CHARACTERS
case|:
case|case
name|XMLStreamConstants
operator|.
name|SPACE
case|:
name|writer
operator|.
name|writeCharacters
argument_list|(
name|event
operator|.
name|asCharacters
argument_list|()
operator|.
name|getData
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|XMLStreamConstants
operator|.
name|CDATA
case|:
name|writer
operator|.
name|writeCData
argument_list|(
name|event
operator|.
name|asCharacters
argument_list|()
operator|.
name|getData
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|XMLStreamConstants
operator|.
name|START_DOCUMENT
case|:
if|if
condition|(
operator|(
operator|(
name|StartDocument
operator|)
name|event
operator|)
operator|.
name|encodingSet
argument_list|()
condition|)
block|{
name|writer
operator|.
name|writeStartDocument
argument_list|(
operator|(
operator|(
name|StartDocument
operator|)
name|event
operator|)
operator|.
name|getCharacterEncodingScheme
argument_list|()
argument_list|,
operator|(
operator|(
name|StartDocument
operator|)
name|event
operator|)
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|writer
operator|.
name|writeStartDocument
argument_list|(
operator|(
operator|(
name|StartDocument
operator|)
name|event
operator|)
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|XMLStreamConstants
operator|.
name|END_DOCUMENT
case|:
name|writer
operator|.
name|writeEndDocument
argument_list|()
expr_stmt|;
break|break;
default|default:
comment|//shouldn't get here
block|}
block|}
specifier|public
specifier|static
name|void
name|print
parameter_list|(
name|Node
name|node
parameter_list|)
block|{
name|XMLStreamWriter
name|writer
init|=
literal|null
decl_stmt|;
try|try
block|{
name|writer
operator|=
name|createXMLStreamWriter
argument_list|(
name|System
operator|.
name|out
argument_list|)
expr_stmt|;
name|copy
argument_list|(
operator|new
name|DOMSource
argument_list|(
name|node
argument_list|)
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|writer
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLStreamException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|StaxUtils
operator|.
name|close
argument_list|(
name|writer
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|String
name|toString
parameter_list|(
name|Source
name|src
parameter_list|)
block|{
name|StringWriter
name|sw
init|=
operator|new
name|StringWriter
argument_list|(
literal|1024
argument_list|)
decl_stmt|;
name|XMLStreamWriter
name|writer
init|=
literal|null
decl_stmt|;
try|try
block|{
name|writer
operator|=
name|createXMLStreamWriter
argument_list|(
name|sw
argument_list|)
expr_stmt|;
name|copy
argument_list|(
name|src
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|writer
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLStreamException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|StaxUtils
operator|.
name|close
argument_list|(
name|writer
argument_list|)
expr_stmt|;
block|}
return|return
name|sw
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|String
name|toString
parameter_list|(
name|Node
name|src
parameter_list|)
block|{
return|return
name|toString
argument_list|(
operator|new
name|DOMSource
argument_list|(
name|src
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|toString
parameter_list|(
name|Document
name|doc
parameter_list|)
block|{
name|StringWriter
name|sw
init|=
operator|new
name|StringWriter
argument_list|(
literal|1024
argument_list|)
decl_stmt|;
name|XMLStreamWriter
name|writer
init|=
literal|null
decl_stmt|;
try|try
block|{
name|writer
operator|=
name|createXMLStreamWriter
argument_list|(
name|sw
argument_list|)
expr_stmt|;
name|copy
argument_list|(
name|doc
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|writer
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLStreamException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|StaxUtils
operator|.
name|close
argument_list|(
name|writer
argument_list|)
expr_stmt|;
block|}
return|return
name|sw
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|String
name|toString
parameter_list|(
name|Element
name|el
parameter_list|)
block|{
return|return
name|toString
argument_list|(
name|el
argument_list|,
literal|0
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|toString
parameter_list|(
name|Element
name|el
parameter_list|,
name|int
name|indent
parameter_list|)
block|{
name|StringWriter
name|sw
init|=
operator|new
name|StringWriter
argument_list|(
literal|1024
argument_list|)
decl_stmt|;
name|XMLStreamWriter
name|writer
init|=
literal|null
decl_stmt|;
try|try
block|{
name|writer
operator|=
name|createXMLStreamWriter
argument_list|(
name|sw
argument_list|)
expr_stmt|;
if|if
condition|(
name|indent
operator|>
literal|0
condition|)
block|{
name|writer
operator|=
operator|new
name|PrettyPrintXMLStreamWriter
argument_list|(
name|writer
argument_list|,
name|indent
argument_list|)
expr_stmt|;
block|}
name|copy
argument_list|(
name|el
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|writer
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLStreamException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|StaxUtils
operator|.
name|close
argument_list|(
name|writer
argument_list|)
expr_stmt|;
block|}
return|return
name|sw
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|void
name|close
parameter_list|(
name|XMLStreamReader
name|reader
parameter_list|)
throws|throws
name|XMLStreamException
block|{
if|if
condition|(
name|reader
operator|!=
literal|null
condition|)
block|{
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|void
name|close
parameter_list|(
name|XMLStreamWriter
name|writer
parameter_list|)
block|{
if|if
condition|(
name|writer
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|//ignore
block|}
block|}
block|}
specifier|public
specifier|static
name|boolean
name|isSecureReader
parameter_list|(
name|XMLStreamReader
name|reader
parameter_list|,
name|Message
name|message
parameter_list|)
block|{
if|if
condition|(
name|reader
operator|instanceof
name|DocumentDepthProperties
condition|)
block|{
return|return
literal|true
return|;
block|}
try|try
block|{
if|if
condition|(
name|reader
operator|.
name|getProperty
argument_list|(
literal|"com.ctc.wstx.maxChildrenPerElement"
argument_list|)
operator|!=
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|//ignore
block|}
return|return
literal|false
return|;
block|}
specifier|public
specifier|static
name|XMLStreamReader
name|configureReader
parameter_list|(
name|XMLStreamReader
name|xreader
parameter_list|,
name|Message
name|message
parameter_list|)
throws|throws
name|XMLStreamException
block|{
name|Integer
name|messageMaxChildElements
init|=
name|PropertyUtils
operator|.
name|getInteger
argument_list|(
name|message
argument_list|,
name|MAX_CHILD_ELEMENTS
argument_list|)
decl_stmt|;
name|Integer
name|messageMaxElementDepth
init|=
name|PropertyUtils
operator|.
name|getInteger
argument_list|(
name|message
argument_list|,
name|MAX_ELEMENT_DEPTH
argument_list|)
decl_stmt|;
name|Integer
name|messageMaxAttributeCount
init|=
name|PropertyUtils
operator|.
name|getInteger
argument_list|(
name|message
argument_list|,
name|MAX_ATTRIBUTE_COUNT
argument_list|)
decl_stmt|;
name|Integer
name|messageMaxAttributeSize
init|=
name|PropertyUtils
operator|.
name|getInteger
argument_list|(
name|message
argument_list|,
name|MAX_ATTRIBUTE_SIZE
argument_list|)
decl_stmt|;
name|Integer
name|messageMaxTextLength
init|=
name|PropertyUtils
operator|.
name|getInteger
argument_list|(
name|message
argument_list|,
name|MAX_TEXT_LENGTH
argument_list|)
decl_stmt|;
name|Long
name|messageMaxElementCount
init|=
name|PropertyUtils
operator|.
name|getLong
argument_list|(
name|message
argument_list|,
name|MAX_ELEMENT_COUNT
argument_list|)
decl_stmt|;
name|Long
name|messageMaxXMLCharacters
init|=
name|PropertyUtils
operator|.
name|getLong
argument_list|(
name|message
argument_list|,
name|MAX_XML_CHARACTERS
argument_list|)
decl_stmt|;
return|return
name|configureReader
argument_list|(
name|xreader
argument_list|,
name|messageMaxChildElements
argument_list|,
name|messageMaxElementDepth
argument_list|,
name|messageMaxAttributeCount
argument_list|,
name|messageMaxAttributeSize
argument_list|,
name|messageMaxTextLength
argument_list|,
name|messageMaxElementCount
argument_list|,
name|messageMaxXMLCharacters
argument_list|)
return|;
block|}
comment|//CHECKSTYLE:OFF - lots of params to configure
specifier|public
specifier|static
name|XMLStreamReader
name|configureReader
parameter_list|(
name|XMLStreamReader
name|reader
parameter_list|,
name|Integer
name|maxChildElements
parameter_list|,
name|Integer
name|maxElementDepth
parameter_list|,
name|Integer
name|maxAttributeCount
parameter_list|,
name|Integer
name|maxAttributeSize
parameter_list|,
name|Integer
name|maxTextLength
parameter_list|,
name|Long
name|maxElementCount
parameter_list|,
name|Long
name|maxXMLCharacters
parameter_list|)
throws|throws
name|XMLStreamException
block|{
comment|//CHECKSTYLE:ON
comment|// We currently ONLY support Woodstox 4.2.x for most of this other than a few things
comment|// that we can handle via a wrapper.
try|try
block|{
name|DocumentDepthProperties
name|p
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|maxChildElements
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|setProperty
argument_list|(
name|reader
argument_list|,
literal|"com.ctc.wstx.maxChildrenPerElement"
argument_list|,
name|maxChildElements
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
comment|//we can handle this via a wrapper
name|p
operator|=
operator|new
name|DocumentDepthProperties
argument_list|()
expr_stmt|;
name|p
operator|.
name|setInnerElementCountThreshold
argument_list|(
name|maxChildElements
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|maxElementDepth
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|setProperty
argument_list|(
name|reader
argument_list|,
literal|"com.ctc.wstx.maxElementDepth"
argument_list|,
name|maxElementDepth
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
comment|//we can handle this via a wrapper
if|if
condition|(
name|p
operator|==
literal|null
condition|)
block|{
name|p
operator|=
operator|new
name|DocumentDepthProperties
argument_list|()
expr_stmt|;
block|}
name|p
operator|.
name|setInnerElementLevelThreshold
argument_list|(
name|maxElementDepth
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|maxAttributeCount
operator|!=
literal|null
condition|)
block|{
name|setProperty
argument_list|(
name|reader
argument_list|,
literal|"com.ctc.wstx.maxAttributesPerElement"
argument_list|,
name|maxAttributeCount
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|maxAttributeSize
operator|!=
literal|null
condition|)
block|{
name|setProperty
argument_list|(
name|reader
argument_list|,
literal|"com.ctc.wstx.maxAttributeSize"
argument_list|,
name|maxAttributeSize
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|maxTextLength
operator|!=
literal|null
condition|)
block|{
name|setProperty
argument_list|(
name|reader
argument_list|,
literal|"com.ctc.wstx.maxTextLength"
argument_list|,
name|maxTextLength
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|maxElementCount
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|setProperty
argument_list|(
name|reader
argument_list|,
literal|"com.ctc.wstx.maxElementCount"
argument_list|,
name|maxElementCount
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
comment|//we can handle this via a wrapper
if|if
condition|(
name|p
operator|==
literal|null
condition|)
block|{
name|p
operator|=
operator|new
name|DocumentDepthProperties
argument_list|()
expr_stmt|;
block|}
name|p
operator|.
name|setElementCountThreshold
argument_list|(
name|maxElementCount
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|maxXMLCharacters
operator|!=
literal|null
condition|)
block|{
name|setProperty
argument_list|(
name|reader
argument_list|,
literal|"com.ctc.wstx.maxCharacters"
argument_list|,
name|maxXMLCharacters
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|p
operator|!=
literal|null
condition|)
block|{
name|reader
operator|=
operator|new
name|DepthRestrictingStreamReader
argument_list|(
name|reader
argument_list|,
name|p
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|ClassCastException
name|cce
parameter_list|)
block|{
comment|//not an XMLStreamReader2
if|if
condition|(
name|allowInsecureParser
condition|)
block|{
name|LOG
operator|.
name|warning
argument_list|(
literal|"INSTANCE_NOT_XMLSTREAMREADER2"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|XMLStreamException
argument_list|(
name|cce
operator|.
name|getMessage
argument_list|()
argument_list|,
name|cce
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|cce
parameter_list|)
block|{
comment|//not a property supported by this version of woodstox
if|if
condition|(
name|allowInsecureParser
condition|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
literal|"SECURE_PROPERTY_NOT_SUPPORTED"
argument_list|,
name|cce
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|XMLStreamException
argument_list|(
name|cce
operator|.
name|getMessage
argument_list|()
argument_list|,
name|cce
argument_list|)
throw|;
block|}
block|}
return|return
name|reader
return|;
block|}
specifier|private
specifier|static
name|void
name|setProperty
parameter_list|(
name|XMLStreamReader
name|reader
parameter_list|,
name|String
name|p
parameter_list|,
name|Object
name|v
parameter_list|)
block|{
name|WoodstoxHelper
operator|.
name|setProperty
argument_list|(
name|reader
argument_list|,
name|p
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

