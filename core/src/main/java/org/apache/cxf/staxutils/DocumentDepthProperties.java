begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|staxutils
package|;
end_package

begin_class
specifier|public
class|class
name|DocumentDepthProperties
block|{
specifier|public
specifier|static
specifier|final
name|String
name|TOTAL_ELEMENT_COUNT
init|=
literal|"depthTotalElementCountThreshold"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|INNER_ELEMENT_COUNT
init|=
literal|"depthInnerElementCountThreshold"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|INNER_ELEMENT_LEVEL
init|=
literal|"depthInnerElementLevelThreshold"
decl_stmt|;
specifier|private
name|int
name|elementCountThreshold
init|=
operator|-
literal|1
decl_stmt|;
specifier|private
name|int
name|innerElementLevelThreshold
init|=
operator|-
literal|1
decl_stmt|;
specifier|private
name|int
name|innerElementCountThreshold
init|=
operator|-
literal|1
decl_stmt|;
specifier|public
name|DocumentDepthProperties
parameter_list|()
block|{      }
specifier|public
name|DocumentDepthProperties
parameter_list|(
name|int
name|elementCountThreshold
parameter_list|,
name|int
name|innerElementLevelThreshold
parameter_list|,
name|int
name|innerElementCountThreshold
parameter_list|)
block|{
name|this
operator|.
name|elementCountThreshold
operator|=
name|elementCountThreshold
expr_stmt|;
name|this
operator|.
name|innerElementLevelThreshold
operator|=
name|innerElementLevelThreshold
expr_stmt|;
name|this
operator|.
name|innerElementCountThreshold
operator|=
name|innerElementCountThreshold
expr_stmt|;
block|}
specifier|public
name|boolean
name|isEffective
parameter_list|()
block|{
return|return
name|elementCountThreshold
operator|!=
operator|-
literal|1
operator|||
name|innerElementLevelThreshold
operator|!=
operator|-
literal|1
operator|||
name|innerElementCountThreshold
operator|!=
operator|-
literal|1
return|;
block|}
specifier|public
name|void
name|setElementCountThreshold
parameter_list|(
name|int
name|elementCountThreshold
parameter_list|)
block|{
name|this
operator|.
name|elementCountThreshold
operator|=
name|elementCountThreshold
expr_stmt|;
block|}
specifier|public
name|int
name|getElementCountThreshold
parameter_list|()
block|{
return|return
name|elementCountThreshold
return|;
block|}
specifier|public
name|void
name|setInnerElementLevelThreshold
parameter_list|(
name|int
name|innerElementLevelThreshold
parameter_list|)
block|{
name|this
operator|.
name|innerElementLevelThreshold
operator|=
name|innerElementLevelThreshold
expr_stmt|;
block|}
specifier|public
name|int
name|getInnerElementLevelThreshold
parameter_list|()
block|{
return|return
name|innerElementLevelThreshold
return|;
block|}
specifier|public
name|void
name|setInnerElementCountThreshold
parameter_list|(
name|int
name|innerElementCountThreshold
parameter_list|)
block|{
name|this
operator|.
name|innerElementCountThreshold
operator|=
name|innerElementCountThreshold
expr_stmt|;
block|}
specifier|public
name|int
name|getInnerElementCountThreshold
parameter_list|()
block|{
return|return
name|innerElementCountThreshold
return|;
block|}
block|}
end_class

end_unit

