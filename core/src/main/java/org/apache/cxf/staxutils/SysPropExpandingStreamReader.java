begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|staxutils
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamReader
import|;
end_import

begin_comment
comment|/**  * A wrapper around XMLStreamReader that expands system property references in element and attribute values.  *   */
end_comment

begin_class
specifier|public
class|class
name|SysPropExpandingStreamReader
extends|extends
name|DelegatingXMLStreamReader
block|{
specifier|public
specifier|static
specifier|final
name|String
name|DELIMITER
init|=
literal|"@"
decl_stmt|;
specifier|public
name|SysPropExpandingStreamReader
parameter_list|(
name|XMLStreamReader
name|reader
parameter_list|)
block|{
name|super
argument_list|(
name|reader
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|String
name|expandSystemProperty
parameter_list|(
name|String
name|value
parameter_list|)
block|{
if|if
condition|(
name|isEmpty
argument_list|(
name|value
argument_list|)
condition|)
block|{
return|return
name|value
return|;
block|}
specifier|final
name|int
name|startIndx
init|=
name|value
operator|.
name|indexOf
argument_list|(
name|DELIMITER
argument_list|)
decl_stmt|;
if|if
condition|(
name|startIndx
operator|>
operator|-
literal|1
condition|)
block|{
specifier|final
name|int
name|endIndx
init|=
name|value
operator|.
name|lastIndexOf
argument_list|(
name|DELIMITER
argument_list|)
decl_stmt|;
if|if
condition|(
name|endIndx
operator|>
operator|-
literal|1
operator|&&
name|startIndx
operator|+
literal|1
operator|<
name|endIndx
condition|)
block|{
specifier|final
name|String
name|propName
init|=
name|value
operator|.
name|substring
argument_list|(
name|startIndx
operator|+
literal|1
argument_list|,
name|endIndx
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|isEmpty
argument_list|(
name|propName
argument_list|)
condition|)
block|{
specifier|final
name|String
name|envValue
init|=
name|System
operator|.
name|getProperty
argument_list|(
name|propName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|isEmpty
argument_list|(
name|envValue
argument_list|)
condition|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|value
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|startIndx
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|envValue
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|value
operator|.
name|substring
argument_list|(
name|endIndx
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|value
operator|=
name|sb
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|value
return|;
block|}
specifier|private
specifier|static
name|boolean
name|isEmpty
parameter_list|(
name|String
name|str
parameter_list|)
block|{
if|if
condition|(
name|str
operator|!=
literal|null
condition|)
block|{
name|int
name|len
init|=
name|str
operator|.
name|length
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|len
condition|;
operator|++
name|x
control|)
block|{
if|if
condition|(
name|str
operator|.
name|charAt
argument_list|(
name|x
argument_list|)
operator|>
literal|' '
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getElementText
parameter_list|()
throws|throws
name|XMLStreamException
block|{
return|return
name|expandSystemProperty
argument_list|(
name|super
operator|.
name|getElementText
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getAttributeValue
parameter_list|(
name|String
name|namespaceURI
parameter_list|,
name|String
name|localName
parameter_list|)
block|{
return|return
name|expandSystemProperty
argument_list|(
name|super
operator|.
name|getAttributeValue
argument_list|(
name|namespaceURI
argument_list|,
name|localName
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getAttributeValue
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|expandSystemProperty
argument_list|(
name|super
operator|.
name|getAttributeValue
argument_list|(
name|index
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getText
parameter_list|()
block|{
return|return
name|expandSystemProperty
argument_list|(
name|super
operator|.
name|getText
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

