begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|configuration
operator|.
name|jsse
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|HostnameVerifier
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|SSLContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|SSLSocketFactory
import|;
end_import

begin_comment
comment|/**  * This class extends {@link TLSParameterBase} with client-specific  * SSL/TLS parameters.  *  */
end_comment

begin_class
specifier|public
class|class
name|TLSClientParameters
extends|extends
name|TLSParameterBase
block|{
specifier|private
name|boolean
name|disableCNCheck
decl_stmt|;
specifier|private
name|SSLSocketFactory
name|sslSocketFactory
decl_stmt|;
specifier|private
name|int
name|sslCacheTimeout
init|=
literal|86400
decl_stmt|;
specifier|private
name|boolean
name|useHttpsURLConnectionDefaultSslSocketFactory
decl_stmt|;
specifier|private
name|boolean
name|useHttpsURLConnectionDefaultHostnameVerifier
decl_stmt|;
specifier|private
name|HostnameVerifier
name|hostnameVerifier
decl_stmt|;
specifier|private
name|SSLContext
name|sslContext
decl_stmt|;
comment|/**      * Set custom HostnameVerifier      * @param verifier hostname verifier      */
specifier|public
name|void
name|setHostnameVerifier
parameter_list|(
name|HostnameVerifier
name|verifier
parameter_list|)
block|{
name|hostnameVerifier
operator|=
name|verifier
expr_stmt|;
block|}
comment|/**      * Get custom HostnameVerifier      * @return hostname verifier      */
specifier|public
name|HostnameVerifier
name|getHostnameVerifier
parameter_list|()
block|{
return|return
name|hostnameVerifier
return|;
block|}
comment|/**      * Set whether or not JSEE should omit checking if the host name      * specified in the URL matches that of the Common Name      * (CN) on the server's certificate. Default is false;      * this attribute should not be set to true during production use.      */
specifier|public
name|void
name|setDisableCNCheck
parameter_list|(
name|boolean
name|disableCNCheck
parameter_list|)
block|{
name|this
operator|.
name|disableCNCheck
operator|=
name|disableCNCheck
expr_stmt|;
block|}
comment|/**      * Returns whether or not JSSE omits checking if the      * host name specified in the URL matches that of the Common Name      * (CN) on the server's certificate.      */
specifier|public
name|boolean
name|isDisableCNCheck
parameter_list|()
block|{
return|return
name|disableCNCheck
return|;
block|}
comment|/**      * This sets the SSLSocketFactory to use, causing all other properties of      * this bean (and its superclass) to get ignored (this takes precendence).      */
specifier|public
specifier|final
name|void
name|setSSLSocketFactory
parameter_list|(
name|SSLSocketFactory
name|factory
parameter_list|)
block|{
name|sslSocketFactory
operator|=
name|factory
expr_stmt|;
block|}
comment|/**      * Returns the SSLSocketFactory to be used, or null if none has been set.      */
specifier|public
specifier|final
name|SSLSocketFactory
name|getSSLSocketFactory
parameter_list|()
block|{
return|return
name|sslSocketFactory
return|;
block|}
comment|/**      * Returns the SSL cache timeout in seconds if it has been configured or the default value      */
specifier|public
name|int
name|getSslCacheTimeout
parameter_list|()
block|{
return|return
name|sslCacheTimeout
return|;
block|}
comment|/**      * This sets the SSL Session Cache timeout value in seconds for client sessions handled by CXF      */
specifier|public
name|void
name|setSslCacheTimeout
parameter_list|(
name|int
name|sslCacheTimeout
parameter_list|)
block|{
name|this
operator|.
name|sslCacheTimeout
operator|=
name|sslCacheTimeout
expr_stmt|;
block|}
comment|/**      * Returns whether or not {@link javax.net.ssl.HttpsURLConnection#getDefaultSSLSocketFactory()} should be      * used to create https connections. If<code>true</code> , {@link #getJsseProvider()} ,      * {@link #getSecureSocketProtocol()}, {@link #getTrustManagers()}, {@link #getKeyManagers()},      * {@link #getSecureRandom()}, {@link #getCipherSuites()} and {@link #getCipherSuitesFilter()} are      * ignored.      */
specifier|public
name|boolean
name|isUseHttpsURLConnectionDefaultSslSocketFactory
parameter_list|()
block|{
return|return
name|useHttpsURLConnectionDefaultSslSocketFactory
return|;
block|}
comment|/**      * Sets whether or not {@link javax.net.ssl.HttpsURLConnection#getDefaultSSLSocketFactory()} should be      * used to create https connections.      *      * @see #isUseHttpsURLConnectionDefaultSslSocketFactory()      */
specifier|public
name|void
name|setUseHttpsURLConnectionDefaultSslSocketFactory
parameter_list|(
name|boolean
name|useHttpsURLConnectionDefaultSslSocketFactory
parameter_list|)
block|{
name|this
operator|.
name|useHttpsURLConnectionDefaultSslSocketFactory
operator|=
name|useHttpsURLConnectionDefaultSslSocketFactory
expr_stmt|;
block|}
comment|/**      * Returns whether or not {@link javax.net.ssl.HttpsURLConnection#getDefaultHostnameVerifier()} should be      * used to create https connections. If<code>true</code>, {@link #isDisableCNCheck()} is ignored.      */
specifier|public
name|boolean
name|isUseHttpsURLConnectionDefaultHostnameVerifier
parameter_list|()
block|{
return|return
name|useHttpsURLConnectionDefaultHostnameVerifier
return|;
block|}
comment|/**      * Sets whether or not {@link javax.net.ssl.HttpsURLConnection#getDefaultHostnameVerifier()} should be      * used to create https connections.      *      * @see #isUseHttpsURLConnectionDefaultHostnameVerifier()      */
specifier|public
name|void
name|setUseHttpsURLConnectionDefaultHostnameVerifier
parameter_list|(
name|boolean
name|useHttpsURLConnectionDefaultHostnameVerifier
parameter_list|)
block|{
name|this
operator|.
name|useHttpsURLConnectionDefaultHostnameVerifier
operator|=
name|useHttpsURLConnectionDefaultHostnameVerifier
expr_stmt|;
block|}
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|hash
init|=
name|disableCNCheck
condition|?
literal|37
else|:
literal|17
decl_stmt|;
if|if
condition|(
name|sslSocketFactory
operator|!=
literal|null
condition|)
block|{
name|hash
operator|=
name|hash
operator|*
literal|41
operator|+
name|System
operator|.
name|identityHashCode
argument_list|(
name|sslSocketFactory
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|sslContext
operator|!=
literal|null
condition|)
block|{
name|hash
operator|=
name|hash
operator|*
literal|41
operator|+
name|System
operator|.
name|identityHashCode
argument_list|(
name|sslContext
argument_list|)
expr_stmt|;
block|}
name|hash
operator|=
name|hash
argument_list|(
name|hash
argument_list|,
name|useHttpsURLConnectionDefaultSslSocketFactory
argument_list|)
expr_stmt|;
name|hash
operator|=
name|hash
argument_list|(
name|hash
argument_list|,
name|useHttpsURLConnectionDefaultHostnameVerifier
argument_list|)
expr_stmt|;
name|hash
operator|=
name|hash
argument_list|(
name|hash
argument_list|,
name|sslCacheTimeout
argument_list|)
expr_stmt|;
name|hash
operator|=
name|hash
argument_list|(
name|hash
argument_list|,
name|secureRandom
argument_list|)
expr_stmt|;
name|hash
operator|=
name|hash
argument_list|(
name|hash
argument_list|,
name|protocol
argument_list|)
expr_stmt|;
name|hash
operator|=
name|hash
argument_list|(
name|hash
argument_list|,
name|certAlias
argument_list|)
expr_stmt|;
name|hash
operator|=
name|hash
argument_list|(
name|hash
argument_list|,
name|provider
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|cs
range|:
name|ciphersuites
control|)
block|{
name|hash
operator|=
name|hash
argument_list|(
name|hash
argument_list|,
name|cs
argument_list|)
expr_stmt|;
block|}
name|hash
operator|=
name|hash
argument_list|(
name|hash
argument_list|,
name|keyManagers
argument_list|)
expr_stmt|;
name|hash
operator|=
name|hash
argument_list|(
name|hash
argument_list|,
name|trustManagers
argument_list|)
expr_stmt|;
if|if
condition|(
name|cipherSuiteFilters
operator|!=
literal|null
condition|)
block|{
name|hash
operator|=
name|hash
argument_list|(
name|hash
argument_list|,
name|cipherSuiteFilters
operator|.
name|getInclude
argument_list|()
argument_list|)
expr_stmt|;
name|hash
operator|=
name|hash
argument_list|(
name|hash
argument_list|,
name|cipherSuiteFilters
operator|.
name|getExclude
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|certConstraints
operator|!=
literal|null
condition|)
block|{
name|hash
operator|=
name|hash
argument_list|(
name|hash
argument_list|,
name|certConstraints
operator|.
name|getIssuerDNConstraints
argument_list|()
argument_list|)
expr_stmt|;
name|hash
operator|=
name|hash
argument_list|(
name|hash
argument_list|,
name|certConstraints
operator|.
name|getSubjectDNConstraints
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|hash
return|;
block|}
specifier|private
name|int
name|hash
parameter_list|(
name|int
name|i
parameter_list|,
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|!=
literal|null
condition|)
block|{
name|i
operator|=
name|i
operator|*
literal|37
operator|+
name|o
operator|.
name|hashCode
argument_list|()
expr_stmt|;
block|}
return|return
name|i
return|;
block|}
specifier|private
name|int
name|hash
parameter_list|(
name|int
name|i
parameter_list|,
name|Object
index|[]
name|os
parameter_list|)
block|{
if|if
condition|(
name|os
operator|==
literal|null
condition|)
block|{
return|return
name|i
return|;
block|}
for|for
control|(
name|Object
name|o
range|:
name|os
control|)
block|{
name|i
operator|=
name|hash
argument_list|(
name|i
argument_list|,
name|o
argument_list|)
expr_stmt|;
block|}
return|return
name|i
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
name|this
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|o
operator|instanceof
name|TLSClientParameters
condition|)
block|{
name|TLSClientParameters
name|that
init|=
operator|(
name|TLSClientParameters
operator|)
name|o
decl_stmt|;
name|boolean
name|eq
init|=
name|disableCNCheck
operator|==
name|that
operator|.
name|disableCNCheck
decl_stmt|;
name|eq
operator|&=
name|sslSocketFactory
operator|==
name|that
operator|.
name|sslSocketFactory
expr_stmt|;
name|eq
operator|&=
name|sslContext
operator|==
name|that
operator|.
name|sslContext
expr_stmt|;
name|eq
operator|&=
name|useHttpsURLConnectionDefaultSslSocketFactory
operator|==
name|that
operator|.
name|useHttpsURLConnectionDefaultSslSocketFactory
expr_stmt|;
name|eq
operator|&=
name|useHttpsURLConnectionDefaultHostnameVerifier
operator|==
name|that
operator|.
name|useHttpsURLConnectionDefaultHostnameVerifier
expr_stmt|;
name|eq
operator|&=
name|sslCacheTimeout
operator|==
name|that
operator|.
name|sslCacheTimeout
expr_stmt|;
name|eq
operator|&=
name|secureRandom
operator|==
name|that
operator|.
name|secureRandom
expr_stmt|;
name|eq
operator|&=
name|equals
argument_list|(
name|certAlias
argument_list|,
name|that
operator|.
name|certAlias
argument_list|)
expr_stmt|;
name|eq
operator|&=
name|equals
argument_list|(
name|protocol
argument_list|,
name|that
operator|.
name|protocol
argument_list|)
expr_stmt|;
name|eq
operator|&=
name|equals
argument_list|(
name|provider
argument_list|,
name|that
operator|.
name|provider
argument_list|)
expr_stmt|;
name|eq
operator|&=
name|equals
argument_list|(
name|ciphersuites
argument_list|,
name|that
operator|.
name|ciphersuites
argument_list|)
expr_stmt|;
name|eq
operator|&=
name|equals
argument_list|(
name|keyManagers
argument_list|,
name|that
operator|.
name|keyManagers
argument_list|)
expr_stmt|;
name|eq
operator|&=
name|equals
argument_list|(
name|trustManagers
argument_list|,
name|that
operator|.
name|trustManagers
argument_list|)
expr_stmt|;
if|if
condition|(
name|cipherSuiteFilters
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|that
operator|.
name|cipherSuiteFilters
operator|!=
literal|null
condition|)
block|{
name|eq
operator|&=
name|equals
argument_list|(
name|cipherSuiteFilters
operator|.
name|getExclude
argument_list|()
argument_list|,
name|that
operator|.
name|cipherSuiteFilters
operator|.
name|getExclude
argument_list|()
argument_list|)
expr_stmt|;
name|eq
operator|&=
name|equals
argument_list|(
name|cipherSuiteFilters
operator|.
name|getInclude
argument_list|()
argument_list|,
name|that
operator|.
name|cipherSuiteFilters
operator|.
name|getInclude
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|eq
operator|=
literal|false
expr_stmt|;
block|}
block|}
else|else
block|{
name|eq
operator|&=
name|that
operator|.
name|cipherSuiteFilters
operator|==
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|certConstraints
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|that
operator|.
name|certConstraints
operator|!=
literal|null
condition|)
block|{
name|eq
operator|&=
name|equals
argument_list|(
name|certConstraints
operator|.
name|getIssuerDNConstraints
argument_list|()
argument_list|,
name|that
operator|.
name|certConstraints
operator|.
name|getIssuerDNConstraints
argument_list|()
argument_list|)
expr_stmt|;
name|eq
operator|&=
name|equals
argument_list|(
name|certConstraints
operator|.
name|getSubjectDNConstraints
argument_list|()
argument_list|,
name|that
operator|.
name|certConstraints
operator|.
name|getSubjectDNConstraints
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|eq
operator|=
literal|false
expr_stmt|;
block|}
block|}
else|else
block|{
name|eq
operator|&=
name|that
operator|.
name|certConstraints
operator|==
literal|null
expr_stmt|;
block|}
return|return
name|eq
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|private
specifier|static
name|boolean
name|equals
parameter_list|(
specifier|final
name|List
argument_list|<
name|?
argument_list|>
name|obj1
parameter_list|,
specifier|final
name|List
argument_list|<
name|?
argument_list|>
name|obj2
parameter_list|)
block|{
if|if
condition|(
name|obj1
operator|.
name|size
argument_list|()
operator|==
name|obj2
operator|.
name|size
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|obj1
operator|.
name|size
argument_list|()
condition|;
name|x
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|equals
argument_list|(
name|obj1
operator|.
name|get
argument_list|(
name|x
argument_list|)
argument_list|,
name|obj2
operator|.
name|get
argument_list|(
name|x
argument_list|)
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|private
specifier|static
name|boolean
name|equals
parameter_list|(
specifier|final
name|Object
name|obj1
parameter_list|,
specifier|final
name|Object
name|obj2
parameter_list|)
block|{
return|return
name|obj1
operator|==
literal|null
condition|?
name|obj2
operator|==
literal|null
else|:
name|obj1
operator|.
name|equals
argument_list|(
name|obj2
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|boolean
name|equals
parameter_list|(
specifier|final
name|Object
index|[]
name|a1
parameter_list|,
specifier|final
name|Object
index|[]
name|a2
parameter_list|)
block|{
if|if
condition|(
name|a1
operator|==
literal|null
condition|)
block|{
return|return
name|a2
operator|==
literal|null
return|;
block|}
if|if
condition|(
name|a2
operator|!=
literal|null
operator|&&
name|a1
operator|.
name|length
operator|==
name|a2
operator|.
name|length
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|a1
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|equals
argument_list|(
name|a1
index|[
name|i
index|]
argument_list|,
name|a2
index|[
name|i
index|]
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
comment|/**      * Get the SSLContext parameter to use (if it has been set)      */
specifier|public
name|SSLContext
name|getSslContext
parameter_list|()
block|{
return|return
name|sslContext
return|;
block|}
comment|/**      * Set an SSLContext parameter to use to create https connections      */
specifier|public
name|void
name|setSslContext
parameter_list|(
name|SSLContext
name|sslContext
parameter_list|)
block|{
name|this
operator|.
name|sslContext
operator|=
name|sslContext
expr_stmt|;
block|}
block|}
end_class

end_unit

