begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|configuration
operator|.
name|jsse
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|KeyManagementException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|KeyStore
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|NoSuchAlgorithmException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|CertificateFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|X509Certificate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|KeyManager
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|KeyManagerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|SSLContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|TrustManager
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|TrustManagerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|SystemPropertyAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|configuration
operator|.
name|security
operator|.
name|FiltersType
import|;
end_import

begin_comment
comment|/**  * Holder for utility methods related to manipulating SSL settings, common  * to the connection and listener factories (previously duplicated).  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|SSLUtils
block|{
specifier|static
specifier|final
name|String
name|PKCS12_TYPE
init|=
literal|"PKCS12"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_KEYSTORE_TYPE
init|=
literal|"PKCS12"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_TRUST_STORE_TYPE
init|=
literal|"JKS"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_SECURE_SOCKET_PROTOCOL
init|=
literal|"TLSv1"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|CERTIFICATE_FACTORY_TYPE
init|=
literal|"X.509"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|HTTPS_CIPHER_SUITES
init|=
literal|"https.cipherSuites"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|boolean
name|DEFAULT_REQUIRE_CLIENT_AUTHENTICATION
init|=
literal|false
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|boolean
name|DEFAULT_WANT_CLIENT_AUTHENTICATION
init|=
literal|true
decl_stmt|;
comment|/**      * By default, only include export-compatible ciphersuites.      */
specifier|private
specifier|static
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|DEFAULT_CIPHERSUITE_FILTERS_INCLUDE
init|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|String
index|[]
block|{
literal|".*"
block|}
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|DEFAULT_CIPHERSUITE_FILTERS_EXCLUDE
init|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|String
index|[]
block|{
literal|".*_NULL_.*"
block|,
literal|".*_anon_.*"
block|}
argument_list|)
decl_stmt|;
specifier|private
name|SSLUtils
parameter_list|()
block|{     }
specifier|public
specifier|static
name|KeyManager
index|[]
name|getKeyStoreManagers
parameter_list|(
name|String
name|keyStoreLocation
parameter_list|,
name|String
name|keyStoreType
parameter_list|,
name|String
name|keyStorePassword
parameter_list|,
name|String
name|keyPassword
parameter_list|,
name|String
name|keyStoreMgrFactoryAlgorithm
parameter_list|,
name|String
name|secureSocketProtocol
parameter_list|,
name|Logger
name|log
parameter_list|)
throws|throws
name|Exception
block|{
comment|//TODO for performance reasons we should cache
comment|// the KeymanagerFactory and TrustManagerFactory
if|if
condition|(
operator|(
name|keyStorePassword
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|keyPassword
operator|!=
literal|null
operator|)
operator|&&
operator|(
operator|!
name|keyStorePassword
operator|.
name|equals
argument_list|(
name|keyPassword
argument_list|)
operator|)
condition|)
block|{
name|LogUtils
operator|.
name|log
argument_list|(
name|log
argument_list|,
name|Level
operator|.
name|WARNING
argument_list|,
literal|"KEY_PASSWORD_NOT_SAME_KEYSTORE_PASSWORD"
argument_list|)
expr_stmt|;
block|}
name|KeyManager
index|[]
name|keystoreManagers
init|=
literal|null
decl_stmt|;
name|KeyManagerFactory
name|kmf
init|=
name|KeyManagerFactory
operator|.
name|getInstance
argument_list|(
name|keyStoreMgrFactoryAlgorithm
argument_list|)
decl_stmt|;
name|KeyStore
name|ks
init|=
name|KeyStore
operator|.
name|getInstance
argument_list|(
name|keyStoreType
argument_list|)
decl_stmt|;
if|if
condition|(
name|keyStoreType
operator|.
name|equalsIgnoreCase
argument_list|(
name|PKCS12_TYPE
argument_list|)
condition|)
block|{
name|DataInputStream
name|dis
init|=
literal|null
decl_stmt|;
name|byte
index|[]
name|bytes
init|=
literal|null
decl_stmt|;
try|try
block|{
name|FileInputStream
name|fis
init|=
operator|new
name|FileInputStream
argument_list|(
name|keyStoreLocation
argument_list|)
decl_stmt|;
name|dis
operator|=
operator|new
name|DataInputStream
argument_list|(
name|fis
argument_list|)
expr_stmt|;
name|bytes
operator|=
operator|new
name|byte
index|[
name|dis
operator|.
name|available
argument_list|()
index|]
expr_stmt|;
name|dis
operator|.
name|readFully
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|dis
operator|!=
literal|null
condition|)
block|{
name|dis
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
name|ByteArrayInputStream
name|bin
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|bytes
argument_list|)
decl_stmt|;
if|if
condition|(
name|keyStorePassword
operator|!=
literal|null
condition|)
block|{
name|keystoreManagers
operator|=
name|loadKeyStore
argument_list|(
name|kmf
argument_list|,
name|ks
argument_list|,
name|bin
argument_list|,
name|keyStoreLocation
argument_list|,
name|keyStorePassword
argument_list|,
name|log
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|byte
index|[]
name|sslCert
init|=
name|loadClientCredential
argument_list|(
name|keyStoreLocation
argument_list|)
decl_stmt|;
if|if
condition|(
name|sslCert
operator|!=
literal|null
operator|&&
name|sslCert
operator|.
name|length
operator|>
literal|0
operator|&&
name|keyStorePassword
operator|!=
literal|null
condition|)
block|{
name|ByteArrayInputStream
name|bin
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|sslCert
argument_list|)
decl_stmt|;
name|keystoreManagers
operator|=
name|loadKeyStore
argument_list|(
name|kmf
argument_list|,
name|ks
argument_list|,
name|bin
argument_list|,
name|keyStoreLocation
argument_list|,
name|keyStorePassword
argument_list|,
name|log
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|(
name|keyStorePassword
operator|==
literal|null
operator|)
operator|&&
operator|(
name|keyStoreLocation
operator|!=
literal|null
operator|)
condition|)
block|{
name|LogUtils
operator|.
name|log
argument_list|(
name|log
argument_list|,
name|Level
operator|.
name|WARNING
argument_list|,
literal|"FAILED_TO_LOAD_KEYSTORE_NULL_PASSWORD"
argument_list|,
name|keyStoreLocation
argument_list|)
expr_stmt|;
block|}
return|return
name|keystoreManagers
return|;
block|}
specifier|public
specifier|static
name|KeyManager
index|[]
name|getDefaultKeyStoreManagers
parameter_list|(
name|Logger
name|log
parameter_list|)
block|{
name|String
name|location
init|=
name|getKeystore
argument_list|(
literal|null
argument_list|,
name|log
argument_list|)
decl_stmt|;
name|String
name|keyStorePassword
init|=
name|getKeystorePassword
argument_list|(
literal|null
argument_list|,
name|log
argument_list|)
decl_stmt|;
name|String
name|keyPassword
init|=
name|getKeyPassword
argument_list|(
literal|null
argument_list|,
name|log
argument_list|)
decl_stmt|;
name|FileInputStream
name|fis
init|=
literal|null
decl_stmt|;
try|try
block|{
name|KeyManagerFactory
name|kmf
init|=
name|KeyManagerFactory
operator|.
name|getInstance
argument_list|(
name|KeyManagerFactory
operator|.
name|getDefaultAlgorithm
argument_list|()
argument_list|)
decl_stmt|;
name|KeyStore
name|ks
init|=
name|KeyStore
operator|.
name|getInstance
argument_list|(
name|KeyStore
operator|.
name|getDefaultType
argument_list|()
argument_list|)
decl_stmt|;
name|fis
operator|=
operator|new
name|FileInputStream
argument_list|(
name|location
argument_list|)
expr_stmt|;
name|ks
operator|.
name|load
argument_list|(
name|fis
argument_list|,
operator|(
name|keyStorePassword
operator|!=
literal|null
operator|)
condition|?
name|keyStorePassword
operator|.
name|toCharArray
argument_list|()
else|:
literal|null
argument_list|)
expr_stmt|;
name|kmf
operator|.
name|init
argument_list|(
name|ks
argument_list|,
operator|(
name|keyPassword
operator|!=
literal|null
operator|)
condition|?
name|keyPassword
operator|.
name|toCharArray
argument_list|()
else|:
literal|null
argument_list|)
expr_stmt|;
return|return
name|kmf
operator|.
name|getKeyManagers
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|warning
argument_list|(
literal|"Default key managers cannot be initialized: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|fis
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|fis
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warning
argument_list|(
literal|"Keystore stream cannot be closed: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
specifier|static
name|KeyManager
index|[]
name|loadKeyStore
parameter_list|(
name|KeyManagerFactory
name|kmf
parameter_list|,
name|KeyStore
name|ks
parameter_list|,
name|ByteArrayInputStream
name|bin
parameter_list|,
name|String
name|keyStoreLocation
parameter_list|,
name|String
name|keyStorePassword
parameter_list|,
name|Logger
name|log
parameter_list|)
block|{
name|KeyManager
index|[]
name|keystoreManagers
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ks
operator|.
name|load
argument_list|(
name|bin
argument_list|,
name|keyStorePassword
operator|.
name|toCharArray
argument_list|()
argument_list|)
expr_stmt|;
name|kmf
operator|.
name|init
argument_list|(
name|ks
argument_list|,
name|keyStorePassword
operator|.
name|toCharArray
argument_list|()
argument_list|)
expr_stmt|;
name|keystoreManagers
operator|=
name|kmf
operator|.
name|getKeyManagers
argument_list|()
expr_stmt|;
name|LogUtils
operator|.
name|log
argument_list|(
name|log
argument_list|,
name|Level
operator|.
name|FINE
argument_list|,
literal|"LOADED_KEYSTORE"
argument_list|,
name|keyStoreLocation
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LogUtils
operator|.
name|log
argument_list|(
name|log
argument_list|,
name|Level
operator|.
name|WARNING
argument_list|,
literal|"FAILED_TO_LOAD_KEYSTORE"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|keyStoreLocation
block|,
name|e
operator|.
name|getMessage
argument_list|()
block|}
argument_list|)
expr_stmt|;
block|}
return|return
name|keystoreManagers
return|;
block|}
specifier|public
specifier|static
name|TrustManager
index|[]
name|getTrustStoreManagers
parameter_list|(
name|boolean
name|pkcs12
parameter_list|,
name|String
name|trustStoreType
parameter_list|,
name|String
name|trustStoreLocation
parameter_list|,
name|String
name|trustStoreMgrFactoryAlgorithm
parameter_list|,
name|Logger
name|log
parameter_list|)
throws|throws
name|Exception
block|{
comment|// ********************** Load Trusted CA file **********************
name|KeyStore
name|trustedCertStore
init|=
name|KeyStore
operator|.
name|getInstance
argument_list|(
name|trustStoreType
argument_list|)
decl_stmt|;
if|if
condition|(
name|pkcs12
condition|)
block|{
comment|//TODO could support multiple trust cas
name|trustedCertStore
operator|.
name|load
argument_list|(
literal|null
argument_list|,
literal|""
operator|.
name|toCharArray
argument_list|()
argument_list|)
expr_stmt|;
name|CertificateFactory
name|cf
init|=
name|CertificateFactory
operator|.
name|getInstance
argument_list|(
name|CERTIFICATE_FACTORY_TYPE
argument_list|)
decl_stmt|;
name|byte
index|[]
name|caCert
init|=
name|loadCACert
argument_list|(
name|trustStoreLocation
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
name|caCert
operator|!=
literal|null
condition|)
block|{
name|ByteArrayInputStream
name|cabin
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|caCert
argument_list|)
decl_stmt|;
name|X509Certificate
name|cert
init|=
operator|(
name|X509Certificate
operator|)
name|cf
operator|.
name|generateCertificate
argument_list|(
name|cabin
argument_list|)
decl_stmt|;
name|trustedCertStore
operator|.
name|setCertificateEntry
argument_list|(
name|cert
operator|.
name|getIssuerDN
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|cert
argument_list|)
expr_stmt|;
name|cabin
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LogUtils
operator|.
name|log
argument_list|(
name|log
argument_list|,
name|Level
operator|.
name|WARNING
argument_list|,
literal|"FAILED_TO_LOAD_TRUST_STORE"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|trustStoreLocation
block|,
name|e
operator|.
name|getMessage
argument_list|()
block|}
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|FileInputStream
name|trustStoreInputStream
init|=
literal|null
decl_stmt|;
try|try
block|{
name|trustStoreInputStream
operator|=
operator|new
name|FileInputStream
argument_list|(
name|trustStoreLocation
argument_list|)
expr_stmt|;
name|trustedCertStore
operator|.
name|load
argument_list|(
name|trustStoreInputStream
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|trustStoreInputStream
operator|!=
literal|null
condition|)
block|{
name|trustStoreInputStream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
name|TrustManagerFactory
name|tmf
init|=
name|TrustManagerFactory
operator|.
name|getInstance
argument_list|(
name|trustStoreMgrFactoryAlgorithm
argument_list|)
decl_stmt|;
name|tmf
operator|.
name|init
argument_list|(
name|trustedCertStore
argument_list|)
expr_stmt|;
name|LogUtils
operator|.
name|log
argument_list|(
name|log
argument_list|,
name|Level
operator|.
name|FINE
argument_list|,
literal|"LOADED_TRUST_STORE"
argument_list|,
name|trustStoreLocation
argument_list|)
expr_stmt|;
return|return
name|tmf
operator|.
name|getTrustManagers
argument_list|()
return|;
block|}
specifier|protected
specifier|static
name|byte
index|[]
name|loadClientCredential
parameter_list|(
name|String
name|fileName
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|fileName
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|FileInputStream
name|in
init|=
literal|null
decl_stmt|;
try|try
block|{
name|in
operator|=
operator|new
name|FileInputStream
argument_list|(
name|fileName
argument_list|)
expr_stmt|;
name|ByteArrayOutputStream
name|out
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
literal|512
index|]
decl_stmt|;
name|int
name|i
init|=
name|in
operator|.
name|read
argument_list|(
name|buf
argument_list|)
decl_stmt|;
while|while
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|out
operator|.
name|write
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|i
operator|=
name|in
operator|.
name|read
argument_list|(
name|buf
argument_list|)
expr_stmt|;
block|}
return|return
name|out
operator|.
name|toByteArray
argument_list|()
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|in
operator|!=
literal|null
condition|)
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|protected
specifier|static
name|byte
index|[]
name|loadCACert
parameter_list|(
name|String
name|fileName
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|fileName
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|FileInputStream
name|in
init|=
literal|null
decl_stmt|;
try|try
block|{
name|in
operator|=
operator|new
name|FileInputStream
argument_list|(
name|fileName
argument_list|)
expr_stmt|;
name|ByteArrayOutputStream
name|out
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
literal|512
index|]
decl_stmt|;
name|int
name|i
init|=
name|in
operator|.
name|read
argument_list|(
name|buf
argument_list|)
decl_stmt|;
while|while
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|out
operator|.
name|write
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|i
operator|=
name|in
operator|.
name|read
argument_list|(
name|buf
argument_list|)
expr_stmt|;
block|}
return|return
name|out
operator|.
name|toByteArray
argument_list|()
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|in
operator|!=
literal|null
condition|)
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
name|String
name|getKeystore
parameter_list|(
name|String
name|keyStoreLocation
parameter_list|,
name|Logger
name|log
parameter_list|)
block|{
name|String
name|logMsg
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|keyStoreLocation
operator|!=
literal|null
condition|)
block|{
name|logMsg
operator|=
literal|"KEY_STORE_SET"
expr_stmt|;
block|}
else|else
block|{
name|keyStoreLocation
operator|=
name|SystemPropertyAction
operator|.
name|getProperty
argument_list|(
literal|"javax.net.ssl.keyStore"
argument_list|)
expr_stmt|;
if|if
condition|(
name|keyStoreLocation
operator|!=
literal|null
condition|)
block|{
name|logMsg
operator|=
literal|"KEY_STORE_SYSTEM_PROPERTY_SET"
expr_stmt|;
block|}
else|else
block|{
name|keyStoreLocation
operator|=
name|SystemPropertyAction
operator|.
name|getProperty
argument_list|(
literal|"user.home"
argument_list|)
operator|+
literal|"/.keystore"
expr_stmt|;
name|logMsg
operator|=
literal|"KEY_STORE_NOT_SET"
expr_stmt|;
block|}
block|}
name|LogUtils
operator|.
name|log
argument_list|(
name|log
argument_list|,
name|Level
operator|.
name|FINE
argument_list|,
name|logMsg
argument_list|,
name|keyStoreLocation
argument_list|)
expr_stmt|;
return|return
name|keyStoreLocation
return|;
block|}
specifier|public
specifier|static
name|String
name|getKeystoreType
parameter_list|(
name|String
name|keyStoreType
parameter_list|,
name|Logger
name|log
parameter_list|)
block|{
return|return
name|getKeystoreType
argument_list|(
name|keyStoreType
argument_list|,
name|log
argument_list|,
name|DEFAULT_KEYSTORE_TYPE
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|getKeystoreType
parameter_list|(
name|String
name|keyStoreType
parameter_list|,
name|Logger
name|log
parameter_list|,
name|String
name|def
parameter_list|)
block|{
name|String
name|logMsg
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|keyStoreType
operator|!=
literal|null
condition|)
block|{
name|logMsg
operator|=
literal|"KEY_STORE_TYPE_SET"
expr_stmt|;
block|}
else|else
block|{
name|keyStoreType
operator|=
name|SystemPropertyAction
operator|.
name|getProperty
argument_list|(
literal|"javax.net.ssl.keyStoreType"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|keyStoreType
operator|==
literal|null
condition|)
block|{
name|keyStoreType
operator|=
name|def
expr_stmt|;
name|logMsg
operator|=
literal|"KEY_STORE_TYPE_NOT_SET"
expr_stmt|;
block|}
else|else
block|{
name|logMsg
operator|=
literal|"KEY_STORE_TYPE_SYSTEM_SET"
expr_stmt|;
block|}
block|}
name|LogUtils
operator|.
name|log
argument_list|(
name|log
argument_list|,
name|Level
operator|.
name|FINE
argument_list|,
name|logMsg
argument_list|,
name|keyStoreType
argument_list|)
expr_stmt|;
return|return
name|keyStoreType
return|;
block|}
specifier|public
specifier|static
name|String
name|getKeystoreProvider
parameter_list|(
name|String
name|keyStoreProvider
parameter_list|,
name|Logger
name|log
parameter_list|)
block|{
name|String
name|logMsg
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|keyStoreProvider
operator|!=
literal|null
condition|)
block|{
name|logMsg
operator|=
literal|"KEY_STORE_PROVIDER_SET"
expr_stmt|;
block|}
else|else
block|{
name|keyStoreProvider
operator|=
name|SystemPropertyAction
operator|.
name|getProperty
argument_list|(
literal|"javax.net.ssl.keyStoreProvider"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|keyStoreProvider
operator|==
literal|null
condition|)
block|{
name|logMsg
operator|=
literal|"KEY_STORE_PROVIDER_NOT_SET"
expr_stmt|;
block|}
else|else
block|{
name|logMsg
operator|=
literal|"KEY_STORE_PROVIDER_SYSTEM_SET"
expr_stmt|;
block|}
block|}
name|LogUtils
operator|.
name|log
argument_list|(
name|log
argument_list|,
name|Level
operator|.
name|FINE
argument_list|,
name|logMsg
argument_list|,
name|keyStoreProvider
argument_list|)
expr_stmt|;
return|return
name|keyStoreProvider
return|;
block|}
specifier|public
specifier|static
name|String
name|getKeystorePassword
parameter_list|(
name|String
name|keyStorePassword
parameter_list|,
name|Logger
name|log
parameter_list|)
block|{
name|String
name|logMsg
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|keyStorePassword
operator|!=
literal|null
condition|)
block|{
name|logMsg
operator|=
literal|"KEY_STORE_PASSWORD_SET"
expr_stmt|;
block|}
else|else
block|{
name|keyStorePassword
operator|=
name|SystemPropertyAction
operator|.
name|getProperty
argument_list|(
literal|"javax.net.ssl.keyStorePassword"
argument_list|)
expr_stmt|;
name|logMsg
operator|=
name|keyStorePassword
operator|!=
literal|null
condition|?
literal|"KEY_STORE_PASSWORD_SYSTEM_PROPERTY_SET"
else|:
literal|"KEY_STORE_PASSWORD_NOT_SET"
expr_stmt|;
block|}
name|LogUtils
operator|.
name|log
argument_list|(
name|log
argument_list|,
name|Level
operator|.
name|FINE
argument_list|,
name|logMsg
argument_list|)
expr_stmt|;
return|return
name|keyStorePassword
return|;
block|}
specifier|public
specifier|static
name|String
name|getKeyPassword
parameter_list|(
name|String
name|keyPassword
parameter_list|,
name|Logger
name|log
parameter_list|)
block|{
name|String
name|logMsg
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|keyPassword
operator|!=
literal|null
condition|)
block|{
name|logMsg
operator|=
literal|"KEY_PASSWORD_SET"
expr_stmt|;
block|}
else|else
block|{
name|keyPassword
operator|=
name|SystemPropertyAction
operator|.
name|getProperty
argument_list|(
literal|"javax.net.ssl.keyPassword"
argument_list|)
expr_stmt|;
if|if
condition|(
name|keyPassword
operator|==
literal|null
condition|)
block|{
name|keyPassword
operator|=
name|SystemPropertyAction
operator|.
name|getProperty
argument_list|(
literal|"javax.net.ssl.keyStorePassword"
argument_list|)
expr_stmt|;
block|}
name|logMsg
operator|=
name|keyPassword
operator|!=
literal|null
condition|?
literal|"KEY_PASSWORD_SYSTEM_PROPERTY_SET"
else|:
literal|"KEY_PASSWORD_NOT_SET"
expr_stmt|;
block|}
name|LogUtils
operator|.
name|log
argument_list|(
name|log
argument_list|,
name|Level
operator|.
name|FINE
argument_list|,
name|logMsg
argument_list|)
expr_stmt|;
return|return
name|keyPassword
return|;
block|}
specifier|public
specifier|static
name|String
name|getKeystoreAlgorithm
parameter_list|(
name|String
name|keyStoreMgrFactoryAlgorithm
parameter_list|,
name|Logger
name|log
parameter_list|)
block|{
name|String
name|logMsg
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|keyStoreMgrFactoryAlgorithm
operator|!=
literal|null
condition|)
block|{
name|logMsg
operator|=
literal|"KEY_STORE_ALGORITHM_SET"
expr_stmt|;
block|}
else|else
block|{
name|keyStoreMgrFactoryAlgorithm
operator|=
name|KeyManagerFactory
operator|.
name|getDefaultAlgorithm
argument_list|()
expr_stmt|;
name|logMsg
operator|=
literal|"KEY_STORE_ALGORITHM_NOT_SET"
expr_stmt|;
block|}
name|LogUtils
operator|.
name|log
argument_list|(
name|log
argument_list|,
name|Level
operator|.
name|FINE
argument_list|,
name|logMsg
argument_list|,
name|keyStoreMgrFactoryAlgorithm
argument_list|)
expr_stmt|;
return|return
name|keyStoreMgrFactoryAlgorithm
return|;
block|}
specifier|public
specifier|static
name|String
name|getTrustStoreAlgorithm
parameter_list|(
name|String
name|trustStoreMgrFactoryAlgorithm
parameter_list|,
name|Logger
name|log
parameter_list|)
block|{
name|String
name|logMsg
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|trustStoreMgrFactoryAlgorithm
operator|!=
literal|null
condition|)
block|{
name|logMsg
operator|=
literal|"TRUST_STORE_ALGORITHM_SET"
expr_stmt|;
block|}
else|else
block|{
name|trustStoreMgrFactoryAlgorithm
operator|=
name|TrustManagerFactory
operator|.
name|getDefaultAlgorithm
argument_list|()
expr_stmt|;
name|logMsg
operator|=
literal|"TRUST_STORE_ALGORITHM_NOT_SET"
expr_stmt|;
block|}
name|LogUtils
operator|.
name|log
argument_list|(
name|log
argument_list|,
name|Level
operator|.
name|FINE
argument_list|,
name|logMsg
argument_list|,
name|trustStoreMgrFactoryAlgorithm
argument_list|)
expr_stmt|;
return|return
name|trustStoreMgrFactoryAlgorithm
return|;
block|}
specifier|public
specifier|static
name|SSLContext
name|getSSLContext
parameter_list|(
name|String
name|protocol
parameter_list|,
name|KeyManager
index|[]
name|keyStoreManagers
parameter_list|,
name|TrustManager
index|[]
name|trustStoreManagers
parameter_list|)
throws|throws
name|NoSuchAlgorithmException
throws|,
name|KeyManagementException
block|{
name|SSLContext
name|ctx
init|=
name|SSLContext
operator|.
name|getInstance
argument_list|(
name|protocol
argument_list|)
decl_stmt|;
name|ctx
operator|.
name|init
argument_list|(
name|keyStoreManagers
argument_list|,
name|trustStoreManagers
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return
name|ctx
return|;
block|}
specifier|public
specifier|static
name|String
index|[]
name|getSupportedCipherSuites
parameter_list|(
name|SSLContext
name|context
parameter_list|)
block|{
return|return
name|context
operator|.
name|getSocketFactory
argument_list|()
operator|.
name|getSupportedCipherSuites
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|String
index|[]
name|getServerSupportedCipherSuites
parameter_list|(
name|SSLContext
name|context
parameter_list|)
block|{
return|return
name|context
operator|.
name|getServerSocketFactory
argument_list|()
operator|.
name|getSupportedCipherSuites
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|String
index|[]
name|getCiphersuites
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|cipherSuitesList
parameter_list|,
name|String
index|[]
name|supportedCipherSuites
parameter_list|,
name|FiltersType
name|filters
parameter_list|,
name|Logger
name|log
parameter_list|,
name|boolean
name|exclude
parameter_list|)
block|{
name|String
index|[]
name|cipherSuites
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|cipherSuitesList
operator|==
literal|null
operator|||
name|cipherSuitesList
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
block|{
name|cipherSuites
operator|=
name|getCiphersFromList
argument_list|(
name|cipherSuitesList
argument_list|,
name|log
argument_list|,
name|exclude
argument_list|)
expr_stmt|;
return|return
name|cipherSuites
return|;
block|}
if|if
condition|(
operator|!
name|exclude
condition|)
block|{
name|String
name|jvmCipherSuites
init|=
name|System
operator|.
name|getProperty
argument_list|(
name|HTTPS_CIPHER_SUITES
argument_list|)
decl_stmt|;
if|if
condition|(
name|jvmCipherSuites
operator|!=
literal|null
condition|)
block|{
name|LogUtils
operator|.
name|log
argument_list|(
name|log
argument_list|,
name|Level
operator|.
name|FINE
argument_list|,
literal|"CIPHERSUITES_SYSTEM_PROPERTY_SET"
argument_list|,
name|jvmCipherSuites
argument_list|)
expr_stmt|;
return|return
name|jvmCipherSuites
operator|.
name|split
argument_list|(
literal|","
argument_list|)
return|;
block|}
block|}
name|LogUtils
operator|.
name|log
argument_list|(
name|log
argument_list|,
name|Level
operator|.
name|FINE
argument_list|,
literal|"CIPHERSUITES_NOT_SET"
argument_list|)
expr_stmt|;
if|if
condition|(
name|filters
operator|==
literal|null
condition|)
block|{
name|LogUtils
operator|.
name|log
argument_list|(
name|log
argument_list|,
name|Level
operator|.
name|FINE
argument_list|,
literal|"CIPHERSUITE_FILTERS_NOT_SET"
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|filteredCipherSuites
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|excludedCipherSuites
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Pattern
argument_list|>
name|includes
init|=
name|filters
operator|!=
literal|null
condition|?
name|compileRegexPatterns
argument_list|(
name|filters
operator|.
name|getInclude
argument_list|()
argument_list|,
literal|true
argument_list|,
name|log
argument_list|)
else|:
name|compileRegexPatterns
argument_list|(
name|DEFAULT_CIPHERSUITE_FILTERS_INCLUDE
argument_list|,
literal|true
argument_list|,
name|log
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Pattern
argument_list|>
name|excludes
init|=
name|filters
operator|!=
literal|null
condition|?
name|compileRegexPatterns
argument_list|(
name|filters
operator|.
name|getExclude
argument_list|()
argument_list|,
literal|false
argument_list|,
name|log
argument_list|)
else|:
name|compileRegexPatterns
argument_list|(
name|DEFAULT_CIPHERSUITE_FILTERS_EXCLUDE
argument_list|,
literal|true
argument_list|,
name|log
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|supportedCipherSuites
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|matchesOneOf
argument_list|(
name|supportedCipherSuites
index|[
name|i
index|]
argument_list|,
name|includes
argument_list|)
operator|&&
operator|!
name|matchesOneOf
argument_list|(
name|supportedCipherSuites
index|[
name|i
index|]
argument_list|,
name|excludes
argument_list|)
condition|)
block|{
name|LogUtils
operator|.
name|log
argument_list|(
name|log
argument_list|,
name|Level
operator|.
name|FINE
argument_list|,
literal|"CIPHERSUITE_INCLUDED"
argument_list|,
name|supportedCipherSuites
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|filteredCipherSuites
operator|.
name|add
argument_list|(
name|supportedCipherSuites
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LogUtils
operator|.
name|log
argument_list|(
name|log
argument_list|,
name|Level
operator|.
name|FINE
argument_list|,
literal|"CIPHERSUITE_EXCLUDED"
argument_list|,
name|supportedCipherSuites
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|excludedCipherSuites
operator|.
name|add
argument_list|(
name|supportedCipherSuites
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
name|LogUtils
operator|.
name|log
argument_list|(
name|log
argument_list|,
name|Level
operator|.
name|FINE
argument_list|,
literal|"CIPHERSUITES_FILTERED"
argument_list|,
name|filteredCipherSuites
argument_list|)
expr_stmt|;
name|LogUtils
operator|.
name|log
argument_list|(
name|log
argument_list|,
name|Level
operator|.
name|FINE
argument_list|,
literal|"CIPHERSUITES_EXCLUDED"
argument_list|,
name|excludedCipherSuites
argument_list|)
expr_stmt|;
if|if
condition|(
name|exclude
condition|)
block|{
name|cipherSuites
operator|=
name|getCiphersFromList
argument_list|(
name|excludedCipherSuites
argument_list|,
name|log
argument_list|,
name|exclude
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|cipherSuites
operator|=
name|getCiphersFromList
argument_list|(
name|filteredCipherSuites
argument_list|,
name|log
argument_list|,
name|exclude
argument_list|)
expr_stmt|;
block|}
return|return
name|cipherSuites
return|;
block|}
specifier|private
specifier|static
name|List
argument_list|<
name|Pattern
argument_list|>
name|compileRegexPatterns
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|regexes
parameter_list|,
name|boolean
name|include
parameter_list|,
name|Logger
name|log
parameter_list|)
block|{
name|List
argument_list|<
name|Pattern
argument_list|>
name|patterns
init|=
operator|new
name|ArrayList
argument_list|<
name|Pattern
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|regexes
operator|!=
literal|null
condition|)
block|{
name|String
name|msg
init|=
name|include
condition|?
literal|"CIPHERSUITE_INCLUDE_FILTER"
else|:
literal|"CIPHERSUITE_EXCLUDE_FILTER"
decl_stmt|;
for|for
control|(
name|String
name|s
range|:
name|regexes
control|)
block|{
name|LogUtils
operator|.
name|log
argument_list|(
name|log
argument_list|,
name|Level
operator|.
name|FINE
argument_list|,
name|msg
argument_list|,
name|s
argument_list|)
expr_stmt|;
name|patterns
operator|.
name|add
argument_list|(
name|Pattern
operator|.
name|compile
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|patterns
return|;
block|}
specifier|private
specifier|static
name|boolean
name|matchesOneOf
parameter_list|(
name|String
name|s
parameter_list|,
name|List
argument_list|<
name|Pattern
argument_list|>
name|patterns
parameter_list|)
block|{
name|boolean
name|matches
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|patterns
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Pattern
name|pattern
range|:
name|patterns
control|)
block|{
name|Matcher
name|matcher
init|=
name|pattern
operator|.
name|matcher
argument_list|(
name|s
argument_list|)
decl_stmt|;
if|if
condition|(
name|matcher
operator|.
name|matches
argument_list|()
condition|)
block|{
name|matches
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
block|}
return|return
name|matches
return|;
block|}
specifier|private
specifier|static
name|String
index|[]
name|getCiphersFromList
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|cipherSuitesList
parameter_list|,
name|Logger
name|log
parameter_list|,
name|boolean
name|exclude
parameter_list|)
block|{
name|int
name|numCipherSuites
init|=
name|cipherSuitesList
operator|.
name|size
argument_list|()
decl_stmt|;
name|String
index|[]
name|cipherSuites
init|=
name|cipherSuitesList
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|numCipherSuites
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|log
operator|.
name|isLoggable
argument_list|(
name|Level
operator|.
name|FINE
argument_list|)
condition|)
block|{
name|StringBuilder
name|ciphsStr
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|s
range|:
name|cipherSuites
control|)
block|{
if|if
condition|(
name|ciphsStr
operator|.
name|length
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|ciphsStr
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|ciphsStr
operator|.
name|append
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
name|LogUtils
operator|.
name|log
argument_list|(
name|log
argument_list|,
name|Level
operator|.
name|FINE
argument_list|,
name|exclude
condition|?
literal|"CIPHERSUITES_EXCLUDED"
else|:
literal|"CIPHERSUITES_SET"
argument_list|,
name|ciphsStr
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|cipherSuites
return|;
block|}
specifier|public
specifier|static
name|String
name|getTrustStore
parameter_list|(
name|String
name|trustStoreLocation
parameter_list|,
name|Logger
name|log
parameter_list|)
block|{
name|String
name|logMsg
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|trustStoreLocation
operator|!=
literal|null
condition|)
block|{
name|logMsg
operator|=
literal|"TRUST_STORE_SET"
expr_stmt|;
block|}
else|else
block|{
name|trustStoreLocation
operator|=
name|SystemPropertyAction
operator|.
name|getProperty
argument_list|(
literal|"javax.net.ssl.trustStore"
argument_list|)
expr_stmt|;
if|if
condition|(
name|trustStoreLocation
operator|!=
literal|null
condition|)
block|{
name|logMsg
operator|=
literal|"TRUST_STORE_SYSTEM_PROPERTY_SET"
expr_stmt|;
block|}
else|else
block|{
name|trustStoreLocation
operator|=
name|SystemPropertyAction
operator|.
name|getProperty
argument_list|(
literal|"java.home"
argument_list|)
operator|+
literal|"/lib/security/cacerts"
expr_stmt|;
name|logMsg
operator|=
literal|"TRUST_STORE_NOT_SET"
expr_stmt|;
block|}
block|}
name|LogUtils
operator|.
name|log
argument_list|(
name|log
argument_list|,
name|Level
operator|.
name|FINE
argument_list|,
name|logMsg
argument_list|,
name|trustStoreLocation
argument_list|)
expr_stmt|;
return|return
name|trustStoreLocation
return|;
block|}
specifier|public
specifier|static
name|String
name|getTrustStoreType
parameter_list|(
name|String
name|trustStoreType
parameter_list|,
name|Logger
name|log
parameter_list|)
block|{
name|String
name|logMsg
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|trustStoreType
operator|!=
literal|null
condition|)
block|{
name|logMsg
operator|=
literal|"TRUST_STORE_TYPE_SET"
expr_stmt|;
block|}
else|else
block|{
comment|//Can default to JKS
name|trustStoreType
operator|=
name|SystemPropertyAction
operator|.
name|getProperty
argument_list|(
literal|"javax.net.ssl.trustStoreType"
argument_list|)
expr_stmt|;
if|if
condition|(
name|trustStoreType
operator|==
literal|null
condition|)
block|{
name|trustStoreType
operator|=
name|DEFAULT_TRUST_STORE_TYPE
expr_stmt|;
name|logMsg
operator|=
literal|"TRUST_STORE_TYPE_NOT_SET"
expr_stmt|;
block|}
else|else
block|{
name|logMsg
operator|=
literal|"TRUST_STORE_TYPE_SYSTEM_SET"
expr_stmt|;
block|}
block|}
name|LogUtils
operator|.
name|log
argument_list|(
name|log
argument_list|,
name|Level
operator|.
name|FINE
argument_list|,
name|logMsg
argument_list|,
name|trustStoreType
argument_list|)
expr_stmt|;
return|return
name|trustStoreType
return|;
block|}
specifier|public
specifier|static
name|String
name|getSecureSocketProtocol
parameter_list|(
name|String
name|secureSocketProtocol
parameter_list|,
name|Logger
name|log
parameter_list|)
block|{
if|if
condition|(
name|secureSocketProtocol
operator|!=
literal|null
condition|)
block|{
name|LogUtils
operator|.
name|log
argument_list|(
name|log
argument_list|,
name|Level
operator|.
name|FINE
argument_list|,
literal|"SECURE_SOCKET_PROTOCOL_SET"
argument_list|,
name|secureSocketProtocol
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LogUtils
operator|.
name|log
argument_list|(
name|log
argument_list|,
name|Level
operator|.
name|FINE
argument_list|,
literal|"SECURE_SOCKET_PROTOCOL_NOT_SET"
argument_list|)
expr_stmt|;
name|secureSocketProtocol
operator|=
name|DEFAULT_SECURE_SOCKET_PROTOCOL
expr_stmt|;
block|}
return|return
name|secureSocketProtocol
return|;
block|}
specifier|public
specifier|static
name|boolean
name|getRequireClientAuthentication
parameter_list|(
name|boolean
name|isSetRequireClientAuthentication
parameter_list|,
name|Boolean
name|isRequireClientAuthentication
parameter_list|,
name|Logger
name|log
parameter_list|)
block|{
name|boolean
name|requireClientAuthentication
init|=
name|DEFAULT_REQUIRE_CLIENT_AUTHENTICATION
decl_stmt|;
if|if
condition|(
name|isSetRequireClientAuthentication
condition|)
block|{
name|requireClientAuthentication
operator|=
name|isRequireClientAuthentication
operator|.
name|booleanValue
argument_list|()
expr_stmt|;
name|LogUtils
operator|.
name|log
argument_list|(
name|log
argument_list|,
name|Level
operator|.
name|FINE
argument_list|,
literal|"REQUIRE_CLIENT_AUTHENTICATION_SET"
argument_list|,
name|requireClientAuthentication
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LogUtils
operator|.
name|log
argument_list|(
name|log
argument_list|,
name|Level
operator|.
name|WARNING
argument_list|,
literal|"REQUIRE_CLIENT_AUTHENTICATION_NOT_SET"
argument_list|)
expr_stmt|;
block|}
return|return
name|requireClientAuthentication
return|;
block|}
specifier|public
specifier|static
name|boolean
name|getWantClientAuthentication
parameter_list|(
name|boolean
name|isSetWantClientAuthentication
parameter_list|,
name|Boolean
name|isWantClientAuthentication
parameter_list|,
name|Logger
name|log
parameter_list|)
block|{
name|boolean
name|wantClientAuthentication
init|=
name|DEFAULT_WANT_CLIENT_AUTHENTICATION
decl_stmt|;
if|if
condition|(
name|isSetWantClientAuthentication
condition|)
block|{
name|wantClientAuthentication
operator|=
name|isWantClientAuthentication
operator|.
name|booleanValue
argument_list|()
expr_stmt|;
name|LogUtils
operator|.
name|log
argument_list|(
name|log
argument_list|,
name|Level
operator|.
name|FINE
argument_list|,
literal|"WANT_CLIENT_AUTHENTICATION_SET"
argument_list|,
name|wantClientAuthentication
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LogUtils
operator|.
name|log
argument_list|(
name|log
argument_list|,
name|Level
operator|.
name|WARNING
argument_list|,
literal|"WANT_CLIENT_AUTHENTICATION_NOT_SET"
argument_list|)
expr_stmt|;
block|}
return|return
name|wantClientAuthentication
return|;
block|}
specifier|public
specifier|static
name|void
name|logUnSupportedPolicies
parameter_list|(
name|Object
name|policy
parameter_list|,
name|boolean
name|client
parameter_list|,
name|String
index|[]
name|unsupported
parameter_list|,
name|Logger
name|log
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|unsupported
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
name|Method
name|method
init|=
name|policy
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"isSet"
operator|+
name|unsupported
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|boolean
name|isSet
init|=
operator|(
operator|(
name|Boolean
operator|)
name|method
operator|.
name|invoke
argument_list|(
name|policy
argument_list|,
operator|(
name|Object
index|[]
operator|)
literal|null
argument_list|)
operator|)
operator|.
name|booleanValue
argument_list|()
decl_stmt|;
name|logUnSupportedPolicy
argument_list|(
name|isSet
argument_list|,
name|client
argument_list|,
name|unsupported
index|[
name|i
index|]
argument_list|,
name|log
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
block|}
specifier|private
specifier|static
name|void
name|logUnSupportedPolicy
parameter_list|(
name|boolean
name|isSet
parameter_list|,
name|boolean
name|client
parameter_list|,
name|String
name|policy
parameter_list|,
name|Logger
name|log
parameter_list|)
block|{
if|if
condition|(
name|isSet
condition|)
block|{
name|LogUtils
operator|.
name|log
argument_list|(
name|log
argument_list|,
name|Level
operator|.
name|WARNING
argument_list|,
name|client
condition|?
literal|"UNSUPPORTED_SSL_CLIENT_POLICY_DATA"
else|:
literal|"UNSUPPORTED_SSL_SERVER_POLICY_DATA"
argument_list|,
name|policy
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|boolean
name|testAllDataHasSetupMethod
parameter_list|(
name|Object
name|policy
parameter_list|,
name|String
index|[]
name|unsupported
parameter_list|,
name|String
index|[]
name|derivative
parameter_list|)
block|{
name|Method
index|[]
name|sslPolicyMethods
init|=
name|policy
operator|.
name|getClass
argument_list|()
operator|.
name|getDeclaredMethods
argument_list|()
decl_stmt|;
name|Method
index|[]
name|methods
init|=
name|SSLUtils
operator|.
name|class
operator|.
name|getMethods
argument_list|()
decl_stmt|;
name|boolean
name|ok
init|=
literal|true
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sslPolicyMethods
operator|.
name|length
operator|&&
name|ok
condition|;
name|i
operator|++
control|)
block|{
name|String
name|sslPolicyMethodName
init|=
name|sslPolicyMethods
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|sslPolicyMethodName
operator|.
name|startsWith
argument_list|(
literal|"isSet"
argument_list|)
condition|)
block|{
name|String
name|dataName
init|=
name|sslPolicyMethodName
operator|.
name|substring
argument_list|(
literal|"isSet"
operator|.
name|length
argument_list|()
argument_list|,
name|sslPolicyMethodName
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|thisMethodName
init|=
literal|"get"
operator|+
name|dataName
decl_stmt|;
name|ok
operator|=
name|hasMethod
argument_list|(
name|methods
argument_list|,
name|thisMethodName
argument_list|)
operator|||
name|isExcluded
argument_list|(
name|unsupported
argument_list|,
name|dataName
argument_list|)
operator|||
name|isExcluded
argument_list|(
name|derivative
argument_list|,
name|dataName
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|ok
return|;
block|}
specifier|private
specifier|static
name|boolean
name|hasMethod
parameter_list|(
name|Method
index|[]
name|methods
parameter_list|,
name|String
name|methodName
parameter_list|)
block|{
name|boolean
name|found
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|methods
operator|.
name|length
operator|&&
operator|!
name|found
condition|;
name|i
operator|++
control|)
block|{
name|found
operator|=
name|methods
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|methodName
argument_list|)
expr_stmt|;
block|}
return|return
name|found
return|;
block|}
specifier|private
specifier|static
name|boolean
name|isExcluded
parameter_list|(
name|String
index|[]
name|excluded
parameter_list|,
name|String
name|dataName
parameter_list|)
block|{
name|boolean
name|found
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|excluded
operator|.
name|length
operator|&&
operator|!
name|found
condition|;
name|i
operator|++
control|)
block|{
name|found
operator|=
name|excluded
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
name|dataName
argument_list|)
expr_stmt|;
block|}
return|return
name|found
return|;
block|}
block|}
end_class

end_unit

