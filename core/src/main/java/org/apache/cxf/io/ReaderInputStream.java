begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|io
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|Buffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|CharBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|CharsetEncoder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|CoderResult
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|CodingErrorAction
import|;
end_import

begin_comment
comment|/**  * {@link InputStream} implementation that reads a character stream from a {@link Reader}  * and transforms it to a byte stream using a specified charset encoding. The stream  * is transformed using a {@link CharsetEncoder} object, guaranteeing that all charset  * encodings supported by the JRE are handled correctly. In particular for charsets such as  * UTF-16, the implementation ensures that one and only one byte order marker  * is produced.  *<p>  * Since in general it is not possible to predict the number of characters to be read from the  * {@link Reader} to satisfy a read request on the {@link ReaderInputStream}, all reads from  * the {@link Reader} are buffered. There is therefore no well defined correlation  * between the current position of the {@link Reader} and that of the {@link ReaderInputStream}.  * This also implies that in general there is no need to wrap the underlying {@link Reader}  * in a {@link java.io.BufferedReader}.  *<p>  * {@link ReaderInputStream} implements the inverse transformation of {@link java.io.InputStreamReader};  * in the following example, reading from<tt>in2</tt> would return the same byte  * sequence as reading from<tt>in</tt> (provided that the initial byte sequence is legal  * with respect to the charset encoding):  *<pre>  * InputStream in = ...  * Charset cs = ...  * InputStreamReader reader = new InputStreamReader(in, cs);  * ReaderInputStream in2 = new ReaderInputStream(reader, cs);</pre>  * {@link ReaderInputStream} implements the same transformation as {@link java.io.OutputStreamWriter},  * except that the control flow is reversed: both classes transform a character stream  * into a byte stream, but {@link java.io.OutputStreamWriter} pushes data to the underlying stream,  * while {@link ReaderInputStream} pulls it from the underlying stream.  *<p>  * Note that while there are use cases where there is no alternative to using  * this class, very often the need to use this class is an indication of a flaw  * in the design of the code. This class is typically used in situations where an existing  * API only accepts an {@link InputStream}, but where the most natural way to produce the data  * is as a character stream, i.e. by providing a {@link Reader} instance. An example of a situation  * where this problem may appear is when implementing the {@link javax.activation.DataSource}  * interface from the Java Activation Framework.  *<p>  * Given the fact that the {@link Reader} class doesn't provide any way to predict whether the next  * read operation will block or not, it is not possible to provide a meaningful  * implementation of the {@link InputStream#available()} method. A call to this method  * will always return 0. Also, this class doesn't support {@link InputStream#mark(int)}.  *<p>  * Instances of {@link ReaderInputStream} are not thread safe.  *  * @since 2.0  */
end_comment

begin_class
specifier|public
class|class
name|ReaderInputStream
extends|extends
name|InputStream
block|{
specifier|private
specifier|static
specifier|final
name|int
name|DEFAULT_BUFFER_SIZE
init|=
literal|1024
decl_stmt|;
specifier|private
specifier|final
name|Reader
name|reader
decl_stmt|;
specifier|private
specifier|final
name|CharsetEncoder
name|encoder
decl_stmt|;
comment|/**      * CharBuffer used as input for the decoder. It should be reasonably      * large as we read data from the underlying Reader into this buffer.      */
specifier|private
specifier|final
name|CharBuffer
name|encoderIn
decl_stmt|;
comment|/**      * ByteBuffer used as output for the decoder. This buffer can be small      * as it is only used to transfer data from the decoder to the      * buffer provided by the caller.      */
specifier|private
specifier|final
name|ByteBuffer
name|encoderOut
decl_stmt|;
specifier|private
name|CoderResult
name|lastCoderResult
decl_stmt|;
specifier|private
name|boolean
name|endOfInput
decl_stmt|;
comment|/**      * Construct a new {@link ReaderInputStream}.      *      * @param reader the target {@link Reader}      * @param encoder the charset encoder      * @since 2.1      */
specifier|public
name|ReaderInputStream
parameter_list|(
name|Reader
name|reader
parameter_list|,
name|CharsetEncoder
name|encoder
parameter_list|)
block|{
name|this
argument_list|(
name|reader
argument_list|,
name|encoder
argument_list|,
name|DEFAULT_BUFFER_SIZE
argument_list|)
expr_stmt|;
block|}
comment|/**      * Construct a new {@link ReaderInputStream}.      *      * @param reader the target {@link Reader}      * @param encoder the charset encoder      * @param bufferSize the size of the input buffer in number of characters      * @since 2.1      */
specifier|public
name|ReaderInputStream
parameter_list|(
name|Reader
name|reader
parameter_list|,
name|CharsetEncoder
name|encoder
parameter_list|,
name|int
name|bufferSize
parameter_list|)
block|{
name|this
operator|.
name|reader
operator|=
name|reader
expr_stmt|;
name|this
operator|.
name|encoder
operator|=
name|encoder
expr_stmt|;
name|this
operator|.
name|encoderIn
operator|=
name|CharBuffer
operator|.
name|allocate
argument_list|(
name|bufferSize
argument_list|)
expr_stmt|;
operator|(
operator|(
name|Buffer
operator|)
name|this
operator|.
name|encoderIn
operator|)
operator|.
name|flip
argument_list|()
expr_stmt|;
name|this
operator|.
name|encoderOut
operator|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
literal|128
argument_list|)
expr_stmt|;
operator|(
operator|(
name|Buffer
operator|)
name|this
operator|.
name|encoderOut
operator|)
operator|.
name|flip
argument_list|()
expr_stmt|;
block|}
comment|/**      * Construct a new {@link ReaderInputStream}.      *      * @param reader the target {@link Reader}      * @param charset the charset encoding      * @param bufferSize the size of the input buffer in number of characters      */
specifier|public
name|ReaderInputStream
parameter_list|(
name|Reader
name|reader
parameter_list|,
name|Charset
name|charset
parameter_list|,
name|int
name|bufferSize
parameter_list|)
block|{
name|this
argument_list|(
name|reader
argument_list|,
name|charset
operator|.
name|newEncoder
argument_list|()
operator|.
name|onMalformedInput
argument_list|(
name|CodingErrorAction
operator|.
name|REPLACE
argument_list|)
operator|.
name|onUnmappableCharacter
argument_list|(
name|CodingErrorAction
operator|.
name|REPLACE
argument_list|)
argument_list|,
name|bufferSize
argument_list|)
expr_stmt|;
block|}
comment|/**      * Construct a new {@link ReaderInputStream} with a default input buffer size of      * 1024 characters.      *      * @param reader the target {@link Reader}      * @param charset the charset encoding      */
specifier|public
name|ReaderInputStream
parameter_list|(
name|Reader
name|reader
parameter_list|,
name|Charset
name|charset
parameter_list|)
block|{
name|this
argument_list|(
name|reader
argument_list|,
name|charset
argument_list|,
name|DEFAULT_BUFFER_SIZE
argument_list|)
expr_stmt|;
block|}
comment|/**      * Construct a new {@link ReaderInputStream}.      *      * @param reader the target {@link Reader}      * @param charsetName the name of the charset encoding      * @param bufferSize the size of the input buffer in number of characters      */
specifier|public
name|ReaderInputStream
parameter_list|(
name|Reader
name|reader
parameter_list|,
name|String
name|charsetName
parameter_list|,
name|int
name|bufferSize
parameter_list|)
block|{
name|this
argument_list|(
name|reader
argument_list|,
name|Charset
operator|.
name|forName
argument_list|(
name|charsetName
argument_list|)
argument_list|,
name|bufferSize
argument_list|)
expr_stmt|;
block|}
comment|/**      * Construct a new {@link ReaderInputStream} with a default input buffer size of      * 1024 characters.      *      * @param reader the target {@link Reader}      * @param charsetName the name of the charset encoding      */
specifier|public
name|ReaderInputStream
parameter_list|(
name|Reader
name|reader
parameter_list|,
name|String
name|charsetName
parameter_list|)
block|{
name|this
argument_list|(
name|reader
argument_list|,
name|charsetName
argument_list|,
name|DEFAULT_BUFFER_SIZE
argument_list|)
expr_stmt|;
block|}
comment|/**      * Construct a new {@link ReaderInputStream} that uses the default character encoding      * with a default input buffer size of 1024 characters.      *      * @param reader the target {@link Reader}      */
specifier|public
name|ReaderInputStream
parameter_list|(
name|Reader
name|reader
parameter_list|)
block|{
name|this
argument_list|(
name|reader
argument_list|,
name|Charset
operator|.
name|defaultCharset
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Fills the internal char buffer from the reader.      *      * @throws IOException      *             If an I/O error occurs      */
specifier|private
name|void
name|fillBuffer
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|endOfInput
operator|&&
operator|(
name|lastCoderResult
operator|==
literal|null
operator|||
name|lastCoderResult
operator|.
name|isUnderflow
argument_list|()
operator|)
condition|)
block|{
name|encoderIn
operator|.
name|compact
argument_list|()
expr_stmt|;
name|int
name|position
init|=
operator|(
operator|(
name|Buffer
operator|)
name|encoderIn
operator|)
operator|.
name|position
argument_list|()
decl_stmt|;
comment|// We don't use Reader#read(CharBuffer) here because it is more efficient
comment|// to write directly to the underlying char array (the default implementation
comment|// copies data to a temporary char array).
name|int
name|c
init|=
name|reader
operator|.
name|read
argument_list|(
name|encoderIn
operator|.
name|array
argument_list|()
argument_list|,
name|position
argument_list|,
name|encoderIn
operator|.
name|remaining
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|==
operator|-
literal|1
condition|)
block|{
name|endOfInput
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
operator|(
operator|(
name|Buffer
operator|)
name|encoderIn
operator|)
operator|.
name|position
argument_list|(
name|position
operator|+
name|c
argument_list|)
expr_stmt|;
block|}
operator|(
operator|(
name|Buffer
operator|)
name|encoderIn
operator|)
operator|.
name|flip
argument_list|()
expr_stmt|;
block|}
name|encoderOut
operator|.
name|compact
argument_list|()
expr_stmt|;
name|lastCoderResult
operator|=
name|encoder
operator|.
name|encode
argument_list|(
name|encoderIn
argument_list|,
name|encoderOut
argument_list|,
name|endOfInput
argument_list|)
expr_stmt|;
operator|(
operator|(
name|Buffer
operator|)
name|encoderOut
operator|)
operator|.
name|flip
argument_list|()
expr_stmt|;
block|}
comment|/**      * Read the specified number of bytes into an array.      *      * @param b the byte array to read into      * @param off the offset to start reading bytes into      * @param len the number of bytes to read      * @return the number of bytes read or<code>-1</code>      *         if the end of the stream has been reached      * @throws IOException if an I/O error occurs      */
annotation|@
name|Override
specifier|public
name|int
name|read
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|b
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"Byte array must not be null"
argument_list|)
throw|;
block|}
if|if
condition|(
name|len
operator|<
literal|0
operator|||
name|off
argument_list|<
literal|0
operator|||
operator|(
name|off
operator|+
name|len
operator|)
argument_list|>
name|b
operator|.
name|length
condition|)
block|{
throw|throw
operator|new
name|IndexOutOfBoundsException
argument_list|(
literal|"Array Size="
operator|+
name|b
operator|.
name|length
operator|+
literal|", offset="
operator|+
name|off
operator|+
literal|", length="
operator|+
name|len
argument_list|)
throw|;
block|}
name|int
name|read
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|len
operator|==
literal|0
condition|)
block|{
return|return
literal|0
return|;
comment|// Always return 0 if len == 0
block|}
while|while
condition|(
name|len
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|encoderOut
operator|.
name|hasRemaining
argument_list|()
condition|)
block|{
name|int
name|c
init|=
name|Math
operator|.
name|min
argument_list|(
name|encoderOut
operator|.
name|remaining
argument_list|()
argument_list|,
name|len
argument_list|)
decl_stmt|;
name|encoderOut
operator|.
name|get
argument_list|(
name|b
argument_list|,
name|off
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|off
operator|+=
name|c
expr_stmt|;
name|len
operator|-=
name|c
expr_stmt|;
name|read
operator|+=
name|c
expr_stmt|;
block|}
else|else
block|{
name|fillBuffer
argument_list|()
expr_stmt|;
if|if
condition|(
name|endOfInput
operator|&&
operator|!
name|encoderOut
operator|.
name|hasRemaining
argument_list|()
condition|)
block|{
break|break;
block|}
block|}
block|}
return|return
name|read
operator|==
literal|0
operator|&&
name|endOfInput
condition|?
operator|-
literal|1
else|:
name|read
return|;
block|}
comment|/**      * Read the specified number of bytes into an array.      *      * @param b the byte array to read into      * @return the number of bytes read or<code>-1</code>      *         if the end of the stream has been reached      * @throws IOException if an I/O error occurs      */
annotation|@
name|Override
specifier|public
name|int
name|read
parameter_list|(
name|byte
index|[]
name|b
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|read
argument_list|(
name|b
argument_list|,
literal|0
argument_list|,
name|b
operator|.
name|length
argument_list|)
return|;
block|}
comment|/**      * Read a single byte.      *      * @return either the byte read or<code>-1</code> if the end of the stream      *         has been reached      * @throws IOException if an I/O error occurs      */
annotation|@
name|Override
specifier|public
name|int
name|read
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
init|;
condition|;
control|)
block|{
if|if
condition|(
name|encoderOut
operator|.
name|hasRemaining
argument_list|()
condition|)
block|{
return|return
name|encoderOut
operator|.
name|get
argument_list|()
operator|&
literal|0xFF
return|;
block|}
else|else
block|{
name|fillBuffer
argument_list|()
expr_stmt|;
if|if
condition|(
name|endOfInput
operator|&&
operator|!
name|encoderOut
operator|.
name|hasRemaining
argument_list|()
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
block|}
block|}
block|}
comment|/**      * Close the stream. This method will cause the underlying {@link Reader}      * to be closed.      * @throws IOException if an I/O error occurs      */
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

