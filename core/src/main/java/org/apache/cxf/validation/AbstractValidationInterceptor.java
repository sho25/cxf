begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|validation
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|validation
operator|.
name|ValidationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|Fault
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|MessageContentsList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|phase
operator|.
name|AbstractPhaseInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|invoker
operator|.
name|FactoryInvoker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|invoker
operator|.
name|Invoker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|invoker
operator|.
name|MethodDispatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|BindingOperationInfo
import|;
end_import

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractValidationInterceptor
extends|extends
name|AbstractPhaseInterceptor
argument_list|<
name|Message
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|AbstractValidationInterceptor
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|Object
name|serviceObject
decl_stmt|;
specifier|private
specifier|volatile
name|ValidationProvider
name|provider
decl_stmt|;
specifier|public
name|AbstractValidationInterceptor
parameter_list|(
name|String
name|phase
parameter_list|)
block|{
name|super
argument_list|(
name|phase
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setServiceObject
parameter_list|(
name|Object
name|object
parameter_list|)
block|{
name|this
operator|.
name|serviceObject
operator|=
name|object
expr_stmt|;
block|}
specifier|public
name|void
name|setProvider
parameter_list|(
name|ValidationProvider
name|provider
parameter_list|)
block|{
name|this
operator|.
name|provider
operator|=
name|provider
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|handleMessage
parameter_list|(
name|Message
name|message
parameter_list|)
throws|throws
name|Fault
block|{
specifier|final
name|Object
name|theServiceObject
init|=
name|getServiceObject
argument_list|(
name|message
argument_list|)
decl_stmt|;
if|if
condition|(
name|theServiceObject
operator|==
literal|null
condition|)
block|{
name|String
name|error
init|=
literal|"Service object is not available"
decl_stmt|;
name|LOG
operator|.
name|severe
argument_list|(
name|error
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ValidationException
argument_list|(
name|error
argument_list|)
throw|;
block|}
specifier|final
name|Method
name|method
init|=
name|getServiceMethod
argument_list|(
name|message
argument_list|)
decl_stmt|;
if|if
condition|(
name|method
operator|==
literal|null
condition|)
block|{
name|String
name|error
init|=
literal|"Service method is not available"
decl_stmt|;
name|LOG
operator|.
name|severe
argument_list|(
name|error
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ValidationException
argument_list|(
name|error
argument_list|)
throw|;
block|}
specifier|final
name|List
argument_list|<
name|Object
argument_list|>
name|arguments
init|=
name|MessageContentsList
operator|.
name|getContentsList
argument_list|(
name|message
argument_list|)
decl_stmt|;
name|handleValidation
argument_list|(
name|message
argument_list|,
name|theServiceObject
argument_list|,
name|method
argument_list|,
name|arguments
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|Object
name|getServiceObject
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
if|if
condition|(
name|serviceObject
operator|!=
literal|null
condition|)
block|{
return|return
name|serviceObject
return|;
block|}
name|Object
name|current
init|=
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|get
argument_list|(
name|Message
operator|.
name|SERVICE_OBJECT
argument_list|)
decl_stmt|;
if|if
condition|(
name|current
operator|!=
literal|null
condition|)
block|{
return|return
name|current
return|;
block|}
name|Endpoint
name|e
init|=
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|get
argument_list|(
name|Endpoint
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|e
operator|!=
literal|null
operator|&&
name|e
operator|.
name|getService
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Invoker
name|invoker
init|=
name|e
operator|.
name|getService
argument_list|()
operator|.
name|getInvoker
argument_list|()
decl_stmt|;
if|if
condition|(
name|invoker
operator|instanceof
name|FactoryInvoker
condition|)
block|{
name|FactoryInvoker
name|factoryInvoker
init|=
operator|(
name|FactoryInvoker
operator|)
name|invoker
decl_stmt|;
if|if
condition|(
name|factoryInvoker
operator|.
name|isSingletonFactory
argument_list|()
condition|)
block|{
return|return
name|factoryInvoker
operator|.
name|getServiceObject
argument_list|(
name|message
operator|.
name|getExchange
argument_list|()
argument_list|)
return|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|protected
name|Method
name|getServiceMethod
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
name|Message
name|inMessage
init|=
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|getInMessage
argument_list|()
decl_stmt|;
name|Method
name|method
init|=
operator|(
name|Method
operator|)
name|inMessage
operator|.
name|get
argument_list|(
literal|"org.apache.cxf.resource.method"
argument_list|)
decl_stmt|;
if|if
condition|(
name|method
operator|==
literal|null
condition|)
block|{
name|BindingOperationInfo
name|bop
init|=
name|inMessage
operator|.
name|getExchange
argument_list|()
operator|.
name|get
argument_list|(
name|BindingOperationInfo
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|bop
operator|!=
literal|null
condition|)
block|{
name|MethodDispatcher
name|md
init|=
operator|(
name|MethodDispatcher
operator|)
name|inMessage
operator|.
name|getExchange
argument_list|()
operator|.
name|get
argument_list|(
name|Service
operator|.
name|class
argument_list|)
operator|.
name|get
argument_list|(
name|MethodDispatcher
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|method
operator|=
name|md
operator|.
name|getMethod
argument_list|(
name|bop
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|method
return|;
block|}
specifier|protected
specifier|abstract
name|void
name|handleValidation
parameter_list|(
specifier|final
name|Message
name|message
parameter_list|,
specifier|final
name|Object
name|resourceInstance
parameter_list|,
specifier|final
name|Method
name|method
parameter_list|,
specifier|final
name|List
argument_list|<
name|Object
argument_list|>
name|arguments
parameter_list|)
function_decl|;
specifier|protected
name|ValidationProvider
name|getProvider
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
if|if
condition|(
name|provider
operator|==
literal|null
condition|)
block|{
name|Object
name|prop
init|=
name|message
operator|.
name|getContextualProperty
argument_list|(
name|ValidationProvider
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|prop
operator|!=
literal|null
condition|)
block|{
name|provider
operator|=
operator|(
name|ValidationProvider
operator|)
name|prop
expr_stmt|;
block|}
else|else
block|{
name|provider
operator|=
operator|new
name|ValidationProvider
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|provider
return|;
block|}
block|}
end_class

end_unit

