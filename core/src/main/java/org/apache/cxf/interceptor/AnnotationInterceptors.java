begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|Annotation
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ResourceBundle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|classloader
operator|.
name|ClassLoaderUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|BundleUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|feature
operator|.
name|Feature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|feature
operator|.
name|Features
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_class
specifier|public
class|class
name|AnnotationInterceptors
block|{
specifier|private
specifier|static
specifier|final
name|ResourceBundle
name|BUNDLE
init|=
name|BundleUtils
operator|.
name|getBundle
argument_list|(
name|AnnotationInterceptors
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|Class
argument_list|<
name|?
argument_list|>
name|clazzes
index|[]
decl_stmt|;
specifier|public
name|AnnotationInterceptors
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
modifier|...
name|clz
parameter_list|)
block|{
name|clazzes
operator|=
name|clz
expr_stmt|;
block|}
specifier|private
parameter_list|<
name|T
parameter_list|>
name|List
argument_list|<
name|T
argument_list|>
name|getAnnotationObject
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|Annotation
argument_list|>
name|annotationClazz
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
block|{
for|for
control|(
name|Class
argument_list|<
name|?
argument_list|>
name|cls
range|:
name|clazzes
control|)
block|{
name|Annotation
name|annotation
init|=
name|cls
operator|.
name|getAnnotation
argument_list|(
name|annotationClazz
argument_list|)
decl_stmt|;
if|if
condition|(
name|annotation
operator|!=
literal|null
condition|)
block|{
return|return
name|initializeAnnotationObjects
argument_list|(
name|annotation
argument_list|,
name|type
argument_list|)
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|private
parameter_list|<
name|T
parameter_list|>
name|List
argument_list|<
name|T
argument_list|>
name|initializeAnnotationObjects
parameter_list|(
name|Annotation
name|annotation
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
block|{
name|List
argument_list|<
name|T
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|cn
range|:
name|getAnnotationObjectNames
argument_list|(
name|annotation
argument_list|)
control|)
block|{
name|list
operator|.
name|add
argument_list|(
name|initializeAnnotationObject
argument_list|(
name|cn
argument_list|,
name|type
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Class
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|cn
range|:
name|getAnnotationObjectClasses
argument_list|(
name|annotation
argument_list|,
name|type
argument_list|)
control|)
block|{
name|list
operator|.
name|add
argument_list|(
name|initializeAnnotationObject
argument_list|(
name|cn
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|list
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
parameter_list|<
name|T
parameter_list|>
name|Class
argument_list|<
name|?
extends|extends
name|T
argument_list|>
index|[]
name|getAnnotationObjectClasses
parameter_list|(
name|Annotation
name|ann
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
block|{
comment|//NOPMD
if|if
condition|(
name|ann
operator|instanceof
name|InFaultInterceptors
condition|)
block|{
return|return
operator|(
name|Class
argument_list|<
name|?
extends|extends
name|T
argument_list|>
index|[]
operator|)
operator|(
operator|(
name|InFaultInterceptors
operator|)
name|ann
operator|)
operator|.
name|classes
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|ann
operator|instanceof
name|InInterceptors
condition|)
block|{
return|return
operator|(
name|Class
argument_list|<
name|?
extends|extends
name|T
argument_list|>
index|[]
operator|)
operator|(
operator|(
name|InInterceptors
operator|)
name|ann
operator|)
operator|.
name|classes
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|ann
operator|instanceof
name|OutFaultInterceptors
condition|)
block|{
return|return
operator|(
name|Class
argument_list|<
name|?
extends|extends
name|T
argument_list|>
index|[]
operator|)
operator|(
operator|(
name|OutFaultInterceptors
operator|)
name|ann
operator|)
operator|.
name|classes
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|ann
operator|instanceof
name|OutInterceptors
condition|)
block|{
return|return
operator|(
name|Class
argument_list|<
name|?
extends|extends
name|T
argument_list|>
index|[]
operator|)
operator|(
operator|(
name|OutInterceptors
operator|)
name|ann
operator|)
operator|.
name|classes
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|ann
operator|instanceof
name|Features
condition|)
block|{
return|return
operator|(
name|Class
argument_list|<
name|?
extends|extends
name|T
argument_list|>
index|[]
operator|)
operator|(
operator|(
name|Features
operator|)
name|ann
operator|)
operator|.
name|classes
argument_list|()
return|;
block|}
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Doesn't support the annotation: "
operator|+
name|ann
argument_list|)
throw|;
block|}
specifier|private
name|String
index|[]
name|getAnnotationObjectNames
parameter_list|(
name|Annotation
name|ann
parameter_list|)
block|{
if|if
condition|(
name|ann
operator|instanceof
name|InFaultInterceptors
condition|)
block|{
return|return
operator|(
operator|(
name|InFaultInterceptors
operator|)
name|ann
operator|)
operator|.
name|interceptors
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|ann
operator|instanceof
name|InInterceptors
condition|)
block|{
return|return
operator|(
operator|(
name|InInterceptors
operator|)
name|ann
operator|)
operator|.
name|interceptors
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|ann
operator|instanceof
name|OutFaultInterceptors
condition|)
block|{
return|return
operator|(
operator|(
name|OutFaultInterceptors
operator|)
name|ann
operator|)
operator|.
name|interceptors
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|ann
operator|instanceof
name|OutInterceptors
condition|)
block|{
return|return
operator|(
operator|(
name|OutInterceptors
operator|)
name|ann
operator|)
operator|.
name|interceptors
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|ann
operator|instanceof
name|Features
condition|)
block|{
return|return
operator|(
operator|(
name|Features
operator|)
name|ann
operator|)
operator|.
name|features
argument_list|()
return|;
block|}
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Doesn't support the annotation: "
operator|+
name|ann
argument_list|)
throw|;
block|}
specifier|private
parameter_list|<
name|T
parameter_list|>
name|T
name|initializeAnnotationObject
parameter_list|(
name|String
name|annObjectName
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
block|{
name|Object
name|object
init|=
literal|null
decl_stmt|;
try|try
block|{
name|object
operator|=
name|ClassLoaderUtils
operator|.
name|loadClass
argument_list|(
name|annObjectName
argument_list|,
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
operator|.
name|newInstance
argument_list|()
expr_stmt|;
return|return
name|type
operator|.
name|cast
argument_list|(
name|object
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|Fault
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
argument_list|(
literal|"COULD_NOT_CREATE_ANNOTATION_OBJECT"
argument_list|,
name|BUNDLE
argument_list|,
name|annObjectName
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
parameter_list|<
name|T
parameter_list|>
name|T
name|initializeAnnotationObject
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
block|{
name|Object
name|object
init|=
literal|null
decl_stmt|;
try|try
block|{
name|object
operator|=
name|type
operator|.
name|newInstance
argument_list|()
expr_stmt|;
return|return
name|type
operator|.
name|cast
argument_list|(
name|object
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|Fault
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
argument_list|(
literal|"COULD_NOT_CREATE_ANNOTATION_OBJECT"
argument_list|,
name|BUNDLE
argument_list|,
name|type
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|List
argument_list|<
name|Interceptor
argument_list|<
name|?
extends|extends
name|Message
argument_list|>
argument_list|>
name|getAnnotationInterceptorList
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|Annotation
argument_list|>
name|t
parameter_list|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
name|List
argument_list|<
name|Interceptor
argument_list|>
name|i
init|=
name|getAnnotationObject
argument_list|(
name|t
argument_list|,
name|Interceptor
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|List
argument_list|<
name|Interceptor
argument_list|<
name|?
extends|extends
name|Message
argument_list|>
argument_list|>
name|m
init|=
operator|new
name|ArrayList
argument_list|<
name|Interceptor
argument_list|<
name|?
extends|extends
name|Message
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Interceptor
argument_list|<
name|?
argument_list|>
name|i2
range|:
name|i
control|)
block|{
name|m
operator|.
name|add
argument_list|(
name|i2
argument_list|)
expr_stmt|;
block|}
return|return
name|m
return|;
block|}
specifier|public
name|List
argument_list|<
name|Interceptor
argument_list|<
name|?
extends|extends
name|Message
argument_list|>
argument_list|>
name|getInFaultInterceptors
parameter_list|()
block|{
return|return
name|getAnnotationInterceptorList
argument_list|(
name|InFaultInterceptors
operator|.
name|class
argument_list|)
return|;
block|}
specifier|public
name|List
argument_list|<
name|Interceptor
argument_list|<
name|?
extends|extends
name|Message
argument_list|>
argument_list|>
name|getInInterceptors
parameter_list|()
block|{
return|return
name|getAnnotationInterceptorList
argument_list|(
name|InInterceptors
operator|.
name|class
argument_list|)
return|;
block|}
specifier|public
name|List
argument_list|<
name|Interceptor
argument_list|<
name|?
extends|extends
name|Message
argument_list|>
argument_list|>
name|getOutFaultInterceptors
parameter_list|()
block|{
return|return
name|getAnnotationInterceptorList
argument_list|(
name|OutFaultInterceptors
operator|.
name|class
argument_list|)
return|;
block|}
specifier|public
name|List
argument_list|<
name|Interceptor
argument_list|<
name|?
extends|extends
name|Message
argument_list|>
argument_list|>
name|getOutInterceptors
parameter_list|()
block|{
return|return
name|getAnnotationInterceptorList
argument_list|(
name|OutInterceptors
operator|.
name|class
argument_list|)
return|;
block|}
specifier|public
name|List
argument_list|<
name|Feature
argument_list|>
name|getFeatures
parameter_list|()
block|{
return|return
name|getAnnotationObject
argument_list|(
name|Features
operator|.
name|class
argument_list|,
name|Feature
operator|.
name|class
argument_list|)
return|;
block|}
block|}
end_class

end_unit

