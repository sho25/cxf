begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FutureTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|MessageContentsList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|MessageImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|phase
operator|.
name|AbstractPhaseInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|phase
operator|.
name|Phase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|phase
operator|.
name|PhaseInterceptorChain
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|invoker
operator|.
name|Invoker
import|;
end_import

begin_comment
comment|/**  * Invokes a Binding's invoker with the<code>INVOCATION_INPUT</code> from  * the Exchange.  */
end_comment

begin_class
specifier|public
class|class
name|ServiceInvokerInterceptor
extends|extends
name|AbstractPhaseInterceptor
argument_list|<
name|Message
argument_list|>
block|{
specifier|public
name|ServiceInvokerInterceptor
parameter_list|()
block|{
name|super
argument_list|(
name|Phase
operator|.
name|INVOKE
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|handleMessage
parameter_list|(
specifier|final
name|Message
name|message
parameter_list|)
block|{
specifier|final
name|Exchange
name|exchange
init|=
name|message
operator|.
name|getExchange
argument_list|()
decl_stmt|;
specifier|final
name|Endpoint
name|endpoint
init|=
name|exchange
operator|.
name|get
argument_list|(
name|Endpoint
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|Service
name|service
init|=
name|endpoint
operator|.
name|getService
argument_list|()
decl_stmt|;
specifier|final
name|Invoker
name|invoker
init|=
name|service
operator|.
name|getInvoker
argument_list|()
decl_stmt|;
name|Runnable
name|invocation
init|=
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
name|Exchange
name|runableEx
init|=
name|message
operator|.
name|getExchange
argument_list|()
decl_stmt|;
name|Object
name|result
init|=
name|invoker
operator|.
name|invoke
argument_list|(
name|runableEx
argument_list|,
name|getInvokee
argument_list|(
name|message
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|exchange
operator|.
name|isOneWay
argument_list|()
condition|)
block|{
name|Endpoint
name|ep
init|=
name|exchange
operator|.
name|get
argument_list|(
name|Endpoint
operator|.
name|class
argument_list|)
decl_stmt|;
name|Message
name|outMessage
init|=
name|runableEx
operator|.
name|getOutMessage
argument_list|()
decl_stmt|;
if|if
condition|(
name|outMessage
operator|==
literal|null
condition|)
block|{
name|outMessage
operator|=
operator|new
name|MessageImpl
argument_list|()
expr_stmt|;
name|outMessage
operator|.
name|setExchange
argument_list|(
name|exchange
argument_list|)
expr_stmt|;
name|outMessage
operator|=
name|ep
operator|.
name|getBinding
argument_list|()
operator|.
name|createMessage
argument_list|(
name|outMessage
argument_list|)
expr_stmt|;
name|exchange
operator|.
name|setOutMessage
argument_list|(
name|outMessage
argument_list|)
expr_stmt|;
block|}
name|copyJaxwsProperties
argument_list|(
name|message
argument_list|,
name|outMessage
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|!=
literal|null
condition|)
block|{
name|MessageContentsList
name|resList
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|result
operator|instanceof
name|MessageContentsList
condition|)
block|{
name|resList
operator|=
operator|(
name|MessageContentsList
operator|)
name|result
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|result
operator|instanceof
name|List
condition|)
block|{
name|resList
operator|=
operator|new
name|MessageContentsList
argument_list|(
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|result
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|result
operator|.
name|getClass
argument_list|()
operator|.
name|isArray
argument_list|()
condition|)
block|{
name|resList
operator|=
operator|new
name|MessageContentsList
argument_list|(
operator|(
name|Object
index|[]
operator|)
name|result
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|outMessage
operator|.
name|setContent
argument_list|(
name|Object
operator|.
name|class
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|resList
operator|!=
literal|null
condition|)
block|{
name|outMessage
operator|.
name|setContent
argument_list|(
name|List
operator|.
name|class
argument_list|,
name|resList
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
decl_stmt|;
name|Executor
name|executor
init|=
name|getExecutor
argument_list|(
name|endpoint
argument_list|)
decl_stmt|;
name|Executor
name|executor2
init|=
name|exchange
operator|.
name|get
argument_list|(
name|Executor
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|executor2
operator|==
name|executor
operator|||
name|executor
operator|==
literal|null
operator|||
operator|!
operator|(
name|message
operator|.
name|getInterceptorChain
argument_list|()
operator|instanceof
name|PhaseInterceptorChain
operator|)
condition|)
block|{
comment|// already executing on the appropriate executor
name|invocation
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|exchange
operator|.
name|put
argument_list|(
name|Executor
operator|.
name|class
argument_list|,
name|executor
argument_list|)
expr_stmt|;
comment|// The current thread holds the lock on PhaseInterceptorChain.
comment|// In order to avoid the executor threads deadlocking on any of
comment|// synchronized PhaseInterceptorChain methods the current thread
comment|// needs to release the chain lock and re-acquire it after the
comment|// executor thread is done
specifier|final
name|PhaseInterceptorChain
name|chain
init|=
operator|(
name|PhaseInterceptorChain
operator|)
name|message
operator|.
name|getInterceptorChain
argument_list|()
decl_stmt|;
specifier|final
name|FutureTask
argument_list|<
name|Object
argument_list|>
name|o
init|=
operator|new
name|FutureTask
argument_list|<
name|Object
argument_list|>
argument_list|(
name|invocation
argument_list|,
literal|null
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|void
name|done
parameter_list|()
block|{
name|super
operator|.
name|done
argument_list|()
expr_stmt|;
name|chain
operator|.
name|releaseChain
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
synchronized|synchronized
init|(
name|chain
init|)
block|{
name|super
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
synchronized|synchronized
init|(
name|chain
init|)
block|{
name|executor
operator|.
name|execute
argument_list|(
name|o
argument_list|)
expr_stmt|;
comment|// the task will already be done if the executor uses the current thread
comment|// but the chain lock status still needs to be re-set
name|chain
operator|.
name|releaseAndAcquireChain
argument_list|()
expr_stmt|;
block|}
try|try
block|{
name|o
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|Fault
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|RuntimeException
condition|)
block|{
throw|throw
operator|(
name|RuntimeException
operator|)
name|e
operator|.
name|getCause
argument_list|()
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|Fault
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
block|}
specifier|private
name|Object
name|getInvokee
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
name|Object
name|invokee
init|=
name|message
operator|.
name|getContent
argument_list|(
name|List
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|invokee
operator|==
literal|null
condition|)
block|{
name|invokee
operator|=
name|message
operator|.
name|getContent
argument_list|(
name|Object
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
return|return
name|invokee
return|;
block|}
comment|/**      * Get the Executor for this invocation.      * @param endpoint      * @return      */
specifier|private
name|Executor
name|getExecutor
parameter_list|(
specifier|final
name|Endpoint
name|endpoint
parameter_list|)
block|{
return|return
name|endpoint
operator|.
name|getService
argument_list|()
operator|.
name|getExecutor
argument_list|()
return|;
block|}
specifier|private
name|void
name|copyJaxwsProperties
parameter_list|(
name|Message
name|inMsg
parameter_list|,
name|Message
name|outMsg
parameter_list|)
block|{
name|outMsg
operator|.
name|put
argument_list|(
name|Message
operator|.
name|WSDL_OPERATION
argument_list|,
name|inMsg
operator|.
name|get
argument_list|(
name|Message
operator|.
name|WSDL_OPERATION
argument_list|)
argument_list|)
expr_stmt|;
name|outMsg
operator|.
name|put
argument_list|(
name|Message
operator|.
name|WSDL_SERVICE
argument_list|,
name|inMsg
operator|.
name|get
argument_list|(
name|Message
operator|.
name|WSDL_SERVICE
argument_list|)
argument_list|)
expr_stmt|;
name|outMsg
operator|.
name|put
argument_list|(
name|Message
operator|.
name|WSDL_INTERFACE
argument_list|,
name|inMsg
operator|.
name|get
argument_list|(
name|Message
operator|.
name|WSDL_INTERFACE
argument_list|)
argument_list|)
expr_stmt|;
name|outMsg
operator|.
name|put
argument_list|(
name|Message
operator|.
name|WSDL_PORT
argument_list|,
name|inMsg
operator|.
name|get
argument_list|(
name|Message
operator|.
name|WSDL_PORT
argument_list|)
argument_list|)
expr_stmt|;
name|outMsg
operator|.
name|put
argument_list|(
name|Message
operator|.
name|WSDL_DESCRIPTION
argument_list|,
name|inMsg
operator|.
name|get
argument_list|(
name|Message
operator|.
name|WSDL_DESCRIPTION
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

