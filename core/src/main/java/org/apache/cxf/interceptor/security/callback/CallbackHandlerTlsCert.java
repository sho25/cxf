begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|security
operator|.
name|callback
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|Certificate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|X509Certificate
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|callback
operator|.
name|CallbackHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|security
operator|.
name|NamePasswordCallbackHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|security
operator|.
name|transport
operator|.
name|TLSSessionInfo
import|;
end_import

begin_class
specifier|public
class|class
name|CallbackHandlerTlsCert
implements|implements
name|CallbackHandlerProvider
block|{
specifier|private
name|CertificateToNameMapper
name|certMapper
decl_stmt|;
specifier|private
name|NameToPasswordMapper
name|nameToPasswordMapper
decl_stmt|;
specifier|private
name|String
name|fixedPassword
decl_stmt|;
specifier|public
name|CallbackHandlerTlsCert
parameter_list|()
block|{
comment|// By default use subjectDN as userName
name|this
operator|.
name|certMapper
operator|=
operator|new
name|CertificateToNameMapper
argument_list|()
block|{
specifier|public
name|String
name|getUserName
parameter_list|(
name|Certificate
name|cert
parameter_list|)
block|{
return|return
operator|(
operator|(
name|X509Certificate
operator|)
name|cert
operator|)
operator|.
name|getSubjectDN
argument_list|()
operator|.
name|getName
argument_list|()
return|;
block|}
block|}
expr_stmt|;
comment|// By default use fixed password
name|this
operator|.
name|nameToPasswordMapper
operator|=
operator|new
name|NameToPasswordMapper
argument_list|()
block|{
specifier|public
name|String
name|getPassword
parameter_list|(
name|String
name|userName
parameter_list|)
block|{
return|return
name|fixedPassword
return|;
block|}
block|}
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|CallbackHandler
name|create
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
name|TLSSessionInfo
name|tlsSession
init|=
name|message
operator|.
name|get
argument_list|(
name|TLSSessionInfo
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|tlsSession
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Certificate
name|cert
init|=
name|getCertificate
argument_list|(
name|message
argument_list|)
decl_stmt|;
name|String
name|name
init|=
name|certMapper
operator|.
name|getUserName
argument_list|(
name|cert
argument_list|)
decl_stmt|;
name|String
name|password
init|=
name|nameToPasswordMapper
operator|.
name|getPassword
argument_list|(
name|name
argument_list|)
decl_stmt|;
return|return
operator|new
name|NamePasswordCallbackHandler
argument_list|(
name|name
argument_list|,
name|password
argument_list|)
return|;
block|}
comment|/**      * Extracts certificate from message, expecting to find TLSSessionInfo inside.      *      * @param message      */
specifier|private
name|Certificate
name|getCertificate
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
name|TLSSessionInfo
name|tlsSessionInfo
init|=
name|message
operator|.
name|get
argument_list|(
name|TLSSessionInfo
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|tlsSessionInfo
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SecurityException
argument_list|(
literal|"Not TLS connection"
argument_list|)
throw|;
block|}
name|Certificate
index|[]
name|certificates
init|=
name|tlsSessionInfo
operator|.
name|getPeerCertificates
argument_list|()
decl_stmt|;
if|if
condition|(
name|certificates
operator|==
literal|null
operator|||
name|certificates
operator|.
name|length
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|SecurityException
argument_list|(
literal|"No certificate found"
argument_list|)
throw|;
block|}
comment|// Due to RFC5246, senders certificates always comes 1st
return|return
name|certificates
index|[
literal|0
index|]
return|;
block|}
specifier|public
name|void
name|setCertMapper
parameter_list|(
name|CertificateToNameMapper
name|certMapper
parameter_list|)
block|{
name|this
operator|.
name|certMapper
operator|=
name|certMapper
expr_stmt|;
block|}
specifier|public
name|void
name|setFixedPassword
parameter_list|(
name|String
name|fixedPassword
parameter_list|)
block|{
name|this
operator|.
name|fixedPassword
operator|=
name|fixedPassword
expr_stmt|;
block|}
specifier|public
name|void
name|setNameToPasswordMapper
parameter_list|(
name|NameToPasswordMapper
name|nameToPasswordMapper
parameter_list|)
block|{
name|this
operator|.
name|nameToPasswordMapper
operator|=
name|nameToPasswordMapper
expr_stmt|;
block|}
block|}
end_class

end_unit

