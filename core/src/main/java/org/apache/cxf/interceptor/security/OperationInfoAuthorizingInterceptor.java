begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|security
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|security
operator|.
name|SecurityContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|BindingOperationInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|OperationInfo
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
specifier|public
class|class
name|OperationInfoAuthorizingInterceptor
extends|extends
name|SimpleAuthorizingInterceptor
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|OperationInfoAuthorizingInterceptor
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|handleMessage
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
name|OperationInfo
name|opinfo
init|=
name|getTargetOperationInfo
argument_list|(
name|message
argument_list|)
decl_stmt|;
name|SecurityContext
name|sc
init|=
name|message
operator|.
name|get
argument_list|(
name|SecurityContext
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|sc
operator|!=
literal|null
operator|&&
name|sc
operator|.
name|getUserPrincipal
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|opinfo
operator|.
name|getName
argument_list|()
operator|!=
literal|null
operator|&&
name|authorize
argument_list|(
name|sc
argument_list|,
name|opinfo
operator|.
name|getName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
condition|)
block|{
return|return;
block|}
block|}
elseif|else
if|if
condition|(
operator|!
name|isMethodProtected
argument_list|(
name|opinfo
operator|.
name|getName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
operator|&&
name|isAllowAnonymousUsers
argument_list|()
condition|)
block|{
return|return;
block|}
throw|throw
operator|new
name|AccessDeniedException
argument_list|(
literal|"Unauthorized"
argument_list|)
throw|;
block|}
specifier|protected
name|boolean
name|authorize
parameter_list|(
name|SecurityContext
name|sc
parameter_list|,
name|String
name|key
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|expectedRoles
init|=
name|getExpectedRoles
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|expectedRoles
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|denyRoles
init|=
name|getDenyRoles
argument_list|(
name|key
argument_list|)
decl_stmt|;
return|return
name|denyRoles
operator|.
name|isEmpty
argument_list|()
operator|||
name|isUserInRole
argument_list|(
name|sc
argument_list|,
name|denyRoles
argument_list|,
literal|true
argument_list|)
return|;
block|}
if|if
condition|(
name|isUserInRole
argument_list|(
name|sc
argument_list|,
name|expectedRoles
argument_list|,
literal|false
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isLoggable
argument_list|(
name|Level
operator|.
name|FINE
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|fine
argument_list|(
name|sc
operator|.
name|getUserPrincipal
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" is not authorized"
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
specifier|protected
name|OperationInfo
name|getTargetOperationInfo
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
name|BindingOperationInfo
name|bop
init|=
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|getBindingOperationInfo
argument_list|()
decl_stmt|;
if|if
condition|(
name|bop
operator|!=
literal|null
condition|)
block|{
return|return
name|bop
operator|.
name|getOperationInfo
argument_list|()
return|;
block|}
throw|throw
operator|new
name|AccessDeniedException
argument_list|(
literal|"OperationInfo is not available : Unauthorized"
argument_list|)
throw|;
block|}
specifier|protected
name|List
argument_list|<
name|String
argument_list|>
name|getExpectedRoles
parameter_list|(
name|String
name|key
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|roles
init|=
name|methodRolesMap
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|roles
operator|!=
literal|null
condition|)
block|{
return|return
name|roles
return|;
block|}
return|return
name|globalRoles
return|;
block|}
specifier|protected
name|List
argument_list|<
name|String
argument_list|>
name|getDenyRoles
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
specifier|protected
name|boolean
name|isMethodProtected
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
operator|!
name|getExpectedRoles
argument_list|(
name|key
argument_list|)
operator|.
name|isEmpty
argument_list|()
operator|||
operator|!
name|getDenyRoles
argument_list|(
name|key
argument_list|)
operator|.
name|isEmpty
argument_list|()
return|;
block|}
block|}
end_class

end_unit

