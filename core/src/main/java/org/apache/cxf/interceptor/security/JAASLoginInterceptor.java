begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|security
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|Subject
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|callback
operator|.
name|CallbackHandler
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|login
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|login
operator|.
name|LoginContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|login
operator|.
name|LoginException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|security
operator|.
name|SecurityToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|security
operator|.
name|TokenType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|security
operator|.
name|UsernameToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|configuration
operator|.
name|security
operator|.
name|AuthorizationPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|Fault
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|InterceptorChain
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|phase
operator|.
name|AbstractPhaseInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|phase
operator|.
name|Phase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|security
operator|.
name|SecurityContext
import|;
end_import

begin_class
specifier|public
class|class
name|JAASLoginInterceptor
extends|extends
name|AbstractPhaseInterceptor
argument_list|<
name|Message
argument_list|>
block|{
specifier|public
specifier|static
specifier|final
name|String
name|ROLE_CLASSIFIER_PREFIX
init|=
literal|"prefix"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|ROLE_CLASSIFIER_CLASS_NAME
init|=
literal|"classname"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|JAASLoginInterceptor
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|String
name|contextName
init|=
literal|""
decl_stmt|;
specifier|private
name|Configuration
name|loginConfig
decl_stmt|;
specifier|private
name|String
name|roleClassifier
decl_stmt|;
specifier|private
name|String
name|roleClassifierType
init|=
name|ROLE_CLASSIFIER_PREFIX
decl_stmt|;
specifier|private
name|boolean
name|reportFault
decl_stmt|;
specifier|private
name|boolean
name|useDoAs
init|=
literal|true
decl_stmt|;
specifier|public
name|JAASLoginInterceptor
parameter_list|()
block|{
name|super
argument_list|(
name|Phase
operator|.
name|UNMARSHAL
argument_list|)
expr_stmt|;
block|}
specifier|public
name|JAASLoginInterceptor
parameter_list|(
name|String
name|phase
parameter_list|)
block|{
name|super
argument_list|(
name|phase
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setContextName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|contextName
operator|=
name|name
expr_stmt|;
block|}
specifier|public
name|String
name|getContextName
parameter_list|()
block|{
return|return
name|contextName
return|;
block|}
annotation|@
name|Deprecated
specifier|public
name|void
name|setRolePrefix
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|setRoleClassifier
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setRoleClassifier
parameter_list|(
name|String
name|value
parameter_list|)
block|{
name|roleClassifier
operator|=
name|value
expr_stmt|;
block|}
specifier|public
name|String
name|getRoleClassifier
parameter_list|()
block|{
return|return
name|roleClassifier
return|;
block|}
specifier|public
name|void
name|setRoleClassifierType
parameter_list|(
name|String
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|ROLE_CLASSIFIER_PREFIX
operator|.
name|equals
argument_list|(
name|value
argument_list|)
operator|&&
operator|!
name|ROLE_CLASSIFIER_CLASS_NAME
operator|.
name|equals
argument_list|(
name|value
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unsupported role classifier"
argument_list|)
throw|;
block|}
name|roleClassifierType
operator|=
name|value
expr_stmt|;
block|}
specifier|public
name|String
name|getRoleClassifierType
parameter_list|()
block|{
return|return
name|roleClassifierType
return|;
block|}
specifier|public
name|void
name|setReportFault
parameter_list|(
name|boolean
name|reportFault
parameter_list|)
block|{
name|this
operator|.
name|reportFault
operator|=
name|reportFault
expr_stmt|;
block|}
specifier|public
name|void
name|setUseDoAs
parameter_list|(
name|boolean
name|useDoAs
parameter_list|)
block|{
name|this
operator|.
name|useDoAs
operator|=
name|useDoAs
expr_stmt|;
block|}
specifier|public
name|void
name|handleMessage
parameter_list|(
specifier|final
name|Message
name|message
parameter_list|)
throws|throws
name|Fault
block|{
name|String
name|name
init|=
literal|null
decl_stmt|;
name|String
name|password
init|=
literal|null
decl_stmt|;
name|AuthorizationPolicy
name|policy
init|=
name|message
operator|.
name|get
argument_list|(
name|AuthorizationPolicy
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|policy
operator|!=
literal|null
condition|)
block|{
name|name
operator|=
name|policy
operator|.
name|getUserName
argument_list|()
expr_stmt|;
name|password
operator|=
name|policy
operator|.
name|getPassword
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// try the UsernameToken
name|SecurityToken
name|token
init|=
name|message
operator|.
name|get
argument_list|(
name|SecurityToken
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|token
operator|!=
literal|null
operator|&&
name|token
operator|.
name|getTokenType
argument_list|()
operator|==
name|TokenType
operator|.
name|UsernameToken
condition|)
block|{
name|UsernameToken
name|ut
init|=
operator|(
name|UsernameToken
operator|)
name|token
decl_stmt|;
name|name
operator|=
name|ut
operator|.
name|getName
argument_list|()
expr_stmt|;
name|password
operator|=
name|ut
operator|.
name|getPassword
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|name
operator|==
literal|null
operator|||
name|password
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|AuthenticationException
argument_list|(
literal|"Authentication required but no user or password was supplied"
argument_list|)
throw|;
block|}
try|try
block|{
name|CallbackHandler
name|handler
init|=
name|getCallbackHandler
argument_list|(
name|name
argument_list|,
name|password
argument_list|)
decl_stmt|;
name|LoginContext
name|ctx
init|=
operator|new
name|LoginContext
argument_list|(
name|getContextName
argument_list|()
argument_list|,
literal|null
argument_list|,
name|handler
argument_list|,
name|loginConfig
argument_list|)
decl_stmt|;
name|ctx
operator|.
name|login
argument_list|()
expr_stmt|;
name|Subject
name|subject
init|=
name|ctx
operator|.
name|getSubject
argument_list|()
decl_stmt|;
name|message
operator|.
name|put
argument_list|(
name|SecurityContext
operator|.
name|class
argument_list|,
name|createSecurityContext
argument_list|(
name|name
argument_list|,
name|subject
argument_list|)
argument_list|)
expr_stmt|;
comment|// Run the further chain in the context of this subject.
comment|// This allows other code to retrieve the subject using pure JAAS
if|if
condition|(
name|useDoAs
condition|)
block|{
name|Subject
operator|.
name|doAs
argument_list|(
name|subject
argument_list|,
operator|new
name|PrivilegedAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
block|{
name|InterceptorChain
name|chain
init|=
name|message
operator|.
name|getInterceptorChain
argument_list|()
decl_stmt|;
if|if
condition|(
name|chain
operator|!=
literal|null
condition|)
block|{
name|chain
operator|.
name|doIntercept
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|LoginException
name|ex
parameter_list|)
block|{
name|String
name|errorMessage
init|=
literal|"Authentication failed for user "
operator|+
name|name
operator|+
literal|" : "
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|fine
argument_list|(
name|errorMessage
argument_list|)
expr_stmt|;
if|if
condition|(
name|reportFault
condition|)
block|{
throw|throw
operator|new
name|AuthenticationException
argument_list|(
name|errorMessage
argument_list|)
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|AuthenticationException
argument_list|(
literal|"Authentication failed (details can be found in server log)"
argument_list|)
throw|;
block|}
block|}
block|}
specifier|protected
name|CallbackHandler
name|getCallbackHandler
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|password
parameter_list|)
block|{
return|return
operator|new
name|NamePasswordCallbackHandler
argument_list|(
name|name
argument_list|,
name|password
argument_list|)
return|;
block|}
specifier|protected
name|SecurityContext
name|createSecurityContext
parameter_list|(
name|String
name|name
parameter_list|,
name|Subject
name|subject
parameter_list|)
block|{
if|if
condition|(
name|getRoleClassifier
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|RolePrefixSecurityContextImpl
argument_list|(
name|subject
argument_list|,
name|getRoleClassifier
argument_list|()
argument_list|,
name|getRoleClassifierType
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|DefaultSecurityContext
argument_list|(
name|name
argument_list|,
name|subject
argument_list|)
return|;
block|}
block|}
specifier|public
name|Configuration
name|getLoginConfig
parameter_list|()
block|{
return|return
name|loginConfig
return|;
block|}
specifier|public
name|void
name|setLoginConfig
parameter_list|(
name|Configuration
name|loginConfig
parameter_list|)
block|{
name|this
operator|.
name|loginConfig
operator|=
name|loginConfig
expr_stmt|;
block|}
block|}
end_class

end_unit

