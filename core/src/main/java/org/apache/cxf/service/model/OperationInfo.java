begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_class
specifier|public
class|class
name|OperationInfo
extends|extends
name|AbstractPropertiesHolder
implements|implements
name|NamedItem
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|OperationInfo
operator|.
name|class
argument_list|)
decl_stmt|;
name|InterfaceInfo
name|intf
decl_stmt|;
name|QName
name|opName
decl_stmt|;
name|String
name|inName
decl_stmt|;
name|MessageInfo
name|inputMessage
decl_stmt|;
name|String
name|outName
decl_stmt|;
name|MessageInfo
name|outputMessage
decl_stmt|;
name|Map
argument_list|<
name|QName
argument_list|,
name|FaultInfo
argument_list|>
name|faults
decl_stmt|;
name|OperationInfo
name|unwrappedOperation
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|parameterOrdering
decl_stmt|;
specifier|public
name|OperationInfo
parameter_list|()
block|{     }
name|OperationInfo
parameter_list|(
name|InterfaceInfo
name|it
parameter_list|,
name|QName
name|n
parameter_list|)
block|{
name|intf
operator|=
name|it
expr_stmt|;
name|setName
argument_list|(
name|n
argument_list|)
expr_stmt|;
block|}
name|OperationInfo
parameter_list|(
name|OperationInfo
name|op
parameter_list|)
block|{
name|intf
operator|=
name|op
operator|.
name|getInterface
argument_list|()
expr_stmt|;
name|setName
argument_list|(
name|op
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns the name of the Operation.      * @return the name of the Operation      */
specifier|public
name|QName
name|getName
parameter_list|()
block|{
return|return
name|opName
return|;
block|}
comment|/**      * Sets the name of the operation.      * @param name the new name of the operation      */
specifier|public
specifier|final
name|void
name|setName
parameter_list|(
name|QName
name|name
parameter_list|)
block|{
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"Operation Name cannot be null."
argument_list|)
throw|;
block|}
name|opName
operator|=
name|name
expr_stmt|;
block|}
specifier|public
name|InterfaceInfo
name|getInterface
parameter_list|()
block|{
return|return
name|intf
return|;
block|}
specifier|public
name|MessageInfo
name|createMessage
parameter_list|(
name|QName
name|nm
parameter_list|,
name|MessageInfo
operator|.
name|Type
name|type
parameter_list|)
block|{
return|return
operator|new
name|MessageInfo
argument_list|(
name|this
argument_list|,
name|type
argument_list|,
name|nm
argument_list|)
return|;
block|}
specifier|public
name|MessageInfo
name|getOutput
parameter_list|()
block|{
return|return
name|outputMessage
return|;
block|}
specifier|public
name|String
name|getOutputName
parameter_list|()
block|{
return|return
name|outName
return|;
block|}
specifier|public
name|void
name|setOutput
parameter_list|(
name|String
name|nm
parameter_list|,
name|MessageInfo
name|out
parameter_list|)
block|{
name|outName
operator|=
name|nm
expr_stmt|;
name|outputMessage
operator|=
name|out
expr_stmt|;
if|if
condition|(
name|unwrappedOperation
operator|!=
literal|null
operator|&&
name|unwrappedOperation
operator|.
name|getOutput
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|unwrappedOperation
operator|.
name|getOutput
argument_list|()
operator|.
name|setDelegate
argument_list|(
name|out
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|hasOutput
parameter_list|()
block|{
return|return
name|outputMessage
operator|!=
literal|null
return|;
block|}
specifier|public
name|MessageInfo
name|getInput
parameter_list|()
block|{
return|return
name|inputMessage
return|;
block|}
specifier|public
name|String
name|getInputName
parameter_list|()
block|{
return|return
name|inName
return|;
block|}
specifier|public
name|void
name|setInput
parameter_list|(
name|String
name|nm
parameter_list|,
name|MessageInfo
name|in
parameter_list|)
block|{
name|inName
operator|=
name|nm
expr_stmt|;
name|inputMessage
operator|=
name|in
expr_stmt|;
if|if
condition|(
name|unwrappedOperation
operator|!=
literal|null
operator|&&
name|unwrappedOperation
operator|.
name|getInput
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|unwrappedOperation
operator|.
name|getInput
argument_list|()
operator|.
name|setDelegate
argument_list|(
name|in
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|hasInput
parameter_list|()
block|{
return|return
name|inputMessage
operator|!=
literal|null
return|;
block|}
specifier|public
name|boolean
name|isOneWay
parameter_list|()
block|{
return|return
name|inputMessage
operator|!=
literal|null
operator|&&
name|outputMessage
operator|==
literal|null
return|;
block|}
specifier|public
name|boolean
name|isUnwrappedCapable
parameter_list|()
block|{
return|return
name|unwrappedOperation
operator|!=
literal|null
return|;
block|}
specifier|public
name|OperationInfo
name|getUnwrappedOperation
parameter_list|()
block|{
return|return
name|unwrappedOperation
return|;
block|}
specifier|public
name|void
name|setUnwrappedOperation
parameter_list|(
name|OperationInfo
name|op
parameter_list|)
block|{
name|unwrappedOperation
operator|=
name|op
expr_stmt|;
block|}
specifier|public
name|boolean
name|isUnwrapped
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
comment|/**      * Adds an fault to this operation.      *      * @param name the fault name.      */
specifier|public
name|FaultInfo
name|addFault
parameter_list|(
name|QName
name|name
parameter_list|,
name|QName
name|message
parameter_list|)
block|{
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
operator|new
name|Message
argument_list|(
literal|"FAULT.NAME.NOT.NULL"
argument_list|,
name|LOG
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|faults
operator|!=
literal|null
operator|&&
name|faults
operator|.
name|containsKey
argument_list|(
name|name
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
operator|new
name|Message
argument_list|(
literal|"DUPLICATED.FAULT.NAME"
argument_list|,
name|LOG
argument_list|,
operator|new
name|Object
index|[]
block|{
name|name
block|}
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
name|FaultInfo
name|fault
init|=
operator|new
name|FaultInfo
argument_list|(
name|name
argument_list|,
name|message
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|addFault
argument_list|(
name|fault
argument_list|)
expr_stmt|;
return|return
name|fault
return|;
block|}
comment|/**      * Adds a fault to this operation.      *      * @param fault the fault.      */
specifier|public
specifier|synchronized
name|void
name|addFault
parameter_list|(
name|FaultInfo
name|fault
parameter_list|)
block|{
if|if
condition|(
name|faults
operator|==
literal|null
condition|)
block|{
name|faults
operator|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|QName
argument_list|,
name|FaultInfo
argument_list|>
argument_list|(
literal|4
argument_list|,
literal|0.75f
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
name|faults
operator|.
name|put
argument_list|(
name|fault
operator|.
name|getFaultName
argument_list|()
argument_list|,
name|fault
argument_list|)
expr_stmt|;
block|}
comment|/**      * Removes a fault from this operation.      *      * @param name the qualified fault name.      */
specifier|public
name|void
name|removeFault
parameter_list|(
name|QName
name|name
parameter_list|)
block|{
if|if
condition|(
name|faults
operator|!=
literal|null
condition|)
block|{
name|faults
operator|.
name|remove
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Returns the fault with the given name, if found.      *      * @param name the name.      * @return the fault; or<code>null</code> if not found.      */
specifier|public
name|FaultInfo
name|getFault
parameter_list|(
name|QName
name|name
parameter_list|)
block|{
if|if
condition|(
name|faults
operator|!=
literal|null
condition|)
block|{
return|return
name|faults
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|boolean
name|hasFaults
parameter_list|()
block|{
return|return
name|faults
operator|!=
literal|null
operator|&&
operator|!
name|faults
operator|.
name|isEmpty
argument_list|()
return|;
block|}
comment|/**      * Returns all faults for this operation.      *      * @return all faults.      */
specifier|public
name|Collection
argument_list|<
name|FaultInfo
argument_list|>
name|getFaults
parameter_list|()
block|{
if|if
condition|(
name|faults
operator|==
literal|null
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
return|return
name|Collections
operator|.
name|unmodifiableCollection
argument_list|(
name|faults
operator|.
name|values
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|void
name|setParameterOrdering
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|o
parameter_list|)
block|{
name|this
operator|.
name|parameterOrdering
operator|=
name|o
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getParameterOrdering
parameter_list|()
block|{
return|return
name|parameterOrdering
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
operator|new
name|StringBuilder
argument_list|()
operator|.
name|append
argument_list|(
literal|"[OperationInfo: "
argument_list|)
operator|.
name|append
argument_list|(
name|opName
argument_list|)
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|opName
operator|==
literal|null
condition|?
operator|-
literal|1
else|:
name|opName
operator|.
name|hashCode
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
name|this
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
operator|!
operator|(
name|o
operator|instanceof
name|OperationInfo
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|OperationInfo
name|oi
init|=
operator|(
name|OperationInfo
operator|)
name|o
decl_stmt|;
return|return
name|equals
argument_list|(
name|opName
argument_list|,
name|oi
operator|.
name|opName
argument_list|)
operator|&&
name|equals
argument_list|(
name|inputMessage
argument_list|,
name|oi
operator|.
name|inputMessage
argument_list|)
operator|&&
name|equals
argument_list|(
name|outputMessage
argument_list|,
name|oi
operator|.
name|outputMessage
argument_list|)
operator|&&
name|equals
argument_list|(
name|faults
argument_list|,
name|oi
operator|.
name|faults
argument_list|)
operator|&&
name|equals
argument_list|(
name|intf
operator|.
name|getName
argument_list|()
argument_list|,
name|oi
operator|.
name|intf
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

