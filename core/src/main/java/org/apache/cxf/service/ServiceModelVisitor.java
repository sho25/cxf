begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|BindingInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|EndpointInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|FaultInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|InterfaceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|MessageInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|MessagePartInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|OperationInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|ServiceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|UnwrappedOperationInfo
import|;
end_import

begin_comment
comment|/**  * Implements the Visitor pattern for the Service model.  * The visit order is as follows:  *<pre>  * 1) Begin the overall service info.  * 2) Begin the service's interface.  * 3) For each operation, begin the operation.  * 3.1) begin the input message.  * 3.1.1) begin and end each part of the input message.  * 3.2) end the input message.  * 3.3) begin the output message.  * 3.3.1) begin and end each part of the output message.  * 3.4) end the output message  * 3.5) begin each fault. (3.5-3.6 repeated for each fault)  * 3.5.1) begin and end each part of each fault  * 3.6) end each fault.  * 3.7) if a wrapped operation, begin the corresponding unwrapped operation.  * 3.8) process the entire unwrapped operation starting at (3).  * 3.9) end the unwrapped operation.  * 4) end the operation.  * 5) end the interface.  * 6) For each endpoint (= port) begin and end the EndpointInfo  * 7) For each binding (= BindingInfo) begin and end the BindingInfo.  * 8) end the service info.  *</pre>  * Unwrapped operations<i>share messages</i> with their corresponding wrapped messages,  * so beware of processing the same messages twice as if unique.  */
end_comment

begin_class
specifier|public
class|class
name|ServiceModelVisitor
block|{
specifier|protected
name|ServiceInfo
name|serviceInfo
decl_stmt|;
specifier|public
name|ServiceModelVisitor
parameter_list|(
name|ServiceInfo
name|serviceInfo
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|serviceInfo
operator|=
name|serviceInfo
expr_stmt|;
block|}
specifier|public
name|void
name|walk
parameter_list|()
block|{
name|begin
argument_list|(
name|serviceInfo
argument_list|)
expr_stmt|;
name|begin
argument_list|(
name|serviceInfo
operator|.
name|getInterface
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|OperationInfo
name|o
range|:
name|serviceInfo
operator|.
name|getInterface
argument_list|()
operator|.
name|getOperations
argument_list|()
control|)
block|{
name|begin
argument_list|(
name|o
argument_list|)
expr_stmt|;
name|visitOperation
argument_list|(
name|o
argument_list|)
expr_stmt|;
name|end
argument_list|(
name|o
argument_list|)
expr_stmt|;
block|}
name|end
argument_list|(
name|serviceInfo
operator|.
name|getInterface
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|EndpointInfo
name|endpointInfo
range|:
name|serviceInfo
operator|.
name|getEndpoints
argument_list|()
control|)
block|{
name|begin
argument_list|(
name|endpointInfo
argument_list|)
expr_stmt|;
name|end
argument_list|(
name|endpointInfo
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|BindingInfo
name|bindingInfo
range|:
name|serviceInfo
operator|.
name|getBindings
argument_list|()
control|)
block|{
name|begin
argument_list|(
name|bindingInfo
argument_list|)
expr_stmt|;
name|end
argument_list|(
name|bindingInfo
argument_list|)
expr_stmt|;
block|}
name|end
argument_list|(
name|serviceInfo
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|visitOperation
parameter_list|(
name|OperationInfo
name|o
parameter_list|)
block|{
name|MessageInfo
name|in
init|=
name|o
operator|.
name|getInput
argument_list|()
decl_stmt|;
if|if
condition|(
name|in
operator|!=
literal|null
condition|)
block|{
name|begin
argument_list|(
name|in
argument_list|)
expr_stmt|;
for|for
control|(
name|MessagePartInfo
name|part
range|:
name|in
operator|.
name|getMessageParts
argument_list|()
control|)
block|{
name|begin
argument_list|(
name|part
argument_list|)
expr_stmt|;
name|end
argument_list|(
name|part
argument_list|)
expr_stmt|;
block|}
name|end
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
name|MessageInfo
name|out
init|=
name|o
operator|.
name|getOutput
argument_list|()
decl_stmt|;
if|if
condition|(
name|out
operator|!=
literal|null
condition|)
block|{
name|begin
argument_list|(
name|out
argument_list|)
expr_stmt|;
for|for
control|(
name|MessagePartInfo
name|part
range|:
name|out
operator|.
name|getMessageParts
argument_list|()
control|)
block|{
name|begin
argument_list|(
name|part
argument_list|)
expr_stmt|;
name|end
argument_list|(
name|part
argument_list|)
expr_stmt|;
block|}
name|end
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|FaultInfo
name|f
range|:
name|o
operator|.
name|getFaults
argument_list|()
control|)
block|{
name|begin
argument_list|(
name|f
argument_list|)
expr_stmt|;
for|for
control|(
name|MessagePartInfo
name|part
range|:
name|f
operator|.
name|getMessageParts
argument_list|()
control|)
block|{
name|begin
argument_list|(
name|part
argument_list|)
expr_stmt|;
name|end
argument_list|(
name|part
argument_list|)
expr_stmt|;
block|}
name|end
argument_list|(
name|f
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|o
operator|.
name|isUnwrappedCapable
argument_list|()
condition|)
block|{
name|OperationInfo
name|uop
init|=
name|o
operator|.
name|getUnwrappedOperation
argument_list|()
decl_stmt|;
name|begin
argument_list|(
name|uop
argument_list|)
expr_stmt|;
name|visitOperation
argument_list|(
name|o
operator|.
name|getUnwrappedOperation
argument_list|()
argument_list|)
expr_stmt|;
name|end
argument_list|(
name|uop
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|begin
parameter_list|(
name|ServiceInfo
name|service
parameter_list|)
block|{     }
specifier|public
name|void
name|begin
parameter_list|(
name|InterfaceInfo
name|intf
parameter_list|)
block|{     }
specifier|public
name|void
name|begin
parameter_list|(
name|OperationInfo
name|op
parameter_list|)
block|{     }
specifier|public
name|void
name|begin
parameter_list|(
name|UnwrappedOperationInfo
name|op
parameter_list|)
block|{     }
specifier|public
name|void
name|begin
parameter_list|(
name|MessageInfo
name|msg
parameter_list|)
block|{     }
specifier|public
name|void
name|begin
parameter_list|(
name|MessagePartInfo
name|part
parameter_list|)
block|{     }
specifier|public
name|void
name|begin
parameter_list|(
name|FaultInfo
name|fault
parameter_list|)
block|{     }
specifier|public
name|void
name|end
parameter_list|(
name|ServiceInfo
name|service
parameter_list|)
block|{     }
specifier|public
name|void
name|end
parameter_list|(
name|InterfaceInfo
name|intf
parameter_list|)
block|{     }
specifier|public
name|void
name|end
parameter_list|(
name|OperationInfo
name|op
parameter_list|)
block|{     }
specifier|public
name|void
name|end
parameter_list|(
name|UnwrappedOperationInfo
name|op
parameter_list|)
block|{     }
specifier|public
name|void
name|end
parameter_list|(
name|MessageInfo
name|msg
parameter_list|)
block|{     }
specifier|public
name|void
name|end
parameter_list|(
name|MessagePartInfo
name|part
parameter_list|)
block|{     }
specifier|public
name|void
name|end
parameter_list|(
name|FaultInfo
name|fault
parameter_list|)
block|{     }
specifier|public
name|void
name|begin
parameter_list|(
name|EndpointInfo
name|endpointInfo
parameter_list|)
block|{     }
specifier|public
name|void
name|end
parameter_list|(
name|EndpointInfo
name|endpointInfo
parameter_list|)
block|{     }
specifier|public
name|void
name|begin
parameter_list|(
name|BindingInfo
name|bindingInfo
parameter_list|)
block|{     }
specifier|public
name|void
name|end
parameter_list|(
name|BindingInfo
name|bindingInfo
parameter_list|)
block|{     }
block|}
end_class

end_unit

