begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|invoker
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Modifier
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ResourceBundle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|Bus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|BundleUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|i18n
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|injection
operator|.
name|ResourceInjector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|Fault
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|resource
operator|.
name|ResourceManager
import|;
end_import

begin_comment
comment|/**  * Creates a new instance of the service object for each call to create().  */
end_comment

begin_class
specifier|public
class|class
name|PerRequestFactory
implements|implements
name|Factory
block|{
specifier|private
specifier|static
specifier|final
name|ResourceBundle
name|BUNDLE
init|=
name|BundleUtils
operator|.
name|getBundle
argument_list|(
name|PerRequestFactory
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|svcClass
decl_stmt|;
specifier|public
name|PerRequestFactory
parameter_list|(
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|svcClass
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|svcClass
operator|=
name|svcClass
expr_stmt|;
block|}
specifier|public
name|Object
name|create
parameter_list|(
name|Exchange
name|ex
parameter_list|)
throws|throws
name|Throwable
block|{
try|try
block|{
if|if
condition|(
name|svcClass
operator|.
name|isInterface
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|Fault
argument_list|(
operator|new
name|Message
argument_list|(
literal|"SVC_CLASS_IS_INTERFACE"
argument_list|,
name|BUNDLE
argument_list|,
name|svcClass
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
if|if
condition|(
name|Modifier
operator|.
name|isAbstract
argument_list|(
name|svcClass
operator|.
name|getModifiers
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|Fault
argument_list|(
operator|new
name|Message
argument_list|(
literal|"SVC_CLASS_IS_ABSTRACT"
argument_list|,
name|BUNDLE
argument_list|,
name|svcClass
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
name|Object
name|o
init|=
name|svcClass
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|Bus
name|b
init|=
name|ex
operator|.
name|getBus
argument_list|()
decl_stmt|;
name|ResourceManager
name|resourceManager
init|=
name|b
operator|.
name|getExtension
argument_list|(
name|ResourceManager
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|resourceManager
operator|!=
literal|null
condition|)
block|{
name|ResourceInjector
name|injector
init|=
operator|new
name|ResourceInjector
argument_list|(
name|resourceManager
argument_list|)
decl_stmt|;
name|injector
operator|.
name|inject
argument_list|(
name|o
argument_list|)
expr_stmt|;
name|injector
operator|.
name|construct
argument_list|(
name|o
argument_list|)
expr_stmt|;
block|}
return|return
name|o
return|;
block|}
catch|catch
parameter_list|(
name|InstantiationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|Fault
argument_list|(
operator|new
name|Message
argument_list|(
literal|"COULD_NOT_INSTANTIATE"
argument_list|,
name|BUNDLE
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|Fault
argument_list|(
operator|new
name|Message
argument_list|(
literal|"ILLEGAL_ACCESS"
argument_list|,
name|BUNDLE
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|release
parameter_list|(
name|Exchange
name|ex
parameter_list|,
name|Object
name|o
parameter_list|)
block|{
comment|//nothing to do
block|}
block|}
end_class

end_unit

