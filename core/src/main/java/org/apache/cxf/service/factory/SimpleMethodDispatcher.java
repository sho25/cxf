begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|factory
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|BindingInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|BindingOperationInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|OperationInfo
import|;
end_import

begin_class
specifier|public
class|class
name|SimpleMethodDispatcher
implements|implements
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|invoker
operator|.
name|MethodDispatcher
block|{
specifier|private
name|Map
argument_list|<
name|Method
argument_list|,
name|Map
argument_list|<
name|BindingInfo
argument_list|,
name|BindingOperationInfo
argument_list|>
argument_list|>
name|infoMap
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|(
literal|16
argument_list|,
literal|0.75f
argument_list|,
literal|2
argument_list|)
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|OperationInfo
argument_list|,
name|Method
argument_list|>
name|opToMethod
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|(
literal|16
argument_list|,
literal|0.75f
argument_list|,
literal|2
argument_list|)
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|Method
argument_list|,
name|OperationInfo
argument_list|>
name|methodToOp
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|(
literal|16
argument_list|,
literal|0.75f
argument_list|,
literal|2
argument_list|)
decl_stmt|;
specifier|public
name|SimpleMethodDispatcher
parameter_list|()
block|{
comment|//complete
block|}
specifier|public
name|void
name|bind
parameter_list|(
name|OperationInfo
name|o
parameter_list|,
name|Method
modifier|...
name|methods
parameter_list|)
block|{
name|Method
name|primary
init|=
name|methods
index|[
literal|0
index|]
decl_stmt|;
for|for
control|(
name|Method
name|m
range|:
name|methods
control|)
block|{
name|methodToOp
operator|.
name|put
argument_list|(
name|m
argument_list|,
name|o
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|BindingInfo
argument_list|,
name|BindingOperationInfo
argument_list|>
name|biToBop
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|(
literal|4
argument_list|,
literal|0.75f
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|infoMap
operator|.
name|put
argument_list|(
name|m
argument_list|,
name|biToBop
argument_list|)
expr_stmt|;
block|}
name|opToMethod
operator|.
name|put
argument_list|(
name|o
argument_list|,
name|primary
argument_list|)
expr_stmt|;
if|if
condition|(
name|o
operator|.
name|isUnwrappedCapable
argument_list|()
condition|)
block|{
name|opToMethod
operator|.
name|put
argument_list|(
name|o
operator|.
name|getUnwrappedOperation
argument_list|()
argument_list|,
name|primary
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|BindingOperationInfo
name|getBindingOperation
parameter_list|(
name|Method
name|method
parameter_list|,
name|Endpoint
name|endpoint
parameter_list|)
block|{
name|Map
argument_list|<
name|BindingInfo
argument_list|,
name|BindingOperationInfo
argument_list|>
name|bops
init|=
name|infoMap
operator|.
name|get
argument_list|(
name|method
argument_list|)
decl_stmt|;
if|if
condition|(
name|bops
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|BindingOperationInfo
name|bop
init|=
name|bops
operator|.
name|get
argument_list|(
name|endpoint
operator|.
name|getEndpointInfo
argument_list|()
operator|.
name|getBinding
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|bop
operator|==
literal|null
condition|)
block|{
name|OperationInfo
name|o
init|=
name|methodToOp
operator|.
name|get
argument_list|(
name|method
argument_list|)
decl_stmt|;
if|if
condition|(
name|o
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|BindingInfo
name|b
init|=
name|endpoint
operator|.
name|getEndpointInfo
argument_list|()
operator|.
name|getBinding
argument_list|()
decl_stmt|;
for|for
control|(
name|BindingOperationInfo
name|bop2
range|:
name|b
operator|.
name|getOperations
argument_list|()
control|)
block|{
if|if
condition|(
name|bop2
operator|.
name|getOperationInfo
argument_list|()
operator|.
name|equals
argument_list|(
name|o
argument_list|)
condition|)
block|{
name|bop2
operator|=
name|getRealOperation
argument_list|(
name|o
argument_list|,
name|bop2
argument_list|)
expr_stmt|;
name|bops
operator|.
name|put
argument_list|(
name|b
argument_list|,
name|bop2
argument_list|)
expr_stmt|;
return|return
name|bop2
return|;
block|}
block|}
block|}
return|return
name|bop
return|;
block|}
specifier|private
name|BindingOperationInfo
name|getRealOperation
parameter_list|(
name|OperationInfo
name|o
parameter_list|,
name|BindingOperationInfo
name|bop
parameter_list|)
block|{
name|BindingOperationInfo
name|unwrappedOp
init|=
name|bop
operator|.
name|getUnwrappedOperation
argument_list|()
decl_stmt|;
if|if
condition|(
name|unwrappedOp
operator|!=
literal|null
operator|&&
name|unwrappedOp
operator|.
name|getOperationInfo
argument_list|()
operator|.
name|equals
argument_list|(
name|o
operator|.
name|getUnwrappedOperation
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|unwrappedOp
return|;
block|}
return|return
name|bop
return|;
block|}
specifier|public
name|Method
name|getMethod
parameter_list|(
name|BindingOperationInfo
name|op
parameter_list|)
block|{
return|return
name|opToMethod
operator|.
name|get
argument_list|(
name|op
operator|.
name|getOperationInfo
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|Method
name|getPrimaryMethod
parameter_list|(
name|OperationInfo
name|op
parameter_list|)
block|{
return|return
name|opToMethod
operator|.
name|get
argument_list|(
name|op
argument_list|)
return|;
block|}
block|}
end_class

end_unit

