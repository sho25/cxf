begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|invoker
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Exchange
import|;
end_import

begin_comment
comment|/**  * Always returns a single instance of the bean.  *  * This is generally the default.  */
end_comment

begin_class
specifier|public
class|class
name|SingletonFactory
implements|implements
name|Factory
block|{
name|Object
name|bean
decl_stmt|;
name|Factory
name|factory
decl_stmt|;
specifier|public
name|SingletonFactory
parameter_list|(
specifier|final
name|Object
name|bean
parameter_list|)
block|{
name|this
operator|.
name|bean
operator|=
name|bean
expr_stmt|;
block|}
specifier|public
name|SingletonFactory
parameter_list|(
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|beanClass
parameter_list|)
block|{
name|this
operator|.
name|factory
operator|=
operator|new
name|PerRequestFactory
argument_list|(
name|beanClass
argument_list|)
expr_stmt|;
block|}
specifier|public
name|SingletonFactory
parameter_list|(
specifier|final
name|Factory
name|f
parameter_list|)
block|{
name|this
operator|.
name|factory
operator|=
name|f
expr_stmt|;
block|}
comment|/** {@inheritDoc}*/
specifier|public
name|Object
name|create
parameter_list|(
name|Exchange
name|ex
parameter_list|)
throws|throws
name|Throwable
block|{
if|if
condition|(
name|bean
operator|==
literal|null
operator|&&
name|factory
operator|!=
literal|null
condition|)
block|{
name|createBean
argument_list|(
name|ex
argument_list|)
expr_stmt|;
block|}
return|return
name|bean
return|;
block|}
specifier|private
specifier|synchronized
name|void
name|createBean
parameter_list|(
name|Exchange
name|e
parameter_list|)
throws|throws
name|Throwable
block|{
if|if
condition|(
name|bean
operator|==
literal|null
condition|)
block|{
name|bean
operator|=
name|factory
operator|.
name|create
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** {@inheritDoc}*/
specifier|public
name|void
name|release
parameter_list|(
name|Exchange
name|ex
parameter_list|,
name|Object
name|o
parameter_list|)
block|{
comment|//nothing to do
block|}
block|}
end_class

end_unit

