begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|xmlschema
operator|.
name|InvalidXmlSchemaReferenceException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|xmlschema
operator|.
name|SchemaCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|MessagePartInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|ServiceInfo
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
specifier|public
class|class
name|ServiceModelSchemaValidator
extends|extends
name|ServiceModelVisitor
block|{
specifier|private
name|SchemaCollection
name|schemaCollection
decl_stmt|;
specifier|private
name|StringBuilder
name|complaints
decl_stmt|;
specifier|public
name|ServiceModelSchemaValidator
parameter_list|(
name|ServiceInfo
name|serviceInfo
parameter_list|)
block|{
name|super
argument_list|(
name|serviceInfo
argument_list|)
expr_stmt|;
name|schemaCollection
operator|=
name|serviceInfo
operator|.
name|getXmlSchemaCollection
argument_list|()
expr_stmt|;
name|complaints
operator|=
operator|new
name|StringBuilder
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|getComplaints
parameter_list|()
block|{
return|return
name|complaints
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|begin
parameter_list|(
name|MessagePartInfo
name|part
parameter_list|)
block|{
comment|// the unwrapped parts build for wrapped operations don't have real elements.
if|if
condition|(
name|part
operator|.
name|isElement
argument_list|()
operator|&&
operator|!
name|part
operator|.
name|getMessageInfo
argument_list|()
operator|.
name|getOperation
argument_list|()
operator|.
name|isUnwrapped
argument_list|()
condition|)
block|{
try|try
block|{
name|schemaCollection
operator|.
name|validateElementName
argument_list|(
name|part
operator|.
name|getName
argument_list|()
argument_list|,
name|part
operator|.
name|getElementQName
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidXmlSchemaReferenceException
name|ixsre
parameter_list|)
block|{
name|complaints
operator|.
name|append
argument_list|(
name|part
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|" part element name "
argument_list|)
operator|.
name|append
argument_list|(
name|ixsre
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
operator|!
name|part
operator|.
name|getMessageInfo
argument_list|()
operator|.
name|getOperation
argument_list|()
operator|.
name|isUnwrapped
argument_list|()
condition|)
block|{
if|if
condition|(
name|part
operator|.
name|getTypeQName
argument_list|()
operator|==
literal|null
condition|)
block|{
name|complaints
operator|.
name|append
argument_list|(
name|part
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|" of message "
argument_list|)
operator|.
name|append
argument_list|(
name|part
operator|.
name|getMessageInfo
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|" part type QName null.\n"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|schemaCollection
operator|.
name|validateTypeName
argument_list|(
name|part
operator|.
name|getName
argument_list|()
argument_list|,
name|part
operator|.
name|getTypeQName
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidXmlSchemaReferenceException
name|ixsre
parameter_list|)
block|{
name|complaints
operator|.
name|append
argument_list|(
name|part
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|" part type name "
argument_list|)
operator|.
name|append
argument_list|(
name|ixsre
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

