begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBElement
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|Bus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|EndpointInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|AddressingProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|EndpointReferenceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|EndpointReferenceUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|ReferenceParametersType
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|JAXWSAConstants
operator|.
name|ADDRESSING_PROPERTIES_INBOUND
import|;
end_import

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractMultiplexDestination
extends|extends
name|AbstractDestination
implements|implements
name|MultiplexDestination
block|{
specifier|private
specifier|static
specifier|final
name|QName
name|MULTIPLEX_ID_QNAME
init|=
operator|new
name|QName
argument_list|(
literal|"http://multiplex.transport.cxf.apache.org"
argument_list|,
literal|"id"
argument_list|)
decl_stmt|;
specifier|public
name|AbstractMultiplexDestination
parameter_list|(
name|Bus
name|b
parameter_list|,
name|EndpointReferenceType
name|ref
parameter_list|,
name|EndpointInfo
name|ei
parameter_list|)
block|{
name|super
argument_list|(
name|b
argument_list|,
name|ref
argument_list|,
name|ei
argument_list|)
expr_stmt|;
block|}
comment|/**      * Builds an new endpoint reference using the current target reference as a template.       * The supplied id is endcoded using a reference parameter.      * This requires the ws-a interceptors to propagate the reference parameters      * on subsequent invokes using the returned reference.      * @param id the id to encode in the new reference      * @return the new reference with the id encoded as a reference parameter      * @see org.apache.cxf.transport.MultiplexDestination#getAddressWithId(java.lang.String)             */
specifier|public
name|EndpointReferenceType
name|getAddressWithId
parameter_list|(
name|String
name|id
parameter_list|)
block|{
name|EndpointReferenceType
name|epr
init|=
name|EndpointReferenceUtils
operator|.
name|duplicate
argument_list|(
name|EndpointReferenceUtils
operator|.
name|mint
argument_list|(
name|reference
argument_list|,
name|bus
argument_list|)
argument_list|)
decl_stmt|;
name|ReferenceParametersType
name|newParams
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|ObjectFactory
argument_list|()
operator|.
name|createReferenceParametersType
argument_list|()
decl_stmt|;
name|ReferenceParametersType
name|existingParams
init|=
name|epr
operator|.
name|getReferenceParameters
argument_list|()
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|existingParams
condition|)
block|{
name|newParams
operator|.
name|getAny
argument_list|()
operator|.
name|addAll
argument_list|(
name|existingParams
operator|.
name|getAny
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|newParams
operator|.
name|getAny
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|JAXBElement
argument_list|<
name|String
argument_list|>
argument_list|(
name|MULTIPLEX_ID_QNAME
argument_list|,
name|String
operator|.
name|class
argument_list|,
name|id
argument_list|)
argument_list|)
expr_stmt|;
name|epr
operator|.
name|setReferenceParameters
argument_list|(
name|newParams
argument_list|)
expr_stmt|;
return|return
name|epr
return|;
block|}
comment|/**      * Obtain id from reference parameters of the ws-a to address      * Requires the existance of ws-a interceptors on dispatch path to provide access       * to the ws-a headers      * @param contextMap the current invocation or message context      * @return the id from the reference parameters of the  ws-a-to address or null if not found      * @see org.apache.cxf.transport.MultiplexDestination#getId(java.util.Map)      */
specifier|public
name|String
name|getId
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|contextMap
parameter_list|)
block|{
name|String
name|markedParam
init|=
literal|null
decl_stmt|;
name|AddressingProperties
name|maps
init|=
operator|(
name|AddressingProperties
operator|)
name|contextMap
operator|.
name|get
argument_list|(
name|ADDRESSING_PROPERTIES_INBOUND
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|maps
condition|)
block|{
name|EndpointReferenceType
name|toEpr
init|=
name|maps
operator|.
name|getToEndpointReference
argument_list|()
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|toEpr
condition|)
block|{
name|markedParam
operator|=
name|extractStringElementFromAny
argument_list|(
name|MULTIPLEX_ID_QNAME
argument_list|,
name|toEpr
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|markedParam
return|;
block|}
specifier|private
name|String
name|extractStringElementFromAny
parameter_list|(
name|QName
name|elementQName
parameter_list|,
name|EndpointReferenceType
name|epr
parameter_list|)
block|{
name|String
name|elementStringValue
init|=
literal|null
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|epr
operator|.
name|getReferenceParameters
argument_list|()
condition|)
block|{
for|for
control|(
name|Object
name|o
range|:
name|epr
operator|.
name|getReferenceParameters
argument_list|()
operator|.
name|getAny
argument_list|()
control|)
block|{
if|if
condition|(
name|o
operator|instanceof
name|JAXBElement
condition|)
block|{
name|JAXBElement
argument_list|<
name|?
argument_list|>
name|el
init|=
operator|(
name|JAXBElement
argument_list|<
name|?
argument_list|>
operator|)
name|o
decl_stmt|;
if|if
condition|(
name|el
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|elementQName
argument_list|)
condition|)
block|{
name|elementStringValue
operator|=
operator|(
name|String
operator|)
name|el
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|elementStringValue
return|;
block|}
block|}
end_class

end_unit

