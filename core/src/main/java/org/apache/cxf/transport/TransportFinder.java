begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|Bus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|configuration
operator|.
name|ConfiguredBeanLocator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|CastUtils
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
specifier|public
class|class
name|TransportFinder
parameter_list|<
name|T
parameter_list|>
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|T
argument_list|>
name|map
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|loaded
decl_stmt|;
name|Class
argument_list|<
name|T
argument_list|>
name|cls
decl_stmt|;
name|ConfiguredBeanLocator
name|locator
decl_stmt|;
specifier|public
name|TransportFinder
parameter_list|(
name|Bus
name|b
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|T
argument_list|>
name|m
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|l
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|c
parameter_list|)
block|{
name|map
operator|=
name|m
expr_stmt|;
name|cls
operator|=
name|c
expr_stmt|;
name|locator
operator|=
name|b
operator|.
name|getExtension
argument_list|(
name|ConfiguredBeanLocator
operator|.
name|class
argument_list|)
expr_stmt|;
name|loaded
operator|=
name|l
expr_stmt|;
block|}
specifier|public
name|T
name|findTransportForNamespace
parameter_list|(
specifier|final
name|String
name|namespace
parameter_list|)
block|{
if|if
condition|(
name|locator
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|T
name|factory
init|=
name|loadActivationNamespaces
argument_list|(
name|namespace
argument_list|)
decl_stmt|;
if|if
condition|(
name|factory
operator|==
literal|null
condition|)
block|{
name|factory
operator|=
name|loadDefaultNamespace
argument_list|(
name|namespace
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|factory
operator|==
literal|null
condition|)
block|{
name|factory
operator|=
name|loadNoDefaultNamespace
argument_list|(
name|namespace
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|factory
operator|==
literal|null
condition|)
block|{
name|loadAll
argument_list|()
expr_stmt|;
name|factory
operator|=
name|map
operator|.
name|get
argument_list|(
name|namespace
argument_list|)
expr_stmt|;
block|}
return|return
name|factory
return|;
block|}
specifier|public
name|T
name|findTransportForURI
parameter_list|(
name|String
name|uri
parameter_list|)
block|{
if|if
condition|(
name|locator
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|//If the uri is related path or has no protocol prefix , we will set it to be http
if|if
condition|(
name|uri
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
operator|||
name|uri
operator|.
name|indexOf
argument_list|(
literal|":"
argument_list|)
operator|<
literal|0
condition|)
block|{
name|uri
operator|=
literal|"http://"
operator|+
name|uri
expr_stmt|;
block|}
name|T
name|factory
init|=
name|checkForURI
argument_list|(
name|uri
argument_list|)
decl_stmt|;
if|if
condition|(
name|factory
operator|==
literal|null
condition|)
block|{
comment|//didn't find, now well need to search
name|factory
operator|=
name|loadDefaultURIs
argument_list|(
name|uri
argument_list|)
expr_stmt|;
if|if
condition|(
name|factory
operator|==
literal|null
condition|)
block|{
name|loadAll
argument_list|()
expr_stmt|;
name|factory
operator|=
name|checkForURI
argument_list|(
name|uri
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|factory
return|;
block|}
specifier|private
specifier|static
name|Set
argument_list|<
name|String
argument_list|>
name|getPrefixes
parameter_list|(
name|Object
name|t
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|prefixes
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|t
operator|instanceof
name|AbstractTransportFactory
condition|)
block|{
name|AbstractTransportFactory
name|atf
init|=
operator|(
name|AbstractTransportFactory
operator|)
name|t
decl_stmt|;
name|prefixes
operator|=
name|atf
operator|.
name|getUriPrefixes
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|t
operator|instanceof
name|DestinationFactory
condition|)
block|{
name|DestinationFactory
name|atf
init|=
operator|(
name|DestinationFactory
operator|)
name|t
decl_stmt|;
name|prefixes
operator|=
name|atf
operator|.
name|getUriPrefixes
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|t
operator|instanceof
name|ConduitInitiator
condition|)
block|{
name|ConduitInitiator
name|atf
init|=
operator|(
name|ConduitInitiator
operator|)
name|t
decl_stmt|;
name|prefixes
operator|=
name|atf
operator|.
name|getUriPrefixes
argument_list|()
expr_stmt|;
block|}
return|return
name|prefixes
return|;
block|}
specifier|private
name|boolean
name|hasPrefix
parameter_list|(
name|String
name|uri
parameter_list|,
name|Collection
argument_list|<
name|String
argument_list|>
name|prefixes
parameter_list|)
block|{
if|if
condition|(
name|prefixes
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
name|String
name|prefix
range|:
name|prefixes
control|)
block|{
if|if
condition|(
name|uri
operator|.
name|startsWith
argument_list|(
name|prefix
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|T
name|checkForURI
parameter_list|(
name|String
name|uri
parameter_list|)
block|{
comment|//first attempt the ones already registered
for|for
control|(
name|T
name|t
range|:
name|map
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|hasPrefix
argument_list|(
name|uri
argument_list|,
name|getPrefixes
argument_list|(
name|t
argument_list|)
argument_list|)
condition|)
block|{
return|return
name|t
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|void
name|loadAll
parameter_list|()
block|{
name|ConfiguredBeanLocator
operator|.
name|BeanLoaderListener
argument_list|<
name|T
argument_list|>
name|listener
init|=
operator|new
name|ConfiguredBeanLocator
operator|.
name|BeanLoaderListener
argument_list|<
name|T
argument_list|>
argument_list|()
block|{
specifier|public
name|boolean
name|beanLoaded
parameter_list|(
name|String
name|name
parameter_list|,
name|T
name|bean
parameter_list|)
block|{
name|loaded
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|registerBean
argument_list|(
name|bean
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|loadBean
parameter_list|(
name|String
name|name
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|type
parameter_list|)
block|{
return|return
operator|!
name|loaded
operator|.
name|contains
argument_list|(
name|name
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|locator
operator|.
name|loadBeansOfType
argument_list|(
name|cls
argument_list|,
name|listener
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|registerBean
parameter_list|(
name|T
name|bean
parameter_list|)
block|{
if|if
condition|(
name|bean
operator|instanceof
name|AbstractTransportFactory
condition|)
block|{
if|if
condition|(
operator|(
operator|(
name|AbstractTransportFactory
operator|)
name|bean
operator|)
operator|.
name|getTransportIds
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|ns
range|:
operator|(
operator|(
name|AbstractTransportFactory
operator|)
name|bean
operator|)
operator|.
name|getTransportIds
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|map
operator|.
name|containsKey
argument_list|(
name|ns
argument_list|)
condition|)
block|{
name|map
operator|.
name|put
argument_list|(
name|ns
argument_list|,
name|bean
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
else|else
block|{
try|try
block|{
name|Method
name|m
init|=
name|bean
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
literal|"getActivationNamespaces"
argument_list|,
operator|new
name|Class
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|String
argument_list|>
name|c
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
operator|(
name|Collection
argument_list|<
name|?
argument_list|>
operator|)
name|m
operator|.
name|invoke
argument_list|(
name|bean
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|s
range|:
name|c
control|)
block|{
if|if
condition|(
operator|!
name|map
operator|.
name|containsKey
argument_list|(
name|s
argument_list|)
condition|)
block|{
name|map
operator|.
name|put
argument_list|(
name|s
argument_list|,
name|bean
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|//ignore
block|}
block|}
block|}
specifier|private
name|T
name|loadActivationNamespaces
parameter_list|(
specifier|final
name|String
name|namespace
parameter_list|)
block|{
comment|//Try old method of having activationNamespaces configured in.
name|ConfiguredBeanLocator
operator|.
name|BeanLoaderListener
argument_list|<
name|T
argument_list|>
name|listener
init|=
operator|new
name|ConfiguredBeanLocator
operator|.
name|BeanLoaderListener
argument_list|<
name|T
argument_list|>
argument_list|()
block|{
specifier|public
name|boolean
name|beanLoaded
parameter_list|(
name|String
name|name
parameter_list|,
name|T
name|bean
parameter_list|)
block|{
name|loaded
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|map
operator|.
name|containsKey
argument_list|(
name|namespace
argument_list|)
condition|)
block|{
name|registerBean
argument_list|(
name|bean
argument_list|)
expr_stmt|;
block|}
return|return
name|map
operator|.
name|containsKey
argument_list|(
name|namespace
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|loadBean
parameter_list|(
name|String
name|name
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|type
parameter_list|)
block|{
return|return
name|locator
operator|.
name|hasConfiguredPropertyValue
argument_list|(
name|name
argument_list|,
literal|"transportIds"
argument_list|,
name|namespace
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|locator
operator|.
name|loadBeansOfType
argument_list|(
name|cls
argument_list|,
name|listener
argument_list|)
expr_stmt|;
return|return
name|map
operator|.
name|get
argument_list|(
name|namespace
argument_list|)
return|;
block|}
specifier|private
name|T
name|loadDefaultURIs
parameter_list|(
specifier|final
name|String
name|uri
parameter_list|)
block|{
comment|//First attempt will be to examine the factory class
comment|//for a DEFAULT_URIS field and use it
name|URIBeanLoaderListener
name|listener
init|=
operator|new
name|URIBeanLoaderListener
argument_list|(
name|uri
argument_list|)
block|{
specifier|public
name|boolean
name|loadBean
parameter_list|(
name|String
name|name
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|type
parameter_list|)
block|{
try|try
block|{
name|Field
name|f
init|=
name|type
operator|.
name|getField
argument_list|(
literal|"DEFAULT_URIS"
argument_list|)
decl_stmt|;
name|Object
name|o
init|=
name|f
operator|.
name|get
argument_list|(
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|o
operator|instanceof
name|Collection
condition|)
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|c
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
operator|(
name|Collection
argument_list|<
name|?
argument_list|>
operator|)
name|o
argument_list|)
decl_stmt|;
return|return
name|hasPrefix
argument_list|(
name|uri
argument_list|,
name|c
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|//ignore
block|}
return|return
literal|false
return|;
block|}
block|}
decl_stmt|;
name|locator
operator|.
name|loadBeansOfType
argument_list|(
name|cls
argument_list|,
name|listener
argument_list|)
expr_stmt|;
return|return
name|listener
operator|.
name|getFactory
argument_list|()
return|;
block|}
specifier|abstract
class|class
name|URIBeanLoaderListener
implements|implements
name|ConfiguredBeanLocator
operator|.
name|BeanLoaderListener
argument_list|<
name|T
argument_list|>
block|{
name|T
name|factory
decl_stmt|;
name|String
name|uri
decl_stmt|;
name|URIBeanLoaderListener
parameter_list|(
name|String
name|u
parameter_list|)
block|{
name|uri
operator|=
name|u
expr_stmt|;
block|}
specifier|public
name|T
name|getFactory
parameter_list|()
block|{
return|return
name|factory
return|;
block|}
specifier|public
name|boolean
name|beanLoaded
parameter_list|(
name|String
name|name
parameter_list|,
name|T
name|bean
parameter_list|)
block|{
name|registerBean
argument_list|(
name|bean
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasPrefix
argument_list|(
name|uri
argument_list|,
name|getPrefixes
argument_list|(
name|bean
argument_list|)
argument_list|)
condition|)
block|{
name|factory
operator|=
name|bean
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
specifier|private
name|T
name|loadDefaultNamespace
parameter_list|(
specifier|final
name|String
name|namespace
parameter_list|)
block|{
comment|//First attempt will be to examine the factory class
comment|//for a DEFAULT_NAMESPACES field and use it
name|ConfiguredBeanLocator
operator|.
name|BeanLoaderListener
argument_list|<
name|T
argument_list|>
name|listener
init|=
operator|new
name|ConfiguredBeanLocator
operator|.
name|BeanLoaderListener
argument_list|<
name|T
argument_list|>
argument_list|()
block|{
specifier|public
name|boolean
name|beanLoaded
parameter_list|(
name|String
name|name
parameter_list|,
name|T
name|bean
parameter_list|)
block|{
name|loaded
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|registerBean
argument_list|(
name|bean
argument_list|)
expr_stmt|;
return|return
name|map
operator|.
name|containsKey
argument_list|(
name|namespace
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|loadBean
parameter_list|(
name|String
name|name
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|type
parameter_list|)
block|{
if|if
condition|(
name|loaded
operator|.
name|contains
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
try|try
block|{
name|Field
name|f
init|=
name|type
operator|.
name|getField
argument_list|(
literal|"DEFAULT_NAMESPACES"
argument_list|)
decl_stmt|;
name|Object
name|o
init|=
name|f
operator|.
name|get
argument_list|(
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|o
operator|instanceof
name|Collection
condition|)
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|c
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
operator|(
name|Collection
argument_list|<
name|?
argument_list|>
operator|)
name|o
argument_list|)
decl_stmt|;
return|return
name|c
operator|.
name|contains
argument_list|(
name|namespace
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|//ignore
block|}
return|return
literal|false
return|;
block|}
block|}
decl_stmt|;
name|locator
operator|.
name|loadBeansOfType
argument_list|(
name|cls
argument_list|,
name|listener
argument_list|)
expr_stmt|;
return|return
name|map
operator|.
name|get
argument_list|(
name|namespace
argument_list|)
return|;
block|}
specifier|private
name|T
name|loadNoDefaultNamespace
parameter_list|(
specifier|final
name|String
name|namespace
parameter_list|)
block|{
comment|//Second attempt will be to examine the factory class
comment|//for a DEFAULT_NAMESPACES field and if it doesn't exist, try
comment|//loading.  This will then load most of the "older" things
name|ConfiguredBeanLocator
operator|.
name|BeanLoaderListener
argument_list|<
name|T
argument_list|>
name|listener
init|=
operator|new
name|ConfiguredBeanLocator
operator|.
name|BeanLoaderListener
argument_list|<
name|T
argument_list|>
argument_list|()
block|{
specifier|public
name|boolean
name|beanLoaded
parameter_list|(
name|String
name|name
parameter_list|,
name|T
name|bean
parameter_list|)
block|{
name|loaded
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|registerBean
argument_list|(
name|bean
argument_list|)
expr_stmt|;
return|return
name|map
operator|.
name|containsKey
argument_list|(
name|namespace
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|loadBean
parameter_list|(
name|String
name|name
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|type
parameter_list|)
block|{
if|if
condition|(
name|loaded
operator|.
name|contains
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
try|try
block|{
name|type
operator|.
name|getField
argument_list|(
literal|"DEFAULT_NAMESPACES"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|//ignore
block|}
return|return
literal|true
return|;
block|}
block|}
decl_stmt|;
name|locator
operator|.
name|loadBeansOfType
argument_list|(
name|cls
argument_list|,
name|listener
argument_list|)
expr_stmt|;
return|return
name|map
operator|.
name|get
argument_list|(
name|namespace
argument_list|)
return|;
block|}
block|}
end_class

end_unit

