begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|bus
operator|.
name|osgi
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Dictionary
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|Bus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|bus
operator|.
name|extension
operator|.
name|ExtensionManagerImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|buslifecycle
operator|.
name|BusCreationListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|buslifecycle
operator|.
name|BusLifeCycleListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|buslifecycle
operator|.
name|BusLifeCycleManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|configuration
operator|.
name|ConfiguredBeanLocator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|ClientLifeCycleListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|ClientLifeCycleManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|ServerLifeCycleListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|ServerLifeCycleManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|feature
operator|.
name|Feature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|workqueue
operator|.
name|WorkQueueManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Bundle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|InvalidSyntaxException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|ServiceReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|ServiceRegistration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Version
import|;
end_import

begin_class
specifier|public
class|class
name|OSGIBusListener
implements|implements
name|BusLifeCycleListener
block|{
specifier|public
specifier|static
specifier|final
name|String
name|CONTEXT_SYMBOLIC_NAME_PROPERTY
init|=
literal|"cxf.context.symbolicname"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|CONTEXT_VERSION_PROPERTY
init|=
literal|"cxf.context.version"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|CONTEXT_NAME_PROPERTY
init|=
literal|"cxf.bus.id"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|SERVICE_PROPERTY_PRIVATE
init|=
literal|"org.apache.cxf.bus.private.extension"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|SERVICE_PROPERTY_RESTRICTED
init|=
literal|"org.apache.cxf.bus.restricted.extension"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|BUS_EXTENSION_BUNDLES_EXCLUDES
init|=
literal|"bus.extension.bundles.excludes"
decl_stmt|;
name|Bus
name|bus
decl_stmt|;
name|ServiceRegistration
name|service
decl_stmt|;
name|BundleContext
name|defaultContext
decl_stmt|;
specifier|private
name|Pattern
name|extensionBundlesExcludesPattern
decl_stmt|;
specifier|public
name|OSGIBusListener
parameter_list|(
name|Bus
name|b
parameter_list|)
block|{
name|this
argument_list|(
name|b
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|OSGIBusListener
parameter_list|(
name|Bus
name|b
parameter_list|,
name|Object
name|args
index|[]
parameter_list|)
block|{
name|bus
operator|=
name|b
expr_stmt|;
if|if
condition|(
name|args
operator|!=
literal|null
operator|&&
name|args
operator|.
name|length
operator|>
literal|0
operator|&&
name|args
index|[
literal|0
index|]
operator|instanceof
name|BundleContext
condition|)
block|{
name|defaultContext
operator|=
operator|(
name|BundleContext
operator|)
name|args
index|[
literal|0
index|]
expr_stmt|;
block|}
name|String
name|extExcludes
init|=
operator|(
name|String
operator|)
name|bus
operator|.
name|getProperty
argument_list|(
name|BUS_EXTENSION_BUNDLES_EXCLUDES
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|extExcludes
argument_list|)
condition|)
block|{
try|try
block|{
name|extensionBundlesExcludesPattern
operator|=
name|Pattern
operator|.
name|compile
argument_list|(
name|extExcludes
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
name|BusLifeCycleManager
name|manager
init|=
name|bus
operator|.
name|getExtension
argument_list|(
name|BusLifeCycleManager
operator|.
name|class
argument_list|)
decl_stmt|;
name|manager
operator|.
name|registerLifeCycleListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|registerConfiguredBeanLocator
argument_list|()
expr_stmt|;
name|registerClientLifeCycleListeners
argument_list|()
expr_stmt|;
name|registerServerLifecycleListeners
argument_list|()
expr_stmt|;
name|registerBusFeatures
argument_list|()
expr_stmt|;
name|sendBusCreatedToBusCreationListeners
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|registerConfiguredBeanLocator
parameter_list|()
block|{
specifier|final
name|ConfiguredBeanLocator
name|cbl
init|=
name|bus
operator|.
name|getExtension
argument_list|(
name|ConfiguredBeanLocator
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|cbl
operator|instanceof
name|ExtensionManagerImpl
condition|)
block|{
comment|// wire in the OSGi things
name|bus
operator|.
name|setExtension
argument_list|(
operator|new
name|OSGiBeanLocator
argument_list|(
name|cbl
argument_list|,
name|defaultContext
argument_list|)
argument_list|,
name|ConfiguredBeanLocator
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|initComplete
parameter_list|()
block|{
name|ManagedWorkQueueList
name|wqList
init|=
name|bus
operator|.
name|getExtension
argument_list|(
name|ManagedWorkQueueList
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|wqList
operator|!=
literal|null
condition|)
block|{
name|WorkQueueManager
name|manager
init|=
name|bus
operator|.
name|getExtension
argument_list|(
name|WorkQueueManager
operator|.
name|class
argument_list|)
decl_stmt|;
name|wqList
operator|.
name|addAllToWorkQueueManager
argument_list|(
name|manager
argument_list|)
expr_stmt|;
block|}
name|registerBusAsService
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|preShutdown
parameter_list|()
block|{     }
specifier|public
name|void
name|postShutdown
parameter_list|()
block|{
if|if
condition|(
name|service
operator|!=
literal|null
condition|)
block|{
name|service
operator|.
name|unregister
argument_list|()
expr_stmt|;
name|service
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|ServiceReference
index|[]
name|getServiceReferences
parameter_list|(
name|BundleContext
name|context
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|serviceClass
parameter_list|)
block|{
name|ServiceReference
index|[]
name|refs
init|=
literal|null
decl_stmt|;
try|try
block|{
name|refs
operator|=
name|context
operator|.
name|getServiceReferences
argument_list|(
name|serviceClass
operator|.
name|getName
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidSyntaxException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
if|if
condition|(
name|refs
operator|==
literal|null
condition|)
block|{
name|refs
operator|=
operator|new
name|ServiceReference
index|[]
block|{}
expr_stmt|;
block|}
return|return
name|refs
return|;
block|}
specifier|private
name|void
name|sendBusCreatedToBusCreationListeners
parameter_list|()
block|{
name|ServiceReference
name|refs
index|[]
init|=
name|getServiceReferences
argument_list|(
name|defaultContext
argument_list|,
name|BusCreationListener
operator|.
name|class
argument_list|)
decl_stmt|;
for|for
control|(
name|ServiceReference
name|ref
range|:
name|refs
control|)
block|{
if|if
condition|(
operator|!
name|isPrivate
argument_list|(
name|ref
argument_list|)
operator|&&
operator|!
name|isExcluded
argument_list|(
name|ref
argument_list|)
condition|)
block|{
name|BusCreationListener
name|listener
init|=
operator|(
name|BusCreationListener
operator|)
name|defaultContext
operator|.
name|getService
argument_list|(
name|ref
argument_list|)
decl_stmt|;
name|listener
operator|.
name|busCreated
argument_list|(
name|bus
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|registerServerLifecycleListeners
parameter_list|()
block|{
name|ServiceReference
name|refs
index|[]
init|=
name|getServiceReferences
argument_list|(
name|defaultContext
argument_list|,
name|ServerLifeCycleListener
operator|.
name|class
argument_list|)
decl_stmt|;
name|ServerLifeCycleManager
name|clcm
init|=
name|bus
operator|.
name|getExtension
argument_list|(
name|ServerLifeCycleManager
operator|.
name|class
argument_list|)
decl_stmt|;
for|for
control|(
name|ServiceReference
name|ref
range|:
name|refs
control|)
block|{
if|if
condition|(
operator|!
name|isPrivate
argument_list|(
name|ref
argument_list|)
operator|&&
operator|!
name|isExcluded
argument_list|(
name|ref
argument_list|)
condition|)
block|{
name|ServerLifeCycleListener
name|listener
init|=
operator|(
name|ServerLifeCycleListener
operator|)
name|defaultContext
operator|.
name|getService
argument_list|(
name|ref
argument_list|)
decl_stmt|;
name|clcm
operator|.
name|registerListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|registerClientLifeCycleListeners
parameter_list|()
block|{
name|ServiceReference
name|refs
index|[]
init|=
name|getServiceReferences
argument_list|(
name|defaultContext
argument_list|,
name|ClientLifeCycleListener
operator|.
name|class
argument_list|)
decl_stmt|;
name|ClientLifeCycleManager
name|clcm
init|=
name|bus
operator|.
name|getExtension
argument_list|(
name|ClientLifeCycleManager
operator|.
name|class
argument_list|)
decl_stmt|;
for|for
control|(
name|ServiceReference
name|ref
range|:
name|refs
control|)
block|{
if|if
condition|(
operator|!
name|isPrivate
argument_list|(
name|ref
argument_list|)
operator|&&
operator|!
name|isExcluded
argument_list|(
name|ref
argument_list|)
condition|)
block|{
name|ClientLifeCycleListener
name|listener
init|=
operator|(
name|ClientLifeCycleListener
operator|)
name|defaultContext
operator|.
name|getService
argument_list|(
name|ref
argument_list|)
decl_stmt|;
name|clcm
operator|.
name|registerListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|registerBusFeatures
parameter_list|()
block|{
name|ServiceReference
name|refs
index|[]
init|=
name|getServiceReferences
argument_list|(
name|defaultContext
argument_list|,
name|Feature
operator|.
name|class
argument_list|)
decl_stmt|;
for|for
control|(
name|ServiceReference
name|ref
range|:
name|refs
control|)
block|{
if|if
condition|(
operator|!
name|isPrivate
argument_list|(
name|ref
argument_list|)
operator|&&
operator|!
name|isExcluded
argument_list|(
name|ref
argument_list|)
condition|)
block|{
name|Feature
name|feature
init|=
operator|(
name|Feature
operator|)
name|defaultContext
operator|.
name|getService
argument_list|(
name|ref
argument_list|)
decl_stmt|;
name|bus
operator|.
name|getFeatures
argument_list|()
operator|.
name|add
argument_list|(
name|feature
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|boolean
name|isPrivate
parameter_list|(
name|ServiceReference
name|ref
parameter_list|)
block|{
name|Object
name|o
init|=
name|ref
operator|.
name|getProperty
argument_list|(
name|SERVICE_PROPERTY_PRIVATE
argument_list|)
decl_stmt|;
name|Boolean
name|pvt
init|=
name|Boolean
operator|.
name|FALSE
decl_stmt|;
if|if
condition|(
name|o
operator|==
literal|null
condition|)
block|{
name|pvt
operator|=
name|Boolean
operator|.
name|FALSE
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|o
operator|instanceof
name|String
condition|)
block|{
name|pvt
operator|=
name|Boolean
operator|.
name|parseBoolean
argument_list|(
operator|(
name|String
operator|)
name|o
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|o
operator|instanceof
name|Boolean
condition|)
block|{
name|pvt
operator|=
operator|(
name|Boolean
operator|)
name|o
expr_stmt|;
block|}
return|return
name|pvt
operator|.
name|booleanValue
argument_list|()
return|;
block|}
specifier|private
name|boolean
name|isExcluded
parameter_list|(
name|ServiceReference
name|ref
parameter_list|)
block|{
name|String
name|o
init|=
operator|(
name|String
operator|)
name|ref
operator|.
name|getProperty
argument_list|(
name|SERVICE_PROPERTY_RESTRICTED
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|o
argument_list|)
condition|)
block|{
comment|// if the service's restricted-regex is set, the service is excluded when the app not matching that regex
name|BundleContext
name|app
init|=
name|bus
operator|.
name|getExtension
argument_list|(
name|BundleContext
operator|.
name|class
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
name|app
operator|!=
literal|null
operator|&&
operator|!
name|app
operator|.
name|getBundle
argument_list|()
operator|.
name|getSymbolicName
argument_list|()
operator|.
name|matches
argument_list|(
name|o
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
comment|// if the excludes-regex is set, the service is excluded when matching that regex.
return|return
name|extensionBundlesExcludesPattern
operator|!=
literal|null
operator|&&
name|extensionBundlesExcludesPattern
operator|.
name|matcher
argument_list|(
name|ref
operator|.
name|getBundle
argument_list|()
operator|.
name|getSymbolicName
argument_list|()
argument_list|)
operator|.
name|matches
argument_list|()
return|;
block|}
specifier|private
name|Version
name|getBundleVersion
parameter_list|(
name|Bundle
name|bundle
parameter_list|)
block|{
name|Dictionary
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|headers
init|=
name|bundle
operator|.
name|getHeaders
argument_list|()
decl_stmt|;
name|String
name|version
init|=
operator|(
name|String
operator|)
name|headers
operator|.
name|get
argument_list|(
name|Constants
operator|.
name|BUNDLE_VERSION
argument_list|)
decl_stmt|;
return|return
operator|(
name|version
operator|!=
literal|null
operator|)
condition|?
name|Version
operator|.
name|parseVersion
argument_list|(
name|version
argument_list|)
else|:
name|Version
operator|.
name|emptyVersion
return|;
block|}
specifier|private
name|void
name|registerBusAsService
parameter_list|()
block|{
name|BundleContext
name|context
init|=
name|bus
operator|.
name|getExtension
argument_list|(
name|BundleContext
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|context
operator|!=
literal|null
condition|)
block|{
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|props
operator|.
name|put
argument_list|(
name|CONTEXT_SYMBOLIC_NAME_PROPERTY
argument_list|,
name|context
operator|.
name|getBundle
argument_list|()
operator|.
name|getSymbolicName
argument_list|()
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
name|CONTEXT_VERSION_PROPERTY
argument_list|,
name|getBundleVersion
argument_list|(
name|context
operator|.
name|getBundle
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
name|CONTEXT_NAME_PROPERTY
argument_list|,
name|bus
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|service
operator|=
name|context
operator|.
name|registerService
argument_list|(
name|Bus
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|bus
argument_list|,
name|props
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

