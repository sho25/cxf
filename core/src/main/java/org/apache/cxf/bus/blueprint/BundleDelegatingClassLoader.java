begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|bus
operator|.
name|blueprint
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|AccessController
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedActionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Bundle
import|;
end_import

begin_comment
comment|/**  * A ClassLoader delegating to a given OSGi bundle.  */
end_comment

begin_class
specifier|public
class|class
name|BundleDelegatingClassLoader
extends|extends
name|ClassLoader
block|{
specifier|private
specifier|final
name|Bundle
name|bundle
decl_stmt|;
specifier|private
specifier|final
name|ClassLoader
name|classLoader
decl_stmt|;
specifier|public
name|BundleDelegatingClassLoader
parameter_list|(
name|Bundle
name|bundle
parameter_list|)
block|{
name|this
argument_list|(
name|bundle
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|BundleDelegatingClassLoader
parameter_list|(
name|Bundle
name|bundle
parameter_list|,
name|ClassLoader
name|classLoader
parameter_list|)
block|{
name|this
operator|.
name|bundle
operator|=
name|bundle
expr_stmt|;
name|this
operator|.
name|classLoader
operator|=
name|classLoader
expr_stmt|;
block|}
specifier|protected
name|Class
argument_list|<
name|?
argument_list|>
name|findClass
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
throws|throws
name|ClassNotFoundException
block|{
try|try
block|{
return|return
name|AccessController
operator|.
name|doPrivileged
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|()
block|{
specifier|public
name|Class
argument_list|<
name|?
argument_list|>
name|run
parameter_list|()
throws|throws
name|ClassNotFoundException
block|{
return|return
name|bundle
operator|.
name|loadClass
argument_list|(
name|name
argument_list|)
return|;
block|}
block|}
block|)
empty_stmt|;
block|}
catch|catch
parameter_list|(
name|PrivilegedActionException
name|e
parameter_list|)
block|{
name|Exception
name|cause
init|=
name|e
operator|.
name|getException
argument_list|()
decl_stmt|;
if|if
condition|(
name|cause
operator|instanceof
name|ClassNotFoundException
condition|)
block|{
throw|throw
operator|(
name|ClassNotFoundException
operator|)
name|cause
throw|;
block|}
throw|throw
operator|(
name|RuntimeException
operator|)
name|cause
throw|;
block|}
block|}
end_class

begin_function
specifier|protected
name|URL
name|findResource
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
block|{
name|URL
name|resource
init|=
name|AccessController
operator|.
name|doPrivileged
argument_list|(
operator|new
name|PrivilegedAction
argument_list|<
name|URL
argument_list|>
argument_list|()
block|{
specifier|public
name|URL
name|run
parameter_list|()
block|{
return|return
name|bundle
operator|.
name|getResource
argument_list|(
name|name
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
if|if
condition|(
name|classLoader
operator|!=
literal|null
operator|&&
name|resource
operator|==
literal|null
condition|)
block|{
name|resource
operator|=
name|classLoader
operator|.
name|getResource
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
return|return
name|resource
return|;
block|}
end_function

begin_function
specifier|protected
name|Enumeration
argument_list|<
name|URL
argument_list|>
name|findResources
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|Enumeration
argument_list|<
name|URL
argument_list|>
name|urls
decl_stmt|;
try|try
block|{
name|urls
operator|=
name|AccessController
operator|.
name|doPrivileged
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Enumeration
argument_list|<
name|URL
argument_list|>
argument_list|>
argument_list|()
block|{
specifier|public
name|Enumeration
argument_list|<
name|URL
argument_list|>
name|run
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|bundle
operator|.
name|getResources
argument_list|(
name|name
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PrivilegedActionException
name|e
parameter_list|)
block|{
name|Exception
name|cause
init|=
name|e
operator|.
name|getException
argument_list|()
decl_stmt|;
if|if
condition|(
name|cause
operator|instanceof
name|IOException
condition|)
block|{
throw|throw
operator|(
name|IOException
operator|)
name|cause
throw|;
block|}
throw|throw
operator|(
name|RuntimeException
operator|)
name|cause
throw|;
block|}
if|if
condition|(
name|urls
operator|==
literal|null
condition|)
block|{
name|urls
operator|=
name|Collections
operator|.
name|enumeration
argument_list|(
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|urls
return|;
block|}
end_function

begin_function
specifier|protected
name|Class
argument_list|<
name|?
argument_list|>
name|loadClass
parameter_list|(
name|String
name|name
parameter_list|,
name|boolean
name|resolve
parameter_list|)
throws|throws
name|ClassNotFoundException
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
decl_stmt|;
try|try
block|{
name|clazz
operator|=
name|findClass
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|cnfe
parameter_list|)
block|{
if|if
condition|(
name|classLoader
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|clazz
operator|=
name|classLoader
operator|.
name|loadClass
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ClassNotFoundException
argument_list|(
name|name
operator|+
literal|" from bundle "
operator|+
name|bundle
operator|.
name|getBundleId
argument_list|()
operator|+
literal|" ("
operator|+
name|bundle
operator|.
name|getSymbolicName
argument_list|()
operator|+
literal|")"
argument_list|,
name|cnfe
argument_list|)
throw|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|ClassNotFoundException
argument_list|(
name|name
operator|+
literal|" from bundle "
operator|+
name|bundle
operator|.
name|getBundleId
argument_list|()
operator|+
literal|" ("
operator|+
name|bundle
operator|.
name|getSymbolicName
argument_list|()
operator|+
literal|")"
argument_list|,
name|cnfe
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|resolve
condition|)
block|{
name|resolveClass
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
block|}
return|return
name|clazz
return|;
block|}
end_function

begin_function
specifier|public
name|Bundle
name|getBundle
parameter_list|()
block|{
return|return
name|bundle
return|;
block|}
end_function

unit|}
end_unit

