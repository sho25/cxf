begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|bus
operator|.
name|osgi
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|PropertyUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|configuration
operator|.
name|ConfiguredBeanLocator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|ServiceReference
import|;
end_import

begin_class
specifier|public
class|class
name|OSGiBeanLocator
implements|implements
name|ConfiguredBeanLocator
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|OSGiBeanLocator
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|COMPATIBLE_LOCATOR_PROP
init|=
literal|"org.apache.cxf.bus.osgi.locator"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|COMPATIBLE_LOCATOR_PROP_CHECK
init|=
name|COMPATIBLE_LOCATOR_PROP
operator|+
literal|".check"
decl_stmt|;
specifier|final
name|ConfiguredBeanLocator
name|cbl
decl_stmt|;
specifier|final
name|BundleContext
name|context
decl_stmt|;
specifier|private
name|boolean
name|checkCompatibleLocators
decl_stmt|;
specifier|public
name|OSGiBeanLocator
parameter_list|(
name|ConfiguredBeanLocator
name|c
parameter_list|,
name|BundleContext
name|ctx
parameter_list|)
block|{
name|cbl
operator|=
name|c
expr_stmt|;
name|context
operator|=
name|ctx
expr_stmt|;
name|Object
name|checkProp
init|=
name|context
operator|.
name|getProperty
argument_list|(
name|COMPATIBLE_LOCATOR_PROP_CHECK
argument_list|)
decl_stmt|;
name|checkCompatibleLocators
operator|=
name|checkProp
operator|==
literal|null
operator|||
name|PropertyUtils
operator|.
name|isTrue
argument_list|(
name|checkProp
argument_list|)
expr_stmt|;
block|}
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|getBeanOfType
parameter_list|(
name|String
name|name
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
block|{
return|return
name|cbl
operator|.
name|getBeanOfType
argument_list|(
name|name
argument_list|,
name|type
argument_list|)
return|;
block|}
specifier|public
parameter_list|<
name|T
parameter_list|>
name|Collection
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|getBeansOfType
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
block|{
name|Collection
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|ret
init|=
name|cbl
operator|.
name|getBeansOfType
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|ret
operator|==
literal|null
operator|||
name|ret
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|getBeansFromOsgiService
argument_list|(
name|type
argument_list|)
return|;
block|}
return|return
name|ret
return|;
block|}
specifier|private
parameter_list|<
name|T
parameter_list|>
name|List
argument_list|<
name|T
argument_list|>
name|getBeansFromOsgiService
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
block|{
name|List
argument_list|<
name|T
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
try|try
block|{
name|ServiceReference
argument_list|<
name|?
argument_list|>
index|[]
name|refs
init|=
name|context
operator|.
name|getServiceReferences
argument_list|(
name|type
operator|.
name|getName
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|refs
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|ServiceReference
argument_list|<
name|?
argument_list|>
name|r
range|:
name|refs
control|)
block|{
if|if
condition|(
name|type
operator|==
name|ClassLoader
operator|.
name|class
operator|&&
name|checkCompatibleLocators
operator|&&
operator|!
name|PropertyUtils
operator|.
name|isTrue
argument_list|(
name|r
operator|.
name|getProperty
argument_list|(
name|COMPATIBLE_LOCATOR_PROP
argument_list|)
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|list
operator|.
name|add
argument_list|(
name|type
operator|.
name|cast
argument_list|(
name|context
operator|.
name|getService
argument_list|(
name|r
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|//ignore, just don't support the OSGi services
name|LOG
operator|.
name|info
argument_list|(
literal|"Tried to find the Bean with type:"
operator|+
name|type
operator|+
literal|" from OSGi services and get error: "
operator|+
name|ex
argument_list|)
expr_stmt|;
block|}
return|return
name|list
return|;
block|}
specifier|public
parameter_list|<
name|T
parameter_list|>
name|boolean
name|loadBeansOfType
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|,
name|BeanLoaderListener
argument_list|<
name|T
argument_list|>
name|listener
parameter_list|)
block|{
return|return
name|cbl
operator|.
name|loadBeansOfType
argument_list|(
name|type
argument_list|,
name|listener
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|hasConfiguredPropertyValue
parameter_list|(
name|String
name|beanName
parameter_list|,
name|String
name|propertyName
parameter_list|,
name|String
name|value
parameter_list|)
block|{
return|return
name|cbl
operator|.
name|hasConfiguredPropertyValue
argument_list|(
name|beanName
argument_list|,
name|propertyName
argument_list|,
name|value
argument_list|)
return|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getBeanNamesOfType
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|type
parameter_list|)
block|{
return|return
name|cbl
operator|.
name|getBeanNamesOfType
argument_list|(
name|type
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|hasBeanOfName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|cbl
operator|.
name|hasBeanOfName
argument_list|(
name|name
argument_list|)
return|;
block|}
block|}
end_class

end_unit

