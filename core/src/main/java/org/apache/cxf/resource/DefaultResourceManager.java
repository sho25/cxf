begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|resource
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CopyOnWriteArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_class
specifier|public
class|class
name|DefaultResourceManager
implements|implements
name|ResourceManager
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|DefaultResourceManager
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|final
name|List
argument_list|<
name|ResourceResolver
argument_list|>
name|registeredResolvers
init|=
operator|new
name|CopyOnWriteArrayList
argument_list|<
name|ResourceResolver
argument_list|>
argument_list|()
decl_stmt|;
specifier|protected
name|boolean
name|firstCalled
decl_stmt|;
specifier|public
name|DefaultResourceManager
parameter_list|()
block|{
name|initializeDefaultResolvers
argument_list|()
expr_stmt|;
block|}
specifier|public
name|DefaultResourceManager
parameter_list|(
name|ResourceResolver
name|resolver
parameter_list|)
block|{
name|addResourceResolver
argument_list|(
name|resolver
argument_list|)
expr_stmt|;
block|}
specifier|public
name|DefaultResourceManager
parameter_list|(
name|List
argument_list|<
name|?
extends|extends
name|ResourceResolver
argument_list|>
name|resolvers
parameter_list|)
block|{
name|addResourceResolvers
argument_list|(
name|resolvers
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|onFirstResolve
parameter_list|()
block|{
comment|//nothing
name|firstCalled
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
specifier|final
parameter_list|<
name|T
parameter_list|>
name|T
name|resolveResource
parameter_list|(
name|String
name|name
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
block|{
return|return
name|findResource
argument_list|(
name|name
argument_list|,
name|type
argument_list|,
literal|false
argument_list|,
name|registeredResolvers
argument_list|)
return|;
block|}
specifier|public
specifier|final
parameter_list|<
name|T
parameter_list|>
name|T
name|resolveResource
parameter_list|(
name|String
name|name
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|,
name|List
argument_list|<
name|ResourceResolver
argument_list|>
name|resolvers
parameter_list|)
block|{
return|return
name|findResource
argument_list|(
name|name
argument_list|,
name|type
argument_list|,
literal|false
argument_list|,
name|resolvers
argument_list|)
return|;
block|}
specifier|public
specifier|final
name|InputStream
name|getResourceAsStream
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|findResource
argument_list|(
name|name
argument_list|,
name|InputStream
operator|.
name|class
argument_list|,
literal|true
argument_list|,
name|registeredResolvers
argument_list|)
return|;
block|}
specifier|public
specifier|final
name|void
name|addResourceResolver
parameter_list|(
name|ResourceResolver
name|resolver
parameter_list|)
block|{
if|if
condition|(
operator|!
name|registeredResolvers
operator|.
name|contains
argument_list|(
name|resolver
argument_list|)
condition|)
block|{
name|registeredResolvers
operator|.
name|add
argument_list|(
literal|0
argument_list|,
name|resolver
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|final
name|void
name|addResourceResolvers
parameter_list|(
name|Collection
argument_list|<
name|?
extends|extends
name|ResourceResolver
argument_list|>
name|resolvers
parameter_list|)
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|ResourceResolver
name|r
range|:
name|resolvers
control|)
block|{
while|while
condition|(
operator|!
name|registeredResolvers
operator|.
name|contains
argument_list|(
name|r
argument_list|)
condition|)
block|{
try|try
block|{
name|registeredResolvers
operator|.
name|add
argument_list|(
name|i
operator|++
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IndexOutOfBoundsException
name|e
parameter_list|)
block|{
name|i
operator|=
name|registeredResolvers
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
specifier|final
name|void
name|removeResourceResolver
parameter_list|(
name|ResourceResolver
name|resolver
parameter_list|)
block|{
if|if
condition|(
name|registeredResolvers
operator|.
name|contains
argument_list|(
name|resolver
argument_list|)
condition|)
block|{
name|registeredResolvers
operator|.
name|remove
argument_list|(
name|resolver
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|final
name|List
argument_list|<
name|ResourceResolver
argument_list|>
name|getResourceResolvers
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|registeredResolvers
argument_list|)
return|;
block|}
specifier|private
parameter_list|<
name|T
parameter_list|>
name|T
name|findResource
parameter_list|(
name|String
name|name
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|,
name|boolean
name|asStream
parameter_list|,
name|List
argument_list|<
name|ResourceResolver
argument_list|>
name|resolvers
parameter_list|)
block|{
if|if
condition|(
operator|!
name|firstCalled
condition|)
block|{
name|onFirstResolve
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|resolvers
operator|==
literal|null
condition|)
block|{
name|resolvers
operator|=
name|registeredResolvers
expr_stmt|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isLoggable
argument_list|(
name|Level
operator|.
name|FINE
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|fine
argument_list|(
literal|"resolving resource<"
operator|+
name|name
operator|+
literal|">"
operator|+
operator|(
name|asStream
condition|?
literal|" as stream "
else|:
literal|" type<"
operator|+
name|type
operator|+
literal|">"
operator|)
argument_list|)
expr_stmt|;
block|}
name|T
name|ret
init|=
literal|null
decl_stmt|;
for|for
control|(
name|ResourceResolver
name|rr
range|:
name|resolvers
control|)
block|{
if|if
condition|(
name|asStream
condition|)
block|{
name|ret
operator|=
name|type
operator|.
name|cast
argument_list|(
name|rr
operator|.
name|getAsStream
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|rr
operator|.
name|resolve
argument_list|(
name|name
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ret
operator|!=
literal|null
condition|)
block|{
break|break;
block|}
block|}
return|return
name|ret
return|;
block|}
specifier|private
name|void
name|initializeDefaultResolvers
parameter_list|()
block|{
name|addResourceResolver
argument_list|(
operator|new
name|ClasspathResolver
argument_list|()
argument_list|)
expr_stmt|;
name|addResourceResolver
argument_list|(
operator|new
name|ClassLoaderResolver
argument_list|(
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

