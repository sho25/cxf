begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
package|;
end_package

begin_import
import|import
name|java
operator|.
name|beans
operator|.
name|Introspector
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Member
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Modifier
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|validation
operator|.
name|constraints
operator|.
name|NotNull
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|core
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|AnnotationIntrospector
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|introspect
operator|.
name|AnnotatedMember
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|introspect
operator|.
name|AnnotatedMethod
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|type
operator|.
name|TypeFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_class
specifier|public
class|class
name|BeanValidationAnnotationIntrospector
extends|extends
name|AnnotationIntrospector
block|{
specifier|private
specifier|static
specifier|final
specifier|transient
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|BeanValidationAnnotationIntrospector
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|final
name|TypeFactory
name|typeFactory
decl_stmt|;
specifier|public
name|BeanValidationAnnotationIntrospector
parameter_list|(
name|TypeFactory
name|typeFactory
parameter_list|)
block|{
name|this
operator|.
name|typeFactory
operator|=
operator|(
name|typeFactory
operator|==
literal|null
operator|)
condition|?
name|TypeFactory
operator|.
name|defaultInstance
argument_list|()
else|:
name|typeFactory
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Version
name|version
parameter_list|()
block|{
return|return
operator|new
name|Version
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|""
argument_list|,
literal|"cxf"
argument_list|,
literal|"json-schema-mbean"
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasIgnoreMarker
parameter_list|(
name|AnnotatedMember
name|m
parameter_list|)
block|{
name|Member
name|member
init|=
name|m
operator|.
name|getMember
argument_list|()
decl_stmt|;
name|int
name|modifiers
init|=
name|member
operator|.
name|getModifiers
argument_list|()
decl_stmt|;
if|if
condition|(
name|Modifier
operator|.
name|isTransient
argument_list|(
name|modifiers
argument_list|)
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isLoggable
argument_list|(
name|Level
operator|.
name|FINE
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|fine
argument_list|(
literal|"Ignoring transient member "
operator|+
name|m
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|m
operator|instanceof
name|AnnotatedMethod
condition|)
block|{
name|AnnotatedMethod
name|method
init|=
operator|(
name|AnnotatedMethod
operator|)
name|m
decl_stmt|;
name|String
name|methodName
init|=
name|method
operator|.
name|getName
argument_list|()
decl_stmt|;
comment|// lets see if there is a transient field of the same name as the getter
if|if
condition|(
name|methodName
operator|.
name|startsWith
argument_list|(
literal|"get"
argument_list|)
operator|&&
name|method
operator|.
name|getParameterCount
argument_list|()
operator|==
literal|0
condition|)
block|{
name|String
name|fieldName
init|=
name|Introspector
operator|.
name|decapitalize
argument_list|(
name|methodName
operator|.
name|substring
argument_list|(
literal|3
argument_list|)
argument_list|)
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|declaringClass
init|=
name|method
operator|.
name|getDeclaringClass
argument_list|()
decl_stmt|;
name|Field
name|field
init|=
name|findField
argument_list|(
name|fieldName
argument_list|,
name|declaringClass
argument_list|)
decl_stmt|;
if|if
condition|(
name|field
operator|!=
literal|null
condition|)
block|{
name|int
name|fieldModifiers
init|=
name|field
operator|.
name|getModifiers
argument_list|()
decl_stmt|;
if|if
condition|(
name|Modifier
operator|.
name|isTransient
argument_list|(
name|fieldModifiers
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|fine
argument_list|(
literal|"Ignoring member "
operator|+
name|m
operator|+
literal|" due to transient field called "
operator|+
name|fieldName
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
block|}
block|}
return|return
name|super
operator|.
name|hasIgnoreMarker
argument_list|(
name|m
argument_list|)
return|;
block|}
specifier|protected
specifier|static
name|Field
name|findField
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|declaringClass
parameter_list|)
block|{
try|try
block|{
return|return
name|declaringClass
operator|.
name|getDeclaredField
argument_list|(
name|fieldName
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchFieldException
name|e
parameter_list|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|superclass
init|=
name|declaringClass
operator|.
name|getSuperclass
argument_list|()
decl_stmt|;
if|if
condition|(
name|superclass
operator|!=
literal|null
operator|&&
name|superclass
operator|!=
name|declaringClass
condition|)
block|{
return|return
name|findField
argument_list|(
name|fieldName
argument_list|,
name|superclass
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|Boolean
name|hasRequiredMarker
parameter_list|(
name|AnnotatedMember
name|m
parameter_list|)
block|{
name|NotNull
name|annotation
init|=
name|m
operator|.
name|getAnnotation
argument_list|(
name|NotNull
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|annotation
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|Boolean
operator|.
name|TRUE
return|;
block|}
block|}
end_class

end_unit

