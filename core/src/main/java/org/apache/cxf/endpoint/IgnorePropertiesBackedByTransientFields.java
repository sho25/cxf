begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
package|;
end_package

begin_import
import|import
name|java
operator|.
name|beans
operator|.
name|Introspector
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Member
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Modifier
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|annotation
operator|.
name|JsonAutoDetect
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|annotation
operator|.
name|PropertyAccessor
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|introspect
operator|.
name|AnnotatedField
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|introspect
operator|.
name|AnnotatedMember
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|introspect
operator|.
name|AnnotatedMethod
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|introspect
operator|.
name|VisibilityChecker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_class
specifier|public
class|class
name|IgnorePropertiesBackedByTransientFields
implements|implements
name|VisibilityChecker
argument_list|<
name|IgnorePropertiesBackedByTransientFields
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
specifier|transient
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|IgnorePropertiesBackedByTransientFields
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|VisibilityChecker
argument_list|<
name|?
argument_list|>
name|defaultChecker
decl_stmt|;
specifier|public
name|IgnorePropertiesBackedByTransientFields
parameter_list|(
name|VisibilityChecker
argument_list|<
name|?
argument_list|>
name|defaultChecker
parameter_list|)
block|{
name|this
operator|.
name|defaultChecker
operator|=
name|defaultChecker
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isGetterVisible
parameter_list|(
name|AnnotatedMethod
name|method
parameter_list|)
block|{
name|boolean
name|answer
init|=
name|defaultChecker
operator|.
name|isGetterVisible
argument_list|(
name|method
argument_list|)
decl_stmt|;
if|if
condition|(
name|answer
condition|)
block|{
name|answer
operator|=
name|isGetterMethodWithFieldVisible
argument_list|(
name|method
argument_list|,
name|getGetterFieldName
argument_list|(
name|method
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|method
operator|.
name|getDeclaringClass
argument_list|()
argument_list|)
operator|&&
name|isGetterMethodRetItselfVisible
argument_list|(
name|method
operator|.
name|getMember
argument_list|()
argument_list|,
name|method
operator|.
name|getDeclaringClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isGetterVisible
parameter_list|(
name|Method
name|method
parameter_list|)
block|{
name|boolean
name|answer
init|=
name|defaultChecker
operator|.
name|isGetterVisible
argument_list|(
name|method
argument_list|)
decl_stmt|;
if|if
condition|(
name|answer
condition|)
block|{
name|answer
operator|=
name|isGetterMethodWithFieldVisible
argument_list|(
name|method
argument_list|,
name|getGetterFieldName
argument_list|(
name|method
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|method
operator|.
name|getDeclaringClass
argument_list|()
argument_list|)
operator|&&
name|isGetterMethodRetItselfVisible
argument_list|(
name|method
argument_list|,
name|method
operator|.
name|getDeclaringClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isIsGetterVisible
parameter_list|(
name|AnnotatedMethod
name|method
parameter_list|)
block|{
name|boolean
name|answer
init|=
name|defaultChecker
operator|.
name|isIsGetterVisible
argument_list|(
name|method
argument_list|)
decl_stmt|;
if|if
condition|(
name|answer
condition|)
block|{
name|answer
operator|=
name|isGetterMethodWithFieldVisible
argument_list|(
name|method
argument_list|,
name|getIsGetterFieldName
argument_list|(
name|method
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|method
operator|.
name|getDeclaringClass
argument_list|()
argument_list|)
operator|&&
name|isGetterMethodRetItselfVisible
argument_list|(
name|method
operator|.
name|getMember
argument_list|()
argument_list|,
name|method
operator|.
name|getDeclaringClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isIsGetterVisible
parameter_list|(
name|Method
name|method
parameter_list|)
block|{
name|boolean
name|answer
init|=
name|defaultChecker
operator|.
name|isIsGetterVisible
argument_list|(
name|method
argument_list|)
decl_stmt|;
if|if
condition|(
name|answer
condition|)
block|{
name|answer
operator|=
name|isGetterMethodWithFieldVisible
argument_list|(
name|method
argument_list|,
name|getIsGetterFieldName
argument_list|(
name|method
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|method
operator|.
name|getDeclaringClass
argument_list|()
argument_list|)
operator|&&
name|isGetterMethodRetItselfVisible
argument_list|(
name|method
argument_list|,
name|method
operator|.
name|getDeclaringClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|answer
return|;
block|}
specifier|protected
name|String
name|getIsGetterFieldName
parameter_list|(
name|String
name|methodName
parameter_list|)
block|{
return|return
name|Introspector
operator|.
name|decapitalize
argument_list|(
name|methodName
operator|.
name|substring
argument_list|(
literal|2
argument_list|)
argument_list|)
return|;
block|}
specifier|protected
name|String
name|getGetterFieldName
parameter_list|(
name|String
name|methodName
parameter_list|)
block|{
return|return
name|Introspector
operator|.
name|decapitalize
argument_list|(
name|methodName
operator|.
name|substring
argument_list|(
literal|3
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Returns false if the getter method has a field of the same name which is transient      * @return      */
specifier|protected
name|boolean
name|isGetterMethodWithFieldVisible
parameter_list|(
name|Object
name|method
parameter_list|,
name|String
name|fieldName
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|declaringClass
parameter_list|)
block|{
name|Field
name|field
init|=
name|findField
argument_list|(
name|fieldName
argument_list|,
name|declaringClass
argument_list|)
decl_stmt|;
if|if
condition|(
name|field
operator|!=
literal|null
condition|)
block|{
name|int
name|fieldModifiers
init|=
name|field
operator|.
name|getModifiers
argument_list|()
decl_stmt|;
if|if
condition|(
name|Modifier
operator|.
name|isTransient
argument_list|(
name|fieldModifiers
argument_list|)
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isLoggable
argument_list|(
name|Level
operator|.
name|FINE
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|fine
argument_list|(
literal|"Ignoring getter "
operator|+
name|method
operator|+
literal|" due to transient field called "
operator|+
name|fieldName
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
comment|/**      * Returns false if the getter method just return the declaringClass itself to avoid the      * recusive dead loop      * @return      */
specifier|protected
name|boolean
name|isGetterMethodRetItselfVisible
parameter_list|(
name|Method
name|method
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|declaringClass
parameter_list|)
block|{
if|if
condition|(
name|method
operator|!=
literal|null
operator|&&
name|method
operator|.
name|getReturnType
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|declaringClass
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isLoggable
argument_list|(
name|Level
operator|.
name|FINE
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|fine
argument_list|(
literal|"Ignoring getter "
operator|+
name|method
operator|+
literal|" due to return same type as declaringClass itself"
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
comment|// Delegated methods
comment|//-------------------------------------------------------------------------
annotation|@
name|Override
specifier|public
name|boolean
name|isCreatorVisible
parameter_list|(
name|AnnotatedMember
name|m
parameter_list|)
block|{
return|return
name|defaultChecker
operator|.
name|isCreatorVisible
argument_list|(
name|m
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isCreatorVisible
parameter_list|(
name|Member
name|m
parameter_list|)
block|{
return|return
name|defaultChecker
operator|.
name|isCreatorVisible
argument_list|(
name|m
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isFieldVisible
parameter_list|(
name|AnnotatedField
name|f
parameter_list|)
block|{
return|return
name|defaultChecker
operator|.
name|isFieldVisible
argument_list|(
name|f
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isFieldVisible
parameter_list|(
name|Field
name|f
parameter_list|)
block|{
return|return
name|defaultChecker
operator|.
name|isFieldVisible
argument_list|(
name|f
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isSetterVisible
parameter_list|(
name|AnnotatedMethod
name|m
parameter_list|)
block|{
return|return
name|defaultChecker
operator|.
name|isSetterVisible
argument_list|(
name|m
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isSetterVisible
parameter_list|(
name|Method
name|m
parameter_list|)
block|{
return|return
name|defaultChecker
operator|.
name|isSetterVisible
argument_list|(
name|m
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|IgnorePropertiesBackedByTransientFields
name|with
parameter_list|(
name|JsonAutoDetect
name|ann
parameter_list|)
block|{
return|return
name|castToPropertiesBackedByTransientFields
argument_list|(
name|defaultChecker
operator|.
name|with
argument_list|(
name|ann
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|IgnorePropertiesBackedByTransientFields
name|with
parameter_list|(
name|JsonAutoDetect
operator|.
name|Visibility
name|v
parameter_list|)
block|{
return|return
name|castToPropertiesBackedByTransientFields
argument_list|(
name|defaultChecker
operator|.
name|with
argument_list|(
name|v
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|IgnorePropertiesBackedByTransientFields
name|withCreatorVisibility
parameter_list|(
name|JsonAutoDetect
operator|.
name|Visibility
name|v
parameter_list|)
block|{
return|return
name|castToPropertiesBackedByTransientFields
argument_list|(
name|defaultChecker
operator|.
name|withCreatorVisibility
argument_list|(
name|v
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|IgnorePropertiesBackedByTransientFields
name|withFieldVisibility
parameter_list|(
name|JsonAutoDetect
operator|.
name|Visibility
name|v
parameter_list|)
block|{
return|return
name|castToPropertiesBackedByTransientFields
argument_list|(
name|defaultChecker
operator|.
name|withFieldVisibility
argument_list|(
name|v
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|IgnorePropertiesBackedByTransientFields
name|withGetterVisibility
parameter_list|(
name|JsonAutoDetect
operator|.
name|Visibility
name|v
parameter_list|)
block|{
return|return
name|castToPropertiesBackedByTransientFields
argument_list|(
name|defaultChecker
operator|.
name|withGetterVisibility
argument_list|(
name|v
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|IgnorePropertiesBackedByTransientFields
name|withIsGetterVisibility
parameter_list|(
name|JsonAutoDetect
operator|.
name|Visibility
name|v
parameter_list|)
block|{
return|return
name|castToPropertiesBackedByTransientFields
argument_list|(
name|defaultChecker
operator|.
name|withIsGetterVisibility
argument_list|(
name|v
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|IgnorePropertiesBackedByTransientFields
name|withSetterVisibility
parameter_list|(
name|JsonAutoDetect
operator|.
name|Visibility
name|v
parameter_list|)
block|{
return|return
name|castToPropertiesBackedByTransientFields
argument_list|(
name|defaultChecker
operator|.
name|withSetterVisibility
argument_list|(
name|v
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|IgnorePropertiesBackedByTransientFields
name|withVisibility
parameter_list|(
name|PropertyAccessor
name|method
parameter_list|,
name|JsonAutoDetect
operator|.
name|Visibility
name|v
parameter_list|)
block|{
return|return
name|castToPropertiesBackedByTransientFields
argument_list|(
name|defaultChecker
operator|.
name|withVisibility
argument_list|(
name|method
argument_list|,
name|v
argument_list|)
argument_list|)
return|;
block|}
specifier|protected
name|IgnorePropertiesBackedByTransientFields
name|castToPropertiesBackedByTransientFields
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|instanceof
name|IgnorePropertiesBackedByTransientFields
condition|)
block|{
return|return
operator|(
name|IgnorePropertiesBackedByTransientFields
operator|)
name|value
return|;
block|}
else|else
block|{
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|value
operator|instanceof
name|VisibilityChecker
argument_list|<
name|?
argument_list|>
condition|)
block|{
return|return
operator|new
name|IgnorePropertiesBackedByTransientFields
argument_list|(
operator|(
name|VisibilityChecker
argument_list|<
name|?
argument_list|>
operator|)
name|value
argument_list|)
return|;
block|}
name|LOG
operator|.
name|warning
argument_list|(
literal|"Could not convert value to "
operator|+
literal|"IgnorePropertiesBackedByTransientFields as was "
operator|+
name|value
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" "
operator|+
name|value
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
specifier|protected
specifier|static
name|Field
name|findField
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|declaringClass
parameter_list|)
block|{
try|try
block|{
return|return
name|declaringClass
operator|.
name|getDeclaredField
argument_list|(
name|fieldName
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchFieldException
name|e
parameter_list|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|superclass
init|=
name|declaringClass
operator|.
name|getSuperclass
argument_list|()
decl_stmt|;
if|if
condition|(
name|superclass
operator|!=
literal|null
operator|&&
name|superclass
operator|!=
name|declaringClass
condition|)
block|{
return|return
name|findField
argument_list|(
name|fieldName
argument_list|,
name|superclass
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
block|}
end_class

end_unit

