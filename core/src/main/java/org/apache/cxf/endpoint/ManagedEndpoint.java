begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Dictionary
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|JMException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|ObjectName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|JAXBContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|bind
operator|.
name|Marshaller
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|ObjectMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|Bus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|PackageUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|feature
operator|.
name|Feature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|management
operator|.
name|ManagedComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|management
operator|.
name|ManagementConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|management
operator|.
name|annotation
operator|.
name|ManagedAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|management
operator|.
name|annotation
operator|.
name|ManagedOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|management
operator|.
name|annotation
operator|.
name|ManagedResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|BindingInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|BindingOperationInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|MessagePartInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|ServiceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|FrameworkUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|ServiceReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|cm
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|cm
operator|.
name|ConfigurationAdmin
import|;
end_import

begin_class
annotation|@
name|ManagedResource
argument_list|(
name|componentName
operator|=
literal|"Endpoint"
argument_list|,
name|description
operator|=
literal|"Responsible for managing server instances."
argument_list|)
specifier|public
class|class
name|ManagedEndpoint
implements|implements
name|ManagedComponent
implements|,
name|ServerLifeCycleListener
block|{
specifier|public
specifier|static
specifier|final
name|String
name|ENDPOINT_NAME
init|=
literal|"managed.endpoint.name"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|SERVICE_NAME
init|=
literal|"managed.service.name"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|INDENTION
init|=
literal|"    "
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|ManagedEndpoint
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|String
name|eol
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"line.separator"
argument_list|)
decl_stmt|;
specifier|private
name|Bus
name|bus
decl_stmt|;
specifier|private
name|Endpoint
name|endpoint
decl_stmt|;
specifier|private
name|Server
name|server
decl_stmt|;
specifier|private
enum|enum
name|State
block|{
name|CREATED
block|,
name|STARTED
block|,
name|STOPPED
block|}
empty_stmt|;
specifier|private
name|State
name|state
init|=
name|State
operator|.
name|CREATED
decl_stmt|;
specifier|private
name|ConfigurationAdmin
name|configurationAdmin
decl_stmt|;
specifier|public
name|ManagedEndpoint
parameter_list|(
name|Bus
name|b
parameter_list|,
name|Endpoint
name|ep
parameter_list|,
name|Server
name|s
parameter_list|)
block|{
name|bus
operator|=
name|b
expr_stmt|;
name|endpoint
operator|=
name|ep
expr_stmt|;
name|server
operator|=
name|s
expr_stmt|;
block|}
annotation|@
name|ManagedOperation
specifier|public
name|void
name|start
parameter_list|()
block|{
if|if
condition|(
name|state
operator|==
name|State
operator|.
name|STARTED
condition|)
block|{
return|return;
block|}
name|ServerLifeCycleManager
name|mgr
init|=
name|bus
operator|.
name|getExtension
argument_list|(
name|ServerLifeCycleManager
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|mgr
operator|!=
literal|null
condition|)
block|{
name|mgr
operator|.
name|registerListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
name|server
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
annotation|@
name|ManagedOperation
specifier|public
name|void
name|stop
parameter_list|()
block|{
name|server
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
annotation|@
name|ManagedOperation
specifier|public
name|void
name|destroy
parameter_list|()
block|{
name|server
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
annotation|@
name|ManagedAttribute
argument_list|(
name|description
operator|=
literal|"Address Attribute"
argument_list|,
name|currencyTimeLimit
operator|=
literal|60
argument_list|)
specifier|public
name|String
name|getAddress
parameter_list|()
block|{
return|return
name|endpoint
operator|.
name|getEndpointInfo
argument_list|()
operator|.
name|getAddress
argument_list|()
return|;
block|}
annotation|@
name|ManagedAttribute
argument_list|(
name|description
operator|=
literal|"TransportId Attribute"
argument_list|,
name|currencyTimeLimit
operator|=
literal|60
argument_list|)
specifier|public
name|String
name|getTransportId
parameter_list|()
block|{
return|return
name|endpoint
operator|.
name|getEndpointInfo
argument_list|()
operator|.
name|getTransportId
argument_list|()
return|;
block|}
annotation|@
name|ManagedAttribute
argument_list|(
name|description
operator|=
literal|"Server State"
argument_list|)
specifier|public
name|String
name|getState
parameter_list|()
block|{
return|return
name|state
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|ManagedAttribute
argument_list|(
name|description
operator|=
literal|"The cxf servlet context"
argument_list|,
name|currencyTimeLimit
operator|=
literal|60
argument_list|)
specifier|public
name|String
name|getServletContext
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isInOSGi
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|FINE
argument_list|,
literal|"Not In OSGi."
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
comment|//not in OSGi container
block|}
name|String
name|ret
init|=
literal|"/cxf"
decl_stmt|;
comment|//if can't get it from configAdmin use the default value
if|if
condition|(
name|getConfigurationAdmin
argument_list|()
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|Configuration
name|configuration
init|=
name|getConfigurationAdmin
argument_list|()
operator|.
name|getConfiguration
argument_list|(
literal|"org.apache.cxf.osgi"
argument_list|)
decl_stmt|;
if|if
condition|(
name|configuration
operator|!=
literal|null
condition|)
block|{
name|Dictionary
name|properties
init|=
name|configuration
operator|.
name|getProperties
argument_list|()
decl_stmt|;
if|if
condition|(
name|properties
operator|!=
literal|null
condition|)
block|{
name|String
name|servletContext
init|=
operator|(
name|String
operator|)
name|configuration
operator|.
name|getProperties
argument_list|()
operator|.
name|get
argument_list|(
literal|"org.apache.cxf.servlet.context"
argument_list|)
decl_stmt|;
if|if
condition|(
name|servletContext
operator|!=
literal|null
condition|)
block|{
name|ret
operator|=
name|servletContext
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
literal|"getServletContext failed."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|ret
return|;
block|}
annotation|@
name|ManagedAttribute
argument_list|(
name|description
operator|=
literal|"if the endpoint has swagger doc or not"
argument_list|,
name|currencyTimeLimit
operator|=
literal|60
argument_list|)
specifier|public
name|boolean
name|isSwagger
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isWADL
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|List
argument_list|<
name|Feature
argument_list|>
name|features
init|=
name|server
operator|.
name|getEndpoint
argument_list|()
operator|.
name|getActiveFeatures
argument_list|()
decl_stmt|;
if|if
condition|(
name|features
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Feature
name|feature
range|:
name|features
control|)
block|{
if|if
condition|(
name|feature
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"SwaggerFeature"
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|ManagedAttribute
argument_list|(
name|description
operator|=
literal|"if the endpoint has wsdl doc or not"
argument_list|,
name|currencyTimeLimit
operator|=
literal|60
argument_list|)
specifier|public
name|boolean
name|isWSDL
parameter_list|()
block|{
return|return
operator|!
name|isWADL
argument_list|()
return|;
block|}
annotation|@
name|ManagedAttribute
argument_list|(
name|description
operator|=
literal|"if the endpoint has WADL doc or not"
argument_list|,
name|currencyTimeLimit
operator|=
literal|60
argument_list|)
specifier|public
name|boolean
name|isWADL
parameter_list|()
block|{
if|if
condition|(
name|endpoint
operator|.
name|getEndpointInfo
argument_list|()
operator|.
name|getBinding
argument_list|()
operator|.
name|getBindingId
argument_list|()
operator|.
name|equals
argument_list|(
literal|"http://apache.org/cxf/binding/jaxrs"
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|ManagedOperation
argument_list|(
name|description
operator|=
literal|"get the JSON schema from a given endpoint"
argument_list|,
name|currencyTimeLimit
operator|=
literal|60
argument_list|)
specifier|public
name|String
name|getJSONSchema
parameter_list|()
block|{
name|String
name|ret
init|=
literal|""
decl_stmt|;
if|if
condition|(
operator|!
name|isWSDL
argument_list|()
condition|)
block|{
name|Set
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|resourceTypes
init|=
operator|(
name|Set
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
operator|)
name|endpoint
operator|.
name|get
argument_list|(
literal|"jaxrs.resource.types"
argument_list|)
decl_stmt|;
if|if
condition|(
name|resourceTypes
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|ret
operator|=
name|ret
operator|+
name|getBeginIndentionWithReturn
argument_list|(
literal|1
argument_list|)
operator|+
literal|"\""
operator|+
literal|"definitions"
operator|+
literal|"\" "
operator|+
literal|" : {"
operator|+
name|getEol
argument_list|()
expr_stmt|;
for|for
control|(
name|Class
argument_list|<
name|?
argument_list|>
name|cls
range|:
name|resourceTypes
control|)
block|{
if|if
condition|(
name|JsonSchemaLookup
operator|.
name|getSingleton
argument_list|()
operator|.
name|getSchemaForClass
argument_list|(
name|cls
argument_list|)
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|ret
operator|=
name|ret
operator|+
name|getIndention
argument_list|(
literal|2
argument_list|)
operator|+
literal|"\""
operator|+
name|cls
operator|.
name|getName
argument_list|()
operator|+
literal|"\" : "
operator|+
name|getEol
argument_list|()
expr_stmt|;
name|ret
operator|=
name|ret
operator|+
name|rollbackEol
argument_list|(
name|reformatIndent
argument_list|(
name|JsonSchemaLookup
operator|.
name|getSingleton
argument_list|()
operator|.
name|getSchemaForClass
argument_list|(
name|cls
argument_list|)
argument_list|,
literal|3
argument_list|)
argument_list|)
operator|+
literal|","
operator|+
name|getEol
argument_list|()
expr_stmt|;
block|}
block|}
name|ret
operator|=
name|rollbackColon
argument_list|(
name|rollbackEol
argument_list|(
name|ret
argument_list|)
argument_list|)
operator|+
name|getEndIndentionWithReturn
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|ret
operator|=
name|ret
operator|+
name|getEndIndentionWithReturn
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
literal|"getJSONSchema failed."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
try|try
block|{
for|for
control|(
name|ServiceInfo
name|serviceInfo
range|:
name|endpoint
operator|.
name|getService
argument_list|()
operator|.
name|getServiceInfos
argument_list|()
control|)
block|{
for|for
control|(
name|BindingInfo
name|bindingInfo
range|:
name|serviceInfo
operator|.
name|getBindings
argument_list|()
control|)
block|{
name|ret
operator|=
name|ret
operator|+
name|getBeginIndentionWithReturn
argument_list|(
literal|1
argument_list|)
operator|+
literal|"\"operations\" : "
operator|+
name|getBeginIndentionWithReturn
argument_list|(
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|BindingOperationInfo
name|boi
range|:
name|bindingInfo
operator|.
name|getOperations
argument_list|()
control|)
block|{
name|ret
operator|=
name|ret
operator|+
name|getIndention
argument_list|(
literal|2
argument_list|)
operator|+
literal|"\""
operator|+
name|boi
operator|.
name|getOperationInfo
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
operator|+
literal|"\" "
operator|+
literal|" : "
operator|+
name|getBeginIndentionWithReturn
argument_list|(
literal|3
argument_list|)
expr_stmt|;
if|if
condition|(
name|boi
operator|.
name|getInput
argument_list|()
operator|!=
literal|null
operator|&&
name|boi
operator|.
name|getInput
argument_list|()
operator|.
name|getMessageParts
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|ret
operator|=
name|ret
operator|+
literal|"\"input\" : "
operator|+
name|getBeginIndentionWithReturn
argument_list|(
literal|4
argument_list|)
operator|+
literal|"\"type\" : \""
operator|+
name|boi
operator|.
name|getOperationInfo
argument_list|()
operator|.
name|getInput
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
operator|+
literal|"\""
operator|+
name|getEndIndentionWithReturn
argument_list|(
literal|3
argument_list|)
operator|+
literal|","
operator|+
name|getEol
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|boi
operator|.
name|getOutput
argument_list|()
operator|!=
literal|null
operator|&&
name|boi
operator|.
name|getOutput
argument_list|()
operator|.
name|getMessageParts
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|ret
operator|=
name|ret
operator|+
name|getIndention
argument_list|(
literal|3
argument_list|)
operator|+
literal|"\"output\" : "
operator|+
name|getBeginIndentionWithReturn
argument_list|(
literal|4
argument_list|)
operator|+
literal|"\"type\" : \""
operator|+
name|boi
operator|.
name|getOperationInfo
argument_list|()
operator|.
name|getOutput
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
operator|+
literal|"\""
operator|+
name|getEndIndentionWithReturn
argument_list|(
literal|3
argument_list|)
expr_stmt|;
block|}
name|ret
operator|=
name|rollbackColon
argument_list|(
name|rollbackEol
argument_list|(
name|ret
argument_list|)
argument_list|)
operator|+
name|getEndIndentionWithReturn
argument_list|(
literal|2
argument_list|)
operator|+
literal|","
operator|+
name|getEol
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|ret
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|ret
operator|=
name|rollbackColon
argument_list|(
name|rollbackEol
argument_list|(
name|ret
argument_list|)
argument_list|)
operator|+
name|getEndIndentionWithReturn
argument_list|(
literal|1
argument_list|)
operator|+
literal|","
expr_stmt|;
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|addedType
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|ret
operator|=
name|ret
operator|+
name|getEol
argument_list|()
operator|+
name|getIndention
argument_list|(
literal|1
argument_list|)
operator|+
literal|"\"definitions\" : "
operator|+
name|getBeginIndentionWithReturn
argument_list|(
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|BindingOperationInfo
name|boi
range|:
name|bindingInfo
operator|.
name|getOperations
argument_list|()
control|)
block|{
if|if
condition|(
name|boi
operator|.
name|getInput
argument_list|()
operator|!=
literal|null
operator|&&
name|boi
operator|.
name|getInput
argument_list|()
operator|.
name|getMessageParts
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|addedType
operator|.
name|contains
argument_list|(
name|boi
operator|.
name|getOperationInfo
argument_list|()
operator|.
name|getInput
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
condition|)
block|{
name|ret
operator|=
name|ret
operator|+
name|getIndention
argument_list|(
literal|2
argument_list|)
operator|+
literal|"\""
operator|+
name|boi
operator|.
name|getOperationInfo
argument_list|()
operator|.
name|getInput
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
operator|+
literal|"\" : "
operator|+
name|getBeginIndentionWithReturnForList
argument_list|(
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|MessagePartInfo
name|mpi
range|:
name|boi
operator|.
name|getInput
argument_list|()
operator|.
name|getMessageParts
argument_list|()
control|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|partClass
init|=
name|mpi
operator|.
name|getTypeClass
argument_list|()
decl_stmt|;
if|if
condition|(
name|partClass
operator|!=
literal|null
condition|)
block|{
name|ret
operator|=
name|ret
operator|+
name|rollbackEol
argument_list|(
name|reformatIndent
argument_list|(
name|JsonSchemaLookup
operator|.
name|getSingleton
argument_list|()
operator|.
name|getSchemaForClass
argument_list|(
name|partClass
argument_list|)
argument_list|,
literal|3
argument_list|)
argument_list|)
operator|+
literal|","
operator|+
name|getEol
argument_list|()
expr_stmt|;
block|}
block|}
name|ret
operator|=
name|rollbackColon
argument_list|(
name|rollbackEol
argument_list|(
name|ret
argument_list|)
argument_list|)
operator|+
name|getEndIndentionWithReturnForList
argument_list|(
literal|2
argument_list|)
operator|+
literal|","
operator|+
name|getEol
argument_list|()
expr_stmt|;
name|addedType
operator|.
name|add
argument_list|(
name|boi
operator|.
name|getOperationInfo
argument_list|()
operator|.
name|getInput
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|boi
operator|.
name|getOutput
argument_list|()
operator|!=
literal|null
operator|&&
name|boi
operator|.
name|getOutput
argument_list|()
operator|.
name|getMessageParts
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|addedType
operator|.
name|contains
argument_list|(
name|boi
operator|.
name|getOperationInfo
argument_list|()
operator|.
name|getOutput
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
condition|)
block|{
name|ret
operator|=
name|ret
operator|+
name|getIndention
argument_list|(
literal|2
argument_list|)
operator|+
literal|"\""
operator|+
name|boi
operator|.
name|getOperationInfo
argument_list|()
operator|.
name|getOutput
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
operator|+
literal|"\" : "
operator|+
name|getBeginIndentionWithReturnForList
argument_list|(
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|MessagePartInfo
name|mpi
range|:
name|boi
operator|.
name|getOutput
argument_list|()
operator|.
name|getMessageParts
argument_list|()
control|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|partClass
init|=
name|mpi
operator|.
name|getTypeClass
argument_list|()
decl_stmt|;
if|if
condition|(
name|partClass
operator|!=
literal|null
condition|)
block|{
name|ret
operator|=
name|ret
operator|+
name|rollbackEol
argument_list|(
name|reformatIndent
argument_list|(
name|JsonSchemaLookup
operator|.
name|getSingleton
argument_list|()
operator|.
name|getSchemaForClass
argument_list|(
name|partClass
argument_list|)
argument_list|,
literal|3
argument_list|)
argument_list|)
operator|+
literal|","
operator|+
name|getEol
argument_list|()
expr_stmt|;
block|}
block|}
name|ret
operator|=
name|rollbackColon
argument_list|(
name|rollbackEol
argument_list|(
name|ret
argument_list|)
argument_list|)
operator|+
name|getEndIndentionWithReturnForList
argument_list|(
literal|2
argument_list|)
operator|+
literal|","
operator|+
name|getEol
argument_list|()
expr_stmt|;
name|addedType
operator|.
name|add
argument_list|(
name|boi
operator|.
name|getOperationInfo
argument_list|()
operator|.
name|getOutput
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|ret
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|ret
operator|=
name|rollbackColon
argument_list|(
name|rollbackEol
argument_list|(
name|ret
argument_list|)
argument_list|)
operator|+
name|getEndIndentionWithReturn
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ret
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|ret
operator|=
name|rollbackColon
argument_list|(
name|ret
argument_list|)
operator|+
name|getEndIndentionWithReturn
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
literal|"getJSONSchema failed."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|ret
return|;
block|}
annotation|@
name|ManagedOperation
argument_list|(
name|description
operator|=
literal|"get the JSON schema from a given class"
argument_list|,
name|currencyTimeLimit
operator|=
literal|60
argument_list|)
specifier|public
name|String
name|getJSONSchemaForClass
parameter_list|(
name|String
name|clsName
parameter_list|)
block|{
name|String
name|ret
init|=
literal|""
decl_stmt|;
if|if
condition|(
operator|!
name|isWSDL
argument_list|()
condition|)
block|{
name|Set
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|resourceTypes
init|=
operator|(
name|Set
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
operator|)
name|endpoint
operator|.
name|get
argument_list|(
literal|"jaxrs.resource.types"
argument_list|)
decl_stmt|;
if|if
condition|(
name|resourceTypes
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|ret
operator|=
name|ret
operator|+
name|getBeginIndentionWithReturn
argument_list|(
literal|1
argument_list|)
operator|+
literal|"\""
operator|+
literal|"definitions"
operator|+
literal|"\" "
operator|+
literal|" : {"
operator|+
name|getEol
argument_list|()
expr_stmt|;
for|for
control|(
name|Class
argument_list|<
name|?
argument_list|>
name|cls
range|:
name|resourceTypes
control|)
block|{
if|if
condition|(
name|cls
operator|.
name|getName
argument_list|()
operator|.
name|endsWith
argument_list|(
name|clsName
argument_list|)
operator|&&
name|JsonSchemaLookup
operator|.
name|getSingleton
argument_list|()
operator|.
name|getSchemaForClass
argument_list|(
name|cls
argument_list|)
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|ret
operator|=
name|ret
operator|+
name|getIndention
argument_list|(
literal|2
argument_list|)
operator|+
literal|"\""
operator|+
name|cls
operator|.
name|getName
argument_list|()
operator|+
literal|"\" : "
operator|+
name|getEol
argument_list|()
expr_stmt|;
name|ret
operator|=
name|ret
operator|+
name|reformatIndent
argument_list|(
name|JsonSchemaLookup
operator|.
name|getSingleton
argument_list|()
operator|.
name|getSchemaForClass
argument_list|(
name|cls
argument_list|)
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|ret
operator|=
name|ret
operator|+
name|getEol
argument_list|()
expr_stmt|;
block|}
block|}
name|ret
operator|=
name|ret
operator|+
name|getEndIndentionWithReturn
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|ret
operator|=
name|ret
operator|+
name|getEndIndentionWithReturn
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
literal|"getJSONSchemaForClass failed."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
for|for
control|(
name|ServiceInfo
name|serviceInfo
range|:
name|endpoint
operator|.
name|getService
argument_list|()
operator|.
name|getServiceInfos
argument_list|()
control|)
block|{
for|for
control|(
name|BindingInfo
name|bindingInfo
range|:
name|serviceInfo
operator|.
name|getBindings
argument_list|()
control|)
block|{
name|ret
operator|=
name|ret
operator|+
name|getBeginIndentionWithReturn
argument_list|(
literal|1
argument_list|)
operator|+
literal|"\""
operator|+
literal|"definitions"
operator|+
literal|"\" "
operator|+
literal|" : {"
operator|+
name|getEol
argument_list|()
expr_stmt|;
for|for
control|(
name|BindingOperationInfo
name|boi
range|:
name|bindingInfo
operator|.
name|getOperations
argument_list|()
control|)
block|{
if|if
condition|(
name|boi
operator|.
name|getInput
argument_list|()
operator|!=
literal|null
operator|&&
name|boi
operator|.
name|getInput
argument_list|()
operator|.
name|getMessageParts
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|MessagePartInfo
name|mpi
range|:
name|boi
operator|.
name|getInput
argument_list|()
operator|.
name|getMessageParts
argument_list|()
control|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|partClass
init|=
name|mpi
operator|.
name|getTypeClass
argument_list|()
decl_stmt|;
if|if
condition|(
name|partClass
operator|!=
literal|null
operator|&&
name|partClass
operator|.
name|getName
argument_list|()
operator|.
name|endsWith
argument_list|(
name|clsName
argument_list|)
condition|)
block|{
name|ret
operator|=
name|ret
operator|+
name|getIndention
argument_list|(
literal|2
argument_list|)
operator|+
literal|"\""
operator|+
name|partClass
operator|.
name|getName
argument_list|()
operator|+
literal|"\" : "
operator|+
name|getEol
argument_list|()
expr_stmt|;
name|ret
operator|=
name|ret
operator|+
name|reformatIndent
argument_list|(
name|JsonSchemaLookup
operator|.
name|getSingleton
argument_list|()
operator|.
name|getSchemaForClass
argument_list|(
name|partClass
argument_list|)
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|boi
operator|.
name|getOutput
argument_list|()
operator|!=
literal|null
operator|&&
name|boi
operator|.
name|getOutput
argument_list|()
operator|.
name|getMessageParts
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|MessagePartInfo
name|mpi
range|:
name|boi
operator|.
name|getOutput
argument_list|()
operator|.
name|getMessageParts
argument_list|()
control|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|partClass
init|=
name|mpi
operator|.
name|getTypeClass
argument_list|()
decl_stmt|;
if|if
condition|(
name|partClass
operator|!=
literal|null
operator|&&
name|partClass
operator|.
name|getName
argument_list|()
operator|.
name|endsWith
argument_list|(
name|clsName
argument_list|)
condition|)
block|{
name|ret
operator|=
name|ret
operator|+
name|getIndention
argument_list|(
literal|2
argument_list|)
operator|+
literal|"\""
operator|+
name|partClass
operator|.
name|getName
argument_list|()
operator|+
literal|"\" : "
operator|+
name|getEol
argument_list|()
expr_stmt|;
name|ret
operator|=
name|ret
operator|+
name|reformatIndent
argument_list|(
name|JsonSchemaLookup
operator|.
name|getSingleton
argument_list|()
operator|.
name|getSchemaForClass
argument_list|(
name|partClass
argument_list|)
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|ret
operator|=
name|ret
operator|+
name|getEndIndentionWithReturn
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|ret
operator|=
name|ret
operator|+
name|getEndIndentionWithReturn
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|ret
return|;
block|}
annotation|@
name|ManagedOperation
argument_list|(
name|description
operator|=
literal|"get the JSON schema from a given soap endpoint for a given operation"
argument_list|,
name|currencyTimeLimit
operator|=
literal|60
argument_list|)
specifier|public
name|String
name|getJSONSchemaForOperation
parameter_list|(
name|String
name|operationName
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isWSDL
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|String
name|ret
init|=
literal|""
decl_stmt|;
for|for
control|(
name|ServiceInfo
name|serviceInfo
range|:
name|endpoint
operator|.
name|getService
argument_list|()
operator|.
name|getServiceInfos
argument_list|()
control|)
block|{
for|for
control|(
name|BindingInfo
name|bindingInfo
range|:
name|serviceInfo
operator|.
name|getBindings
argument_list|()
control|)
block|{
for|for
control|(
name|BindingOperationInfo
name|boi
range|:
name|bindingInfo
operator|.
name|getOperations
argument_list|()
control|)
block|{
if|if
condition|(
name|operationName
operator|.
name|equals
argument_list|(
name|boi
operator|.
name|getOperationInfo
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
condition|)
block|{
name|ret
operator|=
name|ret
operator|+
name|getBeginIndentionWithReturn
argument_list|(
literal|1
argument_list|)
operator|+
literal|"\""
operator|+
name|boi
operator|.
name|getOperationInfo
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
operator|+
literal|"\" "
operator|+
literal|" : "
operator|+
name|getBeginIndentionWithReturn
argument_list|(
literal|2
argument_list|)
expr_stmt|;
if|if
condition|(
name|boi
operator|.
name|getInput
argument_list|()
operator|!=
literal|null
operator|&&
name|boi
operator|.
name|getInput
argument_list|()
operator|.
name|getMessageParts
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|ret
operator|=
name|ret
operator|+
literal|"\"input\" : "
operator|+
name|getBeginIndentionWithReturn
argument_list|(
literal|4
argument_list|)
operator|+
literal|"\"type\" : \""
operator|+
name|boi
operator|.
name|getOperationInfo
argument_list|()
operator|.
name|getInput
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
operator|+
literal|"\""
operator|+
name|getEndIndentionWithReturn
argument_list|(
literal|2
argument_list|)
operator|+
literal|","
operator|+
name|getEol
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|boi
operator|.
name|getOutput
argument_list|()
operator|!=
literal|null
operator|&&
name|boi
operator|.
name|getOutput
argument_list|()
operator|.
name|getMessageParts
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|ret
operator|=
name|ret
operator|+
name|getIndention
argument_list|(
literal|2
argument_list|)
operator|+
literal|"\"output\" : "
operator|+
name|getBeginIndentionWithReturn
argument_list|(
literal|4
argument_list|)
operator|+
literal|"\"type\" : \""
operator|+
name|boi
operator|.
name|getOperationInfo
argument_list|()
operator|.
name|getOutput
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
operator|+
literal|"\""
operator|+
name|getEndIndentionWithReturn
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
name|ret
operator|=
name|rollbackColon
argument_list|(
name|ret
argument_list|)
operator|+
name|getEndIndentionWithReturn
argument_list|(
literal|1
argument_list|)
operator|+
literal|","
expr_stmt|;
name|ret
operator|=
name|ret
operator|+
name|getEol
argument_list|()
operator|+
name|getIndention
argument_list|(
literal|1
argument_list|)
operator|+
literal|"\"definitions\" : "
operator|+
name|getBeginIndentionWithReturn
argument_list|(
literal|2
argument_list|)
expr_stmt|;
if|if
condition|(
name|boi
operator|.
name|getInput
argument_list|()
operator|!=
literal|null
operator|&&
name|boi
operator|.
name|getInput
argument_list|()
operator|.
name|getMessageParts
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|ret
operator|=
name|ret
operator|+
literal|"\""
operator|+
name|boi
operator|.
name|getOperationInfo
argument_list|()
operator|.
name|getInput
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
operator|+
literal|"\" : "
operator|+
name|getBeginIndentionWithReturnForList
argument_list|(
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|MessagePartInfo
name|mpi
range|:
name|boi
operator|.
name|getInput
argument_list|()
operator|.
name|getMessageParts
argument_list|()
control|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|partClass
init|=
name|mpi
operator|.
name|getTypeClass
argument_list|()
decl_stmt|;
if|if
condition|(
name|partClass
operator|!=
literal|null
condition|)
block|{
name|ret
operator|=
name|ret
operator|+
name|rollbackEol
argument_list|(
name|reformatIndent
argument_list|(
name|JsonSchemaLookup
operator|.
name|getSingleton
argument_list|()
operator|.
name|getSchemaForClass
argument_list|(
name|partClass
argument_list|)
argument_list|,
literal|3
argument_list|)
argument_list|)
operator|+
literal|","
operator|+
name|getEol
argument_list|()
expr_stmt|;
block|}
block|}
name|ret
operator|=
name|rollbackColon
argument_list|(
name|rollbackEol
argument_list|(
name|ret
argument_list|)
argument_list|)
operator|+
name|getEndIndentionWithReturnForList
argument_list|(
literal|2
argument_list|)
operator|+
literal|","
operator|+
name|getEol
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|boi
operator|.
name|getOutput
argument_list|()
operator|!=
literal|null
operator|&&
name|boi
operator|.
name|getOutput
argument_list|()
operator|.
name|getMessageParts
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|ret
operator|=
name|ret
operator|+
name|getIndention
argument_list|(
literal|2
argument_list|)
operator|+
literal|"\""
operator|+
name|boi
operator|.
name|getOperationInfo
argument_list|()
operator|.
name|getOutput
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
operator|+
literal|"\" : "
operator|+
name|getBeginIndentionWithReturnForList
argument_list|(
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|MessagePartInfo
name|mpi
range|:
name|boi
operator|.
name|getOutput
argument_list|()
operator|.
name|getMessageParts
argument_list|()
control|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|partClass
init|=
name|mpi
operator|.
name|getTypeClass
argument_list|()
decl_stmt|;
if|if
condition|(
name|partClass
operator|!=
literal|null
condition|)
block|{
name|ret
operator|=
name|ret
operator|+
name|rollbackEol
argument_list|(
name|reformatIndent
argument_list|(
name|JsonSchemaLookup
operator|.
name|getSingleton
argument_list|()
operator|.
name|getSchemaForClass
argument_list|(
name|partClass
argument_list|)
argument_list|,
literal|3
argument_list|)
argument_list|)
operator|+
literal|","
operator|+
name|getEol
argument_list|()
expr_stmt|;
block|}
block|}
name|ret
operator|=
name|rollbackColon
argument_list|(
name|rollbackEol
argument_list|(
name|ret
argument_list|)
argument_list|)
operator|+
name|getEndIndentionWithReturnForList
argument_list|(
literal|2
argument_list|)
operator|+
literal|","
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|ret
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|ret
operator|=
name|rollbackColon
argument_list|(
name|ret
argument_list|)
operator|+
name|getEndIndentionWithReturn
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ret
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|ret
operator|=
name|rollbackColon
argument_list|(
name|ret
argument_list|)
operator|+
name|getEndIndentionWithReturn
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|ret
return|;
block|}
annotation|@
name|ManagedOperation
argument_list|(
name|description
operator|=
literal|"get the package name for a given namespace URI"
argument_list|,
name|currencyTimeLimit
operator|=
literal|60
argument_list|)
specifier|public
name|String
name|getPackageNameByNameSpaceURI
parameter_list|(
name|String
name|nameSpaceURI
parameter_list|)
block|{
return|return
name|PackageUtils
operator|.
name|getPackageNameByNameSpaceURI
argument_list|(
name|nameSpaceURI
argument_list|)
return|;
block|}
annotation|@
name|ManagedOperation
argument_list|(
name|description
operator|=
literal|"get xml payload from json payload"
argument_list|,
name|currencyTimeLimit
operator|=
literal|60
argument_list|)
specifier|public
name|String
name|jsonToXml
parameter_list|(
name|String
name|jsonText
parameter_list|,
name|String
name|pojoType
parameter_list|)
block|{
name|ObjectMapper
name|objectMapper
init|=
operator|new
name|ObjectMapper
argument_list|()
decl_stmt|;
name|StringWriter
name|sw
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
try|try
block|{
name|Object
name|pojo
init|=
name|objectMapper
operator|.
name|readValue
argument_list|(
name|jsonText
argument_list|,
name|findClass
argument_list|(
name|pojoType
argument_list|)
argument_list|)
decl_stmt|;
name|JAXBContext
name|jc
init|=
name|JAXBContext
operator|.
name|newInstance
argument_list|(
name|findClass
argument_list|(
name|pojoType
argument_list|)
argument_list|)
decl_stmt|;
name|Marshaller
name|marshaller
init|=
name|jc
operator|.
name|createMarshaller
argument_list|()
decl_stmt|;
name|marshaller
operator|.
name|setProperty
argument_list|(
name|Marshaller
operator|.
name|JAXB_FORMATTED_OUTPUT
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|marshaller
operator|.
name|marshal
argument_list|(
name|pojo
argument_list|,
name|sw
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
literal|"jsonToXml failed."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|sw
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
name|Class
argument_list|<
name|?
argument_list|>
name|findClass
parameter_list|(
name|String
name|clsName
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isWSDL
argument_list|()
condition|)
block|{
name|Set
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|resourceTypes
init|=
operator|(
name|Set
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
operator|)
name|endpoint
operator|.
name|get
argument_list|(
literal|"jaxrs.resource.types"
argument_list|)
decl_stmt|;
if|if
condition|(
name|resourceTypes
operator|!=
literal|null
condition|)
block|{
try|try
block|{
for|for
control|(
name|Class
argument_list|<
name|?
argument_list|>
name|cls
range|:
name|resourceTypes
control|)
block|{
if|if
condition|(
name|cls
operator|.
name|getName
argument_list|()
operator|.
name|endsWith
argument_list|(
name|clsName
argument_list|)
condition|)
block|{
return|return
name|cls
return|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
literal|"findClass failed."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
for|for
control|(
name|ServiceInfo
name|serviceInfo
range|:
name|endpoint
operator|.
name|getService
argument_list|()
operator|.
name|getServiceInfos
argument_list|()
control|)
block|{
for|for
control|(
name|BindingInfo
name|bindingInfo
range|:
name|serviceInfo
operator|.
name|getBindings
argument_list|()
control|)
block|{
for|for
control|(
name|BindingOperationInfo
name|boi
range|:
name|bindingInfo
operator|.
name|getOperations
argument_list|()
control|)
block|{
if|if
condition|(
name|boi
operator|.
name|getInput
argument_list|()
operator|!=
literal|null
operator|&&
name|boi
operator|.
name|getInput
argument_list|()
operator|.
name|getMessageParts
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|MessagePartInfo
name|mpi
range|:
name|boi
operator|.
name|getInput
argument_list|()
operator|.
name|getMessageParts
argument_list|()
control|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|partClass
init|=
name|mpi
operator|.
name|getTypeClass
argument_list|()
decl_stmt|;
if|if
condition|(
name|partClass
operator|!=
literal|null
operator|&&
name|partClass
operator|.
name|getName
argument_list|()
operator|.
name|endsWith
argument_list|(
name|clsName
argument_list|)
condition|)
block|{
return|return
name|partClass
return|;
block|}
block|}
block|}
if|if
condition|(
name|boi
operator|.
name|getOutput
argument_list|()
operator|!=
literal|null
operator|&&
name|boi
operator|.
name|getOutput
argument_list|()
operator|.
name|getMessageParts
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|MessagePartInfo
name|mpi
range|:
name|boi
operator|.
name|getOutput
argument_list|()
operator|.
name|getMessageParts
argument_list|()
control|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|partClass
init|=
name|mpi
operator|.
name|getTypeClass
argument_list|()
decl_stmt|;
if|if
condition|(
name|partClass
operator|!=
literal|null
operator|&&
name|partClass
operator|.
name|getName
argument_list|()
operator|.
name|endsWith
argument_list|(
name|clsName
argument_list|)
condition|)
block|{
return|return
name|partClass
return|;
block|}
block|}
block|}
block|}
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|String
name|reformatIndent
parameter_list|(
name|String
name|input
parameter_list|,
name|int
name|startIndent
parameter_list|)
block|{
name|String
name|ret
init|=
literal|""
decl_stmt|;
name|BufferedReader
name|reader
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|StringReader
argument_list|(
name|input
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|String
name|oneLine
decl_stmt|;
while|while
condition|(
operator|(
name|oneLine
operator|=
name|reader
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|ret
operator|=
name|ret
operator|+
name|getIndention
argument_list|(
name|startIndent
argument_list|)
operator|+
name|oneLine
operator|+
name|getEol
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
literal|"reformatIndent failed."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|private
name|String
name|rollbackEol
parameter_list|(
name|String
name|input
parameter_list|)
block|{
name|String
name|ret
init|=
name|input
decl_stmt|;
if|if
condition|(
name|ret
operator|.
name|endsWith
argument_list|(
name|getEol
argument_list|()
argument_list|)
condition|)
block|{
name|ret
operator|=
name|ret
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|ret
operator|.
name|length
argument_list|()
operator|-
name|getEol
argument_list|()
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|private
name|String
name|rollbackColon
parameter_list|(
name|String
name|input
parameter_list|)
block|{
name|String
name|ret
init|=
name|input
decl_stmt|;
if|if
condition|(
name|ret
operator|.
name|endsWith
argument_list|(
literal|","
argument_list|)
condition|)
block|{
name|ret
operator|=
name|ret
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|ret
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|private
name|boolean
name|isInOSGi
parameter_list|()
block|{
if|if
condition|(
name|FrameworkUtil
operator|.
name|getBundle
argument_list|(
name|ManagedEndpoint
operator|.
name|class
argument_list|)
operator|!=
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|String
name|getBeginIndentionWithReturn
parameter_list|(
name|int
name|n
parameter_list|)
block|{
return|return
literal|"{"
operator|+
name|getEol
argument_list|()
operator|+
name|getIndention
argument_list|(
name|n
argument_list|)
return|;
block|}
specifier|private
name|String
name|getEndIndentionWithReturn
parameter_list|(
name|int
name|n
parameter_list|)
block|{
return|return
name|getEol
argument_list|()
operator|+
name|getIndention
argument_list|(
name|n
argument_list|)
operator|+
literal|"}"
return|;
block|}
specifier|private
name|String
name|getBeginIndentionWithReturnForList
parameter_list|(
name|int
name|n
parameter_list|)
block|{
return|return
literal|"["
operator|+
name|getEol
argument_list|()
operator|+
name|getIndention
argument_list|(
name|n
argument_list|)
return|;
block|}
specifier|private
name|String
name|getEndIndentionWithReturnForList
parameter_list|(
name|int
name|n
parameter_list|)
block|{
return|return
name|getEol
argument_list|()
operator|+
name|getIndention
argument_list|(
name|n
argument_list|)
operator|+
literal|"]"
return|;
block|}
comment|/*private String getEndIndentionWithoutReturnForList(int n) {         return getIndention(n) + "]";                }          private String getEndIndentionWithoutReturn(int n) {         return getIndention(n) + "}";                }*/
specifier|private
name|String
name|getIndention
parameter_list|(
name|int
name|n
parameter_list|)
block|{
name|String
name|ret
init|=
literal|""
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|ret
operator|=
name|ret
operator|+
name|INDENTION
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|private
name|String
name|getEol
parameter_list|()
block|{
if|if
condition|(
name|eol
operator|==
literal|null
condition|)
block|{
return|return
literal|"\n"
return|;
block|}
else|else
block|{
return|return
name|this
operator|.
name|eol
return|;
block|}
block|}
specifier|private
name|ConfigurationAdmin
name|getConfigurationAdmin
parameter_list|()
block|{
try|try
block|{
if|if
condition|(
name|isInOSGi
argument_list|()
operator|&&
operator|(
name|configurationAdmin
operator|==
literal|null
operator|)
condition|)
block|{
name|BundleContext
name|bundleContext
init|=
name|FrameworkUtil
operator|.
name|getBundle
argument_list|(
name|ManagedEndpoint
operator|.
name|class
argument_list|)
operator|.
name|getBundleContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|bundleContext
operator|!=
literal|null
condition|)
block|{
name|ServiceReference
name|serviceReference
init|=
name|bundleContext
operator|.
name|getServiceReference
argument_list|(
name|ConfigurationAdmin
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|serviceReference
operator|!=
literal|null
condition|)
block|{
name|configurationAdmin
operator|=
operator|(
name|ConfigurationAdmin
operator|)
name|bundleContext
operator|.
name|getService
argument_list|(
name|serviceReference
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
literal|"getConfigurationAdmin failed."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|configurationAdmin
return|;
block|}
specifier|public
name|ObjectName
name|getObjectName
parameter_list|()
throws|throws
name|JMException
block|{
name|String
name|busId
init|=
name|bus
operator|.
name|getId
argument_list|()
decl_stmt|;
name|StringBuilder
name|buffer
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|ManagementConstants
operator|.
name|DEFAULT_DOMAIN_NAME
argument_list|)
operator|.
name|append
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|ManagementConstants
operator|.
name|BUS_ID_PROP
argument_list|)
operator|.
name|append
argument_list|(
literal|'='
argument_list|)
operator|.
name|append
argument_list|(
name|busId
argument_list|)
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|ManagementConstants
operator|.
name|TYPE_PROP
argument_list|)
operator|.
name|append
argument_list|(
literal|'='
argument_list|)
operator|.
name|append
argument_list|(
literal|"Bus.Service.Endpoint,"
argument_list|)
expr_stmt|;
name|String
name|serviceName
init|=
operator|(
name|String
operator|)
name|endpoint
operator|.
name|get
argument_list|(
name|SERVICE_NAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|serviceName
argument_list|)
condition|)
block|{
name|serviceName
operator|=
name|endpoint
operator|.
name|getService
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
name|serviceName
operator|=
name|ObjectName
operator|.
name|quote
argument_list|(
name|serviceName
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|ManagementConstants
operator|.
name|SERVICE_NAME_PROP
argument_list|)
operator|.
name|append
argument_list|(
literal|'='
argument_list|)
operator|.
name|append
argument_list|(
name|serviceName
argument_list|)
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
name|String
name|endpointName
init|=
operator|(
name|String
operator|)
name|endpoint
operator|.
name|get
argument_list|(
name|ENDPOINT_NAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|endpointName
argument_list|)
condition|)
block|{
name|endpointName
operator|=
name|endpoint
operator|.
name|getEndpointInfo
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
expr_stmt|;
block|}
name|endpointName
operator|=
name|ObjectName
operator|.
name|quote
argument_list|(
name|endpointName
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|ManagementConstants
operator|.
name|PORT_NAME_PROP
argument_list|)
operator|.
name|append
argument_list|(
literal|'='
argument_list|)
operator|.
name|append
argument_list|(
name|endpointName
argument_list|)
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
comment|// Added the instance id to make the ObjectName unique
name|buffer
operator|.
name|append
argument_list|(
name|ManagementConstants
operator|.
name|INSTANCE_ID_PROP
argument_list|)
operator|.
name|append
argument_list|(
literal|'='
argument_list|)
operator|.
name|append
argument_list|(
name|endpoint
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
comment|//Use default domain name of server
return|return
operator|new
name|ObjectName
argument_list|(
name|buffer
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|void
name|startServer
parameter_list|(
name|Server
name|s
parameter_list|)
block|{
if|if
condition|(
name|server
operator|.
name|equals
argument_list|(
name|s
argument_list|)
condition|)
block|{
name|state
operator|=
name|State
operator|.
name|STARTED
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|stopServer
parameter_list|(
name|Server
name|s
parameter_list|)
block|{
if|if
condition|(
name|server
operator|.
name|equals
argument_list|(
name|s
argument_list|)
condition|)
block|{
name|state
operator|=
name|State
operator|.
name|STOPPED
expr_stmt|;
comment|// unregister server to avoid the memory leak
name|ServerLifeCycleManager
name|mgr
init|=
name|bus
operator|.
name|getExtension
argument_list|(
name|ServerLifeCycleManager
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|mgr
operator|!=
literal|null
condition|)
block|{
name|mgr
operator|.
name|unRegisterListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

