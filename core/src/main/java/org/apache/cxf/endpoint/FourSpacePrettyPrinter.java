begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|core
operator|.
name|JsonGenerationException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|core
operator|.
name|JsonGenerator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|core
operator|.
name|util
operator|.
name|DefaultPrettyPrinter
import|;
end_import

begin_class
specifier|public
class|class
name|FourSpacePrettyPrinter
extends|extends
name|DefaultPrettyPrinter
block|{
specifier|public
name|FourSpacePrettyPrinter
parameter_list|()
block|{
name|_objectIndenter
operator|=
name|Lf4SpacesIndenter
operator|.
name|INSTANCE
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|Lf4SpacesIndenter
extends|extends
name|NopIndenter
block|{
specifier|public
specifier|static
specifier|final
name|Lf4SpacesIndenter
name|INSTANCE
init|=
operator|new
name|Lf4SpacesIndenter
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|SYS_LF
decl_stmt|;
specifier|private
specifier|static
name|int
name|spacecount
init|=
literal|64
decl_stmt|;
specifier|private
specifier|static
name|char
index|[]
name|spaces
init|=
operator|new
name|char
index|[
name|spacecount
index|]
decl_stmt|;
static|static
block|{
name|String
name|lf
init|=
literal|null
decl_stmt|;
try|try
block|{
name|lf
operator|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"line.separator"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
comment|//
block|}
name|SYS_LF
operator|=
operator|(
name|lf
operator|==
literal|null
operator|)
condition|?
literal|"\n"
else|:
name|lf
expr_stmt|;
block|}
static|static
block|{
name|Arrays
operator|.
name|fill
argument_list|(
name|spaces
argument_list|,
literal|' '
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isInline
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|writeIndentation
parameter_list|(
name|JsonGenerator
name|jg
parameter_list|,
name|int
name|level
parameter_list|)
throws|throws
name|IOException
throws|,
name|JsonGenerationException
block|{
name|jg
operator|.
name|writeRaw
argument_list|(
name|SYS_LF
argument_list|)
expr_stmt|;
if|if
condition|(
name|level
operator|>
literal|0
condition|)
block|{
comment|// should we err on negative values (as there's some flaw?)
name|level
operator|=
name|level
operator|*
literal|4
expr_stmt|;
comment|// 4 spaces per level
while|while
condition|(
name|level
operator|>
name|spacecount
condition|)
block|{
comment|// should never happen but...
name|jg
operator|.
name|writeRaw
argument_list|(
name|spaces
argument_list|,
literal|0
argument_list|,
name|spacecount
argument_list|)
expr_stmt|;
name|level
operator|-=
name|spaces
operator|.
name|length
expr_stmt|;
block|}
name|jg
operator|.
name|writeRaw
argument_list|(
name|spaces
argument_list|,
literal|0
argument_list|,
name|level
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

