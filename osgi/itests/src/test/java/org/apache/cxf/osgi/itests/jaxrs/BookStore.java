begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|osgi
operator|.
name|itests
operator|.
name|jaxrs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|validation
operator|.
name|ConstraintViolation
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|validation
operator|.
name|ConstraintViolationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|validation
operator|.
name|ValidationProviderResolver
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|validation
operator|.
name|spi
operator|.
name|ValidationProvider
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|DELETE
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|GET
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|POST
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|PUT
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|PathParam
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|Produces
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|container
operator|.
name|ResourceContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|container
operator|.
name|ResourceInfo
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|Response
operator|.
name|Status
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|SecurityContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|UriBuilder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|ws
operator|.
name|rs
operator|.
name|core
operator|.
name|UriInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|validation
operator|.
name|BeanValidationProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|validator
operator|.
name|HibernateValidator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|validator
operator|.
name|HibernateValidatorConfiguration
import|;
end_import

begin_class
annotation|@
name|Path
argument_list|(
literal|"/bookstore"
argument_list|)
annotation|@
name|Produces
argument_list|(
literal|"application/xml"
argument_list|)
specifier|public
class|class
name|BookStore
block|{
specifier|private
name|Map
argument_list|<
name|Long
argument_list|,
name|Book
argument_list|>
name|books
init|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|Book
argument_list|>
argument_list|()
decl_stmt|;
annotation|@
name|Context
specifier|private
name|UriInfo
name|ui
decl_stmt|;
annotation|@
name|Context
specifier|private
name|ResourceInfo
name|rcInfo
decl_stmt|;
annotation|@
name|Context
specifier|private
name|ResourceContext
name|resourceContext
decl_stmt|;
annotation|@
name|Context
specifier|private
name|SecurityContext
name|securityContext
decl_stmt|;
specifier|public
name|BookStore
parameter_list|()
block|{
name|init
argument_list|()
expr_stmt|;
block|}
annotation|@
name|GET
annotation|@
name|Path
argument_list|(
literal|"/books/{id}"
argument_list|)
specifier|public
name|Response
name|getBookRoot
parameter_list|(
annotation|@
name|PathParam
argument_list|(
literal|"id"
argument_list|)
name|Long
name|id
parameter_list|)
block|{
name|assertInjections
argument_list|()
expr_stmt|;
name|Book
name|b
init|=
name|books
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|b
operator|==
literal|null
condition|)
block|{
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|NOT_FOUND
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
return|return
name|Response
operator|.
name|ok
argument_list|(
name|b
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|PUT
annotation|@
name|Path
argument_list|(
literal|"/books/{id}"
argument_list|)
specifier|public
name|Response
name|updateBook
parameter_list|(
annotation|@
name|PathParam
argument_list|(
literal|"id"
argument_list|)
name|Long
name|id
parameter_list|,
name|Book
name|book
parameter_list|)
block|{
name|assertInjections
argument_list|()
expr_stmt|;
name|Book
name|b
init|=
name|books
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|b
operator|==
literal|null
condition|)
block|{
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|NOT_FOUND
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
else|else
block|{
name|b
operator|.
name|setName
argument_list|(
name|book
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|Response
operator|.
name|ok
argument_list|()
operator|.
name|build
argument_list|()
return|;
block|}
block|}
annotation|@
name|POST
annotation|@
name|Path
argument_list|(
literal|"/books-validate"
argument_list|)
specifier|public
name|Response
name|createBookValidate
parameter_list|(
name|Book
name|book
parameter_list|)
block|{
name|assertInjections
argument_list|()
expr_stmt|;
name|BeanValidationProvider
name|prov
init|=
operator|new
name|BeanValidationProvider
argument_list|(
operator|new
name|ValidationProviderResolver
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|ValidationProvider
argument_list|<
name|?
argument_list|>
argument_list|>
name|getValidationProviders
parameter_list|()
block|{
name|ValidationProvider
argument_list|<
name|HibernateValidatorConfiguration
argument_list|>
name|prov
init|=
operator|new
name|HibernateValidator
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ValidationProvider
argument_list|<
name|?
argument_list|>
argument_list|>
name|provs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|provs
operator|.
name|add
argument_list|(
name|prov
argument_list|)
expr_stmt|;
return|return
name|provs
return|;
block|}
block|}
argument_list|,
name|HibernateValidator
operator|.
name|class
argument_list|)
decl_stmt|;
try|try
block|{
name|prov
operator|.
name|validateBean
argument_list|(
name|book
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ConstraintViolationException
name|cve
parameter_list|)
block|{
name|StringBuilder
name|violationMessages
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|ConstraintViolation
argument_list|<
name|?
argument_list|>
name|constraintViolation
range|:
name|cve
operator|.
name|getConstraintViolations
argument_list|()
control|)
block|{
name|violationMessages
operator|.
name|append
argument_list|(
name|constraintViolation
operator|.
name|getPropertyPath
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|": "
argument_list|)
operator|.
name|append
argument_list|(
name|constraintViolation
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
return|return
name|Response
operator|.
name|status
argument_list|(
name|Response
operator|.
name|Status
operator|.
name|BAD_REQUEST
argument_list|)
operator|.
name|type
argument_list|(
literal|"text/plain"
argument_list|)
operator|.
name|entity
argument_list|(
name|violationMessages
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
return|return
name|createBook
argument_list|(
name|book
argument_list|)
return|;
block|}
annotation|@
name|POST
annotation|@
name|Path
argument_list|(
literal|"/books"
argument_list|)
specifier|public
name|Response
name|createBook
parameter_list|(
name|Book
name|book
parameter_list|)
block|{
name|assertInjections
argument_list|()
expr_stmt|;
name|Book
name|b
init|=
name|books
operator|.
name|get
argument_list|(
name|book
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|b
operator|!=
literal|null
condition|)
block|{
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|CONFLICT
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
else|else
block|{
name|books
operator|.
name|put
argument_list|(
name|book
operator|.
name|getId
argument_list|()
argument_list|,
name|book
argument_list|)
expr_stmt|;
name|URI
name|createdURI
init|=
name|UriBuilder
operator|.
name|fromUri
argument_list|(
name|ui
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
operator|.
name|path
argument_list|(
name|Long
operator|.
name|toString
argument_list|(
name|book
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
return|return
name|Response
operator|.
name|created
argument_list|(
name|createdURI
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
annotation|@
name|DELETE
annotation|@
name|Path
argument_list|(
literal|"/books/{id}"
argument_list|)
specifier|public
name|Response
name|removeBook
parameter_list|(
annotation|@
name|PathParam
argument_list|(
literal|"id"
argument_list|)
name|Long
name|id
parameter_list|)
block|{
name|assertInjections
argument_list|()
expr_stmt|;
name|Book
name|b
init|=
name|books
operator|.
name|remove
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|b
operator|==
literal|null
condition|)
block|{
return|return
name|Response
operator|.
name|status
argument_list|(
name|Status
operator|.
name|NOT_FOUND
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|Response
operator|.
name|ok
argument_list|()
operator|.
name|build
argument_list|()
return|;
block|}
block|}
specifier|private
name|void
name|init
parameter_list|()
block|{
name|books
operator|.
name|clear
argument_list|()
expr_stmt|;
name|Book
name|book
init|=
operator|new
name|Book
argument_list|()
decl_stmt|;
name|book
operator|.
name|setId
argument_list|(
literal|123
argument_list|)
expr_stmt|;
name|book
operator|.
name|setName
argument_list|(
literal|"CXF in Action"
argument_list|)
expr_stmt|;
name|books
operator|.
name|put
argument_list|(
name|book
operator|.
name|getId
argument_list|()
argument_list|,
name|book
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertInjections
parameter_list|()
block|{
if|if
condition|(
name|ui
operator|.
name|getAbsolutePath
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"UriInfo absolute path is null"
argument_list|)
throw|;
block|}
if|if
condition|(
name|rcInfo
operator|.
name|getResourceMethod
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"ResourceInfo resource method is null"
argument_list|)
throw|;
block|}
if|if
condition|(
name|resourceContext
operator|.
name|getResource
argument_list|(
name|BookStore
operator|.
name|class
argument_list|)
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"ResourceContext returns null resource"
argument_list|)
throw|;
block|}
if|if
condition|(
name|securityContext
operator|.
name|isSecure
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Expected unsecure communication"
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

