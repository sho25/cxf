begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|phase
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ListIterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|ModCountCopyOnWriteArrayList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|Interceptor
import|;
end_import

begin_comment
comment|/**  * The PhaseChainCache provides default interceptor chains for SOAP requests  * and responses, both from the client and web service side.  The list of  * phases supplied in the get() methods of this class are defined by default  * within org.apache.cxf.phase.PhaseManagerImpl.  For an example of this class   * in use, check the sourcecode of org.apache.cxf.endpoint.ClientImpl.  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|PhaseChainCache
block|{
name|AtomicReference
argument_list|<
name|ChainHolder
argument_list|>
name|lastData
init|=
operator|new
name|AtomicReference
argument_list|<
name|ChainHolder
argument_list|>
argument_list|()
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|PhaseInterceptorChain
name|get
parameter_list|(
name|SortedSet
argument_list|<
name|Phase
argument_list|>
name|phaseList
parameter_list|,
name|List
argument_list|<
name|Interceptor
argument_list|>
name|p1
parameter_list|)
block|{
return|return
name|getChain
argument_list|(
name|phaseList
argument_list|,
name|p1
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|PhaseInterceptorChain
name|get
parameter_list|(
name|SortedSet
argument_list|<
name|Phase
argument_list|>
name|phaseList
parameter_list|,
name|List
argument_list|<
name|Interceptor
argument_list|>
name|p1
parameter_list|,
name|List
argument_list|<
name|Interceptor
argument_list|>
name|p2
parameter_list|)
block|{
return|return
name|getChain
argument_list|(
name|phaseList
argument_list|,
name|p1
argument_list|,
name|p2
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|PhaseInterceptorChain
name|get
parameter_list|(
name|SortedSet
argument_list|<
name|Phase
argument_list|>
name|phaseList
parameter_list|,
name|List
argument_list|<
name|Interceptor
argument_list|>
name|p1
parameter_list|,
name|List
argument_list|<
name|Interceptor
argument_list|>
name|p2
parameter_list|,
name|List
argument_list|<
name|Interceptor
argument_list|>
name|p3
parameter_list|)
block|{
return|return
name|getChain
argument_list|(
name|phaseList
argument_list|,
name|p1
argument_list|,
name|p2
argument_list|,
name|p3
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|PhaseInterceptorChain
name|get
parameter_list|(
name|SortedSet
argument_list|<
name|Phase
argument_list|>
name|phaseList
parameter_list|,
name|List
argument_list|<
name|Interceptor
argument_list|>
name|p1
parameter_list|,
name|List
argument_list|<
name|Interceptor
argument_list|>
name|p2
parameter_list|,
name|List
argument_list|<
name|Interceptor
argument_list|>
name|p3
parameter_list|,
name|List
argument_list|<
name|Interceptor
argument_list|>
name|p4
parameter_list|)
block|{
return|return
name|getChain
argument_list|(
name|phaseList
argument_list|,
name|p1
argument_list|,
name|p2
argument_list|,
name|p3
argument_list|,
name|p4
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|PhaseInterceptorChain
name|get
parameter_list|(
name|SortedSet
argument_list|<
name|Phase
argument_list|>
name|phaseList
parameter_list|,
name|List
argument_list|<
name|Interceptor
argument_list|>
name|p1
parameter_list|,
name|List
argument_list|<
name|Interceptor
argument_list|>
name|p2
parameter_list|,
name|List
argument_list|<
name|Interceptor
argument_list|>
name|p3
parameter_list|,
name|List
argument_list|<
name|Interceptor
argument_list|>
name|p4
parameter_list|,
name|List
argument_list|<
name|Interceptor
argument_list|>
name|p5
parameter_list|)
block|{
return|return
name|getChain
argument_list|(
name|phaseList
argument_list|,
name|p1
argument_list|,
name|p2
argument_list|,
name|p3
argument_list|,
name|p4
argument_list|,
name|p5
argument_list|)
return|;
block|}
specifier|private
name|PhaseInterceptorChain
name|getChain
parameter_list|(
name|SortedSet
argument_list|<
name|Phase
argument_list|>
name|phaseList
parameter_list|,
name|List
argument_list|<
name|Interceptor
argument_list|>
modifier|...
name|providers
parameter_list|)
block|{
name|ChainHolder
name|last
init|=
name|lastData
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|last
operator|==
literal|null
operator|||
operator|!
name|last
operator|.
name|matches
argument_list|(
name|providers
argument_list|)
condition|)
block|{
name|PhaseInterceptorChain
name|chain
init|=
operator|new
name|PhaseInterceptorChain
argument_list|(
name|phaseList
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ModCountCopyOnWriteArrayList
argument_list|<
name|Interceptor
argument_list|>
argument_list|>
name|copy
init|=
operator|new
name|ArrayList
argument_list|<
name|ModCountCopyOnWriteArrayList
argument_list|<
name|Interceptor
argument_list|>
argument_list|>
argument_list|(
name|providers
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|List
argument_list|<
name|Interceptor
argument_list|>
name|p
range|:
name|providers
control|)
block|{
name|copy
operator|.
name|add
argument_list|(
operator|new
name|ModCountCopyOnWriteArrayList
argument_list|<
name|Interceptor
argument_list|>
argument_list|(
name|p
argument_list|)
argument_list|)
expr_stmt|;
name|chain
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
name|last
operator|=
operator|new
name|ChainHolder
argument_list|(
name|chain
argument_list|,
name|copy
argument_list|)
expr_stmt|;
name|lastData
operator|.
name|set
argument_list|(
name|last
argument_list|)
expr_stmt|;
block|}
return|return
name|last
operator|.
name|chain
operator|.
name|cloneChain
argument_list|()
return|;
block|}
specifier|private
specifier|static
class|class
name|ChainHolder
block|{
name|List
argument_list|<
name|ModCountCopyOnWriteArrayList
argument_list|<
name|Interceptor
argument_list|>
argument_list|>
name|lists
decl_stmt|;
name|PhaseInterceptorChain
name|chain
decl_stmt|;
name|ChainHolder
parameter_list|(
name|PhaseInterceptorChain
name|c
parameter_list|,
name|List
argument_list|<
name|ModCountCopyOnWriteArrayList
argument_list|<
name|Interceptor
argument_list|>
argument_list|>
name|l
parameter_list|)
block|{
name|lists
operator|=
name|l
expr_stmt|;
name|chain
operator|=
name|c
expr_stmt|;
block|}
name|boolean
name|matches
parameter_list|(
name|List
argument_list|<
name|Interceptor
argument_list|>
modifier|...
name|providers
parameter_list|)
block|{
if|if
condition|(
name|lists
operator|.
name|size
argument_list|()
operator|==
name|providers
operator|.
name|length
condition|)
block|{
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|providers
operator|.
name|length
condition|;
name|x
operator|++
control|)
block|{
if|if
condition|(
name|lists
operator|.
name|get
argument_list|(
name|x
argument_list|)
operator|.
name|size
argument_list|()
operator|!=
name|providers
index|[
name|x
index|]
operator|.
name|size
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|providers
index|[
name|x
index|]
operator|.
name|getClass
argument_list|()
operator|==
name|ModCountCopyOnWriteArrayList
operator|.
name|class
condition|)
block|{
if|if
condition|(
operator|(
operator|(
name|ModCountCopyOnWriteArrayList
operator|)
name|providers
index|[
name|x
index|]
operator|)
operator|.
name|getModCount
argument_list|()
operator|!=
name|lists
operator|.
name|get
argument_list|(
name|x
argument_list|)
operator|.
name|getModCount
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
else|else
block|{
name|ListIterator
argument_list|<
name|Interceptor
argument_list|>
name|i1
init|=
name|lists
operator|.
name|get
argument_list|(
name|x
argument_list|)
operator|.
name|listIterator
argument_list|()
decl_stmt|;
name|ListIterator
argument_list|<
name|Interceptor
argument_list|>
name|i2
init|=
name|providers
index|[
name|x
index|]
operator|.
name|listIterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|i1
operator|.
name|hasNext
argument_list|()
condition|)
block|{
if|if
condition|(
name|i1
operator|.
name|next
argument_list|()
operator|!=
name|i2
operator|.
name|next
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
block|}
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
block|}
end_class

end_unit

