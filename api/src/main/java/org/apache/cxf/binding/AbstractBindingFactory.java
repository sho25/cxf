begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|Binding
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|BindingFault
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|BindingInput
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|BindingOperation
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|BindingOutput
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|extensions
operator|.
name|ElementExtensible
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|wsdl
operator|.
name|extensions
operator|.
name|ExtensibilityElement
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|Bus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|AbstractPropertiesHolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|BindingInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|BindingOperationInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|ServiceInfo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|CastUtils
operator|.
name|cast
import|;
end_import

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractBindingFactory
extends|extends
name|AbstractBaseBindingFactory
implements|implements
name|WSDLBindingFactory
block|{
specifier|public
name|AbstractBindingFactory
parameter_list|()
block|{     }
specifier|public
name|AbstractBindingFactory
parameter_list|(
name|Collection
argument_list|<
name|String
argument_list|>
name|ns
parameter_list|)
block|{
name|super
argument_list|(
name|ns
argument_list|)
expr_stmt|;
block|}
specifier|public
name|AbstractBindingFactory
parameter_list|(
name|Bus
name|b
parameter_list|)
block|{
name|super
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
specifier|public
name|AbstractBindingFactory
parameter_list|(
name|Bus
name|b
parameter_list|,
name|Collection
argument_list|<
name|String
argument_list|>
name|ns
parameter_list|)
block|{
name|super
argument_list|(
name|b
argument_list|,
name|ns
argument_list|)
expr_stmt|;
block|}
comment|/**      * Copies extensors from the Binding to BindingInfo.      * @param service      * @param binding      * @param ns      */
specifier|public
name|BindingInfo
name|createBindingInfo
parameter_list|(
name|ServiceInfo
name|service
parameter_list|,
name|Binding
name|binding
parameter_list|,
name|String
name|ns
parameter_list|)
block|{
name|BindingInfo
name|bi
init|=
name|createBindingInfo
argument_list|(
name|service
argument_list|,
name|ns
argument_list|,
literal|null
argument_list|)
decl_stmt|;
return|return
name|initializeBindingInfo
argument_list|(
name|service
argument_list|,
name|binding
argument_list|,
name|bi
argument_list|)
return|;
block|}
specifier|protected
name|BindingInfo
name|initializeBindingInfo
parameter_list|(
name|ServiceInfo
name|service
parameter_list|,
name|Binding
name|binding
parameter_list|,
name|BindingInfo
name|bi
parameter_list|)
block|{
name|bi
operator|.
name|setName
argument_list|(
name|binding
operator|.
name|getQName
argument_list|()
argument_list|)
expr_stmt|;
name|copyExtensors
argument_list|(
name|bi
argument_list|,
name|binding
argument_list|,
literal|null
argument_list|)
expr_stmt|;
for|for
control|(
name|BindingOperation
name|bop
range|:
name|cast
argument_list|(
name|binding
operator|.
name|getBindingOperations
argument_list|()
argument_list|,
name|BindingOperation
operator|.
name|class
argument_list|)
control|)
block|{
name|String
name|inName
init|=
literal|null
decl_stmt|;
name|String
name|outName
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|bop
operator|.
name|getBindingInput
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|inName
operator|=
name|bop
operator|.
name|getBindingInput
argument_list|()
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|bop
operator|.
name|getBindingOutput
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|outName
operator|=
name|bop
operator|.
name|getBindingOutput
argument_list|()
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
name|String
name|portTypeNs
init|=
name|binding
operator|.
name|getPortType
argument_list|()
operator|.
name|getQName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
decl_stmt|;
name|QName
name|opName
init|=
operator|new
name|QName
argument_list|(
name|portTypeNs
argument_list|,
name|bop
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|BindingOperationInfo
name|bop2
init|=
name|bi
operator|.
name|getOperation
argument_list|(
name|opName
argument_list|)
decl_stmt|;
if|if
condition|(
name|bop2
operator|==
literal|null
condition|)
block|{
name|bop2
operator|=
name|bi
operator|.
name|buildOperation
argument_list|(
name|opName
argument_list|,
name|inName
argument_list|,
name|outName
argument_list|)
expr_stmt|;
if|if
condition|(
name|bop2
operator|!=
literal|null
condition|)
block|{
name|bi
operator|.
name|addOperation
argument_list|(
name|bop2
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|bop2
operator|!=
literal|null
condition|)
block|{
name|copyExtensors
argument_list|(
name|bop2
argument_list|,
name|bop
argument_list|,
name|bop2
argument_list|)
expr_stmt|;
if|if
condition|(
name|bop
operator|.
name|getBindingInput
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|copyExtensors
argument_list|(
name|bop2
operator|.
name|getInput
argument_list|()
argument_list|,
name|bop
operator|.
name|getBindingInput
argument_list|()
argument_list|,
name|bop2
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|bop
operator|.
name|getBindingOutput
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|copyExtensors
argument_list|(
name|bop2
operator|.
name|getOutput
argument_list|()
argument_list|,
name|bop
operator|.
name|getBindingOutput
argument_list|()
argument_list|,
name|bop2
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|BindingFault
name|f
range|:
name|cast
argument_list|(
name|bop
operator|.
name|getBindingFaults
argument_list|()
operator|.
name|values
argument_list|()
argument_list|,
name|BindingFault
operator|.
name|class
argument_list|)
control|)
block|{
name|copyExtensors
argument_list|(
name|bop2
operator|.
name|getFault
argument_list|(
operator|new
name|QName
argument_list|(
name|service
operator|.
name|getTargetNamespace
argument_list|()
argument_list|,
name|f
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|bop
operator|.
name|getBindingFault
argument_list|(
name|f
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|bop2
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|bi
return|;
block|}
specifier|private
name|void
name|copyExtensors
parameter_list|(
name|AbstractPropertiesHolder
name|info
parameter_list|,
name|ElementExtensible
name|extElement
parameter_list|,
name|BindingOperationInfo
name|bop
parameter_list|)
block|{
if|if
condition|(
name|info
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|ExtensibilityElement
name|ext
range|:
name|cast
argument_list|(
name|extElement
operator|.
name|getExtensibilityElements
argument_list|()
argument_list|,
name|ExtensibilityElement
operator|.
name|class
argument_list|)
control|)
block|{
name|info
operator|.
name|addExtensor
argument_list|(
name|ext
argument_list|)
expr_stmt|;
if|if
condition|(
name|bop
operator|!=
literal|null
operator|&&
name|extElement
operator|instanceof
name|BindingInput
condition|)
block|{
name|addMessageFromBinding
argument_list|(
name|ext
argument_list|,
name|bop
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|bop
operator|!=
literal|null
operator|&&
name|extElement
operator|instanceof
name|BindingOutput
condition|)
block|{
name|addMessageFromBinding
argument_list|(
name|ext
argument_list|,
name|bop
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|protected
name|void
name|addMessageFromBinding
parameter_list|(
name|ExtensibilityElement
name|ext
parameter_list|,
name|BindingOperationInfo
name|bop
parameter_list|,
name|boolean
name|isInput
parameter_list|)
block|{     }
block|}
end_class

end_unit

