begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|classloader
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|Annotation
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_class
specifier|public
specifier|final
class|class
name|JAXBClassLoaderUtils
block|{
specifier|private
name|JAXBClassLoaderUtils
parameter_list|()
block|{     }
comment|/**      * The TypeReference class is a sun specific class that is found in two different      * locations depending on environment. In IBM JDK the class is not available at all.      * So we have to load it at runtime.      *       * @param n      * @param cls      * @return initiated TypeReference      */
specifier|public
specifier|static
name|Object
name|createTypeReference
parameter_list|(
name|QName
name|n
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|cls
parameter_list|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|refClass
init|=
literal|null
decl_stmt|;
try|try
block|{
name|refClass
operator|=
name|ClassLoaderUtils
operator|.
name|loadClass
argument_list|(
literal|"com.sun.xml.bind.api.TypeReference"
argument_list|,
name|JAXBClassLoaderUtils
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex
parameter_list|)
block|{
try|try
block|{
name|refClass
operator|=
name|ClassLoaderUtils
operator|.
name|loadClass
argument_list|(
literal|"com.sun.xml.internal.bind.api.TypeReference"
argument_list|,
name|JAXBClassLoaderUtils
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|ex2
parameter_list|)
block|{
comment|//ignore
block|}
block|}
if|if
condition|(
name|refClass
operator|!=
literal|null
condition|)
block|{
try|try
block|{
return|return
name|refClass
operator|.
name|getConstructor
argument_list|(
name|QName
operator|.
name|class
argument_list|,
name|Type
operator|.
name|class
argument_list|,
operator|new
name|Annotation
index|[
literal|0
index|]
operator|.
name|getClass
argument_list|()
argument_list|)
operator|.
name|newInstance
argument_list|(
name|n
argument_list|,
name|cls
argument_list|,
operator|new
name|Annotation
index|[
literal|0
index|]
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
comment|//ignore
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

