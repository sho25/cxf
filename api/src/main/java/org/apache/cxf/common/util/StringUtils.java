begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_class
specifier|public
specifier|final
class|class
name|StringUtils
block|{
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Pattern
argument_list|>
name|PATTERN_MAP
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Pattern
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
name|String
name|patterns
index|[]
init|=
block|{
literal|"/"
block|,
literal|" "
block|,
literal|":"
block|,
literal|","
block|,
literal|";"
block|,
literal|"="
block|}
decl_stmt|;
for|for
control|(
name|String
name|p
range|:
name|patterns
control|)
block|{
name|PATTERN_MAP
operator|.
name|put
argument_list|(
name|p
argument_list|,
name|Pattern
operator|.
name|compile
argument_list|(
name|p
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|StringUtils
parameter_list|()
block|{     }
specifier|public
specifier|static
name|String
index|[]
name|split
parameter_list|(
name|String
name|s
parameter_list|,
name|String
name|regex
parameter_list|)
block|{
name|Pattern
name|p
init|=
name|PATTERN_MAP
operator|.
name|get
argument_list|(
name|regex
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|!=
literal|null
condition|)
block|{
return|return
name|p
operator|.
name|split
argument_list|(
name|s
argument_list|)
return|;
block|}
return|return
name|s
operator|.
name|split
argument_list|(
name|regex
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
index|[]
name|split
parameter_list|(
name|String
name|s
parameter_list|,
name|String
name|regex
parameter_list|,
name|int
name|limit
parameter_list|)
block|{
name|Pattern
name|p
init|=
name|PATTERN_MAP
operator|.
name|get
argument_list|(
name|regex
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|!=
literal|null
condition|)
block|{
return|return
name|p
operator|.
name|split
argument_list|(
name|s
argument_list|,
name|limit
argument_list|)
return|;
block|}
return|return
name|s
operator|.
name|split
argument_list|(
name|regex
argument_list|,
name|limit
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|extract
parameter_list|(
name|String
name|string
parameter_list|,
name|String
name|startToken
parameter_list|,
name|String
name|endToken
parameter_list|)
block|{
name|int
name|start
init|=
name|string
operator|.
name|indexOf
argument_list|(
name|startToken
argument_list|)
operator|+
name|startToken
operator|.
name|length
argument_list|()
decl_stmt|;
name|int
name|end
init|=
name|string
operator|.
name|lastIndexOf
argument_list|(
name|endToken
argument_list|)
decl_stmt|;
if|if
condition|(
name|start
operator|==
operator|-
literal|1
operator|||
name|end
operator|==
operator|-
literal|1
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|string
operator|.
name|substring
argument_list|(
name|start
argument_list|,
name|end
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|wrapper
parameter_list|(
name|String
name|string
parameter_list|,
name|String
name|startToken
parameter_list|,
name|String
name|endToken
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|startToken
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|string
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|endToken
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|boolean
name|isFileExist
parameter_list|(
name|String
name|file
parameter_list|)
block|{
return|return
operator|new
name|File
argument_list|(
name|file
argument_list|)
operator|.
name|exists
argument_list|()
operator|&&
operator|new
name|File
argument_list|(
name|file
argument_list|)
operator|.
name|isFile
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|boolean
name|isFileAbsolute
parameter_list|(
name|String
name|file
parameter_list|)
block|{
return|return
name|isFileExist
argument_list|(
name|file
argument_list|)
operator|&&
operator|new
name|File
argument_list|(
name|file
argument_list|)
operator|.
name|isAbsolute
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|URL
name|getURL
parameter_list|(
name|String
name|spec
parameter_list|)
throws|throws
name|MalformedURLException
block|{
try|try
block|{
return|return
operator|new
name|URL
argument_list|(
name|spec
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|e
parameter_list|)
block|{
return|return
operator|new
name|File
argument_list|(
name|spec
argument_list|)
operator|.
name|toURI
argument_list|()
operator|.
name|toURL
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
name|boolean
name|isEmpty
parameter_list|(
name|String
name|str
parameter_list|)
block|{
if|if
condition|(
name|str
operator|!=
literal|null
condition|)
block|{
name|int
name|len
init|=
name|str
operator|.
name|length
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|len
condition|;
operator|++
name|x
control|)
block|{
if|if
condition|(
name|str
operator|.
name|charAt
argument_list|(
name|x
argument_list|)
operator|>
literal|' '
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|public
specifier|static
name|boolean
name|isEmpty
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|list
parameter_list|)
block|{
if|if
condition|(
name|list
operator|==
literal|null
operator|||
name|list
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|list
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|&&
name|isEmpty
argument_list|(
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|public
specifier|static
name|boolean
name|isEqualUri
parameter_list|(
name|String
name|uri1
parameter_list|,
name|String
name|uri2
parameter_list|)
block|{
if|if
condition|(
name|uri1
operator|.
name|substring
argument_list|(
name|uri1
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|equals
argument_list|(
literal|"/"
argument_list|)
operator|&&
operator|!
name|uri2
operator|.
name|substring
argument_list|(
name|uri2
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|equals
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
return|return
name|uri1
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|uri1
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|equals
argument_list|(
name|uri2
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|uri2
operator|.
name|substring
argument_list|(
name|uri2
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|equals
argument_list|(
literal|"/"
argument_list|)
operator|&&
operator|!
name|uri1
operator|.
name|substring
argument_list|(
name|uri1
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|equals
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
return|return
name|uri2
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|uri2
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|equals
argument_list|(
name|uri1
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|uri1
operator|.
name|equals
argument_list|(
name|uri2
argument_list|)
return|;
block|}
block|}
specifier|public
specifier|static
name|String
name|diff
parameter_list|(
name|String
name|str1
parameter_list|,
name|String
name|str2
parameter_list|)
block|{
name|int
name|index
init|=
name|str1
operator|.
name|lastIndexOf
argument_list|(
name|str2
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|>
operator|-
literal|1
condition|)
block|{
return|return
name|str1
operator|.
name|substring
argument_list|(
name|str2
operator|.
name|length
argument_list|()
argument_list|)
return|;
block|}
return|return
name|str1
return|;
block|}
specifier|public
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|getParts
parameter_list|(
name|String
name|str
parameter_list|,
name|String
name|seperator
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|parts
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|split
argument_list|(
name|str
argument_list|,
name|seperator
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|part
range|:
name|parts
control|)
block|{
if|if
condition|(
operator|!
name|isEmpty
argument_list|(
name|part
argument_list|)
condition|)
block|{
name|ret
operator|.
name|add
argument_list|(
name|part
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|ret
return|;
block|}
specifier|public
specifier|static
name|String
name|getFirstNotEmpty
parameter_list|(
name|String
name|str
parameter_list|,
name|String
name|seperator
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|parts
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|split
argument_list|(
name|str
argument_list|,
name|seperator
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|part
range|:
name|parts
control|)
block|{
if|if
condition|(
operator|!
name|isEmpty
argument_list|(
name|part
argument_list|)
condition|)
block|{
return|return
name|part
return|;
block|}
block|}
return|return
name|str
return|;
block|}
specifier|public
specifier|static
name|String
name|getFirstNotEmpty
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|list
parameter_list|)
block|{
if|if
condition|(
name|isEmpty
argument_list|(
name|list
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
for|for
control|(
name|String
name|item
range|:
name|list
control|)
block|{
if|if
condition|(
operator|!
name|isEmpty
argument_list|(
name|item
argument_list|)
condition|)
block|{
return|return
name|item
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|public
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|getFound
parameter_list|(
name|String
name|contents
parameter_list|,
name|String
name|regex
parameter_list|)
block|{
if|if
condition|(
name|isEmpty
argument_list|(
name|regex
argument_list|)
operator|||
name|isEmpty
argument_list|(
name|contents
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Pattern
name|pattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
name|regex
argument_list|,
name|Pattern
operator|.
name|UNICODE_CASE
argument_list|)
decl_stmt|;
name|Matcher
name|matcher
init|=
name|pattern
operator|.
name|matcher
argument_list|(
name|contents
argument_list|)
decl_stmt|;
while|while
condition|(
name|matcher
operator|.
name|find
argument_list|()
condition|)
block|{
if|if
condition|(
name|matcher
operator|.
name|groupCount
argument_list|()
operator|>
literal|0
condition|)
block|{
name|results
operator|.
name|add
argument_list|(
name|matcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|results
operator|.
name|add
argument_list|(
name|matcher
operator|.
name|group
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|results
return|;
block|}
specifier|public
specifier|static
name|String
name|getFirstFound
parameter_list|(
name|String
name|contents
parameter_list|,
name|String
name|regex
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|founds
init|=
name|getFound
argument_list|(
name|contents
argument_list|,
name|regex
argument_list|)
decl_stmt|;
if|if
condition|(
name|isEmpty
argument_list|(
name|founds
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|founds
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|formatVersionNumber
parameter_list|(
name|String
name|target
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|found
init|=
name|StringUtils
operator|.
name|getFound
argument_list|(
name|target
argument_list|,
literal|"\\d+\\.\\d+\\.?\\d*"
argument_list|)
decl_stmt|;
if|if
condition|(
name|isEmpty
argument_list|(
name|found
argument_list|)
condition|)
block|{
return|return
name|target
return|;
block|}
return|return
name|getFirstNotEmpty
argument_list|(
name|found
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|addDefaultPortIfMissing
parameter_list|(
name|String
name|urlString
parameter_list|)
block|{
return|return
name|addDefaultPortIfMissing
argument_list|(
name|urlString
argument_list|,
literal|"80"
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|addDefaultPortIfMissing
parameter_list|(
name|String
name|urlString
parameter_list|,
name|String
name|defaultPort
parameter_list|)
block|{
name|URL
name|url
init|=
literal|null
decl_stmt|;
try|try
block|{
name|url
operator|=
operator|new
name|URL
argument_list|(
name|urlString
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|e
parameter_list|)
block|{
return|return
name|urlString
return|;
block|}
if|if
condition|(
name|url
operator|.
name|getPort
argument_list|()
operator|!=
operator|-
literal|1
condition|)
block|{
return|return
name|urlString
return|;
block|}
name|String
name|regex
init|=
literal|"http://([^/]+)"
decl_stmt|;
name|String
name|found
init|=
name|StringUtils
operator|.
name|getFirstFound
argument_list|(
name|urlString
argument_list|,
name|regex
argument_list|)
decl_stmt|;
name|String
name|replacer
init|=
literal|"http://"
operator|+
name|found
operator|+
literal|":"
operator|+
name|defaultPort
decl_stmt|;
if|if
condition|(
operator|!
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|found
argument_list|)
condition|)
block|{
name|urlString
operator|=
name|urlString
operator|.
name|replaceFirst
argument_list|(
name|regex
argument_list|,
name|replacer
argument_list|)
expr_stmt|;
block|}
return|return
name|urlString
return|;
block|}
comment|/**      * Return input string with first character in upper case.      * @param name input string.      * @return capitalized form.      */
specifier|public
specifier|static
name|String
name|capitalize
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|name
operator|==
literal|null
operator|||
name|name
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
name|name
return|;
block|}
name|char
name|chars
index|[]
init|=
name|name
operator|.
name|toCharArray
argument_list|()
decl_stmt|;
name|chars
index|[
literal|0
index|]
operator|=
name|Character
operator|.
name|toUpperCase
argument_list|(
name|chars
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
return|return
operator|new
name|String
argument_list|(
name|chars
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|uncapitalize
parameter_list|(
name|String
name|str
parameter_list|)
block|{
if|if
condition|(
name|str
operator|==
literal|null
operator|||
name|str
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
name|str
return|;
block|}
return|return
operator|new
name|StringBuilder
argument_list|(
name|str
operator|.
name|length
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
name|Character
operator|.
name|toLowerCase
argument_list|(
name|str
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
name|str
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

