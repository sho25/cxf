begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|feature
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|Bus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|Client
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|Server
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|InterceptorProvider
import|;
end_import

begin_comment
comment|/**  * A Feature is something that is able to customize a Server, Client, or Bus, typically  * adding capabilities. For instance, there may be a LoggingFeature which configures  * one of the above to log each of their messages.  *<p>  * By default the initialize methods all delegate to initializeProvider(InterceptorProvider).   * If you're simply adding interceptors to a Server, Client, or Bus, this allows you to add  * them easily.  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractFeature
block|{
specifier|public
name|void
name|initialize
parameter_list|(
name|Server
name|server
parameter_list|,
name|Bus
name|bus
parameter_list|)
block|{
name|initializeProvider
argument_list|(
name|server
operator|.
name|getEndpoint
argument_list|()
argument_list|,
name|bus
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|initialize
parameter_list|(
name|Client
name|client
parameter_list|,
name|Bus
name|bus
parameter_list|)
block|{
name|initializeProvider
argument_list|(
name|client
argument_list|,
name|bus
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|initialize
parameter_list|(
name|Bus
name|bus
parameter_list|)
block|{
name|initializeProvider
argument_list|(
name|bus
argument_list|,
name|bus
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|initializeProvider
parameter_list|(
name|InterceptorProvider
name|provider
parameter_list|,
name|Bus
name|bus
parameter_list|)
block|{              }
comment|/**      * Convenience method to extract a feature by type from an active list.      *       * @param features the given feature list      * @param type the feature type required      * @return the feature of the specified type if active      */
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|getActive
parameter_list|(
name|List
argument_list|<
name|AbstractFeature
argument_list|>
name|features
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
block|{
name|T
name|active
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|features
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|AbstractFeature
name|feature
range|:
name|features
control|)
block|{
if|if
condition|(
name|type
operator|.
name|isInstance
argument_list|(
name|feature
argument_list|)
condition|)
block|{
name|active
operator|=
name|type
operator|.
name|cast
argument_list|(
name|feature
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
return|return
name|active
return|;
block|}
block|}
end_class

end_unit

