begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|InputSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|Bus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|LoadingByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Exchange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|ExchangeImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|MessageImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|resource
operator|.
name|ExtendedURIResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|EndpointInfo
import|;
end_import

begin_comment
comment|/**  *   */
end_comment

begin_class
specifier|public
class|class
name|TransportURIResolver
extends|extends
name|ExtendedURIResolver
block|{
specifier|private
specifier|static
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|DEFAULT_URI_RESOLVER_HANDLES
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
comment|//bunch we really don't want to have the conduits checked for
comment|//as we know the conduits don't handle.  No point
comment|//wasting the time checking/loading conduits and such
name|DEFAULT_URI_RESOLVER_HANDLES
operator|.
name|add
argument_list|(
literal|"file"
argument_list|)
expr_stmt|;
name|DEFAULT_URI_RESOLVER_HANDLES
operator|.
name|add
argument_list|(
literal|"classpath"
argument_list|)
expr_stmt|;
name|DEFAULT_URI_RESOLVER_HANDLES
operator|.
name|add
argument_list|(
literal|"wsjar"
argument_list|)
expr_stmt|;
name|DEFAULT_URI_RESOLVER_HANDLES
operator|.
name|add
argument_list|(
literal|"jar"
argument_list|)
expr_stmt|;
name|DEFAULT_URI_RESOLVER_HANDLES
operator|.
name|add
argument_list|(
literal|"zip"
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|Bus
name|bus
decl_stmt|;
specifier|public
name|TransportURIResolver
parameter_list|(
name|Bus
name|b
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|bus
operator|=
name|b
expr_stmt|;
block|}
specifier|public
name|InputSource
name|resolve
parameter_list|(
name|String
name|curUri
parameter_list|,
name|String
name|baseUri
parameter_list|)
block|{
comment|// Spaces must be encoded or URI.resolve() will choke
name|curUri
operator|=
name|curUri
operator|.
name|replace
argument_list|(
literal|" "
argument_list|,
literal|"%20"
argument_list|)
expr_stmt|;
name|InputSource
name|is
init|=
literal|null
decl_stmt|;
name|URI
name|base
decl_stmt|;
try|try
block|{
if|if
condition|(
name|baseUri
operator|==
literal|null
condition|)
block|{
name|base
operator|=
operator|new
name|URI
argument_list|(
name|curUri
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|base
operator|=
operator|new
name|URI
argument_list|(
name|baseUri
argument_list|)
expr_stmt|;
name|base
operator|=
name|base
operator|.
name|resolve
argument_list|(
name|curUri
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|use
parameter_list|)
block|{
comment|//ignore
name|base
operator|=
literal|null
expr_stmt|;
block|}
try|try
block|{
if|if
condition|(
name|base
operator|==
literal|null
operator|||
name|DEFAULT_URI_RESOLVER_HANDLES
operator|.
name|contains
argument_list|(
name|base
operator|.
name|getScheme
argument_list|()
argument_list|)
condition|)
block|{
name|is
operator|=
name|super
operator|.
name|resolve
argument_list|(
name|curUri
argument_list|,
name|baseUri
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|//nothing
block|}
if|if
condition|(
name|is
operator|==
literal|null
operator|&&
name|base
operator|!=
literal|null
operator|&&
name|base
operator|.
name|getScheme
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|DEFAULT_URI_RESOLVER_HANDLES
operator|.
name|contains
argument_list|(
name|base
operator|.
name|getScheme
argument_list|()
argument_list|)
condition|)
block|{
try|try
block|{
name|ConduitInitiatorManager
name|mgr
init|=
name|bus
operator|.
name|getExtension
argument_list|(
name|ConduitInitiatorManager
operator|.
name|class
argument_list|)
decl_stmt|;
name|ConduitInitiator
name|ci
init|=
literal|null
decl_stmt|;
if|if
condition|(
literal|"http"
operator|.
name|equals
argument_list|(
name|base
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|||
literal|"https"
operator|.
name|equals
argument_list|(
name|base
operator|.
name|getScheme
argument_list|()
argument_list|)
condition|)
block|{
comment|//common case, don't "search"
name|ci
operator|=
name|mgr
operator|.
name|getConduitInitiator
argument_list|(
literal|"http://cxf.apache.org/transports/http"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ci
operator|==
literal|null
condition|)
block|{
name|ci
operator|=
name|mgr
operator|.
name|getConduitInitiatorForUri
argument_list|(
name|base
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ci
operator|!=
literal|null
condition|)
block|{
name|EndpointInfo
name|info
init|=
operator|new
name|EndpointInfo
argument_list|()
decl_stmt|;
comment|// set the endpointInfo name which could be used for configuration
name|info
operator|.
name|setName
argument_list|(
operator|new
name|QName
argument_list|(
literal|"http://cxf.apache.org"
argument_list|,
literal|"TransportURIResolver"
argument_list|)
argument_list|)
expr_stmt|;
name|info
operator|.
name|setAddress
argument_list|(
name|base
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Conduit
name|c
init|=
name|ci
operator|.
name|getConduit
argument_list|(
name|info
argument_list|)
decl_stmt|;
name|Message
name|message
init|=
operator|new
name|MessageImpl
argument_list|()
decl_stmt|;
name|Exchange
name|exch
init|=
operator|new
name|ExchangeImpl
argument_list|()
decl_stmt|;
name|message
operator|.
name|setExchange
argument_list|(
name|exch
argument_list|)
expr_stmt|;
name|message
operator|.
name|put
argument_list|(
name|Message
operator|.
name|HTTP_REQUEST_METHOD
argument_list|,
literal|"GET"
argument_list|)
expr_stmt|;
name|c
operator|.
name|setMessageObserver
argument_list|(
operator|new
name|MessageObserver
argument_list|()
block|{
specifier|public
name|void
name|onMessage
parameter_list|(
name|Message
name|message
parameter_list|)
block|{
name|LoadingByteArrayOutputStream
name|bout
init|=
operator|new
name|LoadingByteArrayOutputStream
argument_list|()
decl_stmt|;
try|try
block|{
name|IOUtils
operator|.
name|copy
argument_list|(
name|message
operator|.
name|getContent
argument_list|(
name|InputStream
operator|.
name|class
argument_list|)
argument_list|,
name|bout
argument_list|)
expr_stmt|;
name|message
operator|.
name|getExchange
argument_list|()
operator|.
name|put
argument_list|(
name|InputStream
operator|.
name|class
argument_list|,
name|bout
operator|.
name|createInputStream
argument_list|()
argument_list|)
expr_stmt|;
name|c
operator|.
name|close
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
comment|//ignore
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|c
operator|.
name|prepare
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|c
operator|.
name|close
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|InputStream
name|ins
init|=
name|exch
operator|.
name|get
argument_list|(
name|InputStream
operator|.
name|class
argument_list|)
decl_stmt|;
name|resourceOpened
operator|.
name|addElement
argument_list|(
name|ins
argument_list|)
expr_stmt|;
name|InputSource
name|src
init|=
operator|new
name|InputSource
argument_list|(
name|ins
argument_list|)
decl_stmt|;
name|String
name|u
init|=
operator|(
name|String
operator|)
name|message
operator|.
name|get
argument_list|(
literal|"http.retransmit.url"
argument_list|)
decl_stmt|;
if|if
condition|(
name|u
operator|==
literal|null
condition|)
block|{
name|u
operator|=
name|base
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
name|src
operator|.
name|setPublicId
argument_list|(
name|u
argument_list|)
expr_stmt|;
name|src
operator|.
name|setSystemId
argument_list|(
name|u
argument_list|)
expr_stmt|;
name|lastestImportUri
operator|=
name|u
expr_stmt|;
name|currentResolver
operator|.
name|unresolve
argument_list|()
expr_stmt|;
return|return
name|src
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|//ignore
block|}
block|}
if|if
condition|(
name|is
operator|==
literal|null
operator|&&
operator|(
name|base
operator|==
literal|null
operator|||
name|base
operator|.
name|getScheme
argument_list|()
operator|==
literal|null
operator|||
operator|!
name|DEFAULT_URI_RESOLVER_HANDLES
operator|.
name|contains
argument_list|(
name|base
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|)
condition|)
block|{
name|is
operator|=
name|super
operator|.
name|resolve
argument_list|(
name|curUri
argument_list|,
name|baseUri
argument_list|)
expr_stmt|;
block|}
return|return
name|is
return|;
block|}
block|}
end_class

end_unit

