begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|io
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|LoadingByteArrayOutputStream
import|;
end_import

begin_comment
comment|/**  * Outputstream that will buffer a certain amount before writing anything to the underlying  * stream.   When the threshold is reached, provides a callback point to allow the  * subclass to update headers, replace/set the output stream, etc...  *   * Also provides a callback for when the stream is closed without it reaching the threshold.  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractThresholdOutputStream
extends|extends
name|AbstractWrappedOutputStream
block|{
specifier|protected
name|int
name|threshold
decl_stmt|;
specifier|protected
name|LoadingByteArrayOutputStream
name|buffer
decl_stmt|;
specifier|public
name|AbstractThresholdOutputStream
parameter_list|(
name|int
name|threshold
parameter_list|)
block|{
name|this
operator|.
name|threshold
operator|=
name|threshold
expr_stmt|;
if|if
condition|(
name|threshold
operator|>
literal|0
condition|)
block|{
name|buffer
operator|=
operator|new
name|LoadingByteArrayOutputStream
argument_list|(
name|threshold
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|abstract
name|void
name|thresholdReached
parameter_list|()
function_decl|;
specifier|public
specifier|abstract
name|void
name|thresholdNotReached
parameter_list|()
function_decl|;
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|buffer
operator|!=
literal|null
condition|)
block|{
name|int
name|space
init|=
name|threshold
operator|-
name|buffer
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|space
operator|>
name|len
condition|)
block|{
name|space
operator|=
name|len
expr_stmt|;
block|}
name|buffer
operator|.
name|write
argument_list|(
name|b
argument_list|,
name|off
argument_list|,
name|space
argument_list|)
expr_stmt|;
name|len
operator|-=
name|space
expr_stmt|;
name|off
operator|+=
name|space
expr_stmt|;
if|if
condition|(
name|buffer
operator|.
name|size
argument_list|()
operator|>=
name|threshold
condition|)
block|{
name|thresholdReached
argument_list|()
expr_stmt|;
name|unBuffer
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|len
operator|==
literal|0
condition|)
block|{
return|return;
block|}
block|}
name|super
operator|.
name|write
argument_list|(
name|b
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|int
name|b
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|buffer
operator|!=
literal|null
condition|)
block|{
name|buffer
operator|.
name|write
argument_list|(
name|b
argument_list|)
expr_stmt|;
if|if
condition|(
name|buffer
operator|.
name|size
argument_list|()
operator|>=
name|threshold
condition|)
block|{
name|thresholdReached
argument_list|()
expr_stmt|;
name|unBuffer
argument_list|()
expr_stmt|;
block|}
return|return;
block|}
name|super
operator|.
name|write
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|unBuffer
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|buffer
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|buffer
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|super
operator|.
name|write
argument_list|(
name|buffer
operator|.
name|getRawBytes
argument_list|()
argument_list|,
literal|0
argument_list|,
name|buffer
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|buffer
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|buffer
operator|!=
literal|null
condition|)
block|{
name|thresholdNotReached
argument_list|()
expr_stmt|;
name|unBuffer
argument_list|()
expr_stmt|;
block|}
name|super
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

