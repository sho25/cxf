begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractPropertiesHolder
implements|implements
name|Extensible
block|{
specifier|private
name|AtomicReference
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|propertyMap
init|=
operator|new
name|AtomicReference
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|AtomicReference
argument_list|<
name|Object
index|[]
argument_list|>
name|extensors
init|=
operator|new
name|AtomicReference
argument_list|<
name|Object
index|[]
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|QName
argument_list|,
name|Object
argument_list|>
name|extensionAttributes
decl_stmt|;
specifier|private
name|String
name|documentation
decl_stmt|;
specifier|public
name|String
name|getDocumentation
parameter_list|()
block|{
return|return
name|documentation
return|;
block|}
specifier|public
name|void
name|setDocumentation
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|documentation
operator|=
name|s
expr_stmt|;
block|}
specifier|public
name|Object
name|getProperty
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
literal|null
operator|==
name|propertyMap
operator|.
name|get
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|propertyMap
operator|.
name|get
argument_list|()
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|public
name|Object
name|removeProperty
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
literal|null
operator|==
name|propertyMap
operator|.
name|get
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|propertyMap
operator|.
name|get
argument_list|()
operator|.
name|remove
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|getProperty
parameter_list|(
name|String
name|name
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|cls
parameter_list|)
block|{
return|return
name|cls
operator|.
name|cast
argument_list|(
name|getProperty
argument_list|(
name|name
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|hasProperty
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
name|propertyMap
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|map
operator|!=
literal|null
condition|)
block|{
return|return
name|map
operator|.
name|containsKey
argument_list|(
name|name
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|void
name|setProperty
parameter_list|(
name|String
name|name
parameter_list|,
name|Object
name|v
parameter_list|)
block|{
if|if
condition|(
literal|null
operator|==
name|propertyMap
operator|.
name|get
argument_list|()
condition|)
block|{
name|propertyMap
operator|.
name|compareAndSet
argument_list|(
literal|null
argument_list|,
operator|new
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|v
operator|==
literal|null
condition|)
block|{
name|propertyMap
operator|.
name|get
argument_list|()
operator|.
name|remove
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|propertyMap
operator|.
name|get
argument_list|()
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|containsExtensor
parameter_list|(
name|Object
name|el
parameter_list|)
block|{
name|Object
name|exts
index|[]
init|=
name|extensors
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|exts
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Object
name|o
range|:
name|exts
control|)
block|{
if|if
condition|(
name|o
operator|==
name|el
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|void
name|addExtensor
parameter_list|(
name|Object
name|el
parameter_list|)
block|{
name|Object
name|exts
index|[]
init|=
name|extensors
operator|.
name|get
argument_list|()
decl_stmt|;
name|Object
name|exts2
index|[]
decl_stmt|;
if|if
condition|(
name|exts
operator|==
literal|null
condition|)
block|{
name|exts2
operator|=
operator|new
name|Object
index|[
literal|1
index|]
expr_stmt|;
block|}
else|else
block|{
name|exts2
operator|=
operator|new
name|Object
index|[
name|exts
operator|.
name|length
operator|+
literal|1
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|exts
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|exts2
index|[
name|i
index|]
operator|=
name|exts
index|[
name|i
index|]
expr_stmt|;
block|}
block|}
name|exts2
index|[
name|exts2
operator|.
name|length
operator|-
literal|1
index|]
operator|=
name|el
expr_stmt|;
if|if
condition|(
operator|!
name|extensors
operator|.
name|compareAndSet
argument_list|(
name|exts
argument_list|,
name|exts2
argument_list|)
condition|)
block|{
comment|//keep trying
name|addExtensor
argument_list|(
name|el
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|getExtensor
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|cls
parameter_list|)
block|{
name|Object
name|exts
index|[]
init|=
name|extensors
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|exts
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|exts
operator|.
name|length
condition|;
name|x
operator|++
control|)
block|{
if|if
condition|(
name|cls
operator|.
name|isInstance
argument_list|(
name|exts
index|[
name|x
index|]
argument_list|)
condition|)
block|{
return|return
name|cls
operator|.
name|cast
argument_list|(
name|exts
index|[
name|x
index|]
argument_list|)
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|public
parameter_list|<
name|T
parameter_list|>
name|List
argument_list|<
name|T
argument_list|>
name|getExtensors
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|cls
parameter_list|)
block|{
name|Object
name|exts
index|[]
init|=
name|extensors
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|exts
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|List
argument_list|<
name|T
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|T
argument_list|>
argument_list|(
name|exts
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|exts
operator|.
name|length
condition|;
name|x
operator|++
control|)
block|{
if|if
condition|(
name|cls
operator|.
name|isInstance
argument_list|(
name|exts
index|[
name|x
index|]
argument_list|)
condition|)
block|{
name|list
operator|.
name|add
argument_list|(
name|cls
operator|.
name|cast
argument_list|(
name|exts
index|[
name|x
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|list
return|;
block|}
specifier|public
name|AtomicReference
argument_list|<
name|Object
index|[]
argument_list|>
name|getExtensors
parameter_list|()
block|{
return|return
name|extensors
return|;
block|}
specifier|public
name|Object
name|getExtensionAttribute
parameter_list|(
name|QName
name|name
parameter_list|)
block|{
return|return
literal|null
operator|==
name|extensionAttributes
condition|?
literal|null
else|:
name|extensionAttributes
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|public
name|Map
argument_list|<
name|QName
argument_list|,
name|Object
argument_list|>
name|getExtensionAttributes
parameter_list|()
block|{
return|return
name|extensionAttributes
return|;
block|}
specifier|public
name|void
name|addExtensionAttribute
parameter_list|(
name|QName
name|name
parameter_list|,
name|Object
name|attr
parameter_list|)
block|{
if|if
condition|(
literal|null
operator|==
name|extensionAttributes
condition|)
block|{
name|extensionAttributes
operator|=
operator|new
name|HashMap
argument_list|<
name|QName
argument_list|,
name|Object
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|extensionAttributes
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|attr
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setExtensionAttributes
parameter_list|(
name|Map
argument_list|<
name|QName
argument_list|,
name|Object
argument_list|>
name|attrs
parameter_list|)
block|{
name|extensionAttributes
operator|=
name|attrs
expr_stmt|;
block|}
comment|/**      * Lookup a configuration value. This may be found in the properties holder supplied      * (i.e. an EndpointInfo or ServiceInfo), or it may be a property on the Bus itself.      * If no value is found, the defaultValue is returned.      *       * @param defaultValue the default value      * @param type the extensor type      * @return the configuration value or the default      */
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|getTraversedExtensor
parameter_list|(
name|T
name|defaultValue
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
block|{
name|T
name|extensor
init|=
name|getExtensor
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|extensor
operator|==
literal|null
condition|)
block|{
return|return
name|defaultValue
return|;
block|}
return|return
name|extensor
return|;
block|}
specifier|protected
specifier|static
specifier|final
name|boolean
name|equals
parameter_list|(
name|Object
name|o1
parameter_list|,
name|Object
name|o2
parameter_list|)
block|{
if|if
condition|(
name|o1
operator|==
literal|null
operator|&&
name|o2
operator|!=
literal|null
operator|||
name|o1
operator|!=
literal|null
operator|&&
name|o2
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|o1
operator|==
literal|null
condition|?
literal|true
else|:
name|o1
operator|.
name|equals
argument_list|(
name|o2
argument_list|)
return|;
block|}
block|}
end_class

end_unit

