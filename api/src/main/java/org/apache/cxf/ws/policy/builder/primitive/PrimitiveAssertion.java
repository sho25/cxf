begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|policy
operator|.
name|builder
operator|.
name|primitive
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Attr
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NamedNodeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|policy
operator|.
name|AssertionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|policy
operator|.
name|AssertionInfoMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|policy
operator|.
name|PolicyAssertion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|policy
operator|.
name|PolicyConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|neethi
operator|.
name|All
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|neethi
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|neethi
operator|.
name|ExactlyOne
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|neethi
operator|.
name|Policy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|neethi
operator|.
name|PolicyComponent
import|;
end_import

begin_comment
comment|/**  *   */
end_comment

begin_class
specifier|public
class|class
name|PrimitiveAssertion
implements|implements
name|PolicyAssertion
block|{
specifier|protected
name|QName
name|name
decl_stmt|;
specifier|protected
name|boolean
name|optional
decl_stmt|;
specifier|public
name|PrimitiveAssertion
parameter_list|()
block|{
name|this
argument_list|(
operator|(
name|QName
operator|)
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|PrimitiveAssertion
parameter_list|(
name|QName
name|n
parameter_list|)
block|{
name|this
argument_list|(
name|n
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
name|PrimitiveAssertion
parameter_list|(
name|QName
name|n
parameter_list|,
name|boolean
name|o
parameter_list|)
block|{
name|name
operator|=
name|n
expr_stmt|;
name|optional
operator|=
name|o
expr_stmt|;
block|}
specifier|public
name|PrimitiveAssertion
parameter_list|(
name|Element
name|element
parameter_list|)
block|{
name|name
operator|=
operator|new
name|QName
argument_list|(
name|element
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
name|element
operator|.
name|getLocalName
argument_list|()
argument_list|)
expr_stmt|;
name|NamedNodeMap
name|atts
init|=
name|element
operator|.
name|getAttributes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|atts
operator|.
name|getLength
argument_list|()
condition|;
name|x
operator|++
control|)
block|{
name|Attr
name|att
init|=
operator|(
name|Attr
operator|)
name|atts
operator|.
name|item
argument_list|(
name|x
argument_list|)
decl_stmt|;
name|QName
name|qn
init|=
operator|new
name|QName
argument_list|(
name|att
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
name|att
operator|.
name|getLocalName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|PolicyConstants
operator|.
name|isOptionalAttribute
argument_list|(
name|qn
argument_list|)
condition|)
block|{
name|optional
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|att
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|name
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|equal
parameter_list|(
name|PolicyComponent
name|policyComponent
parameter_list|)
block|{
if|if
condition|(
name|policyComponent
operator|.
name|getType
argument_list|()
operator|!=
name|Constants
operator|.
name|TYPE_ASSERTION
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|PolicyAssertion
operator|)
name|policyComponent
operator|)
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|short
name|getType
parameter_list|()
block|{
return|return
name|Constants
operator|.
name|TYPE_ASSERTION
return|;
block|}
specifier|public
name|QName
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
specifier|public
name|void
name|setName
parameter_list|(
name|QName
name|n
parameter_list|)
block|{
name|name
operator|=
name|n
expr_stmt|;
block|}
specifier|public
name|boolean
name|isOptional
parameter_list|()
block|{
return|return
name|optional
return|;
block|}
specifier|public
name|void
name|setOptional
parameter_list|(
name|boolean
name|o
parameter_list|)
block|{
name|optional
operator|=
name|o
expr_stmt|;
block|}
specifier|public
name|PolicyComponent
name|normalize
parameter_list|()
block|{
if|if
condition|(
name|isOptional
argument_list|()
condition|)
block|{
name|Policy
name|policy
init|=
operator|new
name|Policy
argument_list|()
decl_stmt|;
name|ExactlyOne
name|exactlyOne
init|=
operator|new
name|ExactlyOne
argument_list|()
decl_stmt|;
name|All
name|all
init|=
operator|new
name|All
argument_list|()
decl_stmt|;
name|all
operator|.
name|addPolicyComponent
argument_list|(
name|cloneMandatory
argument_list|()
argument_list|)
expr_stmt|;
name|exactlyOne
operator|.
name|addPolicyComponent
argument_list|(
name|all
argument_list|)
expr_stmt|;
name|exactlyOne
operator|.
name|addPolicyComponent
argument_list|(
operator|new
name|All
argument_list|()
argument_list|)
expr_stmt|;
name|policy
operator|.
name|addPolicyComponent
argument_list|(
name|exactlyOne
argument_list|)
expr_stmt|;
return|return
name|policy
return|;
block|}
return|return
name|cloneMandatory
argument_list|()
return|;
block|}
specifier|public
name|void
name|serialize
parameter_list|(
name|XMLStreamWriter
name|writer
parameter_list|)
throws|throws
name|XMLStreamException
block|{     }
specifier|protected
name|PolicyAssertion
name|cloneMandatory
parameter_list|()
block|{
return|return
operator|new
name|PrimitiveAssertion
argument_list|(
name|name
argument_list|,
literal|false
argument_list|)
return|;
block|}
specifier|public
name|Policy
name|getPolicy
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
specifier|public
name|boolean
name|isAsserted
parameter_list|(
name|AssertionInfoMap
name|aim
parameter_list|)
block|{
name|Collection
argument_list|<
name|AssertionInfo
argument_list|>
name|ail
init|=
name|aim
operator|.
name|getAssertionInfo
argument_list|(
name|name
argument_list|)
decl_stmt|;
for|for
control|(
name|AssertionInfo
name|ai
range|:
name|ail
control|)
block|{
if|if
condition|(
name|ai
operator|.
name|isAsserted
argument_list|()
operator|&&
name|ai
operator|.
name|getAssertion
argument_list|()
operator|.
name|equal
argument_list|(
name|this
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

