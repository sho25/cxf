begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|policy
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
operator|.
name|CastUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|neethi
operator|.
name|All
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|neethi
operator|.
name|ExactlyOne
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|neethi
operator|.
name|Policy
import|;
end_import

begin_comment
comment|/**  * This class contains methods dealing with policy intersection.  * Intersection of two assertions, i.e. computation if a compatible assertion,  * is domain specific and relies on AssertionBuilder.buildCompatible.  * See Section 4.5 in http://www.w3.org/TR/2006/WD-ws-policy-20061117.  */
end_comment

begin_class
specifier|public
class|class
name|Intersector
block|{
specifier|private
name|AssertionBuilderRegistry
name|assertionBuilderRegistry
decl_stmt|;
specifier|private
name|boolean
name|strict
decl_stmt|;
specifier|public
name|Intersector
parameter_list|(
name|AssertionBuilderRegistry
name|abr
parameter_list|)
block|{
name|assertionBuilderRegistry
operator|=
name|abr
expr_stmt|;
name|strict
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|boolean
name|isStrict
parameter_list|()
block|{
return|return
name|strict
return|;
block|}
specifier|public
name|void
name|setStrict
parameter_list|(
name|boolean
name|s
parameter_list|)
block|{
name|strict
operator|=
name|s
expr_stmt|;
block|}
name|boolean
name|compatibleAssertions
parameter_list|(
name|PolicyAssertion
name|a1
parameter_list|,
name|PolicyAssertion
name|a2
parameter_list|)
block|{
name|AssertionBuilder
name|ab
init|=
name|assertionBuilderRegistry
operator|.
name|get
argument_list|(
name|a1
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|ab
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|null
operator|!=
name|ab
operator|.
name|buildCompatible
argument_list|(
name|a1
argument_list|,
name|a2
argument_list|)
return|;
block|}
name|boolean
name|compatibleAlternatives
parameter_list|(
name|Collection
argument_list|<
name|PolicyAssertion
argument_list|>
name|alt1
parameter_list|,
name|Collection
argument_list|<
name|PolicyAssertion
argument_list|>
name|alt2
parameter_list|)
block|{
if|if
condition|(
name|alt1
operator|.
name|isEmpty
argument_list|()
operator|||
name|alt2
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|strict
condition|)
block|{
for|for
control|(
name|PolicyAssertion
name|a1
range|:
name|alt1
control|)
block|{
if|if
condition|(
literal|null
operator|==
name|findCompatibleAssertion
argument_list|(
name|a1
argument_list|,
name|alt2
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
for|for
control|(
name|PolicyAssertion
name|a2
range|:
name|alt2
control|)
block|{
if|if
condition|(
literal|null
operator|==
name|findCompatibleAssertion
argument_list|(
name|a2
argument_list|,
name|alt1
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
comment|// Lax intersection not supported as neethi does not support Ignorable yet.
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Lax intersection of assertions is not supported "
operator|+
literal|"because the Ignorable attribute is not supported."
argument_list|)
throw|;
block|}
name|boolean
name|compatiblePolicies
parameter_list|(
name|Policy
name|p1
parameter_list|,
name|Policy
name|p2
parameter_list|)
block|{
name|Iterator
name|i1
init|=
name|p1
operator|.
name|getAlternatives
argument_list|()
decl_stmt|;
while|while
condition|(
name|i1
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Collection
argument_list|<
name|PolicyAssertion
argument_list|>
name|alt1
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
operator|(
name|Collection
operator|)
name|i1
operator|.
name|next
argument_list|()
argument_list|,
name|PolicyAssertion
operator|.
name|class
argument_list|)
decl_stmt|;
name|Iterator
name|i2
init|=
name|p2
operator|.
name|getAlternatives
argument_list|()
decl_stmt|;
while|while
condition|(
name|i2
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Collection
argument_list|<
name|PolicyAssertion
argument_list|>
name|alt2
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
operator|(
name|Collection
operator|)
name|i2
operator|.
name|next
argument_list|()
argument_list|,
name|PolicyAssertion
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|compatibleAlternatives
argument_list|(
name|alt1
argument_list|,
name|alt2
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|PolicyAssertion
name|intersect
parameter_list|(
name|PolicyAssertion
name|a1
parameter_list|,
name|PolicyAssertion
name|a2
parameter_list|)
block|{
name|AssertionBuilder
name|ab
init|=
name|assertionBuilderRegistry
operator|.
name|get
argument_list|(
name|a1
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|ab
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|ab
operator|.
name|buildCompatible
argument_list|(
name|a1
argument_list|,
name|a2
argument_list|)
return|;
block|}
specifier|public
name|Collection
argument_list|<
name|PolicyAssertion
argument_list|>
name|intersect
parameter_list|(
name|Collection
argument_list|<
name|PolicyAssertion
argument_list|>
name|alt1
parameter_list|,
name|Collection
argument_list|<
name|PolicyAssertion
argument_list|>
name|alt2
parameter_list|)
block|{
if|if
condition|(
operator|!
name|compatibleAlternatives
argument_list|(
name|alt1
argument_list|,
name|alt2
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Collection
argument_list|<
name|PolicyAssertion
argument_list|>
name|intersection
init|=
operator|new
name|ArrayList
argument_list|<
name|PolicyAssertion
argument_list|>
argument_list|()
decl_stmt|;
name|intersection
operator|.
name|addAll
argument_list|(
name|alt1
argument_list|)
expr_stmt|;
name|intersection
operator|.
name|addAll
argument_list|(
name|alt2
argument_list|)
expr_stmt|;
return|return
name|intersection
return|;
block|}
specifier|public
name|Policy
name|intersect
parameter_list|(
name|Policy
name|p1
parameter_list|,
name|Policy
name|p2
parameter_list|)
block|{
if|if
condition|(
operator|!
name|compatiblePolicies
argument_list|(
name|p1
argument_list|,
name|p2
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Policy
name|compatible
init|=
operator|new
name|Policy
argument_list|()
decl_stmt|;
name|ExactlyOne
name|eo
init|=
operator|new
name|ExactlyOne
argument_list|()
decl_stmt|;
name|Iterator
name|i1
init|=
name|p1
operator|.
name|getAlternatives
argument_list|()
decl_stmt|;
while|while
condition|(
name|i1
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|PolicyAssertion
argument_list|>
name|alt1
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
operator|(
name|List
operator|)
name|i1
operator|.
name|next
argument_list|()
argument_list|,
name|PolicyAssertion
operator|.
name|class
argument_list|)
decl_stmt|;
name|Iterator
name|i2
init|=
name|p2
operator|.
name|getAlternatives
argument_list|()
decl_stmt|;
while|while
condition|(
name|i2
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|PolicyAssertion
argument_list|>
name|alt2
init|=
name|CastUtils
operator|.
name|cast
argument_list|(
operator|(
name|List
operator|)
name|i2
operator|.
name|next
argument_list|()
argument_list|,
name|PolicyAssertion
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|compatibleAlternatives
argument_list|(
name|alt1
argument_list|,
name|alt2
argument_list|)
condition|)
block|{
name|All
name|all
init|=
operator|new
name|All
argument_list|()
decl_stmt|;
name|all
operator|.
name|addPolicyComponents
argument_list|(
name|alt1
argument_list|)
expr_stmt|;
name|all
operator|.
name|addPolicyComponents
argument_list|(
name|alt2
argument_list|)
expr_stmt|;
name|eo
operator|.
name|addPolicyComponent
argument_list|(
name|all
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|eo
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|compatible
operator|.
name|addPolicyComponent
argument_list|(
name|eo
argument_list|)
expr_stmt|;
block|}
return|return
name|compatible
return|;
block|}
specifier|private
name|PolicyAssertion
name|findCompatibleAssertion
parameter_list|(
name|PolicyAssertion
name|assertion
parameter_list|,
name|Collection
argument_list|<
name|PolicyAssertion
argument_list|>
name|alt
parameter_list|)
block|{
for|for
control|(
name|PolicyAssertion
name|a
range|:
name|alt
control|)
block|{
name|PolicyAssertion
name|compatible
init|=
name|intersect
argument_list|(
name|assertion
argument_list|,
name|a
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|compatible
condition|)
block|{
return|return
name|compatible
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

