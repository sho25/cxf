begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|policy
operator|.
name|builder
operator|.
name|primitive
package|;
end_package

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|policy
operator|.
name|AssertionBuilderRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|policy
operator|.
name|Intersector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|policy
operator|.
name|PolicyAssertion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|policy
operator|.
name|PolicyBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|neethi
operator|.
name|Policy
import|;
end_import

begin_class
specifier|public
class|class
name|NestedPrimitiveAssertionBuilder
extends|extends
name|PrimitiveAssertionBuilder
block|{
specifier|private
name|PolicyBuilder
name|builder
decl_stmt|;
specifier|private
name|AssertionBuilderRegistry
name|assertionBuilderRegistry
decl_stmt|;
specifier|public
name|void
name|setPolicyBuilder
parameter_list|(
name|PolicyBuilder
name|b
parameter_list|)
block|{
name|builder
operator|=
name|b
expr_stmt|;
block|}
specifier|public
name|void
name|setAssertionBuilderRegistry
parameter_list|(
name|AssertionBuilderRegistry
name|abr
parameter_list|)
block|{
name|assertionBuilderRegistry
operator|=
name|abr
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|PolicyAssertion
name|build
parameter_list|(
name|Element
name|elem
parameter_list|)
block|{
return|return
operator|new
name|NestedPrimitiveAssertion
argument_list|(
name|elem
argument_list|,
name|builder
argument_list|,
name|getPolicyConstants
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
comment|/**      * If the nested policies in both assertions are empty, the compatible policy      * .       * The compatible policy is optional iff both assertions are optional.      */
specifier|public
name|PolicyAssertion
name|buildCompatible
parameter_list|(
name|PolicyAssertion
name|a
parameter_list|,
name|PolicyAssertion
name|b
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getKnownElements
argument_list|()
operator|.
name|contains
argument_list|(
name|a
operator|.
name|getName
argument_list|()
argument_list|)
operator|||
operator|!
name|a
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|b
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
literal|null
operator|==
name|assertionBuilderRegistry
condition|)
block|{
return|return
literal|null
return|;
block|}
name|NestedPrimitiveAssertion
name|na
init|=
operator|(
name|NestedPrimitiveAssertion
operator|)
name|a
decl_stmt|;
name|NestedPrimitiveAssertion
name|nb
init|=
operator|(
name|NestedPrimitiveAssertion
operator|)
name|b
decl_stmt|;
name|Intersector
name|intersector
init|=
operator|new
name|Intersector
argument_list|(
name|assertionBuilderRegistry
argument_list|)
decl_stmt|;
name|Policy
name|nested
init|=
name|intersector
operator|.
name|intersect
argument_list|(
name|na
operator|.
name|getPolicy
argument_list|()
argument_list|,
name|nb
operator|.
name|getPolicy
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|nested
condition|)
block|{
return|return
literal|null
return|;
block|}
name|NestedPrimitiveAssertion
name|compatible
init|=
operator|new
name|NestedPrimitiveAssertion
argument_list|(
name|a
operator|.
name|getName
argument_list|()
argument_list|,
name|a
operator|.
name|isOptional
argument_list|()
operator|&&
name|b
operator|.
name|isOptional
argument_list|()
argument_list|)
decl_stmt|;
name|compatible
operator|.
name|setPolicy
argument_list|(
name|nested
argument_list|)
expr_stmt|;
return|return
name|compatible
return|;
block|}
block|}
end_class

end_unit

