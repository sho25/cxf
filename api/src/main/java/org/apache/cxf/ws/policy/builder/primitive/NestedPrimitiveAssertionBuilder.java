begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|policy
operator|.
name|builder
operator|.
name|primitive
package|;
end_package

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|policy
operator|.
name|PolicyAssertion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|policy
operator|.
name|PolicyBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|neethi
operator|.
name|Constants
import|;
end_import

begin_class
specifier|public
class|class
name|NestedPrimitiveAssertionBuilder
extends|extends
name|PrimitiveAssertionBuilder
block|{
specifier|private
name|PolicyBuilder
name|builder
decl_stmt|;
specifier|public
name|NestedPrimitiveAssertionBuilder
parameter_list|()
block|{     }
specifier|public
name|NestedPrimitiveAssertionBuilder
parameter_list|(
name|PolicyBuilder
name|b
parameter_list|)
block|{
name|builder
operator|=
name|b
expr_stmt|;
block|}
specifier|public
name|void
name|setPolicyBuilder
parameter_list|(
name|PolicyBuilder
name|b
parameter_list|)
block|{
name|builder
operator|=
name|b
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|PolicyAssertion
name|build
parameter_list|(
name|Element
name|element
parameter_list|)
block|{
name|Node
name|nd
init|=
name|element
operator|.
name|getFirstChild
argument_list|()
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
name|int
name|policyCount
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|nd
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|nd
operator|instanceof
name|Element
condition|)
block|{
name|count
operator|++
expr_stmt|;
name|Element
name|el
init|=
operator|(
name|Element
operator|)
name|nd
decl_stmt|;
if|if
condition|(
name|Constants
operator|.
name|isPolicyElement
argument_list|(
name|el
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
name|el
operator|.
name|getLocalName
argument_list|()
argument_list|)
condition|)
block|{
name|policyCount
operator|++
expr_stmt|;
block|}
block|}
name|nd
operator|=
name|nd
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|count
operator|==
literal|0
condition|)
block|{
return|return
operator|new
name|PrimitiveAssertion
argument_list|(
name|element
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|policyCount
operator|==
literal|1
operator|&&
name|count
operator|==
literal|1
condition|)
block|{
return|return
operator|new
name|NestedPrimitiveAssertion
argument_list|(
name|element
argument_list|,
name|builder
argument_list|)
return|;
block|}
return|return
operator|new
name|PrimitiveAssertion
argument_list|(
name|element
argument_list|)
return|;
block|}
block|}
end_class

end_unit

