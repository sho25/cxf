begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|policy
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|policy
operator|.
name|PolicyAssertion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|neethi
operator|.
name|All
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|neethi
operator|.
name|Assertion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|neethi
operator|.
name|ExactlyOne
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|neethi
operator|.
name|Policy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|neethi
operator|.
name|PolicyComponent
import|;
end_import

begin_class
specifier|public
specifier|final
class|class
name|PolicyComparator
block|{
specifier|private
name|PolicyComparator
parameter_list|()
block|{     }
comment|/**      * Returns<tt>true</tt> if the two policies have the same semantics      *       * @param arg1 a Policy      * @param arg2 another Policy      * @return<tt>true</tt> iff both policies have the same semantics      */
specifier|public
specifier|static
name|boolean
name|compare
parameter_list|(
name|Policy
name|arg1
parameter_list|,
name|Policy
name|arg2
parameter_list|)
block|{
name|boolean
name|result
init|=
name|compare
argument_list|(
name|arg1
operator|.
name|getPolicyComponents
argument_list|()
argument_list|,
name|arg2
operator|.
name|getPolicyComponents
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|result
return|;
block|}
comment|/**      * Returns<tt>true</tt> if the two PolicyComponents have the same      * semantics.      *       * @param arg1 a PolicyComponent      * @param arg2 another PolicyComponent      * @return<tt>true</tt> iff both PolicyComponents have the same semantics      */
specifier|public
specifier|static
name|boolean
name|compare
parameter_list|(
name|PolicyComponent
name|arg1
parameter_list|,
name|PolicyComponent
name|arg2
parameter_list|)
block|{
comment|// support parameterised assertion implementations
comment|/*         if (!arg1.getClass().equals(arg2.getClass())) {             return false;         }         */
if|if
condition|(
name|arg1
operator|instanceof
name|Policy
condition|)
block|{
return|return
name|compare
argument_list|(
operator|(
name|Policy
operator|)
name|arg1
argument_list|,
operator|(
name|Policy
operator|)
name|arg2
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|arg1
operator|instanceof
name|All
condition|)
block|{
return|return
name|compare
argument_list|(
operator|(
name|All
operator|)
name|arg1
argument_list|,
operator|(
name|All
operator|)
name|arg2
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|arg1
operator|instanceof
name|ExactlyOne
condition|)
block|{
return|return
name|compare
argument_list|(
operator|(
name|ExactlyOne
operator|)
name|arg1
argument_list|,
operator|(
name|ExactlyOne
operator|)
name|arg2
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|arg1
operator|instanceof
name|PolicyAssertion
condition|)
block|{
return|return
name|compare
argument_list|(
operator|(
name|PolicyAssertion
operator|)
name|arg1
argument_list|,
operator|(
name|PolicyAssertion
operator|)
name|arg2
argument_list|)
return|;
block|}
else|else
block|{
comment|// TODO should I throw an exception ..
block|}
return|return
literal|false
return|;
block|}
specifier|public
specifier|static
name|boolean
name|compare
parameter_list|(
name|All
name|arg1
parameter_list|,
name|All
name|arg2
parameter_list|)
block|{
return|return
name|compare
argument_list|(
name|arg1
operator|.
name|getPolicyComponents
argument_list|()
argument_list|,
name|arg2
operator|.
name|getPolicyComponents
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|boolean
name|compare
parameter_list|(
name|ExactlyOne
name|arg1
parameter_list|,
name|ExactlyOne
name|arg2
parameter_list|)
block|{
return|return
name|compare
argument_list|(
name|arg1
operator|.
name|getPolicyComponents
argument_list|()
argument_list|,
name|arg2
operator|.
name|getPolicyComponents
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|boolean
name|compare
parameter_list|(
name|Assertion
name|arg1
parameter_list|,
name|Assertion
name|arg2
parameter_list|)
block|{
comment|// we have equal in the assertion interface so use it
return|return
name|arg1
operator|.
name|equal
argument_list|(
name|arg2
argument_list|)
return|;
comment|/*         if (!(arg1.getName().equals(arg2.getName()))) {             return false;         }         return true;         */
block|}
specifier|private
specifier|static
name|boolean
name|compare
parameter_list|(
name|List
name|arg1
parameter_list|,
name|List
name|arg2
parameter_list|)
block|{
if|if
condition|(
name|arg1
operator|.
name|size
argument_list|()
operator|!=
name|arg2
operator|.
name|size
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|Iterator
name|iterator
init|=
name|arg1
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|PolicyComponent
name|assertion1
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|assertion1
operator|=
operator|(
name|PolicyComponent
operator|)
name|iterator
operator|.
name|next
argument_list|()
expr_stmt|;
name|Iterator
name|iterator2
init|=
name|arg2
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|boolean
name|match
init|=
literal|false
decl_stmt|;
name|PolicyComponent
name|assertion2
decl_stmt|;
while|while
condition|(
name|iterator2
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|assertion2
operator|=
operator|(
name|PolicyComponent
operator|)
name|iterator2
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|compare
argument_list|(
name|assertion1
argument_list|,
name|assertion2
argument_list|)
condition|)
block|{
name|match
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|match
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

