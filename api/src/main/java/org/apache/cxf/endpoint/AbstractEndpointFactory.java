begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|Bus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|BusException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|BusFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|BindingConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|binding
operator|.
name|BindingFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|logging
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|databinding
operator|.
name|DataBinding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|feature
operator|.
name|AbstractFeature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|AbstractBasicInterceptorProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|AnnotationInterceptors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|MessageUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|BindingInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|EndpointInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|DestinationFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|ws
operator|.
name|addressing
operator|.
name|EndpointReferenceType
import|;
end_import

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractEndpointFactory
extends|extends
name|AbstractBasicInterceptorProvider
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogUtils
operator|.
name|getL7dLogger
argument_list|(
name|AbstractEndpointFactory
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PRIVATE_ENDPOINT
init|=
literal|"org.apache.cxf.endpoint.private"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PRIVATE_ENDPOINTS
init|=
literal|"org.apache.cxf.private.endpoints"
decl_stmt|;
specifier|protected
name|Bus
name|bus
decl_stmt|;
specifier|protected
name|String
name|address
decl_stmt|;
specifier|protected
name|String
name|transportId
decl_stmt|;
specifier|protected
name|String
name|bindingId
decl_stmt|;
specifier|protected
name|DataBinding
name|dataBinding
decl_stmt|;
specifier|protected
name|BindingFactory
name|bindingFactory
decl_stmt|;
specifier|protected
name|DestinationFactory
name|destinationFactory
decl_stmt|;
specifier|protected
name|String
name|publishedEndpointUrl
decl_stmt|;
specifier|protected
name|QName
name|endpointName
decl_stmt|;
specifier|protected
name|QName
name|serviceName
decl_stmt|;
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|properties
decl_stmt|;
specifier|protected
name|List
argument_list|<
name|AbstractFeature
argument_list|>
name|features
decl_stmt|;
specifier|protected
name|BindingConfiguration
name|bindingConfig
decl_stmt|;
specifier|protected
name|EndpointReferenceType
name|endpointReference
decl_stmt|;
specifier|protected
name|ConduitSelector
name|conduitSelector
decl_stmt|;
specifier|protected
specifier|abstract
name|Endpoint
name|createEndpoint
parameter_list|()
throws|throws
name|BusException
throws|,
name|EndpointException
function_decl|;
specifier|protected
specifier|abstract
name|EndpointInfo
name|createEndpointInfo
parameter_list|()
throws|throws
name|BusException
function_decl|;
specifier|protected
specifier|abstract
name|BindingInfo
name|createBindingInfo
parameter_list|()
function_decl|;
specifier|public
name|String
name|getAddress
parameter_list|()
block|{
return|return
name|address
return|;
block|}
specifier|public
name|void
name|setAddress
parameter_list|(
name|String
name|address
parameter_list|)
block|{
name|this
operator|.
name|address
operator|=
name|address
expr_stmt|;
block|}
specifier|public
name|Bus
name|getBus
parameter_list|()
block|{
if|if
condition|(
name|bus
operator|==
literal|null
condition|)
block|{
name|bus
operator|=
name|BusFactory
operator|.
name|getThreadDefaultBus
argument_list|()
expr_stmt|;
block|}
return|return
name|bus
return|;
block|}
specifier|public
name|void
name|setBus
parameter_list|(
name|Bus
name|bus
parameter_list|)
block|{
name|this
operator|.
name|bus
operator|=
name|bus
expr_stmt|;
block|}
specifier|public
name|String
name|getTransportId
parameter_list|()
block|{
return|return
name|transportId
return|;
block|}
specifier|public
name|void
name|setTransportId
parameter_list|(
name|String
name|transportId
parameter_list|)
block|{
name|this
operator|.
name|transportId
operator|=
name|transportId
expr_stmt|;
block|}
specifier|public
name|void
name|setBindingId
parameter_list|(
name|String
name|bind
parameter_list|)
block|{
name|bindingId
operator|=
name|bind
expr_stmt|;
block|}
specifier|public
name|String
name|getBindingId
parameter_list|()
block|{
return|return
name|bindingId
return|;
block|}
specifier|public
name|void
name|setBindingConfig
parameter_list|(
name|BindingConfiguration
name|obj
parameter_list|)
block|{
name|bindingConfig
operator|=
name|obj
expr_stmt|;
block|}
specifier|public
name|BindingConfiguration
name|getBindingConfig
parameter_list|()
block|{
return|return
name|bindingConfig
return|;
block|}
specifier|public
name|DestinationFactory
name|getDestinationFactory
parameter_list|()
block|{
return|return
name|destinationFactory
return|;
block|}
specifier|public
name|void
name|setDestinationFactory
parameter_list|(
name|DestinationFactory
name|destinationFactory
parameter_list|)
block|{
name|this
operator|.
name|destinationFactory
operator|=
name|destinationFactory
expr_stmt|;
block|}
specifier|public
name|String
name|getPublishedEndpointUrl
parameter_list|()
block|{
return|return
name|publishedEndpointUrl
return|;
block|}
specifier|public
name|void
name|setPublishedEndpointUrl
parameter_list|(
name|String
name|publishedEndpointUrl
parameter_list|)
block|{
name|this
operator|.
name|publishedEndpointUrl
operator|=
name|publishedEndpointUrl
expr_stmt|;
block|}
specifier|public
name|QName
name|getEndpointName
parameter_list|()
block|{
return|return
name|endpointName
return|;
block|}
specifier|public
name|void
name|setEndpointName
parameter_list|(
name|QName
name|endpointName
parameter_list|)
block|{
name|this
operator|.
name|endpointName
operator|=
name|endpointName
expr_stmt|;
block|}
specifier|public
name|void
name|setServiceName
parameter_list|(
name|QName
name|name
parameter_list|)
block|{
name|serviceName
operator|=
name|name
expr_stmt|;
block|}
specifier|public
name|QName
name|getServiceName
parameter_list|()
block|{
return|return
name|serviceName
return|;
block|}
specifier|public
name|void
name|setEndpointReference
parameter_list|(
name|EndpointReferenceType
name|epr
parameter_list|)
block|{
name|endpointReference
operator|=
name|epr
expr_stmt|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getProperties
parameter_list|()
block|{
return|return
name|properties
return|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getProperties
parameter_list|(
name|boolean
name|create
parameter_list|)
block|{
if|if
condition|(
name|create
operator|&&
name|properties
operator|==
literal|null
condition|)
block|{
name|properties
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
expr_stmt|;
block|}
return|return
name|properties
return|;
block|}
specifier|public
name|void
name|setProperties
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|properties
parameter_list|)
block|{
name|this
operator|.
name|properties
operator|=
name|properties
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|AbstractFeature
argument_list|>
name|getFeatures
parameter_list|()
block|{
if|if
condition|(
name|features
operator|==
literal|null
condition|)
block|{
name|features
operator|=
operator|new
name|ArrayList
argument_list|<
name|AbstractFeature
argument_list|>
argument_list|()
expr_stmt|;
block|}
return|return
name|features
return|;
block|}
specifier|public
name|void
name|setFeatures
parameter_list|(
name|List
argument_list|<
name|AbstractFeature
argument_list|>
name|features
parameter_list|)
block|{
name|this
operator|.
name|features
operator|=
name|features
expr_stmt|;
block|}
specifier|public
name|BindingFactory
name|getBindingFactory
parameter_list|()
block|{
return|return
name|bindingFactory
return|;
block|}
specifier|public
name|void
name|setBindingFactory
parameter_list|(
name|BindingFactory
name|bf
parameter_list|)
block|{
name|this
operator|.
name|bindingFactory
operator|=
name|bf
expr_stmt|;
block|}
specifier|public
name|ConduitSelector
name|getConduitSelector
parameter_list|()
block|{
return|return
name|conduitSelector
return|;
block|}
specifier|public
name|void
name|setConduitSelector
parameter_list|(
name|ConduitSelector
name|selector
parameter_list|)
block|{
name|conduitSelector
operator|=
name|selector
expr_stmt|;
block|}
specifier|public
name|DataBinding
name|getDataBinding
parameter_list|()
block|{
return|return
name|dataBinding
return|;
block|}
specifier|public
name|void
name|setDataBinding
parameter_list|(
name|DataBinding
name|dataBinding
parameter_list|)
block|{
name|this
operator|.
name|dataBinding
operator|=
name|dataBinding
expr_stmt|;
block|}
comment|/**      * Checks if a given endpoint has been marked as private.      * If yes then its address will be added to a bus list property      * Note that client factories might also check the endpoint, ex,       * if the endpoint if private then it is likely no service contract      * will be available if requested from the remote address hence it has to      * be availbale locally or generated from the local source      * @param ep endpoint      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|protected
name|boolean
name|checkPrivateEndpoint
parameter_list|(
name|Endpoint
name|ep
parameter_list|)
block|{
if|if
condition|(
name|MessageUtils
operator|.
name|isTrue
argument_list|(
name|ep
operator|.
name|get
argument_list|(
name|PRIVATE_ENDPOINT
argument_list|)
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|addresses
init|=
operator|(
name|List
argument_list|<
name|String
argument_list|>
operator|)
name|getBus
argument_list|()
operator|.
name|getProperty
argument_list|(
name|PRIVATE_ENDPOINTS
argument_list|)
decl_stmt|;
if|if
condition|(
name|addresses
operator|==
literal|null
condition|)
block|{
name|addresses
operator|=
operator|new
name|LinkedList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|addresses
operator|.
name|add
argument_list|(
name|getAddress
argument_list|()
argument_list|)
expr_stmt|;
name|bus
operator|.
name|setProperty
argument_list|(
name|PRIVATE_ENDPOINTS
argument_list|,
name|addresses
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
comment|/**      * Add annotated Interceptors and Features to the Endpoint      * @param ep      */
specifier|protected
name|void
name|initializeAnnotationInterceptors
parameter_list|(
name|Endpoint
name|ep
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|cls
parameter_list|)
block|{
name|initializeAnnotationInterceptors
argument_list|(
name|ep
argument_list|,
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[]
block|{
name|cls
block|}
block|)
function|;
block|}
end_class

begin_comment
comment|/**      * Add annotationed Interceptors and Features to the Endpoint      * @param ep      */
end_comment

begin_function
specifier|protected
name|void
name|initializeAnnotationInterceptors
parameter_list|(
name|Endpoint
name|ep
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
modifier|...
name|cls
parameter_list|)
block|{
name|AnnotationInterceptors
name|provider
init|=
operator|new
name|AnnotationInterceptors
argument_list|(
name|cls
argument_list|)
decl_stmt|;
if|if
condition|(
name|initializeAnnotationInterceptors
argument_list|(
name|provider
argument_list|,
name|ep
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|fine
argument_list|(
literal|"Added annotation based interceptors and features"
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|protected
name|boolean
name|initializeAnnotationInterceptors
parameter_list|(
name|AnnotationInterceptors
name|provider
parameter_list|,
name|Endpoint
name|ep
parameter_list|)
block|{
name|boolean
name|hasAnnotation
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|provider
operator|.
name|getInFaultInterceptors
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|ep
operator|.
name|getInFaultInterceptors
argument_list|()
operator|.
name|addAll
argument_list|(
name|provider
operator|.
name|getInFaultInterceptors
argument_list|()
argument_list|)
expr_stmt|;
name|hasAnnotation
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|provider
operator|.
name|getInInterceptors
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|ep
operator|.
name|getInInterceptors
argument_list|()
operator|.
name|addAll
argument_list|(
name|provider
operator|.
name|getInInterceptors
argument_list|()
argument_list|)
expr_stmt|;
name|hasAnnotation
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|provider
operator|.
name|getOutFaultInterceptors
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|ep
operator|.
name|getOutFaultInterceptors
argument_list|()
operator|.
name|addAll
argument_list|(
name|provider
operator|.
name|getOutFaultInterceptors
argument_list|()
argument_list|)
expr_stmt|;
name|hasAnnotation
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|provider
operator|.
name|getOutInterceptors
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|ep
operator|.
name|getOutInterceptors
argument_list|()
operator|.
name|addAll
argument_list|(
name|provider
operator|.
name|getOutInterceptors
argument_list|()
argument_list|)
expr_stmt|;
name|hasAnnotation
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|provider
operator|.
name|getFeatures
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|getFeatures
argument_list|()
operator|.
name|addAll
argument_list|(
name|provider
operator|.
name|getFeatures
argument_list|()
argument_list|)
expr_stmt|;
name|hasAnnotation
operator|=
literal|true
expr_stmt|;
block|}
return|return
name|hasAnnotation
return|;
block|}
end_function

unit|}
end_unit

