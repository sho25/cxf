begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamWriter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|Source
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|TransformerException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|dom
operator|.
name|DOMSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|staxutils
operator|.
name|PrettyPrintXMLStreamWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|staxutils
operator|.
name|StaxUtils
import|;
end_import

begin_class
specifier|public
specifier|final
class|class
name|XMLUtils
block|{
specifier|private
specifier|static
specifier|final
name|Pattern
name|XML_ESCAPE_CHARS
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"[\"'&<>]"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|XML_ENCODING_TABLE
decl_stmt|;
static|static
block|{
name|XML_ENCODING_TABLE
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|XML_ENCODING_TABLE
operator|.
name|put
argument_list|(
literal|"\""
argument_list|,
literal|"&quot;"
argument_list|)
expr_stmt|;
name|XML_ENCODING_TABLE
operator|.
name|put
argument_list|(
literal|"'"
argument_list|,
literal|"&apos;"
argument_list|)
expr_stmt|;
name|XML_ENCODING_TABLE
operator|.
name|put
argument_list|(
literal|"<"
argument_list|,
literal|"&lt;"
argument_list|)
expr_stmt|;
name|XML_ENCODING_TABLE
operator|.
name|put
argument_list|(
literal|">"
argument_list|,
literal|"&gt;"
argument_list|)
expr_stmt|;
name|XML_ENCODING_TABLE
operator|.
name|put
argument_list|(
literal|"&"
argument_list|,
literal|"&amp;"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|XMLUtils
parameter_list|()
block|{     }
specifier|public
specifier|static
name|void
name|writeTo
parameter_list|(
name|Node
name|node
parameter_list|,
name|OutputStream
name|os
parameter_list|)
throws|throws
name|XMLStreamException
block|{
name|writeTo
argument_list|(
operator|new
name|DOMSource
argument_list|(
name|node
argument_list|)
argument_list|,
name|os
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|writeTo
parameter_list|(
name|Node
name|node
parameter_list|,
name|OutputStream
name|os
parameter_list|,
name|int
name|indent
parameter_list|)
throws|throws
name|XMLStreamException
block|{
name|writeTo
argument_list|(
operator|new
name|DOMSource
argument_list|(
name|node
argument_list|)
argument_list|,
name|os
argument_list|,
name|indent
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|writeTo
parameter_list|(
name|Source
name|src
parameter_list|,
name|OutputStream
name|os
parameter_list|)
throws|throws
name|XMLStreamException
block|{
name|writeTo
argument_list|(
name|src
argument_list|,
name|os
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|writeTo
parameter_list|(
name|Node
name|node
parameter_list|,
name|Writer
name|os
parameter_list|)
throws|throws
name|XMLStreamException
block|{
name|writeTo
argument_list|(
operator|new
name|DOMSource
argument_list|(
name|node
argument_list|)
argument_list|,
name|os
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|writeTo
parameter_list|(
name|Node
name|node
parameter_list|,
name|Writer
name|os
parameter_list|,
name|int
name|indent
parameter_list|)
throws|throws
name|XMLStreamException
block|{
name|writeTo
argument_list|(
operator|new
name|DOMSource
argument_list|(
name|node
argument_list|)
argument_list|,
name|os
argument_list|,
name|indent
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|writeTo
parameter_list|(
name|Source
name|src
parameter_list|,
name|Writer
name|os
parameter_list|)
throws|throws
name|XMLStreamException
block|{
name|writeTo
argument_list|(
name|src
argument_list|,
name|os
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|writeTo
parameter_list|(
name|Source
name|src
parameter_list|,
name|OutputStream
name|os
parameter_list|,
name|int
name|indent
parameter_list|)
throws|throws
name|XMLStreamException
block|{
name|String
name|enc
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|src
operator|instanceof
name|DOMSource
operator|&&
operator|(
operator|(
name|DOMSource
operator|)
name|src
operator|)
operator|.
name|getNode
argument_list|()
operator|instanceof
name|Document
condition|)
block|{
try|try
block|{
name|enc
operator|=
operator|(
call|(
name|Document
call|)
argument_list|(
operator|(
name|DOMSource
operator|)
name|src
argument_list|)
operator|.
name|getNode
argument_list|()
operator|)
operator|.
name|getXmlEncoding
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|//ignore - not DOM level 3
block|}
block|}
name|writeTo
argument_list|(
name|src
argument_list|,
name|os
argument_list|,
name|indent
argument_list|,
name|enc
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|writeTo
parameter_list|(
name|Source
name|src
parameter_list|,
name|Writer
name|os
parameter_list|,
name|int
name|indent
parameter_list|)
throws|throws
name|XMLStreamException
block|{
name|String
name|enc
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|src
operator|instanceof
name|DOMSource
operator|&&
operator|(
operator|(
name|DOMSource
operator|)
name|src
operator|)
operator|.
name|getNode
argument_list|()
operator|instanceof
name|Document
condition|)
block|{
try|try
block|{
name|enc
operator|=
operator|(
call|(
name|Document
call|)
argument_list|(
operator|(
name|DOMSource
operator|)
name|src
argument_list|)
operator|.
name|getNode
argument_list|()
operator|)
operator|.
name|getXmlEncoding
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|//ignore - not DOM level 3
block|}
block|}
name|writeTo
argument_list|(
name|src
argument_list|,
name|os
argument_list|,
name|indent
argument_list|,
name|enc
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|writeTo
parameter_list|(
name|Source
name|src
parameter_list|,
name|OutputStream
name|os
parameter_list|,
name|int
name|indent
parameter_list|,
name|String
name|charset
parameter_list|,
name|boolean
name|omitXmlDecl
parameter_list|)
throws|throws
name|XMLStreamException
block|{
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|charset
argument_list|)
condition|)
block|{
name|charset
operator|=
literal|"utf-8"
expr_stmt|;
block|}
name|XMLStreamWriter
name|writer
init|=
name|StaxUtils
operator|.
name|createXMLStreamWriter
argument_list|(
name|os
argument_list|,
name|charset
argument_list|)
decl_stmt|;
if|if
condition|(
name|indent
operator|>
literal|0
condition|)
block|{
name|writer
operator|=
operator|new
name|PrettyPrintXMLStreamWriter
argument_list|(
name|writer
argument_list|,
name|indent
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|omitXmlDecl
condition|)
block|{
name|writer
operator|.
name|writeStartDocument
argument_list|(
name|charset
argument_list|,
literal|"1.0"
argument_list|)
expr_stmt|;
block|}
name|StaxUtils
operator|.
name|copy
argument_list|(
name|src
argument_list|,
name|writer
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|omitXmlDecl
condition|)
block|{
name|writer
operator|.
name|writeEndDocument
argument_list|()
expr_stmt|;
block|}
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|writeTo
parameter_list|(
name|Source
name|src
parameter_list|,
name|Writer
name|os
parameter_list|,
name|int
name|indent
parameter_list|,
name|String
name|charset
parameter_list|,
name|boolean
name|omitXmlDecl
parameter_list|)
throws|throws
name|XMLStreamException
block|{
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|charset
argument_list|)
condition|)
block|{
name|charset
operator|=
literal|"utf-8"
expr_stmt|;
block|}
name|XMLStreamWriter
name|writer
init|=
name|StaxUtils
operator|.
name|createXMLStreamWriter
argument_list|(
name|os
argument_list|)
decl_stmt|;
if|if
condition|(
name|indent
operator|>
literal|0
condition|)
block|{
name|writer
operator|=
operator|new
name|PrettyPrintXMLStreamWriter
argument_list|(
name|writer
argument_list|,
name|indent
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|omitXmlDecl
condition|)
block|{
name|writer
operator|.
name|writeStartDocument
argument_list|(
name|charset
argument_list|,
literal|"1.0"
argument_list|)
expr_stmt|;
block|}
name|StaxUtils
operator|.
name|copy
argument_list|(
name|src
argument_list|,
name|writer
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|omitXmlDecl
condition|)
block|{
name|writer
operator|.
name|writeEndDocument
argument_list|()
expr_stmt|;
block|}
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|public
specifier|static
name|String
name|toString
parameter_list|(
name|Source
name|source
parameter_list|)
throws|throws
name|TransformerException
throws|,
name|IOException
block|{
name|StringWriter
name|out
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
try|try
block|{
name|writeTo
argument_list|(
name|source
argument_list|,
name|out
argument_list|,
literal|0
argument_list|,
literal|"utf-8"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLStreamException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
return|return
name|out
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|String
name|toString
parameter_list|(
name|Node
name|node
parameter_list|,
name|int
name|indent
parameter_list|)
block|{
name|StringWriter
name|out
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
try|try
block|{
name|writeTo
argument_list|(
name|node
argument_list|,
name|out
argument_list|,
name|indent
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLStreamException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
return|return
name|out
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|String
name|toString
parameter_list|(
name|Node
name|node
parameter_list|)
block|{
name|StringWriter
name|out
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
try|try
block|{
name|writeTo
argument_list|(
name|node
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLStreamException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
return|return
name|out
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|void
name|generateXMLFile
parameter_list|(
name|Element
name|element
parameter_list|,
name|Writer
name|writer
parameter_list|)
throws|throws
name|XMLStreamException
block|{
name|writeTo
argument_list|(
operator|new
name|DOMSource
argument_list|(
name|element
argument_list|)
argument_list|,
name|writer
argument_list|,
literal|2
argument_list|,
literal|"UTF-8"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|String
name|xmlEncode
parameter_list|(
name|String
name|value
parameter_list|)
block|{
name|Matcher
name|m
init|=
name|XML_ESCAPE_CHARS
operator|.
name|matcher
argument_list|(
name|value
argument_list|)
decl_stmt|;
name|boolean
name|match
init|=
name|m
operator|.
name|find
argument_list|()
decl_stmt|;
if|if
condition|(
name|match
condition|)
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
do|do
block|{
name|String
name|replacement
init|=
name|XML_ENCODING_TABLE
operator|.
name|get
argument_list|(
name|m
operator|.
name|group
argument_list|()
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|value
operator|.
name|substring
argument_list|(
name|i
argument_list|,
name|m
operator|.
name|start
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|replacement
argument_list|)
expr_stmt|;
name|i
operator|=
name|m
operator|.
name|end
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|m
operator|.
name|find
argument_list|()
condition|)
do|;
name|sb
operator|.
name|append
argument_list|(
name|value
operator|.
name|substring
argument_list|(
name|i
argument_list|,
name|value
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|value
return|;
block|}
block|}
block|}
end_class

end_unit

