begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|IdentityHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|endpoint
operator|.
name|Endpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|InterceptorChain
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|service
operator|.
name|model
operator|.
name|OperationInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|transport
operator|.
name|Destination
import|;
end_import

begin_class
specifier|public
class|class
name|MessageImpl
extends|extends
name|StringMapImpl
implements|implements
name|Message
block|{
specifier|static
name|int
name|count
decl_stmt|;
specifier|private
name|Collection
argument_list|<
name|Attachment
argument_list|>
name|attachments
decl_stmt|;
specifier|private
name|Exchange
name|exchange
decl_stmt|;
specifier|private
name|String
name|id
decl_stmt|;
specifier|private
name|InterceptorChain
name|interceptorChain
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|,
name|Object
argument_list|>
name|contents
init|=
operator|new
name|IdentityHashMap
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|,
name|Object
argument_list|>
argument_list|(
literal|6
argument_list|)
decl_stmt|;
specifier|public
name|MessageImpl
parameter_list|()
block|{
comment|//nothing
block|}
specifier|public
name|Collection
argument_list|<
name|Attachment
argument_list|>
name|getAttachments
parameter_list|()
block|{
return|return
name|attachments
return|;
block|}
specifier|public
name|void
name|setAttachments
parameter_list|(
name|Collection
argument_list|<
name|Attachment
argument_list|>
name|attachments
parameter_list|)
block|{
name|this
operator|.
name|attachments
operator|=
name|attachments
expr_stmt|;
block|}
specifier|public
name|String
name|getAttachmentMimeType
parameter_list|()
block|{
comment|//for sub class overriding
return|return
literal|null
return|;
block|}
specifier|public
name|Destination
name|getDestination
parameter_list|()
block|{
return|return
name|get
argument_list|(
name|Destination
operator|.
name|class
argument_list|)
return|;
block|}
specifier|public
name|Exchange
name|getExchange
parameter_list|()
block|{
return|return
name|exchange
return|;
block|}
specifier|public
name|String
name|getId
parameter_list|()
block|{
return|return
name|id
return|;
block|}
specifier|public
name|InterceptorChain
name|getInterceptorChain
parameter_list|()
block|{
return|return
name|this
operator|.
name|interceptorChain
return|;
block|}
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|getContent
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|format
parameter_list|)
block|{
return|return
name|format
operator|.
name|cast
argument_list|(
name|contents
operator|.
name|get
argument_list|(
name|format
argument_list|)
argument_list|)
return|;
block|}
specifier|public
parameter_list|<
name|T
parameter_list|>
name|void
name|setContent
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|format
parameter_list|,
name|Object
name|content
parameter_list|)
block|{
name|contents
operator|.
name|put
argument_list|(
name|format
argument_list|,
name|content
argument_list|)
expr_stmt|;
block|}
specifier|public
parameter_list|<
name|T
parameter_list|>
name|void
name|removeContent
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|format
parameter_list|)
block|{
name|contents
operator|.
name|remove
argument_list|(
name|format
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Set
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|getContentFormats
parameter_list|()
block|{
return|return
name|contents
operator|.
name|keySet
argument_list|()
return|;
block|}
specifier|public
name|void
name|setDestination
parameter_list|(
name|Destination
name|d
parameter_list|)
block|{
name|put
argument_list|(
name|Destination
operator|.
name|class
argument_list|,
name|d
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setExchange
parameter_list|(
name|Exchange
name|e
parameter_list|)
block|{
name|this
operator|.
name|exchange
operator|=
name|e
expr_stmt|;
block|}
specifier|public
name|void
name|setId
parameter_list|(
name|String
name|i
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|i
expr_stmt|;
block|}
specifier|public
name|void
name|setInterceptorChain
parameter_list|(
name|InterceptorChain
name|ic
parameter_list|)
block|{
name|this
operator|.
name|interceptorChain
operator|=
name|ic
expr_stmt|;
block|}
specifier|public
name|Object
name|getContextualProperty
parameter_list|(
name|String
name|key
parameter_list|)
block|{
name|Object
name|val
init|=
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|Exchange
name|ex
init|=
name|getExchange
argument_list|()
decl_stmt|;
if|if
condition|(
name|val
operator|==
literal|null
condition|)
block|{
name|val
operator|=
name|ex
operator|.
name|get
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|val
operator|==
literal|null
condition|)
block|{
name|OperationInfo
name|ep
init|=
name|get
argument_list|(
name|OperationInfo
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|ep
operator|!=
literal|null
condition|)
block|{
name|val
operator|=
name|ep
operator|.
name|getProperty
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|val
operator|==
literal|null
condition|)
block|{
name|Endpoint
name|ep
init|=
name|ex
operator|.
name|get
argument_list|(
name|Endpoint
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|ep
operator|!=
literal|null
condition|)
block|{
name|val
operator|=
name|ep
operator|.
name|get
argument_list|(
name|key
argument_list|)
expr_stmt|;
if|if
condition|(
name|val
operator|==
literal|null
condition|)
block|{
name|val
operator|=
name|ep
operator|.
name|getEndpointInfo
argument_list|()
operator|.
name|getProperty
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|val
operator|==
literal|null
condition|)
block|{
name|val
operator|=
name|ep
operator|.
name|getEndpointInfo
argument_list|()
operator|.
name|getBinding
argument_list|()
operator|.
name|getProperty
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|val
operator|==
literal|null
condition|)
block|{
name|Service
name|ep
init|=
name|ex
operator|.
name|get
argument_list|(
name|Service
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|ep
operator|!=
literal|null
condition|)
block|{
name|val
operator|=
name|ep
operator|.
name|get
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|val
return|;
block|}
specifier|public
specifier|static
name|void
name|copyContent
parameter_list|(
name|Message
name|m1
parameter_list|,
name|Message
name|m2
parameter_list|)
block|{
for|for
control|(
name|Class
argument_list|<
name|?
argument_list|>
name|c
range|:
name|m1
operator|.
name|getContentFormats
argument_list|()
control|)
block|{
name|m2
operator|.
name|setContent
argument_list|(
name|c
argument_list|,
name|m1
operator|.
name|getContent
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

