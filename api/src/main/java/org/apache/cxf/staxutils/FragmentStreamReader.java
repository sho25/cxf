begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|staxutils
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamReader
import|;
end_import

begin_comment
comment|/**  * Wraps a XMLStreamReader and provides optional START_DOCUMENT and END_DOCUMENT events.  *   * @author<a href="mailto:dan@envoisolutions.com">Dan Diephouse</a>  */
end_comment

begin_class
specifier|public
class|class
name|FragmentStreamReader
extends|extends
name|DepthXMLStreamReader
block|{
specifier|private
name|boolean
name|startElement
decl_stmt|;
specifier|private
name|boolean
name|middle
init|=
literal|true
decl_stmt|;
specifier|private
name|boolean
name|endDoc
decl_stmt|;
specifier|private
name|boolean
name|doDocEvents
init|=
literal|true
decl_stmt|;
specifier|private
name|int
name|depth
decl_stmt|;
specifier|private
name|int
name|current
init|=
name|XMLStreamReader
operator|.
name|START_DOCUMENT
decl_stmt|;
specifier|private
name|boolean
name|filter
init|=
literal|true
decl_stmt|;
specifier|private
name|boolean
name|advanceAtEnd
init|=
literal|true
decl_stmt|;
specifier|public
name|FragmentStreamReader
parameter_list|(
name|XMLStreamReader
name|reader
parameter_list|)
block|{
name|super
argument_list|(
name|reader
argument_list|)
expr_stmt|;
block|}
specifier|public
name|FragmentStreamReader
parameter_list|(
name|XMLStreamReader
name|reader
parameter_list|,
name|boolean
name|doDocEvents
parameter_list|)
block|{
name|super
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|this
operator|.
name|doDocEvents
operator|=
name|doDocEvents
expr_stmt|;
if|if
condition|(
operator|!
name|doDocEvents
condition|)
block|{
name|depth
operator|=
name|getDepth
argument_list|()
expr_stmt|;
name|current
operator|=
name|reader
operator|.
name|getEventType
argument_list|()
expr_stmt|;
if|if
condition|(
name|current
operator|!=
name|XMLStreamReader
operator|.
name|START_DOCUMENT
condition|)
block|{
name|startElement
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|int
name|getEventType
parameter_list|()
block|{
return|return
name|current
return|;
block|}
specifier|public
name|boolean
name|isCharacters
parameter_list|()
block|{
return|return
name|current
operator|==
name|XMLStreamReader
operator|.
name|CHARACTERS
return|;
block|}
specifier|public
name|boolean
name|isEndElement
parameter_list|()
block|{
return|return
name|current
operator|==
name|XMLStreamReader
operator|.
name|END_ELEMENT
return|;
block|}
specifier|public
name|boolean
name|isStartElement
parameter_list|()
block|{
return|return
name|current
operator|==
name|XMLStreamReader
operator|.
name|START_ELEMENT
return|;
block|}
specifier|public
name|boolean
name|isWhiteSpace
parameter_list|()
block|{
return|return
name|current
operator|==
name|XMLStreamReader
operator|.
name|CHARACTERS
operator|&&
name|reader
operator|.
name|isWhiteSpace
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|hasNext
parameter_list|()
throws|throws
name|XMLStreamException
block|{
if|if
condition|(
name|endDoc
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|reader
operator|.
name|hasNext
argument_list|()
return|;
block|}
specifier|public
specifier|final
name|int
name|next
parameter_list|()
throws|throws
name|XMLStreamException
block|{
if|if
condition|(
operator|!
name|startElement
condition|)
block|{
name|depth
operator|=
name|getDepth
argument_list|()
expr_stmt|;
name|current
operator|=
name|reader
operator|.
name|getEventType
argument_list|()
expr_stmt|;
if|if
condition|(
name|filter
condition|)
block|{
while|while
condition|(
name|current
operator|!=
name|START_ELEMENT
operator|&&
name|depth
operator|>=
name|getDepth
argument_list|()
operator|&&
name|super
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|current
operator|=
name|super
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
name|filter
operator|=
literal|false
expr_stmt|;
block|}
name|startElement
operator|=
literal|true
expr_stmt|;
name|current
operator|=
name|START_ELEMENT
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|middle
condition|)
block|{
name|current
operator|=
name|super
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|current
operator|==
name|END_ELEMENT
operator|&&
name|getDepth
argument_list|()
operator|<
name|depth
condition|)
block|{
name|middle
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|doDocEvents
condition|)
block|{
name|endDoc
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
operator|!
name|endDoc
condition|)
block|{
comment|// Move past the END_ELEMENT token.
if|if
condition|(
name|advanceAtEnd
condition|)
block|{
name|super
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
name|endDoc
operator|=
literal|true
expr_stmt|;
name|current
operator|=
name|END_DOCUMENT
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|XMLStreamException
argument_list|(
literal|"Already at the end of the document."
argument_list|)
throw|;
block|}
return|return
name|current
return|;
block|}
specifier|public
name|boolean
name|isAdvanceAtEnd
parameter_list|()
block|{
return|return
name|advanceAtEnd
return|;
block|}
comment|/**      * Set whether or not the FragmentStreamReader should move past the END_ELEMENT      * when it is done parsing.      * @param advanceAtEnd      */
specifier|public
name|void
name|setAdvanceAtEnd
parameter_list|(
name|boolean
name|a
parameter_list|)
block|{
name|this
operator|.
name|advanceAtEnd
operator|=
name|a
expr_stmt|;
block|}
block|}
end_class

end_unit

