begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|staxutils
operator|.
name|transform
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_class
class|class
name|QNamesMap
block|{
specifier|private
name|QName
index|[]
name|keys
decl_stmt|;
specifier|private
name|QName
index|[]
name|values
decl_stmt|;
specifier|private
name|int
name|index
decl_stmt|;
specifier|public
name|QNamesMap
parameter_list|(
name|int
name|size
parameter_list|)
block|{
name|keys
operator|=
operator|new
name|QName
index|[
name|size
index|]
expr_stmt|;
name|values
operator|=
operator|new
name|QName
index|[
name|size
index|]
expr_stmt|;
block|}
specifier|public
name|void
name|put
parameter_list|(
name|QName
name|key
parameter_list|,
name|QName
name|value
parameter_list|)
block|{
name|keys
index|[
name|index
index|]
operator|=
name|key
expr_stmt|;
name|values
index|[
name|index
index|]
operator|=
name|value
expr_stmt|;
name|index
operator|++
expr_stmt|;
block|}
specifier|public
name|QName
name|get
parameter_list|(
name|QName
name|key
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|keys
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|keys
index|[
name|i
index|]
operator|.
name|getNamespaceURI
argument_list|()
operator|.
name|equals
argument_list|(
name|key
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|keys
index|[
name|i
index|]
operator|.
name|getLocalPart
argument_list|()
operator|.
name|equals
argument_list|(
name|key
operator|.
name|getLocalPart
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|values
index|[
name|i
index|]
return|;
block|}
elseif|else
if|if
condition|(
literal|"*"
operator|.
name|equals
argument_list|(
name|keys
index|[
name|i
index|]
operator|.
name|getLocalPart
argument_list|()
argument_list|)
condition|)
block|{
comment|// assume it is something like {somens}* : *
return|return
literal|"*"
operator|.
name|equals
argument_list|(
name|values
index|[
name|i
index|]
argument_list|)
condition|?
operator|new
name|QName
argument_list|(
name|key
operator|.
name|getLocalPart
argument_list|()
argument_list|)
else|:
operator|new
name|QName
argument_list|(
name|values
index|[
name|i
index|]
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
name|key
operator|.
name|getLocalPart
argument_list|()
argument_list|)
return|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|index
return|;
block|}
block|}
end_class

end_unit

