begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|commands
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|ResultBufferedCommandTest
extends|extends
name|Assert
block|{
specifier|private
specifier|static
specifier|final
name|String
name|OUT
init|=
literal|"Hello World!"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|ERR
init|=
literal|"Please contact your administrator."
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testStreamsEmpty
parameter_list|()
throws|throws
name|Exception
block|{
name|URL
name|url
init|=
name|TestCommand
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"TestCommand.class"
argument_list|)
decl_stmt|;
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|url
operator|.
name|toURI
argument_list|()
argument_list|)
decl_stmt|;
name|file
operator|=
name|file
operator|.
name|getParentFile
argument_list|()
expr_stmt|;
name|file
operator|=
operator|new
name|File
argument_list|(
name|file
argument_list|,
literal|"../../../../.."
argument_list|)
expr_stmt|;
name|String
index|[]
name|cmd
init|=
operator|new
name|String
index|[]
block|{
name|JavaHelper
operator|.
name|getJavaCommand
argument_list|()
block|,
literal|"-classpath"
block|,
name|file
operator|.
name|getCanonicalPath
argument_list|()
block|,
literal|"org.apache.cxf.common.commands.TestCommand"
block|,         }
decl_stmt|;
name|ResultBufferedCommand
name|rbc
init|=
operator|new
name|ResultBufferedCommand
argument_list|(
name|cmd
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|rbc
operator|.
name|execute
argument_list|()
argument_list|)
expr_stmt|;
name|BufferedReader
name|br
init|=
name|rbc
operator|.
name|getBufferedOutputReader
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|br
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|br
operator|.
name|readLine
argument_list|()
argument_list|)
expr_stmt|;
name|br
operator|.
name|close
argument_list|()
expr_stmt|;
name|br
operator|=
name|rbc
operator|.
name|getBufferedErrorReader
argument_list|()
expr_stmt|;
name|assertNotNull
argument_list|(
name|br
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|br
operator|.
name|readLine
argument_list|()
argument_list|)
expr_stmt|;
name|br
operator|.
name|close
argument_list|()
expr_stmt|;
name|InputStream
name|is
init|=
name|rbc
operator|.
name|getOutput
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|is
operator|.
name|available
argument_list|()
argument_list|)
expr_stmt|;
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
name|is
operator|=
name|rbc
operator|.
name|getError
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|is
operator|.
name|available
argument_list|()
argument_list|)
expr_stmt|;
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStreamsNotEmpty
parameter_list|()
throws|throws
name|Exception
block|{
name|URL
name|url
init|=
name|TestCommand
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"TestCommand.class"
argument_list|)
decl_stmt|;
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|url
operator|.
name|toURI
argument_list|()
argument_list|)
decl_stmt|;
name|file
operator|=
name|file
operator|.
name|getParentFile
argument_list|()
expr_stmt|;
name|file
operator|=
operator|new
name|File
argument_list|(
name|file
argument_list|,
literal|"../../../../.."
argument_list|)
expr_stmt|;
name|String
index|[]
name|cmd
init|=
operator|new
name|String
index|[]
block|{
name|JavaHelper
operator|.
name|getJavaCommand
argument_list|()
block|,
literal|"-classpath"
block|,
name|file
operator|.
name|getCanonicalPath
argument_list|()
block|,
literal|"org.apache.cxf.common.commands.TestCommand"
block|,
literal|"-out"
block|,
name|OUT
block|,
literal|"-err"
block|,
name|ERR
block|,
literal|"-result"
block|,
literal|"2"
block|,                   }
decl_stmt|;
name|ResultBufferedCommand
name|rbc
init|=
operator|new
name|ResultBufferedCommand
argument_list|()
decl_stmt|;
name|rbc
operator|.
name|setArgs
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|rbc
operator|.
name|execute
argument_list|()
argument_list|)
expr_stmt|;
name|BufferedReader
name|br
init|=
name|rbc
operator|.
name|getBufferedOutputReader
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|br
argument_list|)
expr_stmt|;
name|String
name|line
init|=
name|br
operator|.
name|readLine
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|OUT
argument_list|,
name|line
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|br
operator|.
name|readLine
argument_list|()
argument_list|)
expr_stmt|;
name|br
operator|.
name|close
argument_list|()
expr_stmt|;
name|br
operator|=
name|rbc
operator|.
name|getBufferedErrorReader
argument_list|()
expr_stmt|;
name|assertNotNull
argument_list|(
name|br
argument_list|)
expr_stmt|;
name|line
operator|=
name|br
operator|.
name|readLine
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|ERR
argument_list|,
name|line
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|br
operator|.
name|readLine
argument_list|()
argument_list|)
expr_stmt|;
name|br
operator|.
name|close
argument_list|()
expr_stmt|;
name|InputStream
name|is
init|=
name|rbc
operator|.
name|getOutput
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|is
operator|.
name|available
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
name|is
operator|=
name|rbc
operator|.
name|getError
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|is
operator|.
name|available
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

