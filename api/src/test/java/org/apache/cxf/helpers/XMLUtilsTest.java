begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|helpers
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|Source
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|stream
operator|.
name|StreamSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|XMLUtilsTest
extends|extends
name|Assert
block|{
annotation|@
name|Test
specifier|public
name|void
name|testToString
parameter_list|()
throws|throws
name|Exception
block|{
name|InputStream
name|is
init|=
name|getClass
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
literal|"resources/test.xml"
argument_list|)
decl_stmt|;
name|Source
name|source
init|=
operator|new
name|StreamSource
argument_list|(
name|is
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"<test><ok/></test>"
argument_list|,
name|XMLUtils
operator|.
name|toString
argument_list|(
name|source
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testXmlEncodeNoEscape
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"12345"
argument_list|,
name|XMLUtils
operator|.
name|xmlEncode
argument_list|(
literal|"12345"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testXmlEncodeEscapeAtStart
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"&quot;2345"
argument_list|,
name|XMLUtils
operator|.
name|xmlEncode
argument_list|(
literal|"\"2345"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testXmlEncodeEscapeAtEnd
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"1234&apos;"
argument_list|,
name|XMLUtils
operator|.
name|xmlEncode
argument_list|(
literal|"1234'"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testXmlEncodeEscapeInMiddle
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"12&amp;45"
argument_list|,
name|XMLUtils
operator|.
name|xmlEncode
argument_list|(
literal|"12&45"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testXmlEncodeEscapeMany
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"&lt;2&amp;4&gt;"
argument_list|,
name|XMLUtils
operator|.
name|xmlEncode
argument_list|(
literal|"<2&4>"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testXmlEncodeEscapeAll
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"&lt;&quot;&amp;&apos;&gt;"
argument_list|,
name|XMLUtils
operator|.
name|xmlEncode
argument_list|(
literal|"<\"&'>"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

