begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|phase
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|common
operator|.
name|util
operator|.
name|SortedArraySet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|continuations
operator|.
name|SuspendedInvocationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|Interceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|interceptor
operator|.
name|InterceptorChain
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|logging
operator|.
name|FaultListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|FaultMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|classextension
operator|.
name|EasyMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|classextension
operator|.
name|IMocksControl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|PhaseInterceptorChainTest
extends|extends
name|Assert
block|{
specifier|private
name|IMocksControl
name|control
decl_stmt|;
specifier|private
name|PhaseInterceptorChain
name|chain
decl_stmt|;
specifier|private
name|Message
name|message
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|control
operator|=
name|EasyMock
operator|.
name|createNiceControl
argument_list|()
expr_stmt|;
name|message
operator|=
name|control
operator|.
name|createMock
argument_list|(
name|Message
operator|.
name|class
argument_list|)
expr_stmt|;
name|Phase
name|phase1
init|=
operator|new
name|Phase
argument_list|(
literal|"phase1"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|Phase
name|phase2
init|=
operator|new
name|Phase
argument_list|(
literal|"phase2"
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|Phase
name|phase3
init|=
operator|new
name|Phase
argument_list|(
literal|"phase3"
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|SortedSet
argument_list|<
name|Phase
argument_list|>
name|phases
init|=
operator|new
name|TreeSet
argument_list|<
name|Phase
argument_list|>
argument_list|()
decl_stmt|;
name|phases
operator|.
name|add
argument_list|(
name|phase1
argument_list|)
expr_stmt|;
name|phases
operator|.
name|add
argument_list|(
name|phase2
argument_list|)
expr_stmt|;
name|phases
operator|.
name|add
argument_list|(
name|phase3
argument_list|)
expr_stmt|;
name|chain
operator|=
operator|new
name|PhaseInterceptorChain
argument_list|(
name|phases
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
block|{
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testState
parameter_list|()
throws|throws
name|Exception
block|{
name|AbstractPhaseInterceptor
name|p
init|=
name|setUpPhaseInterceptor
argument_list|(
literal|"phase1"
argument_list|,
literal|"p1"
argument_list|)
decl_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|chain
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
literal|"Initial state is State.EXECUTING"
argument_list|,
name|InterceptorChain
operator|.
name|State
operator|.
name|EXECUTING
argument_list|,
name|chain
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|chain
operator|.
name|pause
argument_list|()
expr_stmt|;
name|assertSame
argument_list|(
literal|"Pausing chain should lead to State.PAUSED"
argument_list|,
name|InterceptorChain
operator|.
name|State
operator|.
name|PAUSED
argument_list|,
name|chain
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|chain
operator|.
name|resume
argument_list|()
expr_stmt|;
name|assertSame
argument_list|(
literal|"Resuming chain should lead to State.COMPLETE"
argument_list|,
name|InterceptorChain
operator|.
name|State
operator|.
name|COMPLETE
argument_list|,
name|chain
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|chain
operator|.
name|abort
argument_list|()
expr_stmt|;
name|assertSame
argument_list|(
literal|"Aborting chain should lead to State.ABORTED"
argument_list|,
name|InterceptorChain
operator|.
name|State
operator|.
name|ABORTED
argument_list|,
name|chain
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSuspendedException
parameter_list|()
throws|throws
name|Exception
block|{
name|CountingPhaseInterceptor
name|p1
init|=
operator|new
name|CountingPhaseInterceptor
argument_list|(
literal|"phase1"
argument_list|,
literal|"p1"
argument_list|)
decl_stmt|;
name|SuspendedInvocationInterceptor
name|p2
init|=
operator|new
name|SuspendedInvocationInterceptor
argument_list|(
literal|"phase2"
argument_list|,
literal|"p2"
argument_list|)
decl_stmt|;
name|message
operator|.
name|getInterceptorChain
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|andReturn
argument_list|(
name|chain
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|chain
operator|.
name|add
argument_list|(
name|p1
argument_list|)
expr_stmt|;
name|chain
operator|.
name|add
argument_list|(
name|p2
argument_list|)
expr_stmt|;
try|try
block|{
name|chain
operator|.
name|doIntercept
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Suspended invocation swallowed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SuspendedInvocationException
name|ex
parameter_list|)
block|{
comment|// ignore
block|}
name|assertSame
argument_list|(
literal|"No previous interceptor selected"
argument_list|,
name|p1
argument_list|,
name|chain
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
literal|"Suspended invocation should lead to State.PAUSED"
argument_list|,
name|InterceptorChain
operator|.
name|State
operator|.
name|PAUSED
argument_list|,
name|chain
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddOneInterceptor
parameter_list|()
throws|throws
name|Exception
block|{
name|AbstractPhaseInterceptor
name|p
init|=
name|setUpPhaseInterceptor
argument_list|(
literal|"phase1"
argument_list|,
literal|"p1"
argument_list|)
decl_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|chain
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|Interceptor
argument_list|<
name|?
extends|extends
name|Message
argument_list|>
argument_list|>
name|it
init|=
name|chain
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|assertSame
argument_list|(
name|p
argument_list|,
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|it
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testForceAddSameInterceptor
parameter_list|()
throws|throws
name|Exception
block|{
name|AbstractPhaseInterceptor
name|p
init|=
name|setUpPhaseInterceptor
argument_list|(
literal|"phase1"
argument_list|,
literal|"p1"
argument_list|)
decl_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|chain
operator|.
name|add
argument_list|(
name|p
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|chain
operator|.
name|add
argument_list|(
name|p
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|Interceptor
argument_list|<
name|?
extends|extends
name|Message
argument_list|>
argument_list|>
name|it
init|=
name|chain
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|assertSame
argument_list|(
name|p
argument_list|,
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|it
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|chain
operator|.
name|add
argument_list|(
name|p
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|it
operator|=
name|chain
operator|.
name|iterator
argument_list|()
expr_stmt|;
name|assertSame
argument_list|(
name|p
argument_list|,
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|p
argument_list|,
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|it
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testForceAddSameInterceptorType
parameter_list|()
throws|throws
name|Exception
block|{
name|AbstractPhaseInterceptor
name|p1
init|=
name|setUpPhaseInterceptor
argument_list|(
literal|"phase1"
argument_list|,
literal|"p1"
argument_list|)
decl_stmt|;
name|AbstractPhaseInterceptor
name|p2
init|=
name|setUpPhaseInterceptor
argument_list|(
literal|"phase1"
argument_list|,
literal|"p1"
argument_list|)
decl_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|chain
operator|.
name|add
argument_list|(
name|p1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|chain
operator|.
name|add
argument_list|(
name|p2
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|Interceptor
argument_list|<
name|?
extends|extends
name|Message
argument_list|>
argument_list|>
name|it
init|=
name|chain
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|assertSame
argument_list|(
name|p1
argument_list|,
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|it
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|chain
operator|.
name|add
argument_list|(
name|p2
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|it
operator|=
name|chain
operator|.
name|iterator
argument_list|()
expr_stmt|;
name|assertSame
argument_list|(
name|p1
argument_list|,
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|p2
argument_list|,
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|it
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddTwoInterceptorsSamePhase
parameter_list|()
throws|throws
name|Exception
block|{
name|AbstractPhaseInterceptor
name|p1
init|=
name|setUpPhaseInterceptor
argument_list|(
literal|"phase1"
argument_list|,
literal|"p1"
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|after
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|after
operator|.
name|add
argument_list|(
literal|"p1"
argument_list|)
expr_stmt|;
name|AbstractPhaseInterceptor
name|p2
init|=
name|setUpPhaseInterceptor
argument_list|(
literal|"phase1"
argument_list|,
literal|"p2"
argument_list|,
literal|null
argument_list|,
name|after
argument_list|)
decl_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|chain
operator|.
name|add
argument_list|(
name|p1
argument_list|)
expr_stmt|;
name|chain
operator|.
name|add
argument_list|(
name|p2
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|Interceptor
argument_list|<
name|?
extends|extends
name|Message
argument_list|>
argument_list|>
name|it
init|=
name|chain
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|assertSame
argument_list|(
literal|"Unexpected interceptor at this position."
argument_list|,
name|p1
argument_list|,
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
literal|"Unexpected interceptor at this position."
argument_list|,
name|p2
argument_list|,
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|it
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testThreeInterceptorSamePhaseWithOrder
parameter_list|()
throws|throws
name|Exception
block|{
name|AbstractPhaseInterceptor
name|p1
init|=
name|setUpPhaseInterceptor
argument_list|(
literal|"phase1"
argument_list|,
literal|"p1"
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|before
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|before
operator|.
name|add
argument_list|(
literal|"p1"
argument_list|)
expr_stmt|;
name|AbstractPhaseInterceptor
name|p2
init|=
name|setUpPhaseInterceptor
argument_list|(
literal|"phase1"
argument_list|,
literal|"p2"
argument_list|,
name|before
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|before1
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|before1
operator|.
name|add
argument_list|(
literal|"p2"
argument_list|)
expr_stmt|;
name|AbstractPhaseInterceptor
name|p3
init|=
name|setUpPhaseInterceptor
argument_list|(
literal|"phase1"
argument_list|,
literal|"p3"
argument_list|,
name|before1
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|chain
operator|.
name|add
argument_list|(
name|p3
argument_list|)
expr_stmt|;
name|chain
operator|.
name|add
argument_list|(
name|p1
argument_list|)
expr_stmt|;
name|chain
operator|.
name|add
argument_list|(
name|p2
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|Interceptor
argument_list|<
name|?
extends|extends
name|Message
argument_list|>
argument_list|>
name|it
init|=
name|chain
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|assertSame
argument_list|(
literal|"Unexpected interceptor at this position."
argument_list|,
name|p3
argument_list|,
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
literal|"Unexpected interceptor at this position."
argument_list|,
name|p2
argument_list|,
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
literal|"Unexpected interceptor at this position."
argument_list|,
name|p1
argument_list|,
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|!
name|it
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSingleInterceptorPass
parameter_list|()
throws|throws
name|Exception
block|{
name|AbstractPhaseInterceptor
name|p
init|=
name|setUpPhaseInterceptor
argument_list|(
literal|"phase1"
argument_list|,
literal|"p1"
argument_list|)
decl_stmt|;
name|setUpPhaseInterceptorInvocations
argument_list|(
name|p
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|chain
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|chain
operator|.
name|doIntercept
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSingleInterceptorFail
parameter_list|()
throws|throws
name|Exception
block|{
name|AbstractPhaseInterceptor
name|p
init|=
name|setUpPhaseInterceptor
argument_list|(
literal|"phase1"
argument_list|,
literal|"p1"
argument_list|)
decl_stmt|;
name|setUpPhaseInterceptorInvocations
argument_list|(
name|p
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|chain
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|chain
operator|.
name|doIntercept
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSingleInterceptorFailWithCustomLogger
parameter_list|()
throws|throws
name|Exception
block|{
name|AbstractPhaseInterceptor
name|p
init|=
name|setUpPhaseInterceptor
argument_list|(
literal|"phase1"
argument_list|,
literal|"p1"
argument_list|)
decl_stmt|;
name|setUpPhaseInterceptorInvocations
argument_list|(
name|p
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|setUpCustomLogger
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|chain
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|chain
operator|.
name|doIntercept
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSingleInterceptorFailWithCustomLoggerAndDefaultLogging
parameter_list|()
throws|throws
name|Exception
block|{
name|AbstractPhaseInterceptor
name|p
init|=
name|setUpPhaseInterceptor
argument_list|(
literal|"phase1"
argument_list|,
literal|"p1"
argument_list|)
decl_stmt|;
name|setUpPhaseInterceptorInvocations
argument_list|(
name|p
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|setUpCustomLogger
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|chain
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|chain
operator|.
name|doIntercept
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSingleInterceptorFailWithoutCustomLogger
parameter_list|()
throws|throws
name|Exception
block|{
name|AbstractPhaseInterceptor
name|p
init|=
name|setUpPhaseInterceptor
argument_list|(
literal|"phase1"
argument_list|,
literal|"p1"
argument_list|)
decl_stmt|;
name|setUpPhaseInterceptorInvocations
argument_list|(
name|p
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|setUpCustomLogger
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|chain
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|chain
operator|.
name|doIntercept
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTwoInterceptorsInSamePhasePass
parameter_list|()
throws|throws
name|Exception
block|{
name|AbstractPhaseInterceptor
name|p1
init|=
name|setUpPhaseInterceptor
argument_list|(
literal|"phase1"
argument_list|,
literal|"p1"
argument_list|)
decl_stmt|;
name|setUpPhaseInterceptorInvocations
argument_list|(
name|p1
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|AbstractPhaseInterceptor
name|p2
init|=
name|setUpPhaseInterceptor
argument_list|(
literal|"phase1"
argument_list|,
literal|"p2"
argument_list|)
decl_stmt|;
name|setUpPhaseInterceptorInvocations
argument_list|(
name|p2
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|chain
operator|.
name|add
argument_list|(
name|p2
argument_list|)
expr_stmt|;
name|chain
operator|.
name|add
argument_list|(
name|p1
argument_list|)
expr_stmt|;
name|chain
operator|.
name|doIntercept
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testThreeInterceptorsInSamePhaseSecondFail
parameter_list|()
throws|throws
name|Exception
block|{
name|AbstractPhaseInterceptor
name|p1
init|=
name|setUpPhaseInterceptor
argument_list|(
literal|"phase1"
argument_list|,
literal|"p1"
argument_list|)
decl_stmt|;
name|setUpPhaseInterceptorInvocations
argument_list|(
name|p1
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|AbstractPhaseInterceptor
name|p2
init|=
name|setUpPhaseInterceptor
argument_list|(
literal|"phase1"
argument_list|,
literal|"p2"
argument_list|)
decl_stmt|;
name|setUpPhaseInterceptorInvocations
argument_list|(
name|p2
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|AbstractPhaseInterceptor
name|p3
init|=
name|setUpPhaseInterceptor
argument_list|(
literal|"phase1"
argument_list|,
literal|"p3"
argument_list|)
decl_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|chain
operator|.
name|add
argument_list|(
name|p1
argument_list|)
expr_stmt|;
name|chain
operator|.
name|add
argument_list|(
name|p2
argument_list|)
expr_stmt|;
name|chain
operator|.
name|add
argument_list|(
name|p3
argument_list|)
expr_stmt|;
name|chain
operator|.
name|doIntercept
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTwoInterceptorsInSamePhaseSecondFail
parameter_list|()
throws|throws
name|Exception
block|{
name|AbstractPhaseInterceptor
name|p1
init|=
name|setUpPhaseInterceptor
argument_list|(
literal|"phase1"
argument_list|,
literal|"p1"
argument_list|)
decl_stmt|;
name|setUpPhaseInterceptorInvocations
argument_list|(
name|p1
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|AbstractPhaseInterceptor
name|p2
init|=
name|setUpPhaseInterceptor
argument_list|(
literal|"phase1"
argument_list|,
literal|"p2"
argument_list|)
decl_stmt|;
name|setUpPhaseInterceptorInvocations
argument_list|(
name|p2
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|chain
operator|.
name|add
argument_list|(
name|p1
argument_list|)
expr_stmt|;
name|chain
operator|.
name|add
argument_list|(
name|p2
argument_list|)
expr_stmt|;
name|chain
operator|.
name|doIntercept
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTwoInterceptorsInDifferentPhasesPass
parameter_list|()
throws|throws
name|Exception
block|{
name|AbstractPhaseInterceptor
name|p1
init|=
name|setUpPhaseInterceptor
argument_list|(
literal|"phase1"
argument_list|,
literal|"p1"
argument_list|)
decl_stmt|;
name|setUpPhaseInterceptorInvocations
argument_list|(
name|p1
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|AbstractPhaseInterceptor
name|p2
init|=
name|setUpPhaseInterceptor
argument_list|(
literal|"phase2"
argument_list|,
literal|"p2"
argument_list|)
decl_stmt|;
name|setUpPhaseInterceptorInvocations
argument_list|(
name|p2
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|chain
operator|.
name|add
argument_list|(
name|p1
argument_list|)
expr_stmt|;
name|chain
operator|.
name|add
argument_list|(
name|p2
argument_list|)
expr_stmt|;
name|chain
operator|.
name|doIntercept
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTwoInterceptorsInDifferentPhasesSecondFail
parameter_list|()
throws|throws
name|Exception
block|{
name|AbstractPhaseInterceptor
name|p1
init|=
name|setUpPhaseInterceptor
argument_list|(
literal|"phase1"
argument_list|,
literal|"p1"
argument_list|)
decl_stmt|;
name|setUpPhaseInterceptorInvocations
argument_list|(
name|p1
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|AbstractPhaseInterceptor
name|p2
init|=
name|setUpPhaseInterceptor
argument_list|(
literal|"phase2"
argument_list|,
literal|"p2"
argument_list|)
decl_stmt|;
name|setUpPhaseInterceptorInvocations
argument_list|(
name|p2
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|chain
operator|.
name|add
argument_list|(
name|p1
argument_list|)
expr_stmt|;
name|chain
operator|.
name|add
argument_list|(
name|p2
argument_list|)
expr_stmt|;
name|chain
operator|.
name|doIntercept
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInsertionInDifferentPhasePass
parameter_list|()
throws|throws
name|Exception
block|{
name|AbstractPhaseInterceptor
name|p2
init|=
name|setUpPhaseInterceptor
argument_list|(
literal|"phase2"
argument_list|,
literal|"p2"
argument_list|)
decl_stmt|;
name|setUpPhaseInterceptorInvocations
argument_list|(
name|p2
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|AbstractPhaseInterceptor
name|p3
init|=
name|setUpPhaseInterceptor
argument_list|(
literal|"phase3"
argument_list|,
literal|"p3"
argument_list|)
decl_stmt|;
name|setUpPhaseInterceptorInvocations
argument_list|(
name|p3
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|InsertingPhaseInterceptor
name|p1
init|=
operator|new
name|InsertingPhaseInterceptor
argument_list|(
name|chain
argument_list|,
name|p2
argument_list|,
literal|"phase1"
argument_list|,
literal|"p1"
argument_list|)
decl_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|chain
operator|.
name|add
argument_list|(
name|p3
argument_list|)
expr_stmt|;
name|chain
operator|.
name|add
argument_list|(
name|p1
argument_list|)
expr_stmt|;
name|chain
operator|.
name|doIntercept
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|p1
operator|.
name|invoked
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|p1
operator|.
name|faultInvoked
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInsertionInSamePhasePass
parameter_list|()
throws|throws
name|Exception
block|{
name|AbstractPhaseInterceptor
name|p2
init|=
name|setUpPhaseInterceptor
argument_list|(
literal|"phase1"
argument_list|,
literal|"p2"
argument_list|)
decl_stmt|;
name|setUpPhaseInterceptorInvocations
argument_list|(
name|p2
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|after3
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|after3
operator|.
name|add
argument_list|(
literal|"p2"
argument_list|)
expr_stmt|;
name|AbstractPhaseInterceptor
name|p3
init|=
name|setUpPhaseInterceptor
argument_list|(
literal|"phase1"
argument_list|,
literal|"p3"
argument_list|,
literal|null
argument_list|,
name|after3
argument_list|)
decl_stmt|;
name|setUpPhaseInterceptorInvocations
argument_list|(
name|p3
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|InsertingPhaseInterceptor
name|p1
init|=
operator|new
name|InsertingPhaseInterceptor
argument_list|(
name|chain
argument_list|,
name|p3
argument_list|,
literal|"phase1"
argument_list|,
literal|"p1"
argument_list|)
decl_stmt|;
name|p1
operator|.
name|addBefore
argument_list|(
literal|"p2"
argument_list|)
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|chain
operator|.
name|add
argument_list|(
name|p1
argument_list|)
expr_stmt|;
name|chain
operator|.
name|add
argument_list|(
name|p2
argument_list|)
expr_stmt|;
name|chain
operator|.
name|doIntercept
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|p1
operator|.
name|invoked
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|p1
operator|.
name|faultInvoked
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testWrappedInvocation
parameter_list|()
throws|throws
name|Exception
block|{
name|CountingPhaseInterceptor
name|p1
init|=
operator|new
name|CountingPhaseInterceptor
argument_list|(
literal|"phase1"
argument_list|,
literal|"p1"
argument_list|)
decl_stmt|;
name|WrapperingPhaseInterceptor
name|p2
init|=
operator|new
name|WrapperingPhaseInterceptor
argument_list|(
literal|"phase2"
argument_list|,
literal|"p2"
argument_list|)
decl_stmt|;
name|CountingPhaseInterceptor
name|p3
init|=
operator|new
name|CountingPhaseInterceptor
argument_list|(
literal|"phase3"
argument_list|,
literal|"p3"
argument_list|)
decl_stmt|;
name|message
operator|.
name|getInterceptorChain
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|andReturn
argument_list|(
name|chain
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|chain
operator|.
name|add
argument_list|(
name|p1
argument_list|)
expr_stmt|;
name|chain
operator|.
name|add
argument_list|(
name|p2
argument_list|)
expr_stmt|;
name|chain
operator|.
name|add
argument_list|(
name|p3
argument_list|)
expr_stmt|;
name|chain
operator|.
name|doIntercept
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|p1
operator|.
name|invoked
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|p2
operator|.
name|invoked
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|p3
operator|.
name|invoked
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testChainInvocationStartFromSpecifiedInterceptor
parameter_list|()
throws|throws
name|Exception
block|{
name|CountingPhaseInterceptor
name|p1
init|=
operator|new
name|CountingPhaseInterceptor
argument_list|(
literal|"phase1"
argument_list|,
literal|"p1"
argument_list|)
decl_stmt|;
name|CountingPhaseInterceptor
name|p2
init|=
operator|new
name|CountingPhaseInterceptor
argument_list|(
literal|"phase2"
argument_list|,
literal|"p2"
argument_list|)
decl_stmt|;
name|CountingPhaseInterceptor
name|p3
init|=
operator|new
name|CountingPhaseInterceptor
argument_list|(
literal|"phase3"
argument_list|,
literal|"p3"
argument_list|)
decl_stmt|;
name|message
operator|.
name|getInterceptorChain
argument_list|()
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|andReturn
argument_list|(
name|chain
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|chain
operator|.
name|add
argument_list|(
name|p1
argument_list|)
expr_stmt|;
name|chain
operator|.
name|add
argument_list|(
name|p2
argument_list|)
expr_stmt|;
name|chain
operator|.
name|add
argument_list|(
name|p3
argument_list|)
expr_stmt|;
name|chain
operator|.
name|doInterceptStartingAfter
argument_list|(
name|message
argument_list|,
name|p2
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|p1
operator|.
name|invoked
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|p2
operator|.
name|invoked
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|p3
operator|.
name|invoked
argument_list|)
expr_stmt|;
block|}
name|AbstractPhaseInterceptor
name|setUpPhaseInterceptor
parameter_list|(
name|String
name|phase
parameter_list|,
name|String
name|id
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|setUpPhaseInterceptor
argument_list|(
name|phase
argument_list|,
name|id
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
name|AbstractPhaseInterceptor
name|setUpPhaseInterceptor
parameter_list|(
specifier|final
name|String
name|phase
parameter_list|,
specifier|final
name|String
name|id
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|b
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|a
parameter_list|)
throws|throws
name|Exception
block|{
name|AbstractPhaseInterceptor
name|p
init|=
name|control
operator|.
name|createMock
argument_list|(
name|AbstractPhaseInterceptor
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|a
operator|==
literal|null
condition|)
block|{
name|a
operator|=
operator|new
name|SortedArraySet
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|b
operator|==
literal|null
condition|)
block|{
name|b
operator|=
operator|new
name|SortedArraySet
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|Field
name|f
init|=
name|AbstractPhaseInterceptor
operator|.
name|class
operator|.
name|getDeclaredField
argument_list|(
literal|"before"
argument_list|)
decl_stmt|;
name|f
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|f
operator|.
name|set
argument_list|(
name|p
argument_list|,
name|b
argument_list|)
expr_stmt|;
name|f
operator|=
name|AbstractPhaseInterceptor
operator|.
name|class
operator|.
name|getDeclaredField
argument_list|(
literal|"after"
argument_list|)
expr_stmt|;
name|f
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|f
operator|.
name|set
argument_list|(
name|p
argument_list|,
name|a
argument_list|)
expr_stmt|;
name|f
operator|=
name|AbstractPhaseInterceptor
operator|.
name|class
operator|.
name|getDeclaredField
argument_list|(
literal|"phase"
argument_list|)
expr_stmt|;
name|f
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|f
operator|.
name|set
argument_list|(
name|p
argument_list|,
name|phase
argument_list|)
expr_stmt|;
name|f
operator|=
name|AbstractPhaseInterceptor
operator|.
name|class
operator|.
name|getDeclaredField
argument_list|(
literal|"id"
argument_list|)
expr_stmt|;
name|f
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|f
operator|.
name|set
argument_list|(
name|p
argument_list|,
name|id
argument_list|)
expr_stmt|;
return|return
name|p
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|void
name|setUpPhaseInterceptorInvocations
parameter_list|(
name|AbstractPhaseInterceptor
name|p
parameter_list|,
name|boolean
name|fail
parameter_list|,
name|boolean
name|expectFault
parameter_list|)
block|{
name|p
operator|.
name|handleMessage
argument_list|(
name|message
argument_list|)
expr_stmt|;
if|if
condition|(
name|fail
condition|)
block|{
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|andThrow
argument_list|(
operator|new
name|RuntimeException
argument_list|()
argument_list|)
expr_stmt|;
name|message
operator|.
name|setContent
argument_list|(
name|EasyMock
operator|.
name|isA
argument_list|(
name|Class
operator|.
name|class
argument_list|)
argument_list|,
name|EasyMock
operator|.
name|isA
argument_list|(
name|Exception
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|expectFault
condition|)
block|{
name|p
operator|.
name|handleFault
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|setUpCustomLogger
parameter_list|(
name|boolean
name|useCustomLogger
parameter_list|,
name|boolean
name|expectFault
parameter_list|,
name|boolean
name|returnFromCustomLogger
parameter_list|)
block|{
if|if
condition|(
name|useCustomLogger
condition|)
block|{
name|FaultListener
name|customLogger
init|=
name|control
operator|.
name|createMock
argument_list|(
name|FaultListener
operator|.
name|class
argument_list|)
decl_stmt|;
name|message
operator|.
name|getContextualProperty
argument_list|(
name|FaultListener
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|andReturn
argument_list|(
name|customLogger
argument_list|)
expr_stmt|;
if|if
condition|(
name|expectFault
condition|)
block|{
name|customLogger
operator|.
name|faultOccurred
argument_list|(
name|EasyMock
operator|.
name|isA
argument_list|(
name|Exception
operator|.
name|class
argument_list|)
argument_list|,
name|EasyMock
operator|.
name|isA
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|EasyMock
operator|.
name|isA
argument_list|(
name|Message
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|andReturn
argument_list|(
name|returnFromCustomLogger
argument_list|)
expr_stmt|;
if|if
condition|(
name|returnFromCustomLogger
condition|)
block|{
comment|//default logging should also be invoked
comment|//not too beautiful way to verify that defaultLogging was invoked.
name|message
operator|.
name|get
argument_list|(
name|FaultMode
operator|.
name|class
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|andReturn
argument_list|(
name|FaultMode
operator|.
name|RUNTIME_FAULT
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|message
operator|.
name|getContextualProperty
argument_list|(
name|FaultListener
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expectLastCall
argument_list|()
operator|.
name|andReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
class|class
name|InsertingPhaseInterceptor
extends|extends
name|AbstractPhaseInterceptor
argument_list|<
name|Message
argument_list|>
block|{
name|int
name|invoked
decl_stmt|;
name|int
name|faultInvoked
decl_stmt|;
specifier|private
specifier|final
name|PhaseInterceptorChain
name|insertionChain
decl_stmt|;
specifier|private
specifier|final
name|AbstractPhaseInterceptor
name|insertionInterceptor
decl_stmt|;
specifier|public
name|InsertingPhaseInterceptor
parameter_list|(
name|PhaseInterceptorChain
name|c
parameter_list|,
name|AbstractPhaseInterceptor
name|i
parameter_list|,
name|String
name|phase
parameter_list|,
name|String
name|id
parameter_list|)
block|{
name|super
argument_list|(
name|id
argument_list|,
name|phase
argument_list|)
expr_stmt|;
name|insertionChain
operator|=
name|c
expr_stmt|;
name|insertionInterceptor
operator|=
name|i
expr_stmt|;
block|}
specifier|public
name|void
name|handleMessage
parameter_list|(
name|Message
name|m
parameter_list|)
block|{
name|insertionChain
operator|.
name|add
argument_list|(
name|insertionInterceptor
argument_list|)
expr_stmt|;
name|invoked
operator|++
expr_stmt|;
block|}
specifier|public
name|void
name|handleFault
parameter_list|(
name|Message
name|m
parameter_list|)
block|{
name|faultInvoked
operator|++
expr_stmt|;
block|}
block|}
specifier|public
class|class
name|CountingPhaseInterceptor
extends|extends
name|AbstractPhaseInterceptor
argument_list|<
name|Message
argument_list|>
block|{
name|int
name|invoked
decl_stmt|;
specifier|public
name|CountingPhaseInterceptor
parameter_list|(
name|String
name|phase
parameter_list|,
name|String
name|id
parameter_list|)
block|{
name|super
argument_list|(
name|id
argument_list|,
name|phase
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|handleMessage
parameter_list|(
name|Message
name|m
parameter_list|)
block|{
name|invoked
operator|++
expr_stmt|;
block|}
block|}
specifier|public
class|class
name|WrapperingPhaseInterceptor
extends|extends
name|CountingPhaseInterceptor
block|{
specifier|public
name|WrapperingPhaseInterceptor
parameter_list|(
name|String
name|phase
parameter_list|,
name|String
name|id
parameter_list|)
block|{
name|super
argument_list|(
name|phase
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|handleMessage
parameter_list|(
name|Message
name|m
parameter_list|)
block|{
name|super
operator|.
name|handleMessage
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|m
operator|.
name|getInterceptorChain
argument_list|()
operator|.
name|doIntercept
argument_list|(
name|m
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
class|class
name|SuspendedInvocationInterceptor
extends|extends
name|AbstractPhaseInterceptor
argument_list|<
name|Message
argument_list|>
block|{
specifier|public
name|SuspendedInvocationInterceptor
parameter_list|(
name|String
name|phase
parameter_list|,
name|String
name|id
parameter_list|)
block|{
name|super
argument_list|(
name|id
argument_list|,
name|phase
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|handleMessage
parameter_list|(
name|Message
name|m
parameter_list|)
block|{
throw|throw
operator|new
name|SuspendedInvocationException
argument_list|(
operator|new
name|Throwable
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

