begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|staxutils
operator|.
name|transform
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|NamespaceContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|DelegatingNamespaceContextTest
extends|extends
name|Assert
block|{
annotation|@
name|Test
specifier|public
name|void
name|testSomeAddsAndGets
parameter_list|()
throws|throws
name|Exception
block|{
name|DelegatingNamespaceContext
name|dnc
init|=
name|getTestDelegatingNamespaceContext
argument_list|()
decl_stmt|;
name|dnc
operator|.
name|down
argument_list|()
expr_stmt|;
comment|//1
name|dnc
operator|.
name|addPrefix
argument_list|(
literal|"p1"
argument_list|,
literal|"urn:foo1"
argument_list|)
expr_stmt|;
name|dnc
operator|.
name|addPrefix
argument_list|(
literal|"p2"
argument_list|,
literal|"urn:foo2"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"urn:foo0"
argument_list|,
name|dnc
operator|.
name|getNamespaceURI
argument_list|(
literal|"p0"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"urn:foo1"
argument_list|,
name|dnc
operator|.
name|getNamespaceURI
argument_list|(
literal|"p1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"urn:foo2"
argument_list|,
name|dnc
operator|.
name|getNamespaceURI
argument_list|(
literal|"p2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"p0"
argument_list|,
name|dnc
operator|.
name|getPrefix
argument_list|(
literal|"urn:foo0"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"p1"
argument_list|,
name|dnc
operator|.
name|getPrefix
argument_list|(
literal|"urn:foo1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"p2"
argument_list|,
name|dnc
operator|.
name|getPrefix
argument_list|(
literal|"urn:foo2"
argument_list|)
argument_list|)
expr_stmt|;
name|verifyPrefixes
argument_list|(
name|dnc
operator|.
name|getPrefixes
argument_list|(
literal|"urn:foo1"
argument_list|)
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"p1"
block|}
argument_list|)
expr_stmt|;
name|verifyPrefixes
argument_list|(
name|dnc
operator|.
name|getPrefixes
argument_list|(
literal|"urn:foo2"
argument_list|)
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"p2"
block|}
argument_list|)
expr_stmt|;
name|dnc
operator|.
name|down
argument_list|()
expr_stmt|;
comment|//2
name|dnc
operator|.
name|addPrefix
argument_list|(
literal|"p11"
argument_list|,
literal|"urn:foo1"
argument_list|)
expr_stmt|;
name|dnc
operator|.
name|addPrefix
argument_list|(
literal|"p2"
argument_list|,
literal|"urn:foo22"
argument_list|)
expr_stmt|;
name|dnc
operator|.
name|addPrefix
argument_list|(
literal|"p3"
argument_list|,
literal|"urn:foo3"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"urn:foo1"
argument_list|,
name|dnc
operator|.
name|getNamespaceURI
argument_list|(
literal|"p1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"urn:foo1"
argument_list|,
name|dnc
operator|.
name|getNamespaceURI
argument_list|(
literal|"p11"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"urn:foo22"
argument_list|,
name|dnc
operator|.
name|getNamespaceURI
argument_list|(
literal|"p2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"urn:foo3"
argument_list|,
name|dnc
operator|.
name|getNamespaceURI
argument_list|(
literal|"p3"
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|p
init|=
name|dnc
operator|.
name|getPrefix
argument_list|(
literal|"urn:foo1"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"p1"
operator|.
name|equals
argument_list|(
name|p
argument_list|)
operator|||
literal|"p11"
operator|.
name|equals
argument_list|(
name|p
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|dnc
operator|.
name|getPrefix
argument_list|(
literal|"urn:foo2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"p2"
argument_list|,
name|dnc
operator|.
name|getPrefix
argument_list|(
literal|"urn:foo22"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"p3"
argument_list|,
name|dnc
operator|.
name|getPrefix
argument_list|(
literal|"urn:foo3"
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|=
name|dnc
operator|.
name|findUniquePrefix
argument_list|(
literal|"urn:foo4"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|p
argument_list|,
name|dnc
operator|.
name|getPrefix
argument_list|(
literal|"urn:foo4"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"urn:foo4"
argument_list|,
name|dnc
operator|.
name|getNamespaceURI
argument_list|(
name|p
argument_list|)
argument_list|)
expr_stmt|;
name|verifyPrefixes
argument_list|(
name|dnc
operator|.
name|getPrefixes
argument_list|(
literal|"urn:foo1"
argument_list|)
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"p1"
block|,
literal|"p11"
block|}
argument_list|)
expr_stmt|;
name|verifyPrefixes
argument_list|(
name|dnc
operator|.
name|getPrefixes
argument_list|(
literal|"urn:foo2"
argument_list|)
argument_list|,
operator|new
name|String
index|[]
block|{}
argument_list|)
expr_stmt|;
name|verifyPrefixes
argument_list|(
name|dnc
operator|.
name|getPrefixes
argument_list|(
literal|"urn:foo22"
argument_list|)
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"p2"
block|}
argument_list|)
expr_stmt|;
name|verifyPrefixes
argument_list|(
name|dnc
operator|.
name|getPrefixes
argument_list|(
literal|"urn:foo3"
argument_list|)
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"p3"
block|}
argument_list|)
expr_stmt|;
name|dnc
operator|.
name|up
argument_list|()
expr_stmt|;
comment|//1
name|assertEquals
argument_list|(
literal|"urn:foo1"
argument_list|,
name|dnc
operator|.
name|getNamespaceURI
argument_list|(
literal|"p1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|dnc
operator|.
name|getNamespaceURI
argument_list|(
literal|"p11"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"urn:foo2"
argument_list|,
name|dnc
operator|.
name|getNamespaceURI
argument_list|(
literal|"p2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|dnc
operator|.
name|getNamespaceURI
argument_list|(
literal|"p3"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"p1"
argument_list|,
name|dnc
operator|.
name|getPrefix
argument_list|(
literal|"urn:foo1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|dnc
operator|.
name|getPrefix
argument_list|(
literal|"urn:foo11"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"p2"
argument_list|,
name|dnc
operator|.
name|getPrefix
argument_list|(
literal|"urn:foo2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|dnc
operator|.
name|getPrefix
argument_list|(
literal|"urn:foo22"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|dnc
operator|.
name|getPrefix
argument_list|(
literal|"urn:foo3"
argument_list|)
argument_list|)
expr_stmt|;
name|verifyPrefixes
argument_list|(
name|dnc
operator|.
name|getPrefixes
argument_list|(
literal|"urn:foo1"
argument_list|)
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"p1"
block|}
argument_list|)
expr_stmt|;
name|verifyPrefixes
argument_list|(
name|dnc
operator|.
name|getPrefixes
argument_list|(
literal|"urn:foo2"
argument_list|)
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"p2"
block|}
argument_list|)
expr_stmt|;
name|verifyPrefixes
argument_list|(
name|dnc
operator|.
name|getPrefixes
argument_list|(
literal|"urn:foo3"
argument_list|)
argument_list|,
operator|new
name|String
index|[]
block|{}
argument_list|)
expr_stmt|;
name|dnc
operator|.
name|up
argument_list|()
expr_stmt|;
comment|//0
try|try
block|{
name|dnc
operator|.
name|up
argument_list|()
expr_stmt|;
comment|//-1
name|fail
argument_list|(
literal|"not allowed to go up"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSomeAddsWithDuplicatedPrefixName
parameter_list|()
throws|throws
name|Exception
block|{
name|DelegatingNamespaceContext
name|dnc
init|=
name|getTestDelegatingNamespaceContext
argument_list|()
decl_stmt|;
name|dnc
operator|.
name|down
argument_list|()
expr_stmt|;
comment|// 1
name|dnc
operator|.
name|addPrefix
argument_list|(
literal|"p00"
argument_list|,
literal|"urn:foo0"
argument_list|)
expr_stmt|;
name|dnc
operator|.
name|addPrefix
argument_list|(
literal|"p1"
argument_list|,
literal|"urn:foo1"
argument_list|)
expr_stmt|;
name|dnc
operator|.
name|addPrefix
argument_list|(
literal|"p2"
argument_list|,
literal|"urn:foo2"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"urn:foo0"
argument_list|,
name|dnc
operator|.
name|getNamespaceURI
argument_list|(
literal|"p0"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"urn:foo0"
argument_list|,
name|dnc
operator|.
name|getNamespaceURI
argument_list|(
literal|"p00"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"urn:foo1"
argument_list|,
name|dnc
operator|.
name|getNamespaceURI
argument_list|(
literal|"p1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"urn:foo2"
argument_list|,
name|dnc
operator|.
name|getNamespaceURI
argument_list|(
literal|"p2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"p0"
operator|.
name|equals
argument_list|(
name|dnc
operator|.
name|getPrefix
argument_list|(
literal|"urn:foo0"
argument_list|)
argument_list|)
operator|||
literal|"p00"
operator|.
name|equals
argument_list|(
name|dnc
operator|.
name|getPrefix
argument_list|(
literal|"urn:foo0"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"p1"
argument_list|,
name|dnc
operator|.
name|getPrefix
argument_list|(
literal|"urn:foo1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"p2"
argument_list|,
name|dnc
operator|.
name|getPrefix
argument_list|(
literal|"urn:foo2"
argument_list|)
argument_list|)
expr_stmt|;
name|verifyPrefixes
argument_list|(
name|dnc
operator|.
name|getPrefixes
argument_list|(
literal|"urn:foo1"
argument_list|)
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"p1"
block|}
argument_list|)
expr_stmt|;
name|verifyPrefixes
argument_list|(
name|dnc
operator|.
name|getPrefixes
argument_list|(
literal|"urn:foo2"
argument_list|)
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"p2"
block|}
argument_list|)
expr_stmt|;
name|verifyPrefixes
argument_list|(
name|dnc
operator|.
name|getPrefixes
argument_list|(
literal|"urn:foo0"
argument_list|)
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"p0"
block|,
literal|"p00"
block|}
argument_list|)
expr_stmt|;
block|}
specifier|private
name|DelegatingNamespaceContext
name|getTestDelegatingNamespaceContext
parameter_list|()
block|{
return|return
operator|new
name|DelegatingNamespaceContext
argument_list|(
operator|new
name|NamespaceContext
argument_list|()
block|{
specifier|public
name|String
name|getNamespaceURI
parameter_list|(
name|String
name|prefix
parameter_list|)
block|{
return|return
literal|"p0"
operator|.
name|equals
argument_list|(
name|prefix
argument_list|)
condition|?
literal|"urn:foo0"
else|:
literal|null
return|;
block|}
specifier|public
name|String
name|getPrefix
parameter_list|(
name|String
name|ns
parameter_list|)
block|{
return|return
literal|"urn:foo0"
operator|.
name|equals
argument_list|(
name|ns
argument_list|)
condition|?
literal|"p0"
else|:
literal|null
return|;
block|}
specifier|public
name|Iterator
argument_list|<
name|String
argument_list|>
name|getPrefixes
parameter_list|(
name|String
name|ns
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
argument_list|,
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"urn:foo5"
argument_list|,
literal|"urn:foo55"
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|void
name|verifyPrefixes
parameter_list|(
name|Iterator
argument_list|<
name|String
argument_list|>
name|prefixes
parameter_list|,
name|String
index|[]
name|values
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|tmp
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
name|prefixes
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|tmp
operator|.
name|add
argument_list|(
name|prefixes
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|v
range|:
name|values
control|)
block|{
if|if
condition|(
name|tmp
operator|.
name|contains
argument_list|(
name|v
argument_list|)
condition|)
block|{
name|tmp
operator|.
name|remove
argument_list|(
name|v
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fail
argument_list|(
literal|"not expected: "
operator|+
name|v
argument_list|)
expr_stmt|;
block|}
block|}
name|assertTrue
argument_list|(
name|tmp
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

