begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements. See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership. The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License. You may obtain a copy of the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|io
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|Bus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cxf
operator|.
name|BusFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|EasyMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|IMocksControl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
specifier|abstract
class|class
name|CachedStreamTestBase
extends|extends
name|Assert
block|{
specifier|protected
specifier|abstract
name|void
name|reloadDefaultProperties
parameter_list|()
function_decl|;
specifier|protected
specifier|abstract
name|Object
name|createCache
parameter_list|()
function_decl|;
specifier|protected
specifier|abstract
name|Object
name|createCache
parameter_list|(
name|long
name|threshold
parameter_list|)
function_decl|;
specifier|protected
specifier|abstract
name|Object
name|createCache
parameter_list|(
name|long
name|threshold
parameter_list|,
name|String
name|transformation
parameter_list|)
function_decl|;
specifier|protected
specifier|abstract
name|String
name|getResetOutValue
parameter_list|(
name|String
name|result
parameter_list|,
name|Object
name|cache
parameter_list|)
throws|throws
name|IOException
function_decl|;
specifier|protected
specifier|abstract
name|File
name|getTmpFile
parameter_list|(
name|String
name|result
parameter_list|,
name|Object
name|cache
parameter_list|)
throws|throws
name|IOException
function_decl|;
specifier|protected
specifier|abstract
name|Object
name|getInputStreamObject
parameter_list|(
name|Object
name|cache
parameter_list|)
throws|throws
name|IOException
function_decl|;
specifier|protected
specifier|abstract
name|String
name|readFromStreamObject
parameter_list|(
name|Object
name|cache
parameter_list|)
throws|throws
name|IOException
function_decl|;
annotation|@
name|Test
specifier|public
name|void
name|testResetOut
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|result
init|=
name|initTestData
argument_list|(
literal|16
argument_list|)
decl_stmt|;
name|Object
name|cache
init|=
name|createCache
argument_list|()
decl_stmt|;
name|String
name|test
init|=
name|getResetOutValue
argument_list|(
name|result
argument_list|,
name|cache
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"The test stream content isn't same "
argument_list|,
name|test
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|close
argument_list|(
name|cache
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDeleteTmpFile
parameter_list|()
throws|throws
name|IOException
block|{
name|Object
name|cache
init|=
name|createCache
argument_list|()
decl_stmt|;
comment|//ensure output data size larger then 64k which will generate tmp file
name|String
name|result
init|=
name|initTestData
argument_list|(
literal|65
argument_list|)
decl_stmt|;
name|File
name|tempFile
init|=
name|getTmpFile
argument_list|(
name|result
argument_list|,
name|cache
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|tempFile
argument_list|)
expr_stmt|;
comment|//assert tmp file is generated
name|assertTrue
argument_list|(
name|tempFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|close
argument_list|(
name|cache
argument_list|)
expr_stmt|;
comment|//assert tmp file is deleted after close the CachedOutputStream
name|assertFalse
argument_list|(
name|tempFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDeleteTmpFile2
parameter_list|()
throws|throws
name|IOException
block|{
name|Object
name|cache
init|=
name|createCache
argument_list|()
decl_stmt|;
comment|//ensure output data size larger then 64k which will generate tmp file
name|String
name|result
init|=
name|initTestData
argument_list|(
literal|65
argument_list|)
decl_stmt|;
name|File
name|tempFile
init|=
name|getTmpFile
argument_list|(
name|result
argument_list|,
name|cache
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|tempFile
argument_list|)
expr_stmt|;
comment|//assert tmp file is generated
name|assertTrue
argument_list|(
name|tempFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|Object
name|in
init|=
name|getInputStreamObject
argument_list|(
name|cache
argument_list|)
decl_stmt|;
name|close
argument_list|(
name|cache
argument_list|)
expr_stmt|;
comment|//assert tmp file is not deleted when the input stream is open
name|assertTrue
argument_list|(
name|tempFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|close
argument_list|(
name|in
argument_list|)
expr_stmt|;
comment|//assert tmp file is deleted after the input stream is closed
name|assertFalse
argument_list|(
name|tempFile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEncryptAndDecryptWithDeleteOnClose
parameter_list|()
throws|throws
name|IOException
block|{
comment|// need a 8-bit cipher so that all bytes are flushed when the stream is flushed.
name|Object
name|cache
init|=
name|createCache
argument_list|(
literal|4
argument_list|,
literal|"RC4"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|text
init|=
literal|"Hello Secret World!"
decl_stmt|;
name|File
name|tmpfile
init|=
name|getTmpFile
argument_list|(
name|text
argument_list|,
name|cache
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|tmpfile
argument_list|)
expr_stmt|;
specifier|final
name|String
name|enctext
init|=
name|readFromStream
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|tmpfile
argument_list|)
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"text is not encoded"
argument_list|,
name|text
operator|.
name|equals
argument_list|(
name|enctext
argument_list|)
argument_list|)
expr_stmt|;
name|Object
name|fin
init|=
name|getInputStreamObject
argument_list|(
name|cache
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"file is deleted"
argument_list|,
name|tmpfile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|String
name|dectext
init|=
name|readFromStreamObject
argument_list|(
name|fin
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"text is not decoded correctly"
argument_list|,
name|text
argument_list|,
name|dectext
argument_list|)
expr_stmt|;
comment|// the file is deleted when cos is closed while all the associated inputs are closed
name|assertTrue
argument_list|(
literal|"file is deleted"
argument_list|,
name|tmpfile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|close
argument_list|(
name|cache
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"file is not deleted"
argument_list|,
name|tmpfile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEncryptAndDecryptWithDeleteOnInClose
parameter_list|()
throws|throws
name|IOException
block|{
comment|// need a 8-bit cipher so that all bytes are flushed when the stream is flushed.
name|Object
name|cache
init|=
name|createCache
argument_list|(
literal|4
argument_list|,
literal|"RC4"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|text
init|=
literal|"Hello Secret World!"
decl_stmt|;
name|File
name|tmpfile
init|=
name|getTmpFile
argument_list|(
name|text
argument_list|,
name|cache
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|tmpfile
argument_list|)
expr_stmt|;
specifier|final
name|String
name|enctext
init|=
name|readFromStream
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|tmpfile
argument_list|)
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"text is not encoded"
argument_list|,
name|text
operator|.
name|equals
argument_list|(
name|enctext
argument_list|)
argument_list|)
expr_stmt|;
name|Object
name|fin
init|=
name|getInputStreamObject
argument_list|(
name|cache
argument_list|)
decl_stmt|;
name|close
argument_list|(
name|cache
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"file is deleted"
argument_list|,
name|tmpfile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
comment|// the file is deleted when cos is closed while all the associated inputs are closed
specifier|final
name|String
name|dectext
init|=
name|readFromStreamObject
argument_list|(
name|fin
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"text is not decoded correctly"
argument_list|,
name|text
argument_list|,
name|dectext
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"file is not deleted"
argument_list|,
name|tmpfile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUseSysProps
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|old
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"org.apache.cxf.io.CachedOutputStream.Threshold"
argument_list|)
decl_stmt|;
try|try
block|{
name|System
operator|.
name|clearProperty
argument_list|(
literal|"org.apache.cxf.io.CachedOutputStream.Threshold"
argument_list|)
expr_stmt|;
name|reloadDefaultProperties
argument_list|()
expr_stmt|;
name|Object
name|cache
init|=
name|createCache
argument_list|()
decl_stmt|;
name|File
name|tmpfile
init|=
name|getTmpFile
argument_list|(
literal|"Hello World!"
argument_list|,
name|cache
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
literal|"expects no tmp file"
argument_list|,
name|tmpfile
argument_list|)
expr_stmt|;
name|close
argument_list|(
name|cache
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"org.apache.cxf.io.CachedOutputStream.Threshold"
argument_list|,
literal|"4"
argument_list|)
expr_stmt|;
name|reloadDefaultProperties
argument_list|()
expr_stmt|;
name|cache
operator|=
name|createCache
argument_list|()
expr_stmt|;
name|tmpfile
operator|=
name|getTmpFile
argument_list|(
literal|"Hello World!"
argument_list|,
name|cache
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"expects a tmp file"
argument_list|,
name|tmpfile
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"expects a tmp file"
argument_list|,
name|tmpfile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|close
argument_list|(
name|cache
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"expects no tmp file"
argument_list|,
name|tmpfile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|old
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|setProperty
argument_list|(
literal|"org.apache.cxf.io.CachedOutputStream.Threshold"
argument_list|,
name|old
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUseBusProps
parameter_list|()
throws|throws
name|Exception
block|{
name|Bus
name|oldbus
init|=
name|BusFactory
operator|.
name|getThreadDefaultBus
argument_list|(
literal|false
argument_list|)
decl_stmt|;
try|try
block|{
name|Object
name|cache
init|=
name|createCache
argument_list|(
literal|64
argument_list|)
decl_stmt|;
name|File
name|tmpfile
init|=
name|getTmpFile
argument_list|(
literal|"Hello World!"
argument_list|,
name|cache
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
literal|"expects no tmp file"
argument_list|,
name|tmpfile
argument_list|)
expr_stmt|;
name|close
argument_list|(
name|cache
argument_list|)
expr_stmt|;
name|IMocksControl
name|control
init|=
name|EasyMock
operator|.
name|createControl
argument_list|()
decl_stmt|;
name|Bus
name|b
init|=
name|control
operator|.
name|createMock
argument_list|(
name|Bus
operator|.
name|class
argument_list|)
decl_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|b
operator|.
name|getProperty
argument_list|(
literal|"bus.io.CachedOutputStream.Threshold"
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|"4"
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|b
operator|.
name|getProperty
argument_list|(
literal|"bus.io.CachedOutputStream.MaxSize"
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|EasyMock
operator|.
name|expect
argument_list|(
name|b
operator|.
name|getProperty
argument_list|(
literal|"bus.io.CachedOutputStream.CipherTransformation"
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|BusFactory
operator|.
name|setThreadDefaultBus
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|control
operator|.
name|replay
argument_list|()
expr_stmt|;
name|cache
operator|=
name|createCache
argument_list|()
expr_stmt|;
name|tmpfile
operator|=
name|getTmpFile
argument_list|(
literal|"Hello World!"
argument_list|,
name|cache
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"expects a tmp file"
argument_list|,
name|tmpfile
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"expects a tmp file"
argument_list|,
name|tmpfile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|close
argument_list|(
name|cache
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"expects no tmp file"
argument_list|,
name|tmpfile
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|control
operator|.
name|verify
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|BusFactory
operator|.
name|setThreadDefaultBus
argument_list|(
name|oldbus
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|close
parameter_list|(
name|Object
name|obj
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|obj
operator|instanceof
name|CachedOutputStream
condition|)
block|{
operator|(
operator|(
name|CachedOutputStream
operator|)
name|obj
operator|)
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|obj
operator|instanceof
name|CachedWriter
condition|)
block|{
operator|(
operator|(
name|CachedWriter
operator|)
name|obj
operator|)
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|obj
operator|instanceof
name|InputStream
condition|)
block|{
operator|(
operator|(
name|InputStream
operator|)
name|obj
operator|)
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|obj
operator|instanceof
name|Reader
condition|)
block|{
operator|(
operator|(
name|Reader
operator|)
name|obj
operator|)
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
specifier|static
name|String
name|readFromStream
parameter_list|(
name|InputStream
name|is
parameter_list|)
throws|throws
name|IOException
block|{
name|ByteArrayOutputStream
name|buf
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
try|try
block|{
name|byte
index|[]
name|b
init|=
operator|new
name|byte
index|[
literal|100
index|]
decl_stmt|;
for|for
control|(
init|;
condition|;
control|)
block|{
name|int
name|n
init|=
name|is
operator|.
name|read
argument_list|(
name|b
argument_list|,
literal|0
argument_list|,
name|b
operator|.
name|length
argument_list|)
decl_stmt|;
if|if
condition|(
name|n
operator|<
literal|0
condition|)
block|{
break|break;
block|}
name|buf
operator|.
name|write
argument_list|(
name|b
argument_list|,
literal|0
argument_list|,
name|n
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
operator|new
name|String
argument_list|(
name|buf
operator|.
name|toByteArray
argument_list|()
argument_list|,
literal|"UTF-8"
argument_list|)
return|;
block|}
specifier|protected
specifier|static
name|String
name|readFromReader
parameter_list|(
name|Reader
name|is
parameter_list|)
throws|throws
name|IOException
block|{
name|StringBuffer
name|buf
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
try|try
block|{
name|char
index|[]
name|b
init|=
operator|new
name|char
index|[
literal|100
index|]
decl_stmt|;
for|for
control|(
init|;
condition|;
control|)
block|{
name|int
name|n
init|=
name|is
operator|.
name|read
argument_list|(
name|b
argument_list|,
literal|0
argument_list|,
name|b
operator|.
name|length
argument_list|)
decl_stmt|;
if|if
condition|(
name|n
operator|<
literal|0
condition|)
block|{
break|break;
block|}
name|buf
operator|.
name|append
argument_list|(
name|b
argument_list|,
literal|0
argument_list|,
name|n
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|String
name|initTestData
parameter_list|(
name|int
name|packetSize
parameter_list|)
block|{
name|String
name|temp
init|=
literal|"abcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()_+?><[]/0123456789"
decl_stmt|;
name|String
name|result
init|=
operator|new
name|String
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|1024
operator|*
name|packetSize
operator|/
name|temp
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|result
operator|=
name|result
operator|+
name|temp
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

